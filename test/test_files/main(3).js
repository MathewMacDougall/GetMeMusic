/* compiled with quickstart@1.1.4 */(function (main, modules) {
  'use strict';
  var cache = require.cache = {};
  function require(id) {
    var module = cache[id];
    if (!module) {
      var moduleFn = modules[id];
      if (!moduleFn)
        throw new Error('module ' + id + ' not found');
      module = cache[id] = {};
      var exports = module.exports = {};
      moduleFn.call(exports, require, module, exports, window);
    }
    return module.exports;
  }
  require.resolve = function (resolved) {
    return resolved;
  };
  require.node = function () {
    return {};
  };
  var atLoc = /(@loc)\b/g;
  var join_ = Array.prototype.join;
  var resolve = function (id, lang, script, region) {
    var attempt = function (lang) {
      var m = id.replace(atLoc, lang);
      return modules[m] ? m : null;
    };
    var options = [];
    var add = function () {
      var option = join_.call(arguments, '-');
      if (options.indexOf(option) === -1)
        options.push(option);
    };
    if (region) {
      add(lang, script, region);
      add(lang, region);
    }
    if (script)
      add(lang, script);
    add(lang);
    add('en');
    var i, key;
    for (i = 0; i < supportedLanguages.length; i++)
      add(supportedLanguages[i]);
    var parts = id.split('/');
    var packageSupportedLanguages = [];
    for (i = parts.length; i > 1; i--) {
      var part = parts.slice(0, i).join('/') + '/' + atSupportedLanguagesJSON;
      var m = modules[part];
      if (m) {
        packageSupportedLanguages = require(part);
        break;
      }
    }
    for (i = 0; i < packageSupportedLanguages.length; i++)
      add(packageSupportedLanguages[i]);
    for (i = 0; i < options.length; i++) {
      if (key = attempt(options[i]))
        return key;
    }
    throw new Error(id + ' not found.');
  };
  var done = function (LANG) {
    var loc = LANG.replace(/_/g, '-').toLowerCase().split('-');
    var lang = loc[0];
    var script = loc[1];
    var region = loc[2];
    require.loc = function (id) {
      return require(resolve(id, lang, script, region));
    };
    require(main);
  };
  var failingLocFunc = function (id) {
    throw new Error(id + ' not found');
  };
  var atSupportedLanguagesJSON = '@supported-languages.json';
  var supportedLanguages;
  try {
    supportedLanguages = require('./' + atSupportedLanguagesJSON);
  } catch (e) {
  }
  if (!supportedLanguages) {
    require.loc = failingLocFunc;
    require(main);
  } else {
    var language = window.__spotify && window.__spotify.locale;
    if (language) {
      done(language);
    } else {
      var SP = require('./@sp.js');
      try {
        SP.request('session_query', [], null, function (data) {
          done(data.language);
        }, function () {
          done('en');
        });
      } catch (e) {
        require.loc = failingLocFunc;
        require(main);
      }
    }
  }
}('./apps/genre/scripts/index.js', {
  './apps/genre/scripts/index.js': function (require, module, exports, global) {
    simonlib = require('./scripts/start.js');
    _.extend(window, simonlib.util);
    _.extend(window, simonlib.remote);
    _.extend(window, simonlib.widget);
    _.extend(window, simonlib.tmpl);
    _.extend(window, require('./scripts/widgets/InfiniteList.coffee'));
    _.extend(window, require('./scripts/widgets/PlaylistMediaObject.coffee'));
    window.package = require('./apps/genre/package.json');
    require('./apps/genre/scripts/app.coffee');
    boot();
  },
  './@sp.js': function (require, module, exports, global) {
    module.exports = require('./node_modules/quickstart-spotify/spotify-api.js').SP;
  },
  './node_modules/quickstart-spotify/spotify-api.js': function (require, module, exports, global) {
    'use strict';
    var SpotifyApi = require('./node_modules/api/scripts/core.js');
    var SP = window._getSpotifyModule ? require('./node_modules/api/scripts/core.desktop.js') : require('./node_modules/api/scripts/core.browser.js');
    exports.SpotifyApi = SpotifyApi;
    exports.SP = SP;
    exports.LangModule = SpotifyApi.LangModule;
  },
  './node_modules/api/scripts/core.js': function (require, module, exports, global) {
    var spotify = {};
    function SpotifyApi() {
      this._modules = {};
      this._requested = {};
      this._moduleQueue = [];
      this._delayedFns = [];
      this._parallelReqs = 4;
      this._contextStack = [];
      this._deferredFlush = false;
      this._useLoadingTimeout = false;
      this._patchRequestOpen();
    }
    SpotifyApi.AnalyticsContext = function (name) {
      this.name = name;
      this.id = SpotifyApi.AnalyticsContext._nextId++;
      this.references = 0;
      this._begin();
    };
    SpotifyApi.AnalyticsContext._nextId = 1;
    SpotifyApi.AnalyticsContext.prototype.addReference = function () {
      this.references++;
    };
    SpotifyApi.AnalyticsContext.prototype.removeReference = function () {
      this.references--;
      if (this.references === 0) {
        this._end();
      }
    };
    SpotifyApi.AnalyticsContext.prototype._begin = function () {
      SpotifyApi.api.request('core_context_begin', [
        this.id,
        this.name
      ], this);
    };
    SpotifyApi.AnalyticsContext.prototype._end = function () {
      SpotifyApi.api.request('core_context_end', [this.id], this);
    };
    SpotifyApi.prototype.analyticsContext = function (name, func) {
      var context = new SpotifyApi.AnalyticsContext(name);
      context.addReference();
      this._contextStack.push(context);
      try {
        func();
      } finally {
        this._contextStack.pop();
        context.removeReference();
      }
    };
    SpotifyApi.Callback = function (func, opt_contextStack) {
      this._func = func;
      this._setContextStack(opt_contextStack || SpotifyApi.api._contextStack);
    };
    SpotifyApi.Callback.prototype.apply = function (context, args) {
      try {
        var oldContextStack = SpotifyApi.api._contextStack;
        SpotifyApi.api._contextStack = this._contextStack;
        this._func.apply(context, args);
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      } finally {
        SpotifyApi.api._contextStack = oldContextStack;
        this.clear();
      }
    };
    SpotifyApi.Callback.prototype.call = function (context, var_args) {
      this.apply(context, Array.prototype.slice.call(arguments, 1));
    };
    SpotifyApi.Callback.prototype.copy = function () {
      return new this.constructor(this._func, this._contextStack);
    };
    SpotifyApi.Callback.prototype.clear = function () {
      this._releaseContextStack();
      delete this._func;
      delete this._contextStack;
    };
    SpotifyApi.Callback.prototype._setContextStack = function (contextStack) {
      for (var i = 0, l = contextStack.length; i < l; ++i) {
        contextStack[i].addReference();
      }
      this._contextStack = contextStack.slice(0);
    };
    SpotifyApi.Callback.prototype._releaseContextStack = function () {
      var contextStack = this._contextStack;
      for (var i = 0, l = contextStack.length; i < l; ++i) {
        contextStack[l - i - 1].removeReference();
      }
    };
    SpotifyApi.prototype.callback = function (func) {
      return new SpotifyApi.Callback(func);
    };
    SpotifyApi.prototype._getContextIdForRequest = function () {
      var contexts = this._contextStack;
      return contexts.length ? contexts[contexts.length - 1].id : 0;
    };
    window.addEventListener('message', function (event) {
      if (event.source == window && event.data == 'api-delay') {
        event.stopPropagation();
        var functions = SpotifyApi.api._delayedFns.splice(0);
        for (var i = 0, l = functions.length; i < l; i++) {
          functions[i].call();
        }
      }
    });
    SpotifyApi.prototype._prepareFlush = function (name) {
      if (!this._deferredFlush && name != 'core_flush') {
        this._deferredFlush = true;
        this.defer(this, this._flushRequests);
      }
    };
    SpotifyApi.prototype._flushRequests = function () {
      this._deferredFlush = false;
      this.request('core_flush', []);
    };
    SpotifyApi.prototype.defer = function (self, func) {
      if (this._delayedFns.push(this.bind(this.callback(func), self)) == 1)
        window.postMessage('api-delay', '*');
    };
    SpotifyApi.prototype._evalModule = function (meta, graph, module, code) {
      return !/\.lang$/.test(module) ? this._evalJSModule(meta, graph, module, code) : this._evalLangModule(module, code);
    };
    SpotifyApi.prototype._evalJSModule = function (meta, graph, module, code) {
      var self = this;
      var exports = { __name: module };
      var require = function (modules, fn) {
        exports.__waiting = true;
        var callback = function () {
          exports.__waiting = false;
          return fn.apply(this, arguments);
        };
        callback.__native = true;
        return self._require(module, meta, graph, modules, callback);
      };
      try {
        code = '\'use strict\';' + code + '\n//@ sourceURL=' + module;
        new Function('require', 'exports', 'SP', '_code', 'eval(_code)').call({}, require, exports, this, code);
        return exports;
      } catch (error) {
        error.message += ' in ' + module;
        throw error;
      }
    };
    SpotifyApi.LangModule = function (name, strings) {
      this.__name = name;
      this.strings = strings;
    };
    SpotifyApi.LangModule.prototype.get = function (key, var_args) {
      var format = this.strings.hasOwnProperty(key) ? this.strings[key] : key;
      var out = '', lastIndex = 0, startIndex, endIndex;
      while ((startIndex = format.indexOf('{', lastIndex)) > -1) {
        endIndex = format.indexOf('}', startIndex + 1);
        if (endIndex == -1) {
          break;
        }
        var value = arguments[parseInt(format.substring(startIndex + 1, endIndex)) + 1];
        if (value !== undefined) {
          out += format.substring(lastIndex, startIndex) + value;
        } else {
          out += format.substring(lastIndex, endIndex + 1);
        }
        lastIndex = endIndex + 1;
      }
      return lastIndex ? out + format.substring(lastIndex) : format;
    };
    SpotifyApi.prototype._evalLangModule = function (module, code) {
      try {
        return new SpotifyApi.LangModule(module, JSON.parse(code));
      } catch (error) {
        throw new Error('Cannot import language file "' + module + '": ' + error.message);
      }
    };
    SpotifyApi.prototype._fireCallbacks = function (meta) {
      while (meta) {
        meta.waiting--;
        if (meta.waiting)
          break;
        meta.unpacked.forEach(function (unpacked) {
          var pos = unpacked.position;
          var exported = meta.args[pos];
          var property = unpacked.property;
          if (!(property in exported))
            throw new Error('No "' + property + '" exported in module "' + exported.__name + '"');
          meta.args[pos] = exported[property];
        });
        meta.callback.apply({}, meta.args);
        meta.waiting = 1 / 0;
        meta = meta.parent;
      }
    };
    SpotifyApi.prototype._createRequest = function (path, callback) {
      var request, timeoutMS, xmlHttpTimeout, timedOut;
      request = new XMLHttpRequest();
      request.open('GET', path, true);
      request.onreadystatechange = function () {
        var isDone, iOSHack, isOK;
        isDone = request.readyState === 4;
        if (isDone) {
          clearTimeout(xmlHttpTimeout);
          if (timedOut) {
            throw new Error('Could not load file "' + path + '"; Timed out.');
          }
          iOSHack = request.status === 0 && !!request.responseText;
          isOK = request.status === 200 || iOSHack;
          if (!isOK) {
            throw new Error('Could not load file "' + path + '"; Not found.');
          }
          callback(request.responseText);
        }
      };
      if (this._useLoadingTimeout) {
        timeoutMS = 1500;
        xmlHttpTimeout = setTimeout(function () {
          timedOut = true;
          request.abort();
        }, timeoutMS);
      }
      request.send(null);
    };
    SpotifyApi.prototype._loadModule = function (meta, graph, module, position, property) {
      var self = this;
      var cached = this._modules[module];
      if (cached && !cached.__waiting) {
        meta.args[position] = this._modules[module];
        if (property)
          meta.unpacked.push({
            property: property,
            position: position
          });
        this._fireCallbacks(meta);
      } else if (this._requested[module] || !this._parallelReqs) {
        this.defer(this, function () {
          this._loadModule(meta, graph, module, position, property);
        });
      } else {
        this._requested[module] = true;
        this._parallelReqs--;
        this._createRequest(module, function (responseText) {
          self._parallelReqs++;
          var exported = self._modules[module] = self._evalModule(meta, graph, module, responseText);
          meta.args[position] = exported;
          if (property)
            meta.unpacked.push({
              property: property,
              position: position
            });
          self._fireCallbacks(meta);
        });
      }
    };
    SpotifyApi.prototype._resolveModule = function (module) {
      if (!/\.lang$/.test(module)) {
        var _module = module.match(/^(\$(?:[^\/]+)\/)(?!scripts)(.*)/);
        if (_module)
          module = _module[1] + 'scripts/' + _module[2];
        module += '.js';
      }
      return module;
    };
    SpotifyApi.prototype._require = function (name, parent, graph, modules, fn) {
      if (typeof modules == 'string')
        modules = [modules];
      if (!modules || !modules.length)
        throw new Error('Missing modules argument to require().');
      if (!fn || typeof fn != 'function')
        throw new Error('Missing callback function argument to require().');
      var len = modules.length;
      var meta = {
          name: name,
          parent: parent,
          waiting: len,
          callback: fn,
          args: new Array(len),
          unpacked: []
        };
      parent.waiting++;
      for (var i = 0, l = len; i < l; i++) {
        var module = modules[i];
        if (!module)
          throw new Error('Empty module name in require.');
        var property = module.split('#');
        module = this._resolveModule(property[0]);
        property = property[1];
        var modGraph = graph.slice(0);
        var index = graph.indexOf(module);
        modGraph.push(module);
        if (index != -1) {
          modGraph = modGraph.slice(index).join(' -> ');
          throw new Error('Circular Dependency on Module "' + module + '": ' + modGraph);
        }
        this._loadModule(meta, modGraph, module, i, property);
      }
    };
    SpotifyApi.prototype.varargs = function (values, opt_offset, opt_copy) {
      if (!opt_offset)
        opt_offset = 0;
      if (Array.isArray(values[opt_offset])) {
        if (values.length > opt_offset + 1)
          throw new Error('Ambiguous use of varargs');
        values = values[opt_offset];
        opt_offset = 0;
      }
      return opt_offset || opt_copy ? Array.prototype.slice.call(values, opt_offset) : values;
    };
    SpotifyApi.prototype.uris = function (values, opt_offset) {
      var objs = this.varargs(values, opt_offset), uris = [];
      for (var i = 0, len = objs.length; i < len; i++) {
        uris.push(objs[i].uri);
      }
      return uris;
    };
    SpotifyApi.prototype.bind = function (func, that, var_args) {
      if (arguments.length > 2) {
        var slice = Array.prototype.slice;
        var bind = Function.prototype.bind;
        if (bind && func.bind === bind)
          return bind.apply(func, slice.call(arguments, 1));
        var args = slice.call(arguments, 2);
        return function () {
          return func.apply(that, arguments.length ? args.concat(slice.call(arguments)) : args);
        };
      } else {
        return function () {
          return func.apply(that, arguments);
        };
      }
    };
    SpotifyApi.prototype.inherit = function (childConstructor, parentConstructor) {
      var TempConstructor = function () {
      };
      TempConstructor.prototype = childConstructor._superClass = parentConstructor.prototype;
      childConstructor.prototype = new TempConstructor();
      childConstructor.prototype.constructor = childConstructor;
      return childConstructor;
    };
    SpotifyApi.prototype._patchRequestOpen = function () {
      var open = XMLHttpRequest.prototype.open;
      var link = document.createElement('a');
      var location = window.location;
      XMLHttpRequest.prototype.open = function (method, url) {
        var result = open.apply(this, arguments);
        link.href = url;
        if (link.protocol == ':' && !link.hostname || link.protocol == location.protocol && link.hostname == location.hostname) {
          this.setRequestHeader('X-Spotify-Requested-With', 'XMLHttpRequest');
        }
        return result;
      };
    };
    SpotifyApi.prototype.resolvePath = function (path) {
      return path;
    };
    function require(modules, callback) {
      return SpotifyApi.api._require('__main__', {
        callback: function () {
        },
        waiting: 1 / 0
      }, [], modules, callback);
    }
    spotify.require = require;
    String;
    String.prototype.decodeForText = function () {
      return this.toString();
    };
    String.prototype.decodeForHtml = function () {
      var e = {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;'
        };
      var r = function (c) {
        return e[c];
      };
      return function () {
        return this.replace(/[&<>]/g, r);
      };
    }();
    String.prototype.decodeForLink = function () {
      return encodeURI(this);
    };
    SpotifyApi.Bases = {
      uri: 'spotify',
      url: 'http://open.spotify.com'
    };
    SpotifyApi.Exps = {
      spotify: /^spotify:(.+)$/,
      http: /^https?:\/\/(play|open)\.spotify\.com\/(.+)$/
    };
    String.prototype.toSpotifyURL = function () {
      var matches = this.match(SpotifyApi.Exps.spotify);
      if (!matches)
        return this;
      var parts = matches.pop().replace(/:$/, '').split(/:/);
      var type = parts.shift();
      if (type == 'search')
        parts = [parts.join(':')];
      parts.unshift(SpotifyApi.Bases.url, type);
      return parts.join('/');
    };
    String.prototype.toSpotifyURI = function () {
      var matches = this.match(SpotifyApi.Exps.http);
      if (!matches)
        return this;
      var parts = matches.pop().replace(/\/$/, '').split(/\//);
      parts.unshift(SpotifyApi.Bases.uri);
      return parts.join(':');
    };
    String.prototype.toSpotifyLink = function () {
      return this.toSpotifyURI();
    };
    module.exports = SpotifyApi;
  },
  './node_modules/api/scripts/core.desktop.js': function (require, module, exports, global) {
    var SpotifyApi = require('./node_modules/api/scripts/core.js');
    (function () {
      SpotifyApi.prototype._throwError = true;
      var bridge = window._getSpotifyModule('bridge');
      var core;
      try {
        core = window._getSpotifyModule('core');
      } catch (err) {
      }
      if (core)
        SpotifyApi.prototype._createRequest = function (module, callback) {
          this.defer(this, function () {
            var code = core.readFile(module);
            if (undefined === code) {
              throw new Error('Could not load module "' + module + '"; Not found.');
            } else {
              callback(code);
            }
          });
        };
      SpotifyApi.prototype.request = function (name, args, caller, success, failed) {
        var contextId = this._getContextIdForRequest();
        var message = JSON.stringify({
            name: name,
            args: args,
            context: contextId
          });
        bridge.executeRequest(message, {
          onSuccess: function (data) {
            if (success) {
              success.call(caller, JSON.parse(data));
            }
          },
          onFailure: function (data) {
            data = JSON.parse(data);
            if (failed) {
              failed.call(caller, data);
            }
          }
        });
        this._prepareFlush(name);
      };
      SpotifyApi.api = new SpotifyApi();
      SpotifyApi.api.container = 'desktop';
    }());
    module.exports = SpotifyApi.api;
  },
  './node_modules/api/scripts/core.browser.js': function (require, module, exports, global) {
    var SpotifyApi = require('./node_modules/api/scripts/core.js');
    (function () {
      var uid = 0;
      var callbacks = {};
      SpotifyApi.prototype._throwError = true;
      SpotifyApi.prototype._useLoadingTimeout = true;
      var manifest = window.manifest;
      var appVendor = manifest && manifest.VendorIdentifier || 'unknown';
      var appVersion = manifest && manifest.BundleVersion || '';
      if (!appVersion.match(/^\d+\.\d+\.\d+$/)) {
        appVersion = '0.0.0';
      }
      var deps = window.dependencies;
      var staticDeps = deps['static'];
      var rootDepsBare = staticDeps.replace(/\/([^\/]*)$/, '');
      var rootDeps = rootDepsBare + '/';
      var preferredLocales = ['en.loc'];
      var localeStringMatch = window.location.search.match(/locale=([^&]+)/);
      if (localeStringMatch) {
        preferredLocales = localeStringMatch.pop().split(',');
        var len = preferredLocales.length;
        while (len--) {
          var preferredLocale = preferredLocales[len];
          preferredLocales[len] = preferredLocale.indexOf('.loc') != -1 ? preferredLocale : preferredLocale + '.loc';
        }
      }
      var locale;
      var localeFilesAvailable = {};
      var defaultLocale = 'en';
      if (deps.locale && !Array.isArray(deps.locale)) {
        var locales = deps.locale;
        for (var localeName in locales) {
          locale = locales[localeName];
          localeName = localeName + '.loc';
          for (var i = 0, l = locale.length; i < l; i++) {
            localeFilesAvailable[localeName + '/' + locale[i]] = true;
          }
          localeFilesAvailable[localeName + '/scripts/momentLang.js'] = true;
        }
        for (var x = 0, y = preferredLocales.length; x < y; x++) {
          locale = preferredLocales[x].replace('.loc', '');
          if (deps.locale[locale] && deps.locale[locale].length) {
            defaultLocale = locale;
            break;
          }
        }
      }
      if (window.manifest && Array.isArray(manifest.SupportedLanguages)) {
        var supportedLanguages = manifest.SupportedLanguages;
        for (var m = 0, n = preferredLocales.length; m < n; m++) {
          locale = preferredLocales[m].replace('.loc', '');
          var index = supportedLanguages.indexOf(locale);
          if (index != -1) {
            defaultLocale = locale;
            break;
          }
        }
      }
      var resolve = SpotifyApi.prototype._resolveModule;
      SpotifyApi.prototype._resolveModule = function (module) {
        var result = resolve(module);
        var match = result.match(/^\$([a-z\-\_]+)(\/.*)/);
        var framework = false, path, leadingSlash = false;
        if (match) {
          framework = match[1];
          path = match[2];
        } else if (/^\//.exec(result)) {
          leadingSlash = true;
        }
        var lang = false;
        if (/\.lang$/.exec(result) || /momentLang\.js$/.exec(result)) {
          if (framework) {
            lang = preferredLocales[0];
            result = '$' + framework + '/' + (path = '/' + lang + path);
          } else {
            result = /^\//.test(result) ? result : '/' + result;
            var file = '';
            for (var i = 0, l = preferredLocales.length; i < l; i++) {
              lang = preferredLocales[i];
              file = lang + result;
              if (localeFilesAvailable[file])
                break;
            }
            result = (leadingSlash ? '/' : '') + file;
          }
        }
        if (framework && deps[framework]) {
          result = deps[framework] + path;
        } else {
          if (framework)
            result = '/' + framework + path;
          else if (!leadingSlash)
            result = '/' + result;
          result = (framework ? rootDepsBare : staticDeps) + result;
        }
        return result;
      };
      var MutationObserver = window.MutationObserver || window.WebKitMutationObserver;
      if (MutationObserver) {
        var observer = new MutationObserver(function (mutations) {
            for (var j = 0, m = mutations.length; j < m; j++) {
              var mutation = mutations[j];
              var links = mutation.addedNodes;
              if (!links.length)
                return this;
              var matcher = staticDeps + '/$';
              for (var i = 0, l = links.length; i < l; i++) {
                var link = links[i];
                if (link.tagName.toLowerCase() != 'link' || !/^\$/.test(link.getAttribute('href')))
                  continue;
                var href = link.href;
                link.href = href.replace(matcher, rootDeps);
              }
            }
          });
        observer.observe(document.head, { childList: true });
      } else {
        var listenSubtree = function (event) {
          if (event.target !== document.head)
            return;
          var links = document.head.querySelectorAll('link[href^="$"]');
          var matcher = staticDeps + '/$';
          for (var i = 0, l = links.length; i < l; i++) {
            var link = links[i];
            if (!/^\$/.test(link.getAttribute('href')))
              continue;
            var href = link.href;
            link.href = href.replace(matcher, rootDeps);
          }
        };
        document.head.addEventListener('DOMSubtreeModified', listenSubtree);
      }
      if ('XDomainRequest' in window) {
        var createXHR = SpotifyApi.prototype._createRequest;
        SpotifyApi.prototype._createRequest = function (module, callback) {
          if (!/^http/.test(module))
            return createXHR(module, callback);
          var request = new XDomainRequest();
          request.onprogress = function () {
          };
          request.onerror = function () {
            throw new Error('Could not load module "' + module + '"; Not found.');
          };
          request.onload = function () {
            callback(request.responseText);
          };
          request.open('GET', module);
          request.send(null);
        };
      }
      var sendDependencies = { hermes_register_schema: 1 };
      SpotifyApi.prototype.request = function (name, args, caller, success, failed) {
        var top = window.top;
        if (top === window)
          return this;
        var data = {
            type: 'bridge_request',
            id: uid++,
            name: name,
            args: args,
            appVendor: appVendor,
            appVersion: appVersion
          };
        if (sendDependencies[name])
          data.deps = deps;
        if (name == 'session_query') {
          var oldSuccess = success;
          success = function (payload) {
            if (payload) {
              payload.language = defaultLocale;
            }
            return oldSuccess.call(this, payload);
          };
        }
        top.postMessage(JSON.stringify(data), '*');
        if (!success)
          return this;
        callbacks[data.id] = {
          success: success,
          failed: failed,
          caller: caller
        };
        this._prepareFlush(name);
      };
      SpotifyApi.prototype._requestReply = function (e) {
        var data = e.data;
        if (typeof data == 'string') {
          try {
            data = JSON.parse(data);
          } catch (e) {
            return this;
          }
        }
        var callback = callbacks[data.id];
        if (!callback)
          return this;
        if (data.success && callback.success)
          callback.success.call(callback.caller, data.payload);
        else if (!data.success && callback.failed)
          callback.failed.call(callback.caller, data.payload);
      };
      SpotifyApi.prototype.resolvePath = function (path) {
        var dummyExtension = '._resolve_';
        var resolvedPath = this._resolveModule(path + dummyExtension);
        var originalSplit = path.split('.');
        if (originalSplit.length > 1) {
          var extension = originalSplit[originalSplit.length - 1];
          if (extension !== 'js') {
            resolvedPath = resolvedPath.replace('scripts/', '');
          }
          var jsExtension = '.js';
          resolvedPath = resolvedPath.slice(0, -(dummyExtension.length + jsExtension.length));
        } else {
          resolvedPath = resolvedPath.replace(dummyExtension, '');
        }
        return resolvedPath;
      };
      SpotifyApi.api = new SpotifyApi();
      SpotifyApi.api.container = 'web';
      window.addEventListener('message', SpotifyApi.api._requestReply, false);
      SpotifyApi.Bases.url = 'https://play.spotify.com';
      String.prototype.toSpotifyLink = function () {
        return this.toSpotifyURL();
      };
      document.documentElement.addEventListener('click', function (e) {
        var target = e.target;
        do {
          if (target.nodeName.toLowerCase() === 'a') {
            break;
          }
        } while ((target = target.parentNode) && target !== document.body);
        if (!target || target === document.body)
          return;
        var href = target.href;
        var uri = null;
        if (SpotifyApi.Exps.http.test(href)) {
          uri = href.toSpotifyURI();
        } else if (SpotifyApi.Exps.spotify.test(href)) {
          uri = href;
        }
        if (!uri)
          return;
        if (e.defaultPrevented)
          return;
        e.preventDefault();
        SpotifyApi.api.request('application_open_uri', [
          uri,
          null
        ]);
      });
      var slice = Array.prototype.slice;
      if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = function (item, from) {
          var length = this.length >>> 0;
          for (var i = from < 0 ? Math.max(0, length + from) : from || 0; i < length; i++) {
            if (this[i] === item)
              return i;
          }
          return -1;
        };
      }
      if (!String.prototype.trim) {
        String.prototype.trim = function () {
          return String(this).replace(/^\s+|\s+$/g, '');
        };
      }
      if (!Function.prototype.bind) {
        Function.prototype.bind = function (that) {
          var self = this, args = arguments.length > 1 ? slice.call(arguments, 1) : null, F = function () {
            };
          var bound = function () {
            var context = that, length = arguments.length;
            if (this instanceof bound) {
              F.prototype = self.prototype;
              context = new F();
            }
            var result = !args && !length ? self.call(context) : self.apply(context, args && length ? args.concat(slice.call(arguments)) : args || arguments);
            return context == that ? result : context;
          };
          return bound;
        };
      }
      (function () {
        if (!window.metadata)
          return;
        var appid = '[' + window.metadata.identifier + ' ' + window.metadata.version + ']';
        var console = window.console;
        var apply = Function.prototype.apply;
        var patch = [
            'debug',
            'error',
            'info',
            'log',
            'warn'
          ];
        if (!console)
          return;
        patch.forEach(function (p) {
          var origFunc = console[p];
          if (!origFunc)
            return;
          console[p] = function () {
            var args = slice.call(arguments);
            if (typeof args[0] === 'string') {
              args[0] = appid + ' ' + args[0];
            } else {
              args.unshift(appid);
            }
            return apply.call(origFunc, console, args);
          };
        });
      }());
      var kbd = {
          _modifiers: {},
          _keymap: {},
          _ignore: {},
          _bindings: {},
          _empty: function () {
          },
          init: function () {
            SpotifyApi.api.request('keyboard_get_bindings', [], this, function (directives) {
              for (var i in directives) {
                if (!directives.hasOwnProperty(i))
                  continue;
                this[i] = directives[i];
              }
            }.bind(this), this._empty);
            window.addEventListener('keydown', this.handleOwn.bind(this, false));
            window.addEventListener('keyup', this.handleOwn.bind(this, true));
          },
          handleOwn: function (request, e) {
            var target = e.target;
            if (this._ignore[target.tagName.toLowerCase()])
              return this;
            var key = this._keymap[e.which || e.keyCode];
            if (!key)
              return this;
            var modifiers = this._modifiers;
            if (e.altKey)
              key |= modifiers.alt;
            if (e.metaKey)
              key |= modifiers.meta;
            if (e.ctrlKey)
              key |= modifiers.ctrl;
            if (e.shiftKey)
              key |= modifiers.shift;
            var binding = this._bindings[key];
            if (!binding)
              return this;
            e.preventDefault();
            e.stopPropagation();
            if (request)
              SpotifyApi.api.request('keyboard_trigger_binding', [binding], this, this._empty, this._empty);
          }
        };
      kbd.init();
    }());
    module.exports = SpotifyApi.api;
  },
  './apps/genre/package.json': function (require, module, exports, global) {
    module.exports = {
      'doc': 'This file is here because of stitch-manifest-gen, quickstart, version control and team city',
      'name': 'genre',
      'version': '7.1.6',
      'license': 'SpotifyInternal',
      'main': 'scripts/index.js'
    };
  },
  './scripts/start.js': function (require, module, exports, global) {
    (function (models, hermes) {
      window.spModels = models;
      window.hermes = hermes;
    }(require('./node_modules/api/scripts/models.js'), require('./node_modules/api/scripts/hermes.js')));
    window.buildConf = require('./buildConf.json');
    if (!console || !console.log || !console.warn || buildConf.disableConsoleLog) {
      window.console.log = function () {
      };
      window.console.warn = function () {
      };
    }
    window.appStartedLoading = new Date().getTime();
    console.log('Welcome to simonlib.');
    window.sp = {};
    window._ = require('./node_modules/underscore/underscore.js');
    window.j = require('./node_modules/jquery/dist/jquery.js');
    window.numeral = require('./node_modules/spotify-numeral/index.js');
    window.moment = require('./node_modules/moment/moment.js');
    require('./node_modules/moment/min/locales.js');
    window.spotifyLocales = require('./node_modules/spotify-locales/index.js');
    module.exports = {
      util: require('./scripts/util.coffee'),
      remote: require('./scripts/remote.coffee'),
      widget: require('./scripts/widget.coffee'),
      tracking: require('./scripts/tracking.coffee')
    };
    window.URI = require('./node_modules/spotify-liburi/src/uri.js');
    window.cosmos = require('./node_modules/spotify-cosmos-api/index.js');
    window.live = require('./node_modules/spotify-live/index.js');
    require('./node_modules/spotify-live-models/client.js').register();
    require('./node_modules/spotify-live-models/application.js').register();
    require('./node_modules/spotify-live-models/player/index.js').register();
    require('./node_modules/spotify-live-models/add/index.js').register();
    require('./node_modules/spotify-live-models/playlist.js').register();
    require('./node_modules/spotify-live-models/album.js').register();
    require('./node_modules/spotify-live-models/artist.js').register();
    require('./node_modules/spotify-live-models/track.js').register();
    require('./node_modules/spotify-live-models/sortlist.js').register();
    require('./node_modules/spotify-live-models/client-storage.js').register();
    window.hb = require('./node_modules/spotify-handlebars/index.js');
    window.helpers = require('./node_modules/spotify-handlebars/helpers/index.js');
    hb.register(window.helpers);
    window.tmpl = {};
    window.tmpl.article = require('./tmpl/article.hbs');
    window.tmpl.relatedArticle = require('./tmpl/relatedArticle.hbs');
    window.tmpl.genreHeader = require('./tmpl/genreHeader.hbs');
    window.genreObjectTemplate = require('./tmpl/genreobject.hbs');
    window.articleObjectTemplate = require('./tmpl/articleobject.hbs');
    window.errorPageTemplate = require('./tmpl/errorPage.hbs');
    window.mediaImageTemplate = require('./tmpl/mediaImage.hbs');
    window.surveyTemplate = require('./tmpl/survey.hbs');
    window.mediaObjectTemplate = require('./node_modules/spotify-glue-cat/templates/media-object.hbs');
    window.errorOfflineTemplate = require('./node_modules/spotify-glue-cat/templates/error-and-offline.hbs');
    window.translations = require.loc('./lang/@loc.loc/strings/main.lang');
    window.translations.strings = _.extend(window.translations.strings, require.loc('./lang/@loc.loc/strings/survey.lang').strings);
    window.translations.strings = _.extend(window.translations.strings, require.loc('./node_modules/spotify-glue-cat/strings/@loc.loc/strings.json'));
    helpers.loc.register(window.translations.strings);
    window.events = require('./node_modules/spotify-events/index.js');
    if (window.location.protocol == 'sp:') {
      window.env = 'desktop';
    } else {
      window.env = 'web';
    }
    window.apiUrl = 'https://api.tunigo.com/v3/';
    window.Logger = require('./node_modules/logging-utils/scripts/logger.js').Logger;
    window.adiLogger = window.Logger.forTag('spotify:app:browse', window.env);
    require('./scripts/boot.coffee');
  },
  './apps/genre/scripts/app.coffee': function (require, module, exports, global) {
    var App, Header, Nav, NavigationBar, __hasProp = {}.hasOwnProperty, __extends = function (child, parent) {
        for (var key in parent) {
          if (__hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      };
    window.sp = sp;
    NavigationBar = require('./node_modules/spotify-navigation-bar/src/nav.js').NavigationBar;
    App = function (_super) {
      __extends(App, _super);
      registerWidget(App);
      function App() {
        App.__super__.constructor.call(this, 'app');
        this.render();
      }
      App.prototype.render = function () {
        this.elem().html(this.tmpl({}));
        return this.widgetRenderd.resolve();
      };
      App.prototype.argumentsChg = function (a) {
        if (this.appArg !== a) {
          this.appArg = a;
          return this.resolveGenres().done(this.wcb(function () {
            if (!_.isString(a || a.length === 0)) {
              this.defenestrate();
              console.log('No args: ', a);
              this.makeChild('FeaturedPlaylistInfiniteList', { elementId: 'playlistsGoesHere' });
              return;
            }
            a = a.split(':')[0];
            console.log('Arguments changed: ', a);
            this.selectedGenre = this.findGenre(a);
            if (this.selectedGenre == null) {
              throw Error('Unknown genre ' + a);
            }
            this.defenestrate();
            this.makeChild('PlaylistInfiniteList', {
              elementId: 'playlistsGoesHere',
              selectedGenre: this.selectedGenre
            });
            return this.makeChild('Header', {
              elementId: 'header',
              genres: this.genreTree,
              selectedGenre: this.selectedGenre
            });
          }));
        }
      };
      App.prototype.findGenre = function (templateName) {
        return this.genreTree[templateName];
      };
      App.prototype.resolveGenres = function () {
        var d, url;
        d = j.Deferred();
        if (this.genreTree != null) {
          return d.resolve();
        } else {
          this.genreTree = {};
          url = '' + window.apiUrl + 'space/all-genres';
          apiReq(url, { 'per_page': 1000 }).done(this.wcb(function (data) {
            var genre, k, subGenre, _i, _len, _ref, _ref1, _ref2, _ref3;
            _ref = data.items;
            for (k in _ref) {
              genre = _ref[k];
              genre = genre.genre;
              this.genreTree[genre.templateName] = {
                id: genre.id,
                name: genre.name,
                templateName: genre.templateName,
                headerImageUrl: genre.headerImageUrl,
                children: []
              };
              _ref1 = genre.subGenres;
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                subGenre = _ref1[_i];
                this.genreTree[subGenre.key] = {
                  name: subGenre.name,
                  templateName: subGenre.key,
                  parent: this.genreTree[genre.templateName],
                  headerImageUrl: genre.headerImageUrl,
                  children: []
                };
                this.genreTree[genre.templateName].children.push(this.genreTree[subGenre.key]);
              }
            }
            _ref2 = this.genreTree;
            for (k in _ref2) {
              genre = _ref2[k];
              if ((_ref3 = genre.children) != null) {
                _ref3.sort(function (a, b) {
                  if (a.templateName.indexOf('misc') > 0) {
                    return 1;
                  }
                  if (b.templateName.indexOf('misc') > 0) {
                    return -1;
                  }
                  if (helpers.loc(a.name) < helpers.loc(b.name)) {
                    return -1;
                  } else {
                    return 1;
                  }
                });
              }
            }
            return d.resolve();
          }));
        }
        return d.promise();
      };
      App.prototype.tmpl = function (ctx) {
        return '<div id="header" class="header header-image" data-context data-contextmenu>\n</div>\n<div class="local-body container" >\n    <div class="section-divider">\n    <h2>' + helpers.loc('Playlists') + '</h2>\n    </div>\n    <div id="playlistsGoesHere" data-log-context="programmed-playlists" ></div>\n</div>';
      };
      return App;
    }(AppWidget);
    Header = function (_super) {
      __extends(Header, _super);
      registerWidget(Header);
      function Header(opt) {
        this.opt = opt;
        Header.__super__.constructor.call(this, this.opt.elementId);
        this.genres = this.opt.genres;
        this.selectedGenre = this.opt.selectedGenre;
        this.render();
        if (this.selectedGenre.parent != null || this.selectedGenre.children.length > 1) {
          this.header = this.makeChild('Nav', {
            elementId: 'nav',
            selectedGenre: this.selectedGenre
          });
        } else {
          this.find('.genreName').css({ 'padding-top': '262px' });
        }
      }
      Header.prototype.render = function () {
        this.elem().html(this.tmpl({ selectedGenre: this.selectedGenre }));
        return this.widgetRenderd.resolve();
      };
      Header.prototype.tmpl = function (ctx) {
        if (this.selectedGenre.parent != null) {
          ctx.parentGenre = this.selectedGenre.parent;
        }
        if (this.selectedGenre.children.length > 0) {
          ctx.parentGenre = this.selectedGenre;
        }
        return '<div class="moodImage" style="background-image: url(\'' + ctx.parentGenre.headerImageUrl + '\');"></div>\n<div class="container genreName">\n  <h1>' + ctx.parentGenre.name + '</h1>\n</div>\n<div id="nav"></div>';
      };
      Header.prototype.checkHeigt = tw(_.throttle, 50, function () {
        var top;
        if (window.scrollY != null) {
          top = window.scrollY;
        } else {
          top = document.body.scrollTop;
        }
        if (top > 295) {
          if (j('.navbar-fixed-wrapper').css('position') !== 'fixed') {
            return this.find('.navbar-fixed-wrapper').css({
              position: 'fixed',
              top: 0
            });
          }
        } else {
          return this.find('.navbar-fixed-wrapper').attr('style', '');
        }
      });
      Header.prototype.bindScroll = function () {
        return j(window).on('scroll.' + this.opt.elementId, this.wcb(this.checkHeigt));
      };
      Header.prototype._destroy = function () {
        j(window).off('scroll.' + this.opt.elementId);
        this.find('#dropdown').unbind('click');
        return j('.local-body').unbind('mouseover');
      };
      return Header;
    }(Widget);
    Nav = function (_super) {
      __extends(Nav, _super);
      registerWidget(Nav);
      function Nav(opt) {
        var genre, parent, _i, _len, _ref;
        this.opt = opt;
        Nav.__super__.constructor.call(this, this.opt.elementId);
        this.opt.navItems = [{
            displayName: this.opt.selectedGenre.name,
            subMenus: [],
            match: 'home'
          }];
        parent = this.opt.selectedGenre.parent;
        if (parent == null) {
          parent = this.opt.selectedGenre;
        }
        _ref = parent.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          genre = _ref[_i];
          if (this.opt.selectedGenre.templateName !== genre.templateName) {
            this.opt.navItems[0].subMenus.push({
              displayName: genre.name,
              link: 'spotify:app:genre:' + genre.templateName,
              match: genre.templateName
            });
          }
        }
        if (this.opt.selectedGenre.parent == null) {
          this.opt.navItems[0].displayName = helpers.loc('All Subgenres');
        } else {
          this.opt.navItems[0].subMenus.unshift({
            displayName: helpers.loc('All Subgenres'),
            link: 'spotify:app:genre:' + this.opt.selectedGenre.parent.templateName,
            match: this.opt.selectedGenre.parent.templateName
          });
        }
        this.opt.skipResize = true;
        this.navBar = new NavigationBar(this.opt);
        this.find('.navbar').addClass('container');
      }
      Nav.prototype.setOffsetTop = function () {
        return this.navBar.setOffsetTop();
      };
      Nav.prototype.setActive = function (match) {
        return this.navBar.setActive(match);
      };
      Nav.prototype._destroy = function () {
        return this.navBar.unbindScroll();
      };
      return Nav;
    }(Widget);
    window.App = App;
  },
  './scripts/widgets/PlaylistMediaObject.coffee': function (require, module, exports, global) {
    var PlaylistMediaObject, lib, util, __hasProp = {}.hasOwnProperty, __extends = function (child, parent) {
        for (var key in parent) {
          if (__hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      };
    lib = require('./scripts/widget.coffee');
    util = require('./scripts/util.coffee');
    _.extend(this, lib);
    _.extend(this, util);
    addCss('.media-object-horizontal .mo-info.description.meta {\n    height: 100px;\n}');
    PlaylistMediaObject = function (_super) {
      __extends(PlaylistMediaObject, _super);
      registerWidget(PlaylistMediaObject);
      function PlaylistMediaObject(opt) {
        this.opt = opt;
        this.opt.type = 'playlist';
        this.opt.unwrapped;
        PlaylistMediaObject.__super__.constructor.call(this, this.opt);
      }
      PlaylistMediaObject.prototype.getData = function () {
        var d;
        d = j.Deferred();
        window.liveReq(this.opt.uri, 'name, image, followersCount').done(this.wcb(function (data) {
          this.data = data;
          this.data.uri = this.opt.uri;
          this.data.numSubscribers = data.followersCount;
          this.data.name = data.name;
          this.data.description = '';
          this.data.imageUrl = data.image;
          this.data.hideSubtitle = true;
          return d.resolve(this.data);
        }));
        return d.promise();
      };
      PlaylistMediaObject.prototype.tmpl = function () {
        var subscriberString;
        if (this.data.description.length === 0) {
          this.data.description = ' ';
        }
        this.data.hideSubtitle = true;
        if (this.data.extra == null) {
          subscriberString = window.numeral(this.data.numSubscribers).format();
          this.data.extra = subscriberString + ' ' + helpers.loc('followers');
        }
        return PlaylistMediaObject.__super__.tmpl.call(this);
      };
      return PlaylistMediaObject;
    }(MediaObject);
    module.exports = { PlaylistMediaObject: PlaylistMediaObject };
  },
  './scripts/widgets/InfiniteList.coffee': function (require, module, exports, global) {
    var ArticleInfiniteList, FeaturedPlaylistInfiniteList, InifiniteList, PlaylistInfiniteList, ReleasesInfiniteList, lib, remote, util, __hasProp = {}.hasOwnProperty, __extends = function (child, parent) {
        for (var key in parent) {
          if (__hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      };
    lib = require('./scripts/widget.coffee');
    util = require('./scripts/util.coffee');
    remote = require('./scripts/remote.coffee');
    _.extend(this, lib);
    _.extend(this, util);
    _.extend(this, remote);
    addCss('.media-object {\n    margin-bottom: 15px;\n}');
    InifiniteList = function (_super) {
      __extends(InifiniteList, _super);
      registerWidget(InifiniteList);
      InifiniteList.prototype.defaults = {
        mediaObjectName: 'PlaylistMediaObject',
        hideMeta: false
      };
      function InifiniteList(opt) {
        this.opt = opt;
        console.log('creating infinite list');
        InifiniteList.__super__.constructor.call(this, this.opt.elementId);
        this.opt = _.defaults(this.opt, InifiniteList.prototype.defaults);
        this.elem().append('<div class=\'row infiniteList fivecolumns\'>\n  <div class="delete-me col-sm-3 col-md-3 col-lg-2 media-object media-object-' + this.opt.type + '" style="margin-bottom: 15px; opacity: 0;">\n  <div class="mo-wrapper">\n  </div>\n  </div>\n</div>');
        this.presentIds = {};
        this.bound = false;
        this.index = -1;
        if (this.opt.skipBind == null) {
          this.bindScroll();
          j(window).trigger('scroll');
        }
      }
      InifiniteList.prototype.bindScroll = function () {
        if (this.bound === false && this.opt.skipBind != null === false && this.active === true) {
          this.bound = true;
          console.log(this.opt.elementId + ' bind scroll');
          return j(window).on('scroll.' + this.opt.elementId, this.wcb(this.checkHeigt));
        }
      };
      InifiniteList.prototype.unbindScroll = function () {
        this.bound = false;
        console.log(this.opt.elementId + ' unbind scroll');
        return j(window).off('scroll.' + this.opt.elementId);
      };
      InifiniteList.prototype._deactivate = function () {
        return this.unbindScroll();
      };
      InifiniteList.prototype._activate = function () {
        return this.bindScroll();
      };
      InifiniteList.prototype.checkHeigt = tw(_.throttle, 50, function () {
        console.log('unbind scroll');
        this.unbindScroll();
        if (this.isCloseToBottom()) {
          this.nextChunk().done(this.wcb(this.nextChunkRendered));
        } else {
          this.bindScroll();
        }
        return true;
      });
      InifiniteList.prototype.nextChunkRendered = function () {
        var triggerScroll;
        if (!this.elem().is(':visible')) {
          console.log('List not visible. Will not bind scroll');
          return;
        }
        this.bindScroll();
        triggerScroll = function () {
          return j(window).trigger('scroll');
        };
        return _.delay(triggerScroll, 100);
      };
      InifiniteList.prototype.isCloseToBottom = function () {
        var all, close, port, top;
        top = j(window).scrollTop();
        port = j(window).height();
        all = this.find('.infiniteList').height() + this.find('.infiniteList').offset().top;
        close = 500;
        return top + port > all - close;
      };
      InifiniteList.prototype.nextChunk = function () {
        var d;
        d = j.Deferred();
        apiReq(this.opt.url, this.query).done(this.wcb(function (data) {
          this.data = data;
          return this.apiCallback(d);
        }));
        return d.promise();
      };
      InifiniteList.prototype.apiCallback = function (d) {
        var item, _i, _len, _ref;
        if (this.data.numItems === 0) {
          return d.reject('No more items');
        } else {
          _ref = this.extractItems();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            this.addMediaObject(item);
          }
          this.nextPage();
          if (this.widgetRenderd.state() === 'pending') {
            this.widgetRenderd.resolve();
          }
          return d.resolve();
        }
      };
      InifiniteList.prototype.extractItems = function () {
        return this.data.items;
      };
      InifiniteList.prototype.addMediaObject = function (data) {
        var mediaObject, subscriberString;
        if (_.isObject(data)) {
          if (data.uri == null) {
            console.warn('No uri in data');
          }
          data.name = data.title;
          subscriberString = window.numeral(data.numSubscribers).format();
          if (!this.opt.hideMeta) {
            data.meta = subscriberString + ' ' + helpers.loc('followers');
          }
          if (data.id != null) {
            if (this.presentIds[data.id] != null) {
              console.warn('Media object with id ' + data.id + ' already present.');
              this.find('.delete-me').remove();
              return;
            } else {
              this.presentIds[data.id] = true;
              this.index++;
            }
          }
          data.index = this.index;
          mediaObject = this.makeChild(this.opt.mediaObjectName, {
            uri: data.uri,
            data: data
          });
        } else {
          mediaObject = this.makeChild(this.opt.mediaObjectName, {
            uri: data,
            data: void 0
          });
        }
        this.find('.delete-me').remove();
        return this.find('.infiniteList').append(j(mediaObject.placeholder()));
      };
      InifiniteList.prototype.nextPage = function () {
        return this.query.page += 1;
      };
      InifiniteList.prototype._destroy = function () {
        return this.unbindScroll();
      };
      return InifiniteList;
    }(Widget);
    PlaylistInfiniteList = function (_super) {
      __extends(PlaylistInfiniteList, _super);
      registerWidget(PlaylistInfiniteList);
      function PlaylistInfiniteList(opt) {
        this.opt = opt;
        this.genre = this.opt.selectedGenre;
        this.query = {
          region: window.region,
          page: 0,
          'per_page': 12
        };
        if (this.genre.children.length === 0) {
          this.opt.url = '' + window.apiUrl + 'space/' + this.genre.parent.templateName;
          this.query.filter = this.genre.templateName;
        } else {
          this.opt.url = '' + window.apiUrl + 'space/' + this.genre.templateName;
        }
        this.opt.mediaObjectName = 'PlaylistMediaObject';
        this.opt.type = 'playlist';
        PlaylistInfiniteList.__super__.constructor.call(this, this.opt);
      }
      PlaylistInfiniteList.prototype.extractItems = function () {
        return findAll(this.data.items, ['playlist']);
      };
      return PlaylistInfiniteList;
    }(InifiniteList);
    ArticleInfiniteList = function (_super) {
      __extends(ArticleInfiniteList, _super);
      registerWidget(ArticleInfiniteList);
      function ArticleInfiniteList(opt) {
        this.opt = opt;
        this.query = {
          region: window.region,
          page: 0,
          'per_page': 12
        };
        this.opt.url = '' + window.apiUrl + 'space/news';
        this.opt.mediaObjectName = 'ArticleMediaObject';
        this.opt.type = 'article';
        ArticleInfiniteList.__super__.constructor.call(this, this.opt);
      }
      ArticleInfiniteList.prototype.extractItems = function () {
        return findAll(this.data.items, ['article']);
      };
      return ArticleInfiniteList;
    }(InifiniteList);
    ReleasesInfiniteList = function (_super) {
      __extends(ReleasesInfiniteList, _super);
      registerWidget(ReleasesInfiniteList);
      function ReleasesInfiniteList(opt) {
        this.opt = opt;
        this.query = {
          region: window.region,
          page: 0,
          'per_page': 12
        };
        this.opt.url = '' + window.apiUrl + 'space/new-releases';
        this.opt.mediaObjectName = 'AlbumMediaObject';
        this.opt.type = 'album';
        ReleasesInfiniteList.__super__.constructor.call(this, this.opt);
      }
      ReleasesInfiniteList.prototype.extractItems = function () {
        return findAll(this.data.items, [
          'release',
          'uri'
        ]);
      };
      return ReleasesInfiniteList;
    }(InifiniteList);
    FeaturedPlaylistInfiniteList = function (_super) {
      __extends(FeaturedPlaylistInfiniteList, _super);
      registerWidget(FeaturedPlaylistInfiniteList);
      function FeaturedPlaylistInfiniteList(opt) {
        this.opt = opt;
        this.query = {
          region: window.region,
          page: 0,
          perPage: 6,
          dt: util.hourDate()
        };
        if (window.abHighlights != null) {
          this.query.ab = 'highlights-' + window.abHighlights;
        }
        this.opt.url = '' + window.apiUrl + 'space/featured-playlists';
        this.opt.mediaObjectName = 'PlaylistMediaObject';
        this.opt.type = 'playlist';
        FeaturedPlaylistInfiniteList.__super__.constructor.call(this, this.opt);
      }
      FeaturedPlaylistInfiniteList.prototype.extractItems = function () {
        return findAll(this.data.items, ['playlist']);
      };
      return FeaturedPlaylistInfiniteList;
    }(InifiniteList);
    module.exports = {
      InifiniteList: InifiniteList,
      ReleasesInfiniteList: ReleasesInfiniteList,
      ArticleInfiniteList: ArticleInfiniteList,
      PlaylistInfiniteList: PlaylistInfiniteList
    };
  },
  './@supported-languages.json': function (require, module, exports, global) {
    module.exports = [
      'arb',
      'bn',
      'de',
      'el',
      'en',
      'es-419',
      'es',
      'fi',
      'fr',
      'fr-ca',
      'hi',
      'hu',
      'id',
      'it',
      'ja',
      'ko',
      'nl',
      'pl',
      'pt-br',
      'ro',
      'ru',
      'sv',
      'ta',
      'th',
      'tr',
      'zh-hant',
      'zsm'
    ];
  },
  './scripts/widget.coffee': function (require, module, exports, global) {
    var AppWidget, MediaObject, Throttler, Widget, elem, href, registerWidget, remote, uriToMediaObjectWidget, util, _i, _len, _ref, __hasProp = {}.hasOwnProperty, __extends = function (child, parent) {
        for (var key in parent) {
          if (__hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      };
    util = require('./scripts/util.coffee');
    remote = require('./scripts/remote.coffee');
    _.extend(window, util);
    _.extend(window, remote);
    window.widgets = {};
    registerWidget = function (widgetClass) {
      var className, funcNameRegex, results;
      className = widgetClass.prototype.constructor.name;
      if (className == null) {
        funcNameRegex = /function\s([^(]{1,})\(/;
        results = funcNameRegex.exec(widgetClass.prototype.constructor.toString());
        if (results && results.length > 1) {
          className = results[1].trim();
        } else {
          throw 'Run for the hills!';
        }
      }
      return window.widgets[className] = widgetClass;
    };
    j('body').append(j('<div style=\'display: none;\'><div id=\'trashcan\' style=\'display: none;\'></div></div>'));
    Widget = function () {
      function Widget(elementId) {
        this.elementId = elementId;
        if (this.elementId == null) {
          this.elementId = _.uniqueId('widget-');
        }
        this.children = [];
        this.active = true;
        this.createdAt = new Date().getTime();
        this.widgetRenderd = j.Deferred();
        this.widgetRenderd.promise().done(this.wcb(function () {
          var delay;
          delay = new Date().getTime() - this.createdAt;
          return console.log('Widget ' + this.elementId + ' renderd in ' + delay + ' ms');
        }));
      }
      Widget.prototype.wcb = function (callback) {
        var widgetInstance;
        widgetInstance = this;
        return function () {
          var err;
          if (widgetInstance.destroyed) {
            return console.warn('Widget is destroyed, skipping callback', widgetInstance);
          } else {
            if (buildConf.disableConsoleLog) {
              try {
                return callback.apply(widgetInstance, arguments);
              } catch (_error) {
                err = _error;
                console.error('Error in widget callback.', err.name, widgetInstance.elementId, callback);
                console.error(err.stack);
                console.error(err.message);
                return window.sendErrorReport(err, 'error_widget');
              }
            } else {
              return callback.apply(widgetInstance, arguments);
            }
          }
        };
      };
      Widget.prototype.placeholder = function () {
        return '<div id=\'' + this.elementId + '\' />';
      };
      Widget.prototype.deactivate = function () {
        this.elem().css({
          'display': 'none',
          'opacity': '0.0',
          'z-index': 0
        });
        this.active = false;
        return typeof this._deactivate === 'function' ? this._deactivate() : void 0;
      };
      Widget.prototype.activate = function () {
        this.elem().css({
          'display': '',
          'opacity': '1.0',
          'z-index': 1
        });
        this.active = true;
        return typeof this._activate === 'function' ? this._activate() : void 0;
      };
      Widget.prototype.elem = function () {
        if (this.destroyed) {
          return j('#trashcan');
        }
        return j('#' + this.elementId);
      };
      Widget.prototype.find = function (selector) {
        if (this.destroyed) {
          return j('#trashcan');
        }
        return j('#' + this.elementId + ' ' + selector);
      };
      Widget.prototype.elemNode = function () {
        return document.getElementById(this.elementId);
      };
      Widget.prototype.makeChild = function (widgetName, opts) {
        var child;
        child = new widgets[widgetName](opts);
        child.parent = this;
        this.children.push(child);
        return child;
      };
      Widget.prototype.defenestrate = function () {
        var child, _results;
        _results = [];
        while (this.children.length > 0) {
          child = this.children.pop();
          _results.push(child.destroy(true));
        }
        return _results;
      };
      Widget.prototype.destroy = function (popped) {
        var delay, init;
        if (popped == null) {
          popped = false;
        }
        if (this.parent != null && !popped) {
          this.parent.children = _.without(this.parent.children, this);
        }
        init = new Date().getTime();
        this.defenestrate();
        if (typeof this._destroy === 'function') {
          this._destroy();
        }
        this.elem().html('');
        this.destroyed = true;
        return delay = new Date().getTime() - init;
      };
      return Widget;
    }();
    Throttler = function () {
      function Throttler(delay) {
        this.delay = delay;
        this.last = new Date().getTime() - 1409678300000;
      }
      Throttler.prototype.queue = function (func) {
        var howEarly, now;
        now = new Date().getTime() - 1409678300000;
        howEarly = this.last - now;
        if (howEarly < 0) {
          _.defer(func);
          return this.last = now + this.delay;
        } else {
          util.delay(howEarly, func);
          return this.last = now + howEarly + this.delay;
        }
      };
      return Throttler;
    }();
    MediaObject = function (_super) {
      __extends(MediaObject, _super);
      MediaObject.prototype.defaults = {
        modifiers: 'col-sm-3 col-md-3 col-lg-2',
        unwrapped: false
      };
      MediaObject.prototype.mockData = {
        'id': ' ',
        'title': ' ',
        'description': ' ',
        'image': null,
        'uri': '',
        'name': ' ',
        'extra': ' ',
        'imageUrl': null
      };
      MediaObject.prototype.throttler = new Throttler(60);
      function MediaObject(opt) {
        this.opt = opt != null ? opt : {};
        MediaObject.__super__.constructor.call(this);
        this.opt = _.defaults(this.opt, MediaObject.prototype.defaults);
        if (this.opt.data != null) {
          this.data = this.opt.data;
        } else {
          this.data = {};
          this.data = _.defaults(this.data, MediaObject.prototype.mockData);
        }
        if (this.opt.hideMeta) {
          this.data.hideMeta = true;
        }
        if (this.opt.hideSubtitle) {
          this.data.hideSubtitle = true;
        }
        this.widgetRenderd.done(this.wcb(function () {
          return window.events.update(this.elemNode());
        }));
        _.defer(this.wcb(function () {
          if (this.data.uri) {
            return this.render();
          } else {
            return this.getData().done(this.wcb(this.render));
          }
        }));
      }
      MediaObject.prototype.getData = fakePromise;
      MediaObject.prototype.render = function () {
        var html, imgElem;
        html = this.tmpl();
        if (this.opt.unwrapped) {
          j(html).attr('id', this.opt.elementId);
          this.elem().replaceWith(html);
        } else {
          this.elem().html(html);
        }
        imgElem = j('<img/>');
        imgElem.load(this.wcb(function () {
          return MediaObject.prototype.throttler.queue(this.wcb(function () {
            return this.elem().removeClass('hideImage');
          }));
        }));
        imgElem.error(this.wcb(function () {
          return console.warn('error loading image: ' + this.data.imageUrl);
        }));
        imgElem.attr('src', this.resolveImgUrl());
        return this.widgetRenderd.resolve();
      };
      MediaObject.prototype.resolveImgUrl = function () {
        if (this.data.image != null) {
          if (this.data.image.indexOf(':') === -1) {
            return cloudFrontUrl(this.data.image);
          } else {
            return this.data.image;
          }
        }
      };
      MediaObject.prototype.tmpl = function () {
        var _ref;
        this.data.imageUrl = this.resolveImgUrl();
        if (this.data.uri !== MediaObject.prototype.mockData.uri) {
          this.data.uri = (_ref = URI.from(this.data.uri)) != null ? _ref.toURI() : void 0;
        } else {
          this.data.uri = '';
        }
        this.data.modifiers = this.opt.modifiers;
        this.data.preview = false;
        return mediaObjectTemplate(this.data);
      };
      MediaObject.prototype.placeholder = function () {
        return j(MediaObject.__super__.placeholder.call(this)).html(this.tmpl()).clone().wrap('<p>').parent().html();
      };
      MediaObject.prototype.unwrappedPlaceholder = function () {
        return j(this.tmpl()).attr('id', this.elementId).clone().wrap('<p>').parent().html();
      };
      return MediaObject;
    }(Widget);
    AppWidget = function (_super) {
      __extends(AppWidget, _super);
      registerWidget(AppWidget);
      function AppWidget(elementId) {
        this.elementId = elementId;
        AppWidget.__super__.constructor.call(this, this.elementId);
        window.live('spotify:application').on('update', this.wcb(function (event) {
          console.log(event);
          if (event['arguments'] != null) {
            return this.getArgs();
          }
        }));
        _.defer(this.wcb(this.getArgs));
      }
      AppWidget.prototype.getArgs = function () {
        return window.live('spotify:application').get('arguments', this.wcb(function (error, args) {
          if (error != null) {
            console.error('routing error', error);
          }
          sp.application['arguments'] = args;
          console.log('>>> Routing \'' + args + '\' <<<');
          return this.argumentsChg(args);
        }));
      };
      AppWidget.prototype.argumentsChg = function (args) {
        return console.log('Arguments changed but no action was taken', args);
      };
      return AppWidget;
    }(Widget);
    uriToMediaObjectWidget = function (uri) {
      if (uri.indexOf('playlist') !== -1) {
        return 'PlaylistMediaObject';
      }
      if (uri.indexOf('album') !== -1) {
        return 'AlbumMediaObject';
      }
      if (uri.indexOf('artist') !== -1) {
        return 'ArtistMediaObject';
      }
      console.error('no media object for uri', uri);
      return null;
    };
    _ref = j('link');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      elem = _ref[_i];
      href = j(elem).attr('href');
      if ((href != null ? href.indexOf('$api') : void 0) === 0) {
        j(elem).remove();
      }
    }
    module.exports = {
      Widget: Widget,
      AppWidget: AppWidget,
      MediaObject: MediaObject,
      registerWidget: registerWidget,
      uriToMediaObjectWidget: uriToMediaObjectWidget
    };
  },
  './scripts/util.coffee': function (require, module, exports, global) {
    var crc32tab;
    crc32tab = [
      0,
      1996959894,
      3993919788,
      2567524794,
      124634137,
      1886057615,
      3915621685,
      2657392035,
      249268274,
      2044508324,
      3772115230,
      2547177864,
      162941995,
      2125561021,
      3887607047,
      2428444049,
      498536548,
      1789927666,
      4089016648,
      2227061214,
      450548861,
      1843258603,
      4107580753,
      2211677639,
      325883990,
      1684777152,
      4251122042,
      2321926636,
      335633487,
      1661365465,
      4195302755,
      2366115317,
      997073096,
      1281953886,
      3579855332,
      2724688242,
      1006888145,
      1258607687,
      3524101629,
      2768942443,
      901097722,
      1119000684,
      3686517206,
      2898065728,
      853044451,
      1172266101,
      3705015759,
      2882616665,
      651767980,
      1373503546,
      3369554304,
      3218104598,
      565507253,
      1454621731,
      3485111705,
      3099436303,
      671266974,
      1594198024,
      3322730930,
      2970347812,
      795835527,
      1483230225,
      3244367275,
      3060149565,
      1994146192,
      31158534,
      2563907772,
      4023717930,
      1907459465,
      112637215,
      2680153253,
      3904427059,
      2013776290,
      251722036,
      2517215374,
      3775830040,
      2137656763,
      141376813,
      2439277719,
      3865271297,
      1802195444,
      476864866,
      2238001368,
      4066508878,
      1812370925,
      453092731,
      2181625025,
      4111451223,
      1706088902,
      314042704,
      2344532202,
      4240017532,
      1658658271,
      366619977,
      2362670323,
      4224994405,
      1303535960,
      984961486,
      2747007092,
      3569037538,
      1256170817,
      1037604311,
      2765210733,
      3554079995,
      1131014506,
      879679996,
      2909243462,
      3663771856,
      1141124467,
      855842277,
      2852801631,
      3708648649,
      1342533948,
      654459306,
      3188396048,
      3373015174,
      1466479909,
      544179635,
      3110523913,
      3462522015,
      1591671054,
      702138776,
      2966460450,
      3352799412,
      1504918807,
      783551873,
      3082640443,
      3233442989,
      3988292384,
      2596254646,
      62317068,
      1957810842,
      3939845945,
      2647816111,
      81470997,
      1943803523,
      3814918930,
      2489596804,
      225274430,
      2053790376,
      3826175755,
      2466906013,
      167816743,
      2097651377,
      4027552580,
      2265490386,
      503444072,
      1762050814,
      4150417245,
      2154129355,
      426522225,
      1852507879,
      4275313526,
      2312317920,
      282753626,
      1742555852,
      4189708143,
      2394877945,
      397917763,
      1622183637,
      3604390888,
      2714866558,
      953729732,
      1340076626,
      3518719985,
      2797360999,
      1068828381,
      1219638859,
      3624741850,
      2936675148,
      906185462,
      1090812512,
      3747672003,
      2825379669,
      829329135,
      1181335161,
      3412177804,
      3160834842,
      628085408,
      1382605366,
      3423369109,
      3138078467,
      570562233,
      1426400815,
      3317316542,
      2998733608,
      733239954,
      1555261956,
      3268935591,
      3050360625,
      752459403,
      1541320221,
      2607071920,
      3965973030,
      1969922972,
      40735498,
      2617837225,
      3943577151,
      1913087877,
      83908371,
      2512341634,
      3803740692,
      2075208622,
      213261112,
      2463272603,
      3855990285,
      2094854071,
      198958881,
      2262029012,
      4057260610,
      1759359992,
      534414190,
      2176718541,
      4139329115,
      1873836001,
      414664567,
      2282248934,
      4279200368,
      1711684554,
      285281116,
      2405801727,
      4167216745,
      1634467795,
      376229701,
      2685067896,
      3608007406,
      1308918612,
      956543938,
      2808555105,
      3495958263,
      1231636301,
      1047427035,
      2932959818,
      3654703836,
      1088359270,
      936918000,
      2847714899,
      3736837829,
      1202900863,
      817233897,
      3183342108,
      3401237130,
      1404277552,
      615818150,
      3134207493,
      3453421203,
      1423857449,
      601450431,
      3009837614,
      3294710456,
      1567103746,
      711928724,
      3020668471,
      3272380065,
      1510334235,
      755167117
    ];
    module.exports = {
      crc32: function (str, asString) {
        var crc, i;
        if (!_.isString(str)) {
          str = JSON.stringify(str);
        }
        crc = ~0;
        i = 0;
        while (i < str.length) {
          crc = crc >>> 8 ^ crc32tab[(crc ^ str.charCodeAt(i)) & 255];
          i++;
        }
        crc = crc ^ -1;
        if (asString) {
          return crc.toString(36);
        } else {
          return crc;
        }
      },
      typeFromUri: function (uri) {
        var _ref;
        return (_ref = uri.split(':')) != null ? _ref[1] : void 0;
      },
      tw: function (func, a, b) {
        return func(b, a);
      },
      delay: function (ms, func) {
        return _.delay(func, ms);
      },
      toArr: function (maybeEnumerable) {
        if (_.isArray(maybeEnumerable)) {
          return maybeEnumerable;
        } else {
          return [maybeEnumerable];
        }
      },
      find: function (obj, nameSpace) {
        var prop, value, _i, _len;
        if (nameSpace == null) {
          nameSpace = [];
        }
        nameSpace = toArr(nameSpace);
        value = obj;
        for (_i = 0, _len = nameSpace.length; _i < _len; _i++) {
          prop = nameSpace[_i];
          value = value[prop];
          if (value == null) {
            return null;
          }
        }
        return value;
      },
      findAll: function (objArr, nameSpace) {
        var obj, returnArr, _i, _len;
        objArr = toArr(objArr);
        nameSpace = toArr(nameSpace);
        returnArr = [];
        for (_i = 0, _len = objArr.length; _i < _len; _i++) {
          obj = objArr[_i];
          returnArr.push(find(obj, nameSpace));
        }
        return returnArr;
      },
      numberFormat: function (number, decimals, dec_point, thousands_sep) {
        var dec, n, prec, s, sep, toFixedFix;
        number = (number + '').replace(/[^0-9+\-Ee.]/g, '');
        n = !isFinite(+number) ? 0 : +number;
        prec = !isFinite(+decimals) ? 0 : Math.abs(decimals);
        sep = typeof thousands_sep === 'undefined' ? ',' : thousands_sep;
        dec = typeof dec_point === 'undefined' ? '.' : dec_point;
        s = '';
        toFixedFix = function (n, prec) {
          var k;
          k = Math.pow(10, prec);
          return '' + Math.round(n * k) / k;
        };
        s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
        if (s[0].length > 3) {
          s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
        }
        if ((s[1] || '').length < prec) {
          s[1] = s[1] || '';
          s[1] += new Array(prec - s[1].length + 1).join('0');
        }
        return s.join(dec);
      },
      addCss: function (css) {
        return j('head').append('<style>' + css + '</style>');
      },
      pad: function (number) {
        var r;
        r = String(number);
        if (r.length === 1) {
          r = '0' + r;
        }
        return r;
      },
      hourDate: function (date) {
        var str;
        if (date == null) {
          date = new Date();
        }
        str = date.getFullYear();
        str += '-' + pad(date.getMonth() + 1);
        str += '-' + pad(date.getDate());
        str += 'T' + pad(date.getHours());
        str += ':01:00';
        return str;
      },
      fakePromise: function () {
        var d;
        d = j.Deferred();
        d.resolve();
        return d.promise();
      },
      preLoadImage: function (imgUrl) {
        var d, img;
        d = j.Deferred();
        img = new Image();
        img.onload = function (_this) {
          return function () {
            return d.resolve();
          };
        }(this);
        img.src = imgUrl;
        return d.promise();
      },
      selfOrParent: function (elem, selector) {
        if (j(elem).is(selector)) {
          return j(elem);
        } else {
          return j(elem).parents(selector).first();
        }
        return { length: false };
      },
      cloudFrontUrl: function (str) {
        if (str.indexOf('https://d3rt1990lpmkn.cloudfront.net/300/') === 0 || str.indexOf('https://d3rt1990lpmkn.cloudfront.net/image/') === 0) {
          return str;
        } else {
          return 'https://d3rt1990lpmkn.cloudfront.net/300/' + str;
        }
      },
      drawBackground: function (imgUrl, can, fade) {
        var d, img;
        if (fade == null) {
          fade = 0.4;
        }
        d = j.Deferred();
        img = new Image();
        img.onload = function (_this) {
          return function () {
            var ctx, err;
            try {
              ctx = can.getContext('2d');
              ctx.drawImage(img, 0, 0, can.width, can.height);
              return d.resolve();
            } catch (_error) {
              err = _error;
              console.error(err);
              return d.reject();
            }
          };
        }(this);
        img.src = imgUrl;
        return d.promise();
      }
    };
  },
  './scripts/remote.coffee': function (require, module, exports, global) {
    var LiveRequest, queryParse, util;
    util = require('./scripts/util.coffee');
    queryParse = require('./node_modules/spotify-live/util/parser.js');
    _.extend(window, util);
    window.requestsWaitingForConnection = [];
    window.assertConnection = function () {
      var d;
      d = j.Deferred();
      if (window.appOnline) {
        d.resolve();
      } else {
        console.log('Connection assert failed. Session is offline.');
        if (j('#errorPage').length === 0) {
          j('body').append(errorPageTemplate());
        }
        requestsWaitingForConnection.push(d);
      }
      return d.promise();
    };
    LiveRequest = function () {
      function LiveRequest(liveModel, query) {
        this.liveModel = liveModel;
        this.query = query;
        this.keyArr = queryParse(this.query);
        this.attempt = 0;
      }
      LiveRequest.prototype.go = function (defer) {
        this.attempt++;
        if (this.attempt < 4 && defer.state() === 'pending') {
          this.liveModel.query.call(this.liveModel, this.query, this.resolve(defer));
          _.delay(function (_this) {
            return function () {
              return _this.go(defer);
            };
          }(this), 5000 * this.attempt);
        }
        if (this.attempt >= 4) {
          return defer.reject('Live request failed after 3 attempts');
        }
      };
      LiveRequest.prototype.getMissing = function (data, entryArr) {
        var entry, missing, _i, _len;
        missing = [];
        for (_i = 0, _len = entryArr.length; _i < _len; _i++) {
          entry = entryArr[_i];
          if (data[entry.key] == null || data[entry.key].length === 0) {
            missing.push(entry.key);
          } else {
            if (entry.key.query != null) {
              _.union(missing, this.getMissing(data[entry.key], entry.key.query));
            }
          }
        }
        return missing;
      };
      LiveRequest.prototype.resolve = function (defer) {
        return function (_this) {
          return function (err, data) {
            var missing, missingKey, _i, _len;
            if (defer.state() === 'pending') {
              if (err != null) {
                console.error(err);
                defer.reject('Live reported error: ' + err);
                return;
              }
              missing = _this.getMissing(data, _this.keyArr);
              if (missing.length === 0) {
                if (_this.attempt > 1) {
                  console.warn(_this.query, 'resolved on attempt', _this.attempt);
                }
                return defer.resolve(data);
              } else {
                for (_i = 0, _len = missing.length; _i < _len; _i++) {
                  missingKey = missing[_i];
                  _this.liveModel['delete'](missingKey);
                }
                console.warn('missing', missing);
                return _.defer(function () {
                  return _this.go(defer);
                });
              }
            } else {
              return console.warn(_this.query, 'already resolved');
            }
          };
        }(this);
      };
      return LiveRequest;
    }();
    module.exports = {
      liveReq: function (uri, query) {
        var d, req;
        d = j.Deferred();
        console.warn(query);
        req = new LiveRequest(window.live(uri), query);
        assertConnection().done(function (_this) {
          return function () {
            return req.go(d);
          };
        }(this));
        d.fail(function (_this) {
          return function () {
            return sendRequestError('Request failed ' + uri + ' ' + query, 'error_live');
          };
        }(this));
        return d.promise();
      },
      sendRequestError: function (message, category) {
        if (buildConf.disableConsoleLog) {
          return window.sendErrorReport(Error(message), category, true);
        } else {
          return console.error(category, message);
        }
      },
      apiReq: function (url, query) {
        if (query == null) {
          query = {};
        }
        query.locale = window.language;
        query.product = window.sp.session.product;
        if (window.dauSort != null) {
          query.product = 'dau';
        }
        if (query.dt == null) {
          query.dt = util.hourDate();
        }
        if (url.indexOf('/space/') !== -1) {
          query.version = window['package'].version;
        }
        query.platform = window.env;
        if (window.requestMethod === 'jsonp') {
          return jsonpReq(url, query);
        } else {
          return cosmosReq(url, query);
        }
      },
      cosmosReq: function (url, query) {
        var d, k, v;
        if (query == null) {
          query = {};
        }
        d = j.Deferred();
        url = url.replace(window.apiUrl, 'hm://apollo-browse/v3/');
        url += '?';
        for (k in query) {
          v = query[k];
          url += '' + k + '=' + v + '&';
        }
        url = url.slice(0, -1);
        assertConnection().done(function (_this) {
          return function () {
            return cosmos.resolver.get(url, function (err, resp) {
              console.log(url, JSON.stringify(query), resp.getJSONBody());
              if (err != null) {
                sendRequestError('Got error: ' + err, 'error_apollo_browse');
                return console.error('request', url, err);
              } else {
                return d.resolve(resp.getJSONBody());
              }
            });
          };
        }(this));
        return d.promise();
      },
      cosmosGenericReq: function (url) {
        var d;
        d = j.Deferred();
        assertConnection().done(function (_this) {
          return function () {
            return cosmos.resolver.get(url, function (err, resp) {
              console.log(url, resp.getJSONBody());
              if (err != null) {
                sendRequestError('Got error: ' + err, 'error_apollo_generic');
                return console.error('request', url, err);
              } else {
                return d.resolve(resp.getJSONBody());
              }
            });
          };
        }(this));
        return d.promise();
      },
      jsonpReq: function (url, query) {
        var callback, d, n, newCallback;
        if (query == null) {
          query = {};
        }
        d = j.Deferred();
        query.suppress_response_codes = 1;
        callback = 'call' + crc32({
          url: url,
          query: query
        }, true);
        callback = callback.replace(/-/g, 'qq');
        if (window[callback] != null) {
          console.warn('Callback ' + callback + ' already defined');
          n = 0;
          newCallback = callback + n;
          while (window[newCallback] != null) {
            n++;
            newCallback = callback + n;
          }
          callback = newCallback;
          console.log('Settled with ' + callback);
        }
        assertConnection().done(makeRequest(d, url, query, callback, 30000, 0));
        return d.promise();
      },
      makeRequest: function (defer, url, query, callbackName, timeout, attempt) {
        var createdAt;
        timeout += attempt * 10000;
        createdAt = new Date().getTime();
        window.numRequests++;
        if (window.numRequests > window.maxRequests) {
          err.message = 'Over ' + window.maxRequests + ' requests';
          window.sendErrorReport(err);
          window.maxRequests += 1000;
        }
        return function () {
          return j.ajax({
            url: url,
            dataType: 'jsonp',
            crossDomain: true,
            type: 'GET',
            jsonp: 'callback',
            jsonpCallback: callbackName + attempt,
            cache: window.decache == null,
            timeout: timeout + attempt * 10000,
            data: query,
            success: function (_this) {
              return function (x) {
                if (x.httpResponseCode != null && x.httpResponseCode !== 200) {
                  sendRequestError('Got error response code ' + x.errorCode, 'error_api');
                }
                return defer.resolve(x);
              };
            }(this),
            error: function (_this) {
              return function () {
                var simpleUrl;
                console.error(arguments);
                attempt++;
                if (attempt < 3) {
                  return _.defer(makeRequest(defer, url, query, callbackName, timeout, attempt));
                } else {
                  simpleUrl = url.split('?')[0];
                  console.error('Request failed after 3 attemps ' + simpleUrl);
                  return sendRequestError('Request failed ' + simpleUrl, 'error_api');
                }
              };
            }(this),
            complete: function () {
              var delay;
              delay = new Date().getTime() - createdAt;
              return console.log('Request completed in ' + delay + ' ms');
            }
          });
        };
      }
    };
    window.numRequests = 0;
    window.maxRequests = 1000;
  },
  './lang/arb.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/arb.loc/strings/main.lang', {
      'Browse': 'Browse',
      'All Subgenres': 'All Subgenres',
      'All Subcategories': 'All Subcategories',
      'Playlists': 'Playlists',
      'Overview': 'Overview',
      'Toplists': 'Top Lists',
      'Discover': 'Discover',
      'Featured Playlists': 'Featured Playlists',
      'Genres & Moods': 'Genres & Moods',
      'New Releases': 'New Releases',
      'News': 'News',
      'followers': 'followers',
      'All': 'All',
      'View all': 'View all',
      'Article': 'Article',
      'Related Articles': 'Related Articles',
      'Other Related': 'Other Related',
      'Click here to read the article': 'Click here to read the article',
      'notAvailableOffline': 'Browse is not available offline.',
      'loadingError': 'Browse can\'t be loaded at this moment.',
      'Try again': 'Try again',
      'Recommended for you': 'Recommended for you',
      'More': 'More',
      'social-chart.title': 'Friends Top Tracks',
      'social-chart.description': 'The most played songs in your network over the last 7 days.',
      'Highlights': 'Highlights'
    });
  },
  './lang/bn.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/bn.loc/strings/main.lang', {
      'Browse': 'Browse',
      'All Subgenres': 'All Subgenres',
      'All Subcategories': 'All Subcategories',
      'Playlists': 'Playlists',
      'Overview': 'Overview',
      'Toplists': 'Top Lists',
      'Discover': 'Discover',
      'Featured Playlists': 'Featured Playlists',
      'Genres & Moods': 'Genres & Moods',
      'New Releases': 'New Releases',
      'News': 'News',
      'followers': 'followers',
      'All': 'All',
      'View all': 'View all',
      'Article': 'Article',
      'Related Articles': 'Related Articles',
      'Other Related': 'Other Related',
      'Click here to read the article': 'Click here to read the article',
      'notAvailableOffline': 'Browse is not available offline.',
      'loadingError': 'Browse can\'t be loaded at this moment.',
      'Try again': 'Try again',
      'Recommended for you': 'Recommended for you',
      'More': 'More',
      'social-chart.title': 'Friends Top Tracks',
      'social-chart.description': 'The most played songs in your network over the last 7 days.',
      'Highlights': 'Highlights'
    });
  },
  './lang/de.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/de.loc/strings/main.lang', {
      'Browse': 'Browse',
      'All Subgenres': 'Alle Untergenres',
      'All Subcategories': 'Alle Unterkategorien',
      'Playlists': 'Playlists',
      'Overview': '\xDCbersicht',
      'Toplists': 'Top Listen',
      'Discover': 'Entdecken',
      'Featured Playlists': 'Ausgew\xE4hlte Playlists',
      'Genres & Moods': 'Genres und Stimmungen',
      'New Releases': 'Neuheiten',
      'News': 'News',
      'followers': 'Followers',
      'All': 'Alle',
      'View all': 'Alle anzeigen',
      'Article': 'Artikel',
      'Related Articles': '\xC4hnliche Artikel',
      'Other Related': '\xC4hnliches',
      'Click here to read the article': 'Hier klicken, um Artikel zu lesen',
      'notAvailableOffline': '\'Browse\' ist offline nicht verf\xFCgbar.',
      'loadingError': '\'Browse\' kann gerade nicht geladen werden. ',
      'Try again': 'Versuch\' es nochmal',
      'Recommended for you': 'F\xFCr dich empfohlen',
      'More': 'Mehr',
      'social-chart.title': 'Top-Titel von Freunden',
      'social-chart.description': 'Die in den letzten 7\xA0Tagen am h\xE4ufigsten gespielten Songs in Deinem Netzwerk.',
      'Highlights': 'Highlights'
    });
  },
  './lang/el.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/el.loc/strings/main.lang', {
      'Browse': '\u03A0\u03B5\u03C1\u03B9\u03AE\u03B3\u03B7\u03C3\u03B7',
      'All Subgenres': '\u038C\u03BB\u03B1 \u03C4\u03B1 \u03C5\u03C0\u03BF\u03B5\u03AF\u03B4\u03B7',
      'All Subcategories': '\u038C\u03BB\u03B5\u03C2 \u03BF\u03B9 \u03C5\u03C0\u03BF\u03BA\u03B1\u03C4\u03B7\u03B3\u03BF\u03C1\u03AF\u03B5\u03C2',
      'Playlists': '\u039B\u03AF\u03C3\u03C4\u03B5\u03C2',
      'Overview': '\u0395\u03C0\u03B9\u03C3\u03BA\u03CC\u03C0\u03B7\u03C3\u03B7',
      'Toplists': '\u039A\u03BF\u03C1\u03C5\u03C6\u03B1\u03AF\u03B5\u03C2 \u03BB\u03AF\u03C3\u03C4\u03B5\u03C2',
      'Discover': '\u0391\u03BD\u03B1\u03BA\u03AC\u03BB\u03C5\u03C8\u03B5 ',
      'Featured Playlists': '\u03A0\u03C1\u03BF\u03C4\u03B5\u03B9\u03BD\u03CC\u03BC\u03B5\u03BD\u03B5\u03C2 \u03BB\u03AF\u03C3\u03C4\u03B5\u03C2',
      'Genres & Moods': '\u039C\u03BF\u03C5\u03C3\u03B9\u03BA\u03AC \u03B5\u03AF\u03B4\u03B7 \u03BA\u03B1\u03B9 \u03B4\u03B9\u03B1\u03B8\u03AD\u03C3\u03B5\u03B9\u03C2',
      'New Releases': '\u039D\u03AD\u03B5\u03C2 \u03BA\u03C5\u03BA\u03BB\u03BF\u03C6\u03BF\u03C1\u03AF\u03B5\u03C2',
      'News': '\u0395\u03B9\u03B4\u03AE\u03C3\u03B5\u03B9\u03C2',
      'followers': '\u03BF\u03C0\u03B1\u03B4\u03BF\u03AF',
      'All': '\u038C\u03BB\u03B1',
      'View all': '\u03A0\u03C1\u03BF\u03B2\u03BF\u03BB\u03AE \u03CC\u03BB\u03C9\u03BD',
      'Article': '\u0386\u03C1\u03B8\u03C1\u03BF',
      'Related Articles': '\u0391\u03BD\u03C4\u03AF\u03C3\u03C4\u03BF\u03B9\u03C7\u03B1 \u03AC\u03C1\u03B8\u03C1\u03B1',
      'Other Related': '\u0386\u03BB\u03BB\u03B1 \u03B1\u03BD\u03C4\u03AF\u03C3\u03C4\u03BF\u03B9\u03C7\u03B1',
      'Click here to read the article': '\u039A\u03AC\u03BD\u03B5 \u03BA\u03BB\u03B9\u03BA \u03B5\u03B4\u03CE \u03B3\u03B9\u03B1 \u03BD\u03B1 \u03B4\u03B9\u03B1\u03B2\u03AC\u03C3\u03B5\u03B9\u03C2 \u03C4\u03BF \u03AC\u03C1\u03B8\u03C1\u03BF',
      'notAvailableOffline': '\u0397 \u03B5\u03C0\u03B9\u03BB\u03BF\u03B3\u03AE \xAB\u03A0\u03B5\u03C1\u03B9\u03AE\u03B3\u03B7\u03C3\u03B7\xBB \u03B4\u03B5\u03BD \u03B5\u03AF\u03BD\u03B1\u03B9 \u03B4\u03B9\u03B1\u03B8\u03AD\u03C3\u03B9\u03BC\u03B7 \u03B5\u03BA\u03C4\u03CC\u03C2 \u03C3\u03CD\u03BD\u03B4\u03B5\u03C3\u03B7\u03C2.',
      'loadingError': '\u0394\u03B5\u03BD \u03B5\u03AF\u03BD\u03B1\u03B9 \u03B4\u03C5\u03BD\u03B1\u03C4\u03AE \u03B7 \u03C6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7 \u03C4\u03B7\u03C2 \xAB\u03A0\u03B5\u03C1\u03B9\u03AE\u03B3\u03B7\u03C3\u03B7\u03C2\xBB \u03B1\u03C5\u03C4\u03AE \u03C4\u03B7 \u03C3\u03C4\u03B9\u03B3\u03BC\u03AE. ',
      'Try again': '\u0394\u03BF\u03BA\u03AF\u03BC\u03B1\u03C3\u03B5 \u03BE\u03B1\u03BD\u03AC',
      'Recommended for you': '\u03A3\u03BF\u03C5 \u03C0\u03C1\u03BF\u03C4\u03B5\u03AF\u03BD\u03BF\u03C5\u03BC\u03B5',
      'More': '\u03A0\u03B5\u03C1\u03B9\u03C3\u03C3\u03CC\u03C4\u03B5\u03C1\u03B1',
      'social-chart.title': '\u039A\u03BF\u03C1\u03C5\u03C6\u03B1\u03AF\u03B1 \u03BA\u03BF\u03BC\u03BC\u03AC\u03C4\u03B9\u03B1 \u03C6\u03AF\u03BB\u03C9\u03BD',
      'social-chart.description': '\u03A4\u03B1 \u03C4\u03C1\u03B1\u03B3\u03BF\u03CD\u03B4\u03B9\u03B1 \u03C0\u03BF\u03C5 \u03B1\u03BA\u03BF\u03CD\u03C3\u03C4\u03B7\u03BA\u03B1\u03BD \u03C0\u03B5\u03C1\u03B9\u03C3\u03C3\u03CC\u03C4\u03B5\u03C1\u03BF \u03C3\u03C4\u03BF \u03B4\u03AF\u03BA\u03C4\u03C5\u03CC \u03C3\u03BF\u03C5 \u03C4\u03B9\u03C2 \u03C4\u03B5\u03BB\u03B5\u03C5\u03C4\u03B1\u03AF\u03B5\u03C2 7 \u03BC\u03AD\u03C1\u03B5\u03C2.',
      'Highlights': '\u03A4\u03B1 \u03BA\u03B1\u03BB\u03CD\u03C4\u03B5\u03C1\u03B1'
    });
  },
  './lang/en.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/en.loc/strings/main.lang', {
      'Browse': 'Browse',
      'All Subgenres': 'All Subgenres',
      'All Subcategories': 'All Subcategories',
      'Playlists': 'Playlists',
      'Overview': 'Overview',
      'Toplists': 'Top Lists',
      'Discover': 'Discover',
      'Featured Playlists': 'Featured Playlists',
      'Genres & Moods': 'Genres & Moods',
      'New Releases': 'New Releases',
      'News': 'News',
      'followers': 'followers',
      'All': 'All',
      'View all': 'View all',
      'Article': 'Article',
      'Related Articles': 'Related Articles',
      'Other Related': 'Other Related',
      'Click here to read the article': 'Click here to read the article',
      'notAvailableOffline': 'Browse is not available offline.',
      'loadingError': 'Browse can\'t be loaded at this moment.',
      'Try again': 'Try again',
      'Recommended for you': 'Recommended for you',
      'More': 'More',
      'social-chart.title': 'Friends Top Tracks',
      'social-chart.description': 'The most played songs in your network over the last 7 days.',
      'Highlights': 'Highlights'
    });
  },
  './lang/es-419.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/es-419.loc/strings/main.lang', {
      'Browse': 'Explorar',
      'All Subgenres': 'Todos los subg\xE9neros',
      'All Subcategories': 'Todas las subcategor\xEDas',
      'Playlists': 'Playlists',
      'Overview': 'Inicio',
      'Toplists': ' \xC9xitos',
      'Discover': 'Descubrir',
      'Featured Playlists': 'Playlists recomendadas',
      'Genres & Moods': 'G\xE9neros y Momentos',
      'New Releases': 'Novedades',
      'News': 'Noticias',
      'followers': 'seguidores',
      'All': 'Todos',
      'View all': 'Ver todo',
      'Article': 'Art\xEDculo',
      'Related Articles': 'Art\xEDculos relacionados',
      'Other Related': 'Relacionado',
      'Click here to read the article': 'Haz clic aqu\xED pare leer el art\xEDculo',
      'notAvailableOffline': 'Explorar no est\xE1 disponible sin conexi\xF3n.',
      'loadingError': 'No es posible cargar Explorar en este momento.',
      'Try again': 'Int\xE9ntalo de nuevo',
      'Recommended for you': 'Recomendado para ti',
      'More': 'M\xE1s',
      'social-chart.title': 'Canciones principales de tus amigos',
      'social-chart.description': 'Las canciones m\xE1s reproducidas en tu red en los \xFAltimos siete d\xEDas.',
      'Highlights': 'Destacados'
    });
  },
  './lang/es.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/es.loc/strings/main.lang', {
      'Browse': 'Explorar',
      'All Subgenres': 'Todos los subg\xE9neros',
      'All Subcategories': 'Todas las subcategor\xEDas',
      'Playlists': 'Playlists',
      'Overview': 'Inicio',
      'Toplists': ' \xC9xitos',
      'Discover': 'Descubrir',
      'Featured Playlists': 'Playlists recomendadas',
      'Genres & Moods': 'G\xE9neros y Momentos',
      'New Releases': 'Novedades',
      'News': 'Noticias',
      'followers': 'seguidores',
      'All': 'Todos',
      'View all': 'Ver toda',
      'Article': 'Art\xEDculo',
      'Related Articles': 'Art\xEDculos relacionados',
      'Other Related': 'Otros relacionados',
      'Click here to read the article': 'Haz click aqu\xED para leer el art\xEDculo',
      'notAvailableOffline': 'Explorar no est\xE1 disponible sin conexi\xF3n.',
      'loadingError': 'En este momento no es posible cargar Explorar.',
      'Try again': 'Prueba otra vez',
      'Recommended for you': 'Recomendado para ti',
      'More': 'M\xE1s',
      'social-chart.title': 'Canciones populares entre tus amigos',
      'social-chart.description': 'Los temas m\xE1s escuchados en tu red de contactos durante los \xFAltimos 7 d\xEDas.',
      'Highlights': 'Destacados'
    });
  },
  './lang/fi.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/fi.loc/strings/main.lang', {
      'Browse': 'Selaa',
      'All Subgenres': 'Kaikki alalajit',
      'All Subcategories': 'Kaikki alaluokat',
      'Playlists': 'Soittolistat',
      'Overview': 'Yleiskatsaus',
      'Toplists': 'Top-listat',
      'Discover': 'L\xF6yd\xE4',
      'Featured Playlists': 'Esitellyt soittolistat',
      'Genres & Moods': 'Tyylilajit & mielentilat',
      'New Releases': 'Uutuuksia',
      'News': 'Uutiset',
      'followers': 'seuraajaa',
      'All': 'Kaikki',
      'View all': 'N\xE4yt\xE4 kaikki',
      'Article': 'Artikkeli',
      'Related Articles': 'Liittyvi\xE4 artikkeleita',
      'Other Related': 'Muuta asiaan liittyv\xE4\xE4',
      'Click here to read the article': 'Lue artikkeli napsauttamalla t\xE4t\xE4',
      'notAvailableOffline': 'Browse-toimintoa ei voi k\xE4ytt\xE4\xE4 offline-tilassa',
      'loadingError': 'Browse-sivua ei juuri nyt voi ladata. ',
      'Try again': 'Yrit\xE4 uudelleen',
      'Recommended for you': 'Suosituksemme sinulle',
      'More': 'Lis\xE4\xE4',
      'social-chart.title': 'Kaverien kuunnelluimmat kappaleet',
      'social-chart.description': 'Kuunnelluimmat kappaleet verkostossasi viimeisen 7\xA0p\xE4iv\xE4n aikana.',
      'Highlights': 'Valitut kohdat'
    });
  },
  './lang/fr.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/fr.loc/strings/main.lang', {
      'Browse': 'Parcourir',
      'All Subgenres': 'Tous les sous-genres',
      'All Subcategories': 'Toutes les sous-cat\xE9gories',
      'Playlists': 'Playlists',
      'Overview': 'Pr\xE9sentation',
      'Toplists': 'Les Tops',
      'Discover': 'D\xE9couvrir',
      'Featured Playlists': 'Playlists recommand\xE9es',
      'Genres & Moods': 'Genres et ambiances',
      'New Releases': 'Sorties',
      'News': 'Actus',
      'followers': 'abonn\xE9s',
      'All': 'Toutes',
      'View all': 'Voir tout',
      'Article': 'Article',
      'Related Articles': 'Articles similaires',
      'Other Related': 'Autres articles similaires',
      'Click here to read the article': 'Cliquez ici pour lire l\'article',
      'notAvailableOffline': 'La page Parcourir n\'est pas disponible hors connexion. ',
      'loadingError': 'La page Parcourir n\'est pas disponible pour l\'instant. ',
      'Try again': 'R\xE9essayez',
      'Recommended for you': 'Recommand\xE9s',
      'More': 'Suite',
      'social-chart.title': 'Top titres de vos amis',
      'social-chart.description': 'Les titres les plus \xE9cout\xE9s dans votre r\xE9seau au cours des 7\xA0derniers jours',
      'Highlights': 'S\xE9lection'
    });
  },
  './lang/fr-ca.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/fr-ca.loc/strings/main.lang', {
      'Browse': 'Parcourir',
      'All Subgenres': 'Tous les sous-genres',
      'All Subcategories': 'Toutes les sous-cat\xE9gories',
      'Playlists': 'Listes de lecture',
      'Overview': 'Aper\xE7u',
      'Toplists': 'Palmar\xE8s',
      'Discover': 'D\xE9couvrir',
      'Featured Playlists': 'Listes de lecture en vedette',
      'Genres & Moods': 'Genres et ambiances',
      'New Releases': 'Nouveaut\xE9s',
      'News': 'Actualit\xE9s',
      'followers': 'abonn\xE9s',
      'All': 'Toutes',
      'View all': 'Voir tout',
      'Article': 'Article',
      'Related Articles': 'Articles similaires',
      'Other Related': 'Autres articles similaires',
      'Click here to read the article': 'Cliquez ici pour lire l\'article',
      'notAvailableOffline': 'La page Parcourir n\'est pas disponible hors ligne. ',
      'loadingError': 'La page Parcourir n\'est pas disponible pour l\'instant. ',
      'Try again': 'R\xE9essayez',
      'Recommended for you': 'Recommand\xE9s',
      'More': 'Suite',
      'social-chart.title': 'Meilleures pistes de vos amis',
      'social-chart.description': 'Les chansons les plus \xE9cout\xE9es dans votre r\xE9seau au cours des 7\xA0derniers jours.',
      'Highlights': 'S\xE9lection'
    });
  },
  './lang/hi.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/hi.loc/strings/main.lang', {
      'Browse': 'Browse',
      'All Subgenres': 'All Subgenres',
      'All Subcategories': 'All Subcategories',
      'Playlists': 'Playlists',
      'Overview': 'Overview',
      'Toplists': 'Top Lists',
      'Discover': 'Discover',
      'Featured Playlists': 'Featured Playlists',
      'Genres & Moods': 'Genres & Moods',
      'New Releases': 'New Releases',
      'News': 'News',
      'followers': 'followers',
      'All': 'All',
      'View all': 'View all',
      'Article': 'Article',
      'Related Articles': 'Related Articles',
      'Other Related': 'Other Related',
      'Click here to read the article': 'Click here to read the article',
      'notAvailableOffline': 'Browse is not available offline.',
      'loadingError': 'Browse can\'t be loaded at this moment.',
      'Try again': 'Try again',
      'Recommended for you': 'Recommended for you',
      'More': 'More',
      'social-chart.title': 'Friends Top Tracks',
      'social-chart.description': 'The most played songs in your network over the last 7 days.',
      'Highlights': 'Highlights'
    });
  },
  './lang/hu.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/hu.loc/strings/main.lang', {
      'Browse': 'B\xF6ng\xE9sz\xE9s',
      'All Subgenres': 'Minden alm\u0171faj',
      'All Subcategories': 'Minden alkateg\xF3ria',
      'Playlists': 'Lej\xE1tsz\xE1si list\xE1k',
      'Overview': '\xC1ttekint\xE9s',
      'Toplists': 'Toplist\xE1k',
      'Discover': 'Felfedez\xE9s',
      'Featured Playlists': 'Kiemelt lej\xE1tsz\xE1si list\xE1k',
      'Genres & Moods': 'M\u0171fajok \xE9s hangulatok',
      'New Releases': '\xDAjdons\xE1gok',
      'News': 'H\xEDrek',
      'followers': 'k\xF6vet\u0151',
      'All': 'Az \xF6sszes',
      'View all': 'Az \xF6sszes megtekint\xE9se',
      'Article': 'Cikk',
      'Related Articles': 'Hasonl\xF3 cikkek',
      'Other Related': 'Egy\xE9b kapcsol\xF3d\xF3',
      'Click here to read the article': 'Kattints ide a cikk elolvas\xE1s\xE1hoz',
      'notAvailableOffline': 'Offline m\xF3dban nem lehet b\xF6ng\xE9szni.',
      'loadingError': 'Nem siker\xFClt bet\xF6lteni a B\xF6ng\xE9sz\xE9s lapot.',
      'Try again': 'Pr\xF3b\xE1ld meg \xFAjra',
      'Recommended for you': 'Neked aj\xE1nljuk',
      'More': 'T\xF6bb',
      'social-chart.title': 'Ismer\u0151s\xF6k toplist\xE1i',
      'social-chart.description': 'Az ismer\u0151seid k\xF6r\xE9ben legt\xF6bbet hallgatott sz\xE1mok az elm\xFAlt 7 napban.',
      'Highlights': 'Kiemeltek'
    });
  },
  './lang/id.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/id.loc/strings/main.lang', {
      'Browse': 'Jelajahi',
      'All Subgenres': 'Semua Subgenre',
      'All Subcategories': 'Semua Subkategori',
      'Playlists': 'Daftar putar',
      'Overview': 'Ikhtisar',
      'Toplists': 'Daftar Teratas',
      'Discover': 'Temukan',
      'Featured Playlists': 'Daftar Putar Unggulan',
      'Genres & Moods': 'Genre & Suasana Hati',
      'New Releases': 'Baru Dirilis',
      'News': 'Berita',
      'followers': 'pengikut',
      'All': 'Semua',
      'View all': 'Lihat semua',
      'Article': 'Artikel',
      'Related Articles': 'Artikel Terkait',
      'Other Related': 'Yang Terkait Lainnya',
      'Click here to read the article': 'Klik di sini untuk membaca artikel',
      'notAvailableOffline': 'Fitur Jelajah tidak tersedia secara offline.',
      'loadingError': 'Fitur Jelajah tidak dapat dimuat untuk saat ini.',
      'Try again': 'Coba lagi',
      'Recommended for you': 'Disarankan untuk Anda',
      'More': 'Lainnya',
      'social-chart.title': 'Friends Top Tracks',
      'social-chart.description': 'The most played songs in your network over the last 7 days.',
      'Highlights': 'Sorotan'
    });
  },
  './lang/it.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/it.loc/strings/main.lang', {
      'Browse': 'Naviga',
      'All Subgenres': 'Tutti i sottogeneri',
      'All Subcategories': 'Tutte le sottocategorie',
      'Playlists': 'Playlist',
      'Overview': 'Panoramica',
      'Toplists': 'Top list',
      'Discover': 'Scopri',
      'Featured Playlists': 'Playlist in primo piano',
      'Genres & Moods': 'Generi e mood',
      'New Releases': 'Nuove uscite',
      'News': 'Notizie',
      'followers': 'follower',
      'All': 'Tutti',
      'View all': 'Visualizza tutto',
      'Article': 'Articolo',
      'Related Articles': 'Articoli correlati',
      'Other Related': 'Altri correlati',
      'Click here to read the article': 'Clicca qui per leggere l\'articolo',
      'notAvailableOffline': 'Naviga non \xE8 disponibile offline.',
      'loadingError': 'In questo momento non \xE8 possibile caricare Naviga. ',
      'Try again': 'Riprova',
      'Recommended for you': 'Consigliati per te',
      'More': 'Altro',
      'social-chart.title': 'Brani top degli amici',
      'social-chart.description': 'I brani pi\xF9 ascoltati nella tua rete negli ultimi 7 giorni.',
      'Highlights': 'In evidenza'
    });
  },
  './lang/ja.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/ja.loc/strings/main.lang', {
      'Browse': '\u30D6\u30E9\u30A6\u30BA',
      'All Subgenres': '\u3059\u3079\u3066\u306E\u30B5\u30D6\u30B8\u30E3\u30F3\u30EB',
      'All Subcategories': '\u3059\u3079\u3066\u306E\u30B5\u30D6\u30AB\u30C6\u30B4\u30EA',
      'Playlists': '\u30D7\u30EC\u30A4\u30EA\u30B9\u30C8',
      'Overview': '\u6982\u8981',
      'Toplists': '\u30C8\u30C3\u30D7\u30EA\u30B9\u30C8',
      'Discover': '\u30C7\u30A3\u30B9\u30AB\u30D0\u30FC',
      'Featured Playlists': '\u7279\u96C6\u30D7\u30EC\u30A4\u30EA\u30B9\u30C8',
      'Genres & Moods': '\u30B8\u30E3\u30F3\u30EB\uFF06\u6C17\u5206',
      'New Releases': '\u30CB\u30E5\u30FC\u30EA\u30EA\u30FC\u30B9',
      'News': '\u30CB\u30E5\u30FC\u30B9',
      'followers': '\u30D5\u30A9\u30ED\u30EF\u30FC',
      'All': '\u3059\u3079\u3066',
      'View all': '\u3059\u3079\u3066\u8868\u793A',
      'Article': '\u8A18\u4E8B',
      'Related Articles': '\u95A2\u9023\u8A18\u4E8B',
      'Other Related': '\u305D\u306E\u4ED6\u306E\u95A2\u9023\u60C5\u5831',
      'Click here to read the article': '\u3053\u3061\u3089\u3092\u30AF\u30EA\u30C3\u30AF\u3057\u3066\u8A18\u4E8B\u3092\u3054\u78BA\u8A8D\u304F\u3060\u3055\u3044',
      'notAvailableOffline': '\u30D6\u30E9\u30A6\u30BA\u306F\u30AA\u30D5\u30E9\u30A4\u30F3\u3067\u306F\u5229\u7528\u3067\u304D\u307E\u305B\u3093\u3002',
      'loadingError': '\u30D6\u30E9\u30A6\u30BA\u306F\u73FE\u5728\u8AAD\u307F\u8FBC\u3081\u307E\u305B\u3093\u3002',
      'Try again': '\u518D\u8A66\u884C',
      'Recommended for you': '\u30E6\u30FC\u30B6\u30FC\u306B\u304A\u3059\u3059\u3081',
      'More': '\u8FFD\u52A0',
      'social-chart.title': '\u53CB\u9054\u306E\u30C8\u30C3\u30D7\u30C8\u30E9\u30C3\u30AF',
      'social-chart.description': '\u904E\u53BB7\u65E5\u9593\u306B\u30CD\u30C3\u30C8\u30EF\u30FC\u30AF\u5185\u3067\u6700\u3082\u518D\u751F\u3055\u308C\u305F\u66F2\u3002',
      'Highlights': '\u30CF\u30A4\u30E9\u30A4\u30C8'
    });
  },
  './lang/ko.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/ko.loc/strings/main.lang', {
      'Browse': 'Browse',
      'All Subgenres': 'All Subgenres',
      'All Subcategories': 'All Subcategories',
      'Playlists': 'Playlists',
      'Overview': 'Overview',
      'Toplists': 'Top Lists',
      'Discover': 'Discover',
      'Featured Playlists': 'Featured Playlists',
      'Genres & Moods': 'Genres & Moods',
      'New Releases': 'New Releases',
      'News': 'News',
      'followers': 'followers',
      'All': 'All',
      'View all': 'View all',
      'Article': 'Article',
      'Related Articles': 'Related Articles',
      'Other Related': 'Other Related',
      'Click here to read the article': 'Click here to read the article',
      'notAvailableOffline': 'Browse is not available offline.',
      'loadingError': 'Browse can\'t be loaded at this moment.',
      'Try again': 'Try again',
      'Recommended for you': 'Recommended for you',
      'More': 'More',
      'social-chart.title': 'Friends Top Tracks',
      'social-chart.description': 'The most played songs in your network over the last 7 days.',
      'Highlights': 'Highlights'
    });
  },
  './lang/nl.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/nl.loc/strings/main.lang', {
      'Browse': 'Bladeren',
      'All Subgenres': 'Alle subgenres',
      'All Subcategories': 'Alle subcategorie\xEBn',
      'Playlists': 'Afspeellijsten',
      'Overview': 'Overzicht',
      'Toplists': 'Toplijsten',
      'Discover': 'Ontdekken',
      'Featured Playlists': 'Afspeellijsten',
      'Genres & Moods': 'Genres en stemmingen',
      'New Releases': 'Nieuwe releases',
      'News': 'Nieuws',
      'followers': 'volgers',
      'All': 'Alles',
      'View all': 'Alles bekijken',
      'Article': 'Artikel',
      'Related Articles': 'Vergelijkbare artikelen',
      'Other Related': 'Overig vergelijkbaar',
      'Click here to read the article': 'Klik hier om het artikel te lezen',
      'notAvailableOffline': 'Bladeren is niet offline beschikbaar.',
      'loadingError': 'Bladeren kan op dit moment niet worden geladen. ',
      'Try again': 'Probeer het opnieuw',
      'Recommended for you': 'Aanbevolen voor jou',
      'More': 'Meer',
      'social-chart.title': 'Topnummers van je vrienden',
      'social-chart.description': 'De meest geluisterde nummers in jouw netwerk in de afgelopen 7 dagen.',
      'Highlights': 'Hoogtepunten'
    });
  },
  './lang/pl.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/pl.loc/strings/main.lang', {
      'Browse': 'Przegl\u0105daj',
      'All Subgenres': 'Wszystkie podgatunki',
      'All Subcategories': 'Wszystkie podkategorie',
      'Playlists': 'Playlisty',
      'Overview': 'Przegl\u0105d',
      'Toplists': 'Toplisty',
      'Discover': 'Odkrywaj',
      'Featured Playlists': 'Wybrane playlisty',
      'Genres & Moods': 'Gatunki i nastroje',
      'New Releases': 'Nowe wydania',
      'News': 'Wiadomo\u015Bci',
      'followers': 'obserwatorzy',
      'All': 'Wszystko',
      'View all': 'Poka\u017C wszystkie',
      'Article': 'Artyku\u0142',
      'Related Articles': 'Podobne artyku\u0142y',
      'Other Related': 'Inne podobne',
      'Click here to read the article': 'Kliknij tutaj, aby przeczyta\u0107 artyku\u0142',
      'notAvailableOffline': 'Przegl\u0105danie jest niedost\u0119pne w trybie offline.',
      'loadingError': 'W tej chwili nie mo\u017Cna za\u0142adowa\u0107 przegl\u0105dania.',
      'Try again': 'Spr\xF3buj ponownie',
      'Recommended for you': 'Polecone dla Ciebie',
      'More': 'Wi\u0119cej',
      'social-chart.title': 'Najlepsze utwory znajomych',
      'social-chart.description': 'Utwory najcz\u0119\u015Bciej odtwarzane w Twojej sieci w ci\u0105gu ostatnich 7 dni.',
      'Highlights': 'Rekomendacje'
    });
  },
  './lang/pt-br.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/pt-br.loc/strings/main.lang', {
      'Browse': 'Navegar',
      'All Subgenres': 'Todos os subg\xEAneros',
      'All Subcategories': 'Todas as subcategorias',
      'Playlists': 'Playlists',
      'Overview': 'Vis\xE3o geral',
      'Toplists': 'Mais tocadas',
      'Discover': 'Descobrir',
      'Featured Playlists': 'Em destaque',
      'Genres & Moods': 'G\xEAneros & Momentos',
      'New Releases': 'Lan\xE7amentos',
      'News': 'Not\xEDcias',
      'followers': 'seguidores',
      'All': 'Todas',
      'View all': 'Ver tudo',
      'Article': 'Artigo',
      'Related Articles': 'Artigos relacionados',
      'Other Related': 'Outros relacionados',
      'Click here to read the article': 'Clique aqui para ler o artigo ',
      'notAvailableOffline': 'O recurso Navegar n\xE3o est\xE1 dispon\xEDvel offline.',
      'loadingError': 'N\xE3o \xE9 poss\xEDvel carregar o recurso Navegar agora. ',
      'Try again': 'Tente de novo',
      'Recommended for you': 'Recomendado para voc\xEA',
      'More': 'Mais',
      'social-chart.title': 'As mais tocadas dos amigos',
      'social-chart.description': 'As m\xFAsicas mais tocadas na sua rede nos \xFAltimos 7 dias.',
      'Highlights': 'Destaques'
    });
  },
  './lang/ro.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/ro.loc/strings/main.lang', {
      'Browse': 'R\u0103sfoie\u015Fte',
      'All Subgenres': 'Toate subgenurile',
      'All Subcategories': 'Toate subcategoriile',
      'Playlists': 'Playlisturi',
      'Overview': 'Prezentare general\u0103',
      'Toplists': 'Liste de top',
      'Discover': 'Descoper\u0103',
      'Featured Playlists': 'Playlisturi recomandate',
      'Genres & Moods': 'Genuri \u015Fi dispozi\u0163ii muzicale',
      'New Releases': 'Lans\u0103ri recente',
      'News': '\u015Etiri',
      'followers': 'persoane care urm\u0103resc',
      'All': 'Toate',
      'View all': 'Vizualizeaz\u0103-le pe toate',
      'Article': 'Articol',
      'Related Articles': 'Articole similare',
      'Other Related': 'Altele similare',
      'Click here to read the article': 'F\u0103 clic aici pentru a citi articolul',
      'notAvailableOffline': 'Browse is not available offline.',
      'loadingError': 'Browse can\'t be loaded at this moment.',
      'Try again': '\xCEncearc\u0103 din nou',
      'Recommended for you': 'Recomandat pentru tine',
      'More': 'Mai mult',
      'social-chart.title': 'Friends Top Tracks',
      'social-chart.description': 'The most played songs in your network over the last 7 days.',
      'Highlights': 'Elemente esen\u0163iale'
    });
  },
  './lang/ru.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/ru.loc/strings/main.lang', {
      'Browse': '\u041E\u0431\u0437\u043E\u0440',
      'All Subgenres': '\u0412\u0441\u0435 \u043F\u043E\u0434\u0436\u0430\u043D\u0440\u044B',
      'All Subcategories': '\u0412\u0441\u0435 \u043F\u043E\u0434\u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u0438',
      'Playlists': '\u041F\u043B\u0435\u0439\u043B\u0438\u0441\u0442\u044B',
      'Overview': '\u041E\u0431\u0437\u043E\u0440',
      'Toplists': '\u041B\u0443\u0447\u0448\u0438\u0435 \u0441\u043F\u0438\u0441\u043A\u0438',
      'Discover': '\u041F\u0440\u0435\u0434\u043B\u043E\u0436\u0435\u043D\u0438\u044F',
      'Featured Playlists': '\u0420\u0435\u043A\u043E\u043C\u0435\u043D\u0434\u0443\u0435\u043C\u044B\u0435 \u043F\u043B\u0435\u0439\u043B\u0438\u0441\u0442\u044B',
      'Genres & Moods': '\u0416\u0430\u043D\u0440\u044B \u0438 \u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043D\u0438\u044F',
      'New Releases': '\u041D\u043E\u0432\u044B\u0435 \u0440\u0435\u043B\u0438\u0437\u044B',
      'News': '\u041D\u043E\u0432\u043E\u0441\u0442\u0438',
      'followers': '\u043F\u043E\u0434\u043F\u0438\u0441\u0447\u0438\u043A\u0438',
      'All': '\u0412\u0441\u0435',
      'View all': '\u041F\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u0432\u0441\u0435',
      'Article': '\u0421\u0442\u0430\u0442\u044C\u044F',
      'Related Articles': '\u0421\u0442\u0430\u0442\u044C\u0438 \u043F\u043E \u0442\u0435\u043C\u0435',
      'Other Related': '\u0414\u0440\u0443\u0433\u043E\u0435 \u043F\u043E\u0445\u043E\u0436\u0435\u0435',
      'Click here to read the article': '\u0429\u0435\u043B\u043A\u043D\u0438\u0442\u0435 \u0437\u0434\u0435\u0441\u044C, \u0447\u0442\u043E\u0431\u044B \u043F\u0440\u043E\u0447\u0438\u0442\u0430\u0442\u044C \u0441\u0442\u0430\u0442\u044C\u044E',
      'notAvailableOffline': '\u041E\u0431\u0437\u043E\u0440 \u043D\u0435\u0434\u043E\u0441\u0442\u0443\u043F\u0435\u043D \u0432 \u043E\u0444\u043B\u0430\u0439\u043D-\u0440\u0435\u0436\u0438\u043C\u0435.',
      'loadingError': '\u0412\u0440\u0435\u043C\u0435\u043D\u043D\u043E \u043D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u0440\u0430\u0437\u0434\u0435\u043B "\u041E\u0431\u0437\u043E\u0440".',
      'Try again': '\u041F\u043E\u0432\u0442\u043E\u0440\u0438\u0442\u0435 \u043F\u043E\u043F\u044B\u0442\u043A\u0443',
      'Recommended for you': '\u0420\u0435\u043A\u043E\u043C\u0435\u043D\u0434\u0443\u0435\u043C \u0432\u0430\u043C',
      'More': '\u0415\u0449\u0435',
      'social-chart.title': '\u041B\u0443\u0447\u0448\u0438\u0435 \u0442\u0440\u0435\u043A\u0438 \u0443 \u0434\u0440\u0443\u0437\u0435\u0439',
      'social-chart.description': '\u041A\u043E\u043C\u043F\u043E\u0437\u0438\u0446\u0438\u0438, \u043D\u0430\u0438\u0431\u043E\u043B\u0435\u0435 \u043F\u043E\u043F\u0443\u043B\u044F\u0440\u043D\u044B\u0435 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0441\u0435\u0442\u0438 \u0437\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0435 7 \u0434\u043D\u0435\u0439.',
      'Highlights': '\u0421\u0430\u043C\u043E\u0435 \u0438\u043D\u0442\u0435\u0440\u0435\u0441\u043D\u043E\u0435'
    });
  },
  './lang/sv.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/sv.loc/strings/main.lang', {
      'Browse': 'Start',
      'All Subgenres': 'Alla undergenrer',
      'All Subcategories': 'Alla underkategorier',
      'Playlists': 'Spellistor',
      'Overview': '\xD6versikt',
      'Toplists': 'Topplistor',
      'Discover': 'Uppt\xE4ck',
      'Featured Playlists': 'Rekommenderade spellistor',
      'Genres & Moods': 'Genrer och teman',
      'New Releases': 'Nya releaser',
      'News': 'Nyheter',
      'followers': 'f\xF6ljare',
      'All': 'Alla',
      'View all': 'Visa alla',
      'Article': 'Artikel',
      'Related Articles': 'Liknande artiklar',
      'Other Related': 'Annat relaterat',
      'Click here to read the article': 'Klicka h\xE4r om du vill l\xE4sa artikeln',
      'notAvailableOffline': 'Start \xE4r inte tillg\xE4nglig offline.',
      'loadingError': 'Det g\xE5r inte att l\xE4sa in Start just nu.',
      'Try again': 'F\xF6rs\xF6k igen',
      'Recommended for you': 'Rekommenderas f\xF6r dig',
      'More': 'Mer',
      'social-chart.title': 'Popul\xE4ra sp\xE5r bland v\xE4nner',
      'social-chart.description': 'De mest spelade l\xE5tarna i ditt n\xE4tverk under de senaste sju dagarna.',
      'Highlights': 'H\xF6jdpunkter'
    });
  },
  './lang/ta.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/ta.loc/strings/main.lang', {
      'Browse': 'Browse',
      'All Subgenres': 'All Subgenres',
      'All Subcategories': 'All Subcategories',
      'Playlists': 'Playlists',
      'Overview': 'Overview',
      'Toplists': 'Top Lists',
      'Discover': 'Discover',
      'Featured Playlists': 'Featured Playlists',
      'Genres & Moods': 'Genres & Moods',
      'New Releases': 'New Releases',
      'News': 'News',
      'followers': 'followers',
      'All': 'All',
      'View all': 'View all',
      'Article': 'Article',
      'Related Articles': 'Related Articles',
      'Other Related': 'Other Related',
      'Click here to read the article': 'Click here to read the article',
      'notAvailableOffline': 'Browse is not available offline.',
      'loadingError': 'Browse can\'t be loaded at this moment.',
      'Try again': 'Try again',
      'Recommended for you': 'Recommended for you',
      'More': 'More',
      'social-chart.title': 'Friends Top Tracks',
      'social-chart.description': 'The most played songs in your network over the last 7 days.',
      'Highlights': 'Highlights'
    });
  },
  './lang/th.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/th.loc/strings/main.lang', {
      'Browse': '\u0E40\u0E25\u0E37\u0E2D\u0E01\u0E14\u0E39',
      'All Subgenres': '\u0E41\u0E19\u0E27\u0E40\u0E1E\u0E25\u0E07\u0E22\u0E48\u0E2D\u0E22\u0E17\u0E31\u0E49\u0E07\u0E2B\u0E21\u0E14',
      'All Subcategories': '\u0E1B\u0E23\u0E30\u0E40\u0E20\u0E17\u0E22\u0E48\u0E2D\u0E22\u0E17\u0E31\u0E49\u0E07\u0E2B\u0E21\u0E14',
      'Playlists': '\u0E40\u0E1E\u0E25\u0E22\u0E4C\u0E25\u0E34\u0E2A\u0E15\u0E4C',
      'Overview': '\u0E20\u0E32\u0E1E\u0E23\u0E27\u0E21',
      'Toplists': '\u0E23\u0E32\u0E22\u0E01\u0E32\u0E23\u0E2D\u0E31\u0E19\u0E14\u0E31\u0E1A\u0E15\u0E49\u0E19\u0E46',
      'Discover': '\u0E04\u0E49\u0E19\u0E1E\u0E1A',
      'Featured Playlists': '\u0E40\u0E1E\u0E25\u0E22\u0E4C\u0E25\u0E34\u0E2A\u0E15\u0E4C\u0E41\u0E19\u0E30\u0E19\u0E33',
      'Genres & Moods': '\u0E41\u0E19\u0E27\u0E40\u0E1E\u0E25\u0E07\u0E41\u0E25\u0E30\u0E2D\u0E32\u0E23\u0E21\u0E13\u0E4C',
      'New Releases': '\u0E2D\u0E2D\u0E01\u0E43\u0E2B\u0E21\u0E48',
      'News': '\u0E02\u0E48\u0E32\u0E27\u0E2A\u0E32\u0E23',
      'followers': '\u0E1C\u0E39\u0E49\u0E15\u0E34\u0E14\u0E15\u0E32\u0E21',
      'All': '\u0E17\u0E31\u0E49\u0E07\u0E2B\u0E21\u0E14',
      'View all': '\u0E14\u0E39\u0E17\u0E31\u0E49\u0E07\u0E2B\u0E21\u0E14',
      'Article': '\u0E1A\u0E17\u0E04\u0E27\u0E32\u0E21',
      'Related Articles': '\u0E1A\u0E17\u0E04\u0E27\u0E32\u0E21\u0E17\u0E35\u0E48\u0E43\u0E01\u0E25\u0E49\u0E40\u0E04\u0E35\u0E22\u0E07',
      'Other Related': ' \u0E17\u0E35\u0E48\u0E40\u0E01\u0E35\u0E48\u0E22\u0E27\u0E02\u0E49\u0E2D\u0E07\u0E2D\u0E37\u0E48\u0E19\u0E46',
      'Click here to read the article': '\u0E04\u0E25\u0E34\u0E01\u0E17\u0E35\u0E48\u0E19\u0E35\u0E48\u0E40\u0E1E\u0E37\u0E48\u0E2D\u0E2D\u0E48\u0E32\u0E19\u0E1A\u0E17\u0E04\u0E27\u0E32\u0E21',
      'notAvailableOffline': '\'\u0E40\u0E25\u0E37\u0E2D\u0E01\u0E14\u0E39\' \u0E44\u0E21\u0E48\u0E1E\u0E23\u0E49\u0E2D\u0E21\u0E43\u0E0A\u0E49\u0E07\u0E32\u0E19\u0E02\u0E13\u0E30\u0E2D\u0E2D\u0E1F\u0E44\u0E25\u0E19\u0E4C',
      'loadingError': '\u0E44\u0E21\u0E48\u0E2A\u0E32\u0E21\u0E32\u0E23\u0E16\u0E42\u0E2B\u0E25\u0E14 \'\u0E40\u0E25\u0E37\u0E2D\u0E01\u0E14\u0E39\' \u0E43\u0E19\u0E40\u0E27\u0E25\u0E32\u0E19\u0E35\u0E49',
      'Try again': '\u0E25\u0E2D\u0E07\u0E2D\u0E35\u0E01\u0E04\u0E23\u0E31\u0E49\u0E07',
      'Recommended for you': '\u0E41\u0E19\u0E30\u0E19\u0E33\u0E2A\u0E33\u0E2B\u0E23\u0E31\u0E1A\u0E04\u0E38\u0E13',
      'More': '\u0E40\u0E1E\u0E34\u0E48\u0E21\u0E40\u0E15\u0E34\u0E21',
      'social-chart.title': 'Friends Top Tracks',
      'social-chart.description': 'The most played songs in your network over the last 7 days.',
      'Highlights': '\u0E44\u0E2E\u0E44\u0E25\u0E15\u0E4C'
    });
  },
  './lang/tr.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/tr.loc/strings/main.lang', {
      'Browse': 'G\xF6zat',
      'All Subgenres': 'T\xFCm Alt T\xFCrler',
      'All Subcategories': 'T\xFCm Alt Kategoriler',
      'Playlists': '\xC7alma listeleri',
      'Overview': 'Genel G\xF6r\xFCn\xFCm',
      'Toplists': 'En \xC7ok Dinlenen Listeler',
      'Discover': 'Ke\u015Ffet',
      'Featured Playlists': '\xD6ne \xC7\u0131kan \xC7alma Listeleri',
      'Genres & Moods': 'T\xFCrler ve Ruh Halleri',
      'New Releases': 'Yeni \xC7\u0131kanlar',
      'News': 'Yenilikler',
      'followers': 'takip\xE7i',
      'All': 'T\xFCm\xFC',
      'View all': 'T\xFCm\xFCn\xFC g\xF6r\xFCnt\xFCle',
      'Article': 'Makale',
      'Related Articles': 'Benzer Makaleler',
      'Other Related': 'Di\u011Fer Benzer Sonu\xE7lar',
      'Click here to read the article': 'Makaleyi okumak i\xE7in buraya t\u0131kla',
      'notAvailableOffline': 'G\xF6zat \xE7evrimd\u0131\u015F\u0131 kullan\u0131lamaz.',
      'loadingError': '\u015Eu anda G\xF6zat y\xFCklenemiyor.',
      'Try again': 'Tekrar dene',
      'Recommended for you': 'Senin i\xE7in \xF6nerilenler',
      'More': 'Daha fazla',
      'social-chart.title': 'Arkada\u015Flar\u0131n\u0131n En Sevdi\u011Fi Par\xE7alar',
      'social-chart.description': 'A\u011F\u0131nda son 7 g\xFCn i\xE7inde en \xE7ok dinlenen \u015Fark\u0131lar.',
      'Highlights': '\xD6ne \xC7\u0131kanlar'
    });
  },
  './lang/zh-hant.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/zh-hant.loc/strings/main.lang', {
      'Browse': '\u700F\u89BD',
      'All Subgenres': '\u6240\u6709\u6B21\u98A8\u683C',
      'All Subcategories': '\u6240\u6709\u6B21\u985E\u578B',
      'Playlists': '\u64AD\u653E\u6E05\u55AE',
      'Overview': '\u6458\u8981',
      'Toplists': '\u7576\u7D05\u6E05\u55AE',
      'Discover': '\u767C\u6398',
      'Featured Playlists': '\u7CBE\u9078\u64AD\u653E\u6E05\u55AE',
      'Genres & Moods': '\u98A8\u683C\u8207\u5FC3\u60C5',
      'New Releases': '\u6700\u65B0\u767C\u884C',
      'News': '\u6700\u65B0\u6D88\u606F',
      'followers': '\u7C89\u7D72',
      'All': '\u6240\u6709',
      'View all': '\u6AA2\u8996\u5168\u90E8',
      'Article': '\u6587\u7AE0',
      'Related Articles': '\u76F8\u95DC\u6587\u7AE0',
      'Other Related': '\u5176\u4ED6\u76F8\u95DC\u5167\u5BB9',
      'Click here to read the article': '\u6309\u4E00\u4E0B\u9019\u88E1\u4EE5\u95B1\u8B80\u6587\u7AE0',
      'notAvailableOffline': '\u96E2\u7DDA\u6A21\u5F0F\u4E0B\u7121\u6CD5\u4F7F\u7528\u700F\u89BD\u3002',
      'loadingError': '\u76EE\u524D\u7121\u6CD5\u8F09\u5165\u700F\u89BD\u9801\u9762\u3002',
      'Try again': '\u518D\u8A66\u4E00\u6B21',
      'Recommended for you': '\u7D66\u4F60\u7684\u63A8\u85A6',
      'More': '\u66F4\u591A',
      'social-chart.title': '\u597D\u53CB\u6700\u611B\u6B4C\u66F2',
      'social-chart.description': '\u904E\u53BB 7 \u5929\u5728\u4F60\u7684\u793E\u7FA4\u7DB2\u8DEF\u6700\u53D7\u6B61\u8FCE\u7684\u6B4C\u66F2',
      'Highlights': '\u7126\u9EDE'
    });
  },
  './lang/zsm.loc/strings/main.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/zsm.loc/strings/main.lang', {
      'Browse': 'Semak imbas',
      'All Subgenres': 'Semua Subgenre',
      'All Subcategories': 'Semua Subkategori',
      'Playlists': 'Senarai main',
      'Overview': 'Gambaran',
      'Toplists': 'Senarai Paling Popular',
      'Discover': 'Temui',
      'Featured Playlists': 'Senarai Main Yang Ditampilkan',
      'Genres & Moods': ' Genre & Suasana Hati',
      'New Releases': 'Keluaran Baru',
      'News': 'Berita',
      'followers': 'pengikut',
      'All': 'Semua',
      'View all': 'Lihat semua',
      'Article': 'Artikel',
      'Related Articles': 'Artikel berkaitan',
      'Other Related': 'Lain-lain Berkaitan',
      'Click here to read the article': 'Klik di sini untuk membaca artikel',
      'notAvailableOffline': 'Layari tidak tersedia semasa offline.',
      'loadingError': 'Layari tidak boleh dimuat pada masa ini. ',
      'Try again': 'Cuba lagi',
      'Recommended for you': 'Dicadangkan untuk anda',
      'More': 'Lebih lagi',
      'social-chart.title': 'Lagu Paling Popular Rakan',
      'social-chart.description': 'Lagu paling banyak dimainkan dalam rangkaian anda sepanjang 7 hari yang lepas.',
      'Highlights': 'Sorotan'
    });
  },
  './lang/arb.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/arb.loc/strings/survey.lang', {
      'sTitle': 'Share your thoughts and help us build the world\'s greatest music service!',
      'sQ1Question': 'How likely is it that you\u2019d recommend Spotify to a friend or colleague?',
      'sQ1Negative': 'Not at all likely',
      'sQ1Positive': 'Extremely likely',
      'sQ2Question': 'Why do you feel that way?',
      'sQ3Question': 'Overall, how satisfied are you with Spotify?',
      'sQ3Negative': 'Very dissatisfied',
      'sQ3Positive': 'Very satisfied',
      'sSubmit': 'Submit survey',
      'sThanks': 'Thanks very much for your help. We appreciate your time.',
      'sTeam': 'The Spotify Team',
      'sClose': 'Close'
    });
  },
  './lang/bn.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/bn.loc/strings/survey.lang', {
      'sTitle': 'Share your thoughts and help us build the world\'s greatest music service!',
      'sQ1Question': 'How likely is it that you\u2019d recommend Spotify to a friend or colleague?',
      'sQ1Negative': 'Not at all likely',
      'sQ1Positive': 'Extremely likely',
      'sQ2Question': 'Why do you feel that way?',
      'sQ3Question': 'Overall, how satisfied are you with Spotify?',
      'sQ3Negative': 'Very dissatisfied',
      'sQ3Positive': 'Very satisfied',
      'sSubmit': 'Submit survey',
      'sThanks': 'Thanks very much for your help. We appreciate your time.',
      'sTeam': 'The Spotify Team',
      'sClose': 'Close'
    });
  },
  './lang/de.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/de.loc/strings/survey.lang', {
      'sTitle': 'Teile deine Ansichten und hilf uns dabei, den besten Musik-Service der Welt zu schaffen!',
      'sQ1Question': 'Wie wahrscheinlich ist es, dass du Spotify einem Freund oder Kollegen empfiehlst?',
      'sQ1Negative': 'Sehr unwahrscheinlich',
      'sQ1Positive': 'Sehr wahrscheinlich',
      'sQ2Question': 'Warum denkst du so?',
      'sQ3Question': 'Im Gro\xDFen und Ganzen, wie zufrieden bist du mit Spotify?',
      'sQ3Negative': 'Sehr unzufrieden',
      'sQ3Positive': 'Sehr zufrieden',
      'sSubmit': 'Umfrage abschlie\xDFen',
      'sThanks': 'Danke f\xFCr deine Hilfe. Wir wissen es zu sch\xE4tzen, dass du dir Zeit genommen hast.',
      'sTeam': 'Das Spotify Team',
      'sClose': 'Schlie\xDFen'
    });
  },
  './lang/el.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/el.loc/strings/survey.lang', {
      'sTitle': '\u039C\u03BF\u03B9\u03C1\u03AC\u03C3\u03BF\u03C5 \u03C4\u03B9\u03C2 \u03C3\u03BA\u03AD\u03C8\u03B5\u03B9\u03C2 \u03C3\u03BF\u03C5 \u03BA\u03B1\u03B9 \u03B2\u03BF\u03AE\u03B8\u03B7\u03C3\u03AD \u03BC\u03B1\u03C2 \u03BD\u03B1 \u03B4\u03B7\u03BC\u03B9\u03BF\u03C5\u03C1\u03B3\u03AE\u03C3\u03BF\u03C5\u03BC\u03B5 \u03C4\u03B7\u03BD \u03BA\u03B1\u03BB\u03CD\u03C4\u03B5\u03C1\u03B7 \u03C5\u03C0\u03B7\u03C1\u03B5\u03C3\u03AF\u03B1 \u03BC\u03BF\u03C5\u03C3\u03B9\u03BA\u03AE\u03C2 \u03C3\u03C4\u03BF\u03BD \u03BA\u03CC\u03C3\u03BC\u03BF!',
      'sQ1Question': '\u03A0\u03CC\u03C3\u03BF \u03C0\u03B9\u03B8\u03B1\u03BD\u03CC \u03B5\u03AF\u03BD\u03B1\u03B9 \u03BD\u03B1 \u03C0\u03C1\u03BF\u03C4\u03B5\u03AF\u03BD\u03B5\u03B9\u03C2 \u03C4\u03BF Spotify \u03C3\u03B5 \u03AD\u03BD\u03B1 \u03C6\u03AF\u03BB\u03BF \u03AE \u03C3\u03C5\u03BD\u03AC\u03B4\u03B5\u03BB\u03C6\u03BF;',
      'sQ1Negative': '\u039A\u03B1\u03B8\u03CC\u03BB\u03BF\u03C5 \u03C0\u03B9\u03B8\u03B1\u03BD\u03CC',
      'sQ1Positive': '\u0395\u03BE\u03B1\u03B9\u03C1\u03B5\u03C4\u03B9\u03BA\u03AC \u03C0\u03B9\u03B8\u03B1\u03BD\u03CC',
      'sQ2Question': '\u0393\u03B9\u03B1\u03C4\u03AF \u03AD\u03C7\u03B5\u03B9\u03C2 \u03B1\u03C5\u03C4\u03AE \u03C4\u03B7\u03BD \u03AC\u03C0\u03BF\u03C8\u03B7;',
      'sQ3Question': '\u03A3\u03C5\u03BD\u03BF\u03BB\u03B9\u03BA\u03AC, \u03C0\u03CC\u03C3\u03BF \u03B9\u03BA\u03B1\u03BD\u03BF\u03C0\u03BF\u03B9\u03B7\u03BC\u03AD\u03BD\u03BF\u03C2 \u03B5\u03AF\u03C3\u03B1\u03B9 \u03BC\u03B5 \u03C4\u03BF Spotify;',
      'sQ3Negative': '\u03A0\u03BF\u03BB\u03CD \u03B4\u03C5\u03C3\u03B1\u03C1\u03B5\u03C3\u03C4\u03B7\u03BC\u03AD\u03BD\u03BF\u03C2',
      'sQ3Positive': '\u03A0\u03BF\u03BB\u03CD \u03B9\u03BA\u03B1\u03BD\u03BF\u03C0\u03BF\u03B9\u03B7\u03BC\u03AD\u03BD\u03BF\u03C2',
      'sSubmit': '\u03A5\u03C0\u03BF\u03B2\u03BF\u03BB\u03AE \u03AD\u03C1\u03B5\u03C5\u03BD\u03B1\u03C2',
      'sThanks': '\u0395\u03C5\u03C7\u03B1\u03C1\u03B9\u03C3\u03C4\u03BF\u03CD\u03BC\u03B5 \u03C0\u03BF\u03BB\u03CD \u03B3\u03B9\u03B1 \u03C4\u03B7 \u03B2\u03BF\u03AE\u03B8\u03B5\u03B9\u03AC \u03C3\u03BF\u03C5, \u03BA\u03B1\u03B9 \u03B3\u03B9\u03B1 \u03C4\u03BF \u03C7\u03C1\u03CC\u03BD\u03BF \u03C0\u03BF\u03C5 \u03B4\u03B9\u03AD\u03B8\u03B5\u03C3\u03B5\u03C2.',
      'sTeam': '\u0397 \u03BF\u03BC\u03AC\u03B4\u03B1 \u03C4\u03BF\u03C5 Spotify',
      'sClose': '\u039A\u03BB\u03B5\u03AF\u03C3\u03B9\u03BC\u03BF'
    });
  },
  './lang/en.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/en.loc/strings/survey.lang', {
      'sTitle': 'Share your thoughts and help us build the world\'s greatest music service!',
      'sQ1Question': 'How likely is it that you\u2019d recommend Spotify to a friend or colleague?',
      'sQ1Negative': 'Not at all likely',
      'sQ1Positive': 'Extremely likely',
      'sQ2Question': 'Why do you feel that way?',
      'sQ3Question': 'Overall, how satisfied are you with Spotify?',
      'sQ3Negative': 'Very dissatisfied',
      'sQ3Positive': 'Very satisfied',
      'sSubmit': 'Submit survey',
      'sThanks': 'Thanks very much for your help. We appreciate your time.',
      'sTeam': 'The Spotify Team',
      'sClose': 'Close'
    });
  },
  './lang/es-419.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/es-419.loc/strings/survey.lang', {
      'sTitle': 'Comparte tus ideas y ay\xFAdanos a construir el mejor servicio de m\xFAsica del mundo',
      'sQ1Question': '\xBFRecomendar\xEDas Spotify a tus amigos?',
      'sQ1Negative': 'Nada probable',
      'sQ1Positive': 'Muy probable',
      'sQ2Question': '\xBFPor qu\xE9 te sientes as\xED?',
      'sQ3Question': 'En general, \xBFqu\xE9 tan satisfecho est\xE1s con Spotify?',
      'sQ3Negative': 'Muy insatisfecho',
      'sQ3Positive': 'Muy satisfecho',
      'sSubmit': 'Enviar encuesta',
      'sThanks': 'Muchas gracias por tu colaboraci\xF3n. Valoramos mucho el tiempo invertido.',
      'sTeam': 'El equipo Spotify',
      'sClose': 'Cerrar'
    });
  },
  './lang/es.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/es.loc/strings/survey.lang', {
      'sTitle': '\xA1Comparte tus opiniones y ay\xFAdanos a desarrollar el servicio de m\xFAsica m\xE1s grande del mundo!',
      'sQ1Question': '\xBFQu\xE9 probabilidad hay de que recomiendes Spotify a un amigo o compa\xF1ero?',
      'sQ1Negative': 'Ninguna',
      'sQ1Positive': 'Muy alta',
      'sQ2Question': '\xBFPor qu\xE9 opinas as\xED?',
      'sQ3Question': 'En general, \xBFcu\xE1l es tu nivel de satisfacci\xF3n con Spotify?',
      'sQ3Negative': 'Muy poca satisfacci\xF3n',
      'sQ3Positive': 'Mucha satisfacci\xF3n',
      'sSubmit': 'Enviar encuesta.',
      'sThanks': 'Tu ayuda es muy importante para nosotros. Muchas gracias por el tiempo que nos has dedicado.',
      'sTeam': 'El equipo Spotify',
      'sClose': 'Cerrar'
    });
  },
  './lang/fi.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/fi.loc/strings/survey.lang', {
      'sTitle': 'Jaa mielipiteesi ja auta meit\xE4 rakentamaan maailman paras musiikkipalvelu!',
      'sQ1Question': 'Suosittelisiko Spotifyta yst\xE4v\xE4lle tai ty\xF6kaverille?',
      'sQ1Negative': 'Todenn\xE4k\xF6isesti en',
      'sQ1Positive': 'Todenn\xE4k\xF6isesti kyll\xE4',
      'sQ2Question': 'Miksi n\xE4in?',
      'sQ3Question': 'Miten tyytyv\xE4inen olet Spotifyhin yleisesti ottaen?',
      'sQ3Negative': 'Hyvin tyytym\xE4t\xF6n',
      'sQ3Positive': 'Hyvin tyytyv\xE4inen',
      'sSubmit': 'L\xE4het\xE4 vastaukset',
      'sThanks': 'Kiitos vastauksistasi. Niist\xE4 on meille paljon apua.',
      'sTeam': 'Spotify-tiimi',
      'sClose': 'Sulje'
    });
  },
  './lang/fr.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/fr.loc/strings/survey.lang', {
      'sTitle': 'Donnez-nous votre avis et aidez-nous \xE0 cr\xE9er le meilleur service de musique au monde\xA0!',
      'sQ1Question': 'Quelle est la probabilit\xE9 que vous recommandiez Spotify \xE0 un ami ou coll\xE8gue\xA0?',
      'sQ1Negative': 'Tr\xE8s peu probable',
      'sQ1Positive': 'Tr\xE8s probable',
      'sQ2Question': 'Pour quelle raison\xA0?',
      'sQ3Question': 'Dans l\'ensemble, quel est votre degr\xE9 de satisfaction concernant Spotify\xA0?',
      'sQ3Negative': 'Tr\xE8s insatisfait',
      'sQ3Positive': 'Tr\xE8s satisfait',
      'sSubmit': 'Soumettre le sondage',
      'sThanks': 'Merci beaucoup pour votre aide  et pour votre disponibilit\xE9.',
      'sTeam': 'L\'\xE9quipe Spotify',
      'sClose': 'Fermer'
    });
  },
  './lang/fr-ca.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/fr-ca.loc/strings/survey.lang', {
      'sTitle': 'Donnez-nous votre avis et aidez-nous \xE0 cr\xE9er le meilleur service de musique au monde!',
      'sQ1Question': 'Quelle est la probabilit\xE9 que vous recommandiez Spotify \xE0 un ami ou \xE0 un coll\xE8gue?',
      'sQ1Negative': 'Tr\xE8s peu probable',
      'sQ1Positive': 'Tr\xE8s probable',
      'sQ2Question': 'Pour quelles raisons?',
      'sQ3Question': 'Dans l\'ensemble, quel est votre degr\xE9 de satisfaction concernant Spotify?',
      'sQ3Negative': 'Tr\xE8s insatisfait',
      'sQ3Positive': 'Tr\xE8s satisfait',
      'sSubmit': 'Soumettre le sondage',
      'sThanks': 'Merci beaucoup pour votre aide  et pour votre disponibilit\xE9.',
      'sTeam': 'L\'\xE9quipe Spotify',
      'sClose': 'Fermer'
    });
  },
  './lang/hi.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/hi.loc/strings/survey.lang', {
      'sTitle': 'Share your thoughts and help us build the world\'s greatest music service!',
      'sQ1Question': 'How likely is it that you\u2019d recommend Spotify to a friend or colleague?',
      'sQ1Negative': 'Not at all likely',
      'sQ1Positive': 'Extremely likely',
      'sQ2Question': 'Why do you feel that way?',
      'sQ3Question': 'Overall, how satisfied are you with Spotify?',
      'sQ3Negative': 'Very dissatisfied',
      'sQ3Positive': 'Very satisfied',
      'sSubmit': 'Submit survey',
      'sThanks': 'Thanks very much for your help. We appreciate your time.',
      'sTeam': 'The Spotify Team',
      'sClose': 'Close'
    });
  },
  './lang/hu.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/hu.loc/strings/survey.lang', {
      'sTitle': 'Oszd meg gondolataidat, \xE9s seg\xEDts l\xE9trehozni a vil\xE1g legnagyszer\u0171bb zeneszolg\xE1ltat\xE1s\xE1t!',
      'sQ1Question': 'Mennyire val\xF3sz\xEDn\u0171, hogy aj\xE1nlani fogod a Spotifyt egy bar\xE1todnak vagy munkat\xE1rsadnak?',
      'sQ1Negative': 'Egy\xE1ltal\xE1n nem val\xF3sz\xEDn\u0171',
      'sQ1Positive': 'Nagyon val\xF3sz\xEDn\u0171',
      'sQ2Question': 'Mi\xE9rt \xE9rzed \xEDgy?',
      'sQ3Question': '\xD6sszess\xE9g\xE9ben mennyire vagy el\xE9gedett a Spotify szolg\xE1ltat\xE1ssal?',
      'sQ3Negative': 'Nagyon el\xE9gedetlen',
      'sQ3Positive': 'Nagyon el\xE9gedett',
      'sSubmit': 'Felm\xE9r\xE9s bek\xFCld\xE9se',
      'sThanks': 'Nagyon k\xF6sz\xF6nj\xFCk a seg\xEDts\xE9ged. Nagyra \xE9rt\xE9kelj\xFCk az ezzel t\xF6lt\xF6tt id\u0151det.',
      'sTeam': 'A Spotify-csapat',
      'sClose': 'Bez\xE1r\xE1s'
    });
  },
  './lang/id.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/id.loc/strings/survey.lang', {
      'sTitle': 'Berikan pendapat Anda dan bantu kami memberikan layanan musik terbaik di dunia!',
      'sQ1Question': 'Seberapa mungkinkah Anda akan menyarankan Spotify kepada teman atau rekan kerja?',
      'sQ1Negative': 'Sama sekali tidak mungkin',
      'sQ1Positive': 'Sangat mungkin',
      'sQ2Question': 'Mengapa Anda bisa berpikir demikian?',
      'sQ3Question': 'Secara keseluruhan, seberapa puaskah Anda dengan layanan Spotify?',
      'sQ3Negative': 'Sangat tidak puas',
      'sQ3Positive': 'Sangat puas',
      'sSubmit': 'Serahkan survei',
      'sThanks': 'Terima kasih banyak atas bantuan Anda. Kami hargai waktu yang telah Anda luangkan.',
      'sTeam': 'Tim Spotify',
      'sClose': 'Tutup'
    });
  },
  './lang/it.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/it.loc/strings/survey.lang', {
      'sTitle': 'Condividi i tuoi pensieri e aiutaci a creare il miglior servizio musicale del mondo!',
      'sQ1Question': 'Consiglieresti Spotify a un amico o un collega?',
      'sQ1Negative': 'Molto improbabile',
      'sQ1Positive': 'Estremamente probabile',
      'sQ2Question': 'Spiega il motivo',
      'sQ3Question': 'In generale, in che misura puoi dirti soddisfatto di Spotify?',
      'sQ3Negative': 'Molto insoddisfatto',
      'sQ3Positive': 'Molto soddisfatto',
      'sSubmit': 'Invia sondaggio',
      'sThanks': 'Grazie per il tuo aiuto e per il tempo che ci hai dedicato.',
      'sTeam': 'Il Team Spotify',
      'sClose': 'Chiudi'
    });
  },
  './lang/ja.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/ja.loc/strings/survey.lang', {
      'sTitle': '\u4E16\u754C\u6700\u5927\u306E\u97F3\u697D\u30B5\u30FC\u30D3\u30B9\u306E\u5411\u4E0A\u306E\u305F\u3081\u3001\u610F\u898B\u3092\u805E\u304B\u305B\u3066\u304F\u3060\u3055\u3044\uFF01',
      'sQ1Question': '\u53CB\u9054\u3084\u540C\u50DA\u306BSpotify\u3092\u85A6\u3081\u305F\u3044\uFF1F',
      'sQ1Negative': '\u5168\u7136\u85A6\u3081\u305F\u304F\u306A\u3044',
      'sQ1Positive': '\u7D76\u5BFE\u85A6\u3081\u305F\u3044',
      'sQ2Question': '\u305D\u3046\u601D\u3063\u305F\u7406\u7531\u306F\u306A\u3093\u3067\u3059\u304B\uFF1F',
      'sQ3Question': 'Spotify\u306E\u5168\u4F53\u7684\u306A\u6E80\u8DB3\u5EA6\u3092\u6559\u3048\u3066\u304F\u3060\u3055\u3044\u3002',
      'sQ3Negative': '\u3068\u3066\u3082\u4E0D\u6E80',
      'sQ3Positive': '\u3068\u3066\u3082\u6E80\u8DB3',
      'sSubmit': '\u30A2\u30F3\u30B1\u30FC\u30C8\u3092\u63D0\u51FA',
      'sThanks': '\u3054\u5354\u529B\u3042\u308A\u304C\u3068\u3046\u3054\u3056\u3044\u307E\u3057\u305F\u3002',
      'sTeam': 'Spotify\u30C1\u30FC\u30E0',
      'sClose': '\u9589\u3058\u308B'
    });
  },
  './lang/ko.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/ko.loc/strings/survey.lang', {
      'sTitle': 'Share your thoughts and help us build the world\'s greatest music service!',
      'sQ1Question': 'How likely is it that you\u2019d recommend Spotify to a friend or colleague?',
      'sQ1Negative': 'Not at all likely',
      'sQ1Positive': 'Extremely likely',
      'sQ2Question': 'Why do you feel that way?',
      'sQ3Question': 'Overall, how satisfied are you with Spotify?',
      'sQ3Negative': 'Very dissatisfied',
      'sQ3Positive': 'Very satisfied',
      'sSubmit': 'Submit survey',
      'sThanks': 'Thanks very much for your help. We appreciate your time.',
      'sTeam': 'The Spotify Team',
      'sClose': 'Close'
    });
  },
  './lang/nl.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/nl.loc/strings/survey.lang', {
      'sTitle': 'Geef je mening en help ons met het bouwen van de beste muziekservice van de wereld!',
      'sQ1Question': 'Hoe waarschijnlijk is het dat je Spotify zou aanbevelen aan een vriend of collega?',
      'sQ1Negative': 'Helemaal niet waarschijnlijk',
      'sQ1Positive': 'Zeer waarschijnlijk',
      'sQ2Question': 'Waarom voel je dit zo?',
      'sQ3Question': 'Hoe tevreden ben je over het algemeen met Spotify?',
      'sQ3Negative': 'Zeer ontevreden',
      'sQ3Positive': 'Zeer tevreden',
      'sSubmit': 'Onderzoek indienen',
      'sThanks': 'Hartelijk dank voor je hulp. We waarderen je bijdrage.',
      'sTeam': 'Het Spotify Team',
      'sClose': 'Sluiten'
    });
  },
  './lang/pl.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/pl.loc/strings/survey.lang', {
      'sTitle': 'Podziel si\u0119 swoj\u0105 opini\u0105 i pom\xF3\u017C nam tworzy\u0107 najwi\u0119kszy na \u015Bwiecie serwis muzyczny!',
      'sQ1Question': 'Jakie jest prawdopodobie\u0144stwo, \u017Ce polecisz Spotify znajomym?',
      'sQ1Negative': 'Nie polec\u0119',
      'sQ1Positive': 'Oczywi\u015Bcie, \u017Ce polec\u0119',
      'sQ2Question': 'Jak uzasadnisz swoj\u0105 decyzj\u0119?',
      'sQ3Question': 'Jak oceniasz sw\xF3j poziom zadowolenia z serwisu Spotify?',
      'sQ3Negative': 'Serwis jest bardzo niezadowalaj\u0105cy',
      'sQ3Positive': 'Serwis jest wysoce zadowalaj\u0105cy',
      'sSubmit': 'Prze\u015Blij ankiet\u0119',
      'sThanks': 'Dzi\u0119kujemy za pomoc i po\u015Bwi\u0119cony czas.',
      'sTeam': 'Zesp\xF3\u0142 Spotify',
      'sClose': 'Zamknij'
    });
  },
  './lang/pt-br.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/pt-br.loc/strings/survey.lang', {
      'sTitle': 'Compartilhe o que voc\xEA pensa e nos ajude a criar o maior servi\xE7o de m\xFAsica do mundo!',
      'sQ1Question': 'Qual \xE9 a probabilidade de voc\xEA recomendar o Spotify para um amigo ou colega?',
      'sQ1Negative': 'Nada prov\xE1vel',
      'sQ1Positive': 'Extremamente prov\xE1vel',
      'sQ2Question': 'Por que voc\xEA acha isso?',
      'sQ3Question': 'No geral, qual \xE9 seu n\xEDvel de satisfa\xE7\xE3o com o Spotify?',
      'sQ3Negative': 'Muito insatisfeito',
      'sQ3Positive': 'Muito satisfeito',
      'sSubmit': 'Enviar pesquisa',
      'sThanks': 'Muito obrigado por sua ajuda. N\xF3s apreciamos o tempo que voc\xEA gastou.',
      'sTeam': 'A equipe Spotify',
      'sClose': 'Fechar'
    });
  },
  './lang/ro.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/ro.loc/strings/survey.lang', {
      'sTitle': 'Spune-ne g\xE2ndurile tale \u015Fi ajut\u0103-ne s\u0103 cre\u0103m cel mai bun serviciul muzical din lume!',
      'sQ1Question': 'C\xE2t de probabil este s\u0103 recomanzi Spotify unui prieten sau coleg?',
      'sQ1Negative': 'Deloc probabil',
      'sQ1Positive': 'Extrem de probabil',
      'sQ2Question': 'De ce sim\u0163i a\u015Fa?',
      'sQ3Question': 'Per ansamblu, c\xE2t de mul\u0163umit e\u015Fti de Spotify?',
      'sQ3Negative': 'Foarte nemul\u0163umit',
      'sQ3Positive': 'Foarte mul\u0163umit',
      'sSubmit': 'Trimite chestionarul',
      'sThanks': 'Mul\u0163umim foarte mult pentru ajutor. Apreciem timpul acordat.',
      'sTeam': 'Echipa Spotify',
      'sClose': '\xCEnchide'
    });
  },
  './lang/ru.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/ru.loc/strings/survey.lang', {
      'sTitle': '\u041F\u043E\u0434\u0435\u043B\u0438\u0442\u0435\u0441\u044C \u0441\u0432\u043E\u0438\u043C\u0438 \u043C\u044B\u0441\u043B\u044F\u043C\u0438, \u0432\u043F\u0435\u0447\u0430\u0442\u043B\u0435\u043D\u0438\u044F\u043C\u0438 \u0438 \u043F\u0440\u0435\u0434\u043B\u043E\u0436\u0435\u043D\u0438\u044F\u043C\u0438. \u042D\u0442\u043E \u043F\u043E\u043C\u043E\u0436\u0435\u0442 \u043D\u0430\u043C \u0441\u043E\u0437\u0434\u0430\u0442\u044C \u043B\u0443\u0447\u0448\u0438\u0439 \u043C\u0443\u0437\u044B\u043A\u0430\u043B\u044C\u043D\u044B\u0439 \u0441\u0435\u0440\u0432\u0438\u0441 \u0432 \u043C\u0438\u0440\u0435!',
      'sQ1Question': '\u041F\u043E\u0440\u0435\u043A\u043E\u043C\u0435\u043D\u0434\u0443\u0435\u0442\u0435 \u043B\u0438 \u0432\u044B Spotify \u0434\u0440\u0443\u0433\u0443 \u0438\u043B\u0438 \u043A\u043E\u043B\u043B\u0435\u0433\u0435?',
      'sQ1Negative': '\u041C\u0430\u043B\u043E\u0432\u0435\u0440\u043E\u044F\u0442\u043D\u043E',
      'sQ1Positive': '\u0412\u0435\u0441\u044C\u043C\u0430 \u0432\u0435\u0440\u043E\u044F\u0442\u043D\u043E',
      'sQ2Question': '\u041F\u043E\u0447\u0435\u043C\u0443 \u0432\u044B \u0442\u0430\u043A \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0435?',
      'sQ3Question': '\u0414\u043E\u0432\u043E\u043B\u044C\u043D\u044B \u043B\u0438 \u0432\u044B Spotify \u0432 \u0446\u0435\u043B\u043E\u043C?',
      'sQ3Negative': '\u041E\u0447\u0435\u043D\u044C \u043D\u0435\u0434\u043E\u0432\u043E\u043B\u0435\u043D',
      'sQ3Positive': '\u041E\u0447\u0435\u043D\u044C \u0434\u043E\u0432\u043E\u043B\u0435\u043D',
      'sSubmit': '\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C \u043E\u043F\u0440\u043E\u0441',
      'sThanks': '\u0411\u043E\u043B\u044C\u0448\u043E\u0435 \u0441\u043F\u0430\u0441\u0438\u0431\u043E! \u041C\u044B \u043F\u0440\u0438\u0437\u043D\u0430\u0442\u0435\u043B\u044C\u043D\u044B \u0432\u0430\u043C \u0437\u0430 \u0443\u0434\u0435\u043B\u0435\u043D\u043D\u043E\u0435 \u0432\u0440\u0435\u043C\u044F.',
      'sTeam': '\u041A\u043E\u043C\u0430\u043D\u0434\u0430 Spotify',
      'sClose': '\u0417\u0430\u043A\u0440\u044B\u0442\u044C'
    });
  },
  './lang/sv.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/sv.loc/strings/survey.lang', {
      'sTitle': 'S\xE4g vad du tycker och hj\xE4lp oss att utveckla v\xE4rldens b\xE4sta musiktj\xE4nst!',
      'sQ1Question': 'Hur troligt \xE4r det att du rekommenderar Spotify f\xF6r en v\xE4n eller kollega?',
      'sQ1Negative': 'Inte troligt',
      'sQ1Positive': 'V\xE4ldigt troligt',
      'sQ2Question': 'Varf\xF6r?',
      'sQ3Question': 'Hur n\xF6jd \xE4r du med Spotify?',
      'sQ3Negative': 'V\xE4ldigt missn\xF6jd',
      'sQ3Positive': 'V\xE4ldigt n\xF6jd',
      'sSubmit': 'Skicka enk\xE4ten',
      'sThanks': 'Tack f\xF6r din hj\xE4lp och tid!',
      'sTeam': 'Spotify-teamet',
      'sClose': 'St\xE4ng'
    });
  },
  './lang/ta.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/ta.loc/strings/survey.lang', {
      'sTitle': 'Share your thoughts and help us build the world\'s greatest music service!',
      'sQ1Question': 'How likely is it that you\u2019d recommend Spotify to a friend or colleague?',
      'sQ1Negative': 'Not at all likely',
      'sQ1Positive': 'Extremely likely',
      'sQ2Question': 'Why do you feel that way?',
      'sQ3Question': 'Overall, how satisfied are you with Spotify?',
      'sQ3Negative': 'Very dissatisfied',
      'sQ3Positive': 'Very satisfied',
      'sSubmit': 'Submit survey',
      'sThanks': 'Thanks very much for your help. We appreciate your time.',
      'sTeam': 'The Spotify Team',
      'sClose': 'Close'
    });
  },
  './lang/th.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/th.loc/strings/survey.lang', {
      'sTitle': '\u0E41\u0E0A\u0E23\u0E4C\u0E04\u0E27\u0E32\u0E21\u0E04\u0E34\u0E14\u0E40\u0E2B\u0E47\u0E19\u0E02\u0E2D\u0E07\u0E04\u0E38\u0E13\u0E41\u0E25\u0E30\u0E0A\u0E48\u0E27\u0E22\u0E40\u0E23\u0E32\u0E08\u0E31\u0E14\u0E17\u0E33\u0E1A\u0E23\u0E34\u0E01\u0E32\u0E23\u0E40\u0E1E\u0E25\u0E07\u0E17\u0E35\u0E48\u0E22\u0E2D\u0E14\u0E40\u0E22\u0E35\u0E48\u0E22\u0E21\u0E17\u0E35\u0E48\u0E2A\u0E38\u0E14\u0E43\u0E19\u0E42\u0E25\u0E01!',
      'sQ1Question': '\u0E21\u0E35\u0E41\u0E19\u0E27\u0E42\u0E19\u0E49\u0E21\u0E27\u0E48\u0E32\u0E04\u0E38\u0E13\u0E08\u0E30\u0E41\u0E19\u0E30\u0E19\u0E33 Spotify \u0E01\u0E31\u0E1A\u0E40\u0E1E\u0E37\u0E48\u0E2D\u0E19\u0E2B\u0E23\u0E37\u0E2D\u0E40\u0E1E\u0E37\u0E48\u0E2D\u0E19\u0E23\u0E48\u0E27\u0E21\u0E07\u0E32\u0E19\u0E2D\u0E22\u0E48\u0E32\u0E07\u0E44\u0E23',
      'sQ1Negative': '\u0E44\u0E21\u0E48\u0E41\u0E19\u0E30\u0E19\u0E33\u0E41\u0E19\u0E48\u0E19\u0E2D\u0E19',
      'sQ1Positive': '\u0E41\u0E19\u0E30\u0E19\u0E33\u0E41\u0E19\u0E48\u0E19\u0E2D\u0E19',
      'sQ2Question': '\u0E40\u0E2B\u0E15\u0E38\u0E43\u0E14\u0E04\u0E38\u0E13\u0E08\u0E36\u0E07\u0E21\u0E35\u0E04\u0E27\u0E32\u0E21\u0E04\u0E34\u0E14\u0E40\u0E2B\u0E47\u0E19\u0E40\u0E0A\u0E48\u0E19\u0E19\u0E31\u0E49\u0E19',
      'sQ3Question': '\u0E42\u0E14\u0E22\u0E20\u0E32\u0E1E\u0E23\u0E27\u0E21 \u0E04\u0E38\u0E13\u0E21\u0E35\u0E04\u0E27\u0E32\u0E21\u0E1E\u0E36\u0E07\u0E1E\u0E2D\u0E43\u0E08\u0E01\u0E31\u0E1A Spotify \u0E43\u0E19\u0E23\u0E30\u0E14\u0E31\u0E1A\u0E43\u0E14',
      'sQ3Negative': '\u0E44\u0E21\u0E48\u0E1E\u0E2D\u0E43\u0E08\u0E2D\u0E22\u0E48\u0E32\u0E07\u0E22\u0E34\u0E48\u0E07',
      'sQ3Positive': '\u0E1E\u0E2D\u0E43\u0E08\u0E21\u0E32\u0E01',
      'sSubmit': '\u0E2A\u0E48\u0E07\u0E41\u0E1A\u0E1A\u0E2A\u0E33\u0E23\u0E27\u0E08',
      'sThanks': '\u0E02\u0E2D\u0E1A\u0E1E\u0E23\u0E30\u0E04\u0E38\u0E13\u0E2A\u0E33\u0E2B\u0E23\u0E31\u0E1A\u0E04\u0E27\u0E32\u0E21\u0E0A\u0E48\u0E27\u0E22\u0E40\u0E2B\u0E25\u0E37\u0E2D\u0E02\u0E2D\u0E07\u0E04\u0E38\u0E13 \u0E40\u0E23\u0E32\u0E23\u0E39\u0E49\u0E2A\u0E36\u0E01\u0E0B\u0E32\u0E1A\u0E0B\u0E36\u0E49\u0E07\u0E40\u0E1B\u0E47\u0E19\u0E2D\u0E22\u0E48\u0E32\u0E07\u0E22\u0E34\u0E48\u0E07',
      'sTeam': '\u0E17\u0E35\u0E21\u0E07\u0E32\u0E19 Spotify',
      'sClose': '\u0E1B\u0E34\u0E14'
    });
  },
  './lang/tr.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/tr.loc/strings/survey.lang', {
      'sTitle': 'D\xFC\u015F\xFCncelerini payla\u015F ve d\xFCnyan\u0131n en harika m\xFCzik hizmetini geli\u015Ftirmemize yard\u0131mc\u0131 ol!',
      'sQ1Question': 'Spotify\'\u0131 bir arkada\u015F\u0131na veya i\u015F arkada\u015F\u0131na \xF6nerme olas\u0131l\u0131\u011F\u0131n nedir?',
      'sQ1Negative': 'Pek olas\u0131 de\u011Fil',
      'sQ1Positive': 'Son derece olas\u0131',
      'sQ2Question': 'Neden b\xF6yle d\xFC\u015F\xFCn\xFCyorsun?',
      'sQ3Question': 'Spotify ile ilgili genel olarak memnun musun?',
      'sQ3Negative': 'Hi\xE7 memnun de\u011Filim',
      'sQ3Positive': '\xC7ok memnunum',
      'sSubmit': 'Anketi ilet',
      'sThanks': 'Yard\u0131mc\u0131 oldu\u011Fun i\xE7in te\u015Fekk\xFCr ederiz. Zaman ay\u0131rman bizi \xE7ok mutlu etti.',
      'sTeam': 'Spotify Ekibi',
      'sClose': 'Kapat'
    });
  },
  './lang/zh-hant.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/zh-hant.loc/strings/survey.lang', {
      'sTitle': '\u5206\u4EAB\u611F\u60F3\u4E26\u5E6B\u52A9\u6211\u5011\u5EFA\u7ACB\u5168\u7403\u6700\u5927\u7684\u97F3\u6A02\u670D\u52D9\uFF01',
      'sQ1Question': '\u4F60\u6703\u63A8\u85A6 Spotify \u7D66\u597D\u53CB\u6216\u540C\u4E8B\u55CE\uFF1F',
      'sQ1Negative': '\u5B8C\u5168\u4E0D\u6703',
      'sQ1Positive': '\u5F88\u6709\u53EF\u80FD',
      'sQ2Question': '\u70BA\u4EC0\u9EBC\u9078\u64C7\u63A8\u85A6\u6216\u4E0D\u63A8\u85A6\uFF1F',
      'sQ3Question': '\u4F60\u5C0D Spotify \u6574\u9AD4\u7684\u6EFF\u610F\u7A0B\u5EA6\u6709\u591A\u9AD8\uFF1F',
      'sQ3Negative': '\u975E\u5E38\u4E0D\u6EFF\u610F',
      'sQ3Positive': '\u975E\u5E38\u6EFF\u610F',
      'sSubmit': '\u9001\u51FA\u554F\u5377',
      'sThanks': '\u611F\u8B1D\u4F60\u62BD\u7A7A\u5354\u52A9\u6211\u5011\u3002',
      'sTeam': 'Spotify \u5718\u968A',
      'sClose': '\u95DC\u9589'
    });
  },
  './lang/zsm.loc/strings/survey.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./lang/zsm.loc/strings/survey.lang', {
      'sTitle': 'Kongsi pandangan anda dan bantu kami membina perkhidmatan muzik yang terbesar di dunia!',
      'sQ1Question': 'Apakah kemungkinan anda akan mencadangkan Spotify kepada rakan atau rakan sekerja?',
      'sQ1Negative': 'Mungkin tidak sama sekali',
      'sQ1Positive': 'Sangat mungkin',
      'sQ2Question': 'Mengapa anda rasa begitu?',
      'sQ3Question': 'Secara keseluruhan, adakah anda berpuas hati dengan Spotify?',
      'sQ3Negative': 'Sangat tidak berpuas hati',
      'sQ3Positive': 'Sangat berpuas hati',
      'sSubmit': 'Serahkan kaji selidik',
      'sThanks': 'Terima kasih banyak atas bantuan anda. Kami amat menghargai masa anda.',
      'sTeam': 'Pasukan Spotify',
      'sClose': 'Tutup'
    });
  },
  './node_modules/spotify-navigation-bar/src/nav.js': function (require, module, exports, global) {
    (function () {
      var NavigationBar, j, _;
      j = require('./node_modules/spotify-navigation-bar/node_modules/jquery2/jquery-2.0.3.js');
      _ = require('./node_modules/spotify-navigation-bar/node_modules/underscore/underscore.js');
      NavigationBar = function () {
        function NavigationBar(opt) {
          var navItem, subMenu, _i, _j, _len, _len1, _ref, _ref1;
          this.opt = opt;
          this.elem().html(this.tmpl());
          _ref = this.opt.navItems;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            navItem = _ref[_i];
            if (navItem.subMenus == null) {
              this.find('.nav').append(this.navItemTmpl(navItem));
            } else {
              this.find('.nav').append(this.dropDownTmpl(navItem.displayName));
              _ref1 = navItem.subMenus;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                subMenu = _ref1[_j];
                this.find('.dropdown-menu').append(this.navItemTmpl(subMenu));
              }
            }
          }
          this.elem().on('click', '.dropdown-toggle', function (_this) {
            return function () {
              return _this.dropDownClicked();
            };
          }(this));
          if (this.opt.skipResize == null) {
            this.preCalcWidths();
            _.defer(function (_this) {
              return function () {
                _this.resizeThrottled = _.throttle(_this.resize, 50);
                return j(window).on('resize.' + _this.opt.elementId, function () {
                  return _this.resizeThrottled();
                });
              };
            }(this));
          }
          if (this.opt.skipScroll == null) {
            _.defer(function (_this) {
              return function () {
                _this.setOffsetTop();
                _this.scrollThrottled = _.throttle(_this.scroll, 50);
                j(window).on('scroll.' + _this.opt.elementId, function () {
                  return _this.scrollThrottled();
                });
                return typeof window.live === 'function' ? window.live('spotify:application').on('update', function (event) {
                  if (event.active) {
                    if (_this.opt.skipResize == null) {
                      _this.resizeThrottled();
                    }
                    return _this.scrollThrottled();
                  }
                }) : void 0;
              };
            }(this));
          }
        }
        NavigationBar.prototype.dropDownClicked = function () {
          var bind, hide, isHidden, show, unbind;
          show = function (_this) {
            return function () {
              return _this.find('.dropdown-menu').css('display', 'inherit');
            };
          }(this);
          hide = function (_this) {
            return function () {
              return _this.find('.dropdown-menu').css('display', 'none');
            };
          }(this);
          bind = function (_this) {
            return function (cb) {
              return j('body').bind('mouseover', cb);
            };
          }(this);
          unbind = function (_this) {
            return function () {
              return j('body').unbind('mouseover');
            };
          }(this);
          isHidden = this.find('.dropdown-menu').css('display') === 'none';
          if (isHidden) {
            show();
            return bind(function (_this) {
              return function (ev) {
                var el;
                el = ev.target;
                if (j(el).is('#' + _this.opt.elementId)) {
                } else if (j(el).parents('#' + _this.opt.elementId).first().length === 1) {
                } else {
                  hide();
                  return unbind();
                }
              };
            }(this));
          } else {
            hide();
            return unbind();
          }
        };
        NavigationBar.prototype.elem = function () {
          return j('#' + this.opt.elementId);
        };
        NavigationBar.prototype.find = function (selector) {
          return j('#' + this.opt.elementId).find(selector);
        };
        NavigationBar.prototype.preCalcWidths = function () {
          var el, full, navItem, _i, _len, _ref;
          full = this.find('ul').width() - 50;
          if (full < 0) {
            console.log('skipping resize navbar not visible');
            return;
          }
          _ref = this.opt.navItems;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            navItem = _ref[_i];
            el = this.find('[match=' + navItem.match + ']');
            navItem.width = j(el).outerWidth(true);
          }
          return this.resize();
        };
        NavigationBar.prototype.resize = function () {
          var full, html, index, item, itemsThatDoesntFit, itemsThatFit, _i, _j, _len, _len1;
          full = this.find('ul').width() - 50;
          if (full < 0) {
            console.log('skipping resize navbar not visible');
            return;
          }
          if (this.opt.navItems[0].width == null) {
            this.preCalcWidths();
            return;
          }
          index = 0;
          itemsThatFit = [];
          itemsThatDoesntFit = [];
          while (full > 0 && index < this.opt.navItems.length) {
            full -= this.opt.navItems[index].width;
            itemsThatFit.push(this.opt.navItems[index]);
            index++;
          }
          if (full < 0) {
            itemsThatDoesntFit.unshift(itemsThatFit.pop());
            itemsThatDoesntFit.unshift(itemsThatFit.pop());
            while (index < this.opt.navItems.length) {
              itemsThatDoesntFit.push(this.opt.navItems[index]);
              index++;
            }
          }
          html = j(this.tmpl());
          for (_i = 0, _len = itemsThatFit.length; _i < _len; _i++) {
            item = itemsThatFit[_i];
            html.find('.nav').append(this.navItemTmpl(item));
          }
          if (itemsThatDoesntFit.length > 0) {
            html.find('.nav').append(this.dropDownTmpl(this.opt.moreText));
            for (_j = 0, _len1 = itemsThatDoesntFit.length; _j < _len1; _j++) {
              item = itemsThatDoesntFit[_j];
              html.find('.dropdown-menu').append(this.navItemTmpl(item));
            }
          }
          html.find('[match=' + this.matched + ']').addClass('active');
          return this.elem().html(html);
        };
        NavigationBar.prototype.setOffsetTop = function () {
          return this.offsetTop = this.elem().position().top;
        };
        NavigationBar.prototype.scroll = function () {
          var top;
          top = j(window).scrollTop();
          if (this.isFixed()) {
            if (top < this.offsetTop) {
              return this.setStatic();
            }
          } else {
            this.setOffsetTop();
            if (top > this.offsetTop) {
              return this.setFixed();
            }
          }
        };
        NavigationBar.prototype.isFixed = function () {
          return j('.navbar-fixed-wrapper').css('position') === 'fixed';
        };
        NavigationBar.prototype.setFixed = function () {
          if (!this.isFixed()) {
            this.find('.navbar-fixed-wrapper').css({
              position: 'fixed',
              top: 0,
              left: 0,
              right: 0,
              'z-index': 9
            });
            this.find('.navbar-fixed-wrapper .navbar').css({ 'background-color': 'rgba(18, 19, 20, 0.8)' });
            return this.find('.navbar-fixed-wrapper').addClass('container');
          }
        };
        NavigationBar.prototype.setStatic = function () {
          this.find('.navbar-fixed-wrapper .navbar').css({ 'background-color': 'rgba(18, 19, 20, 0.8)' });
          this.find('.navbar-fixed-wrapper').attr('style', '');
          return this.find('.navbar-fixed-wrapper').removeClass('container');
        };
        NavigationBar.prototype.tmpl = function () {
          return '<div class="navbar-fixed-wrapper">\n  <div class="navbar">\n    <ul class="nav" data-log-context="nav-bar">\n    </ul>\n  </div>\n</div>';
        };
        NavigationBar.prototype.dropDownTmpl = function (displayName) {
          return '<li class="dropdown">\n  <a class="dropdown-toggle" data-toggle="dropdown">' + displayName + '<span class="caret"></span></a>\n  <ul class="dropdown-menu" role="menu">\n  </ul>\n</li>';
        };
        NavigationBar.prototype.navItemTmpl = function (navItem) {
          return '<li match="' + navItem.match + '" ><a href="' + navItem.link + '" data-log-click="nav-' + navItem.match + '">' + navItem.displayName + '</a></li>';
        };
        NavigationBar.prototype.setActive = function (match) {
          this.find('[match=' + match + ']').addClass('active');
          return this.matched = match;
        };
        NavigationBar.prototype.unbindScroll = function () {
          return j(window).off('scroll.' + this.opt.elementId);
        };
        return NavigationBar;
      }();
      module.exports = { NavigationBar: NavigationBar };
    }.call(this));
  },
  './node_modules/spotify-glue-cat/@supported-languages.json': function (require, module, exports, global) {
    module.exports = [
      'arb',
      'de',
      'el',
      'en',
      'es',
      'es-419',
      'fi',
      'fr',
      'hu',
      'id',
      'it',
      'ja',
      'nl',
      'pl',
      'pt-br',
      'ro',
      'ru',
      'sv',
      'tr',
      'th',
      'zh-hant',
      'zsm'
    ];
  },
  './node_modules/spotify-live/util/parser.js': function (require, module, exports, global) {
    'use strict';
    var normalize = function (value) {
      if (value !== '' && !isNaN(value))
        return +value;
      else if (value === 'true')
        return true;
      else if (value === 'false')
        return false;
      else if (value === 'null')
        return null;
      else if (value === 'undefined')
        return undefined;
      return value;
    };
    function escapeForRegExp(str) {
      return str.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
    }
    ;
    var COMMA = ',';
    var BMASK = '(';
    var EMASK = ')';
    var BFILTER = '[';
    var EFILTER = ']';
    var EQUALS = '=';
    var WHITESPACE = '\\s';
    var operators = [
        '=',
        '!=',
        '>=',
        '<=',
        '>',
        '<',
        '^=',
        '$=',
        '~=',
        '|=',
        '*='
      ];
    var keyBlacklist = COMMA + BMASK + EMASK + escapeForRegExp(BFILTER) + escapeForRegExp(EFILTER) + EQUALS + WHITESPACE;
    var keyBlacklistCharacterClass = '[^' + keyBlacklist + ']';
    var KEY_CHARACTER_REG_EXP = new RegExp(keyBlacklistCharacterClass);
    var EXACT_KEY_REG_EXP = new RegExp('^' + keyBlacklistCharacterClass + '+$');
    var OPERATORS_REG_EXP = new RegExp(operators.map(escapeForRegExp).join('|'));
    var REPLACE_REG_EXP = /\$([\d]+)/;
    var RANGE_FILTER_REG_EXP = /^(\d*):(\d*)$/;
    var parse = function (string, params) {
      if (!params)
        params = [];
      var selector = { mask: [] };
      var history = [selector];
      var key = '';
      var filter;
      var filterStr = '';
      var left = '';
      var right = '';
      var op = '';
      for (var i = 0; i < string.length + 1; i++) {
        var c = string.charAt(i);
        if (filter) {
          filterStr = filterStr.trim();
          if (c === COMMA || c === EFILTER) {
            var matches;
            if (matches = filterStr.match(RANGE_FILTER_REG_EXP)) {
              left = matches[1];
              op = ':';
              right = matches[2];
            } else if (matches = filterStr.match(OPERATORS_REG_EXP)) {
              left = filterStr.substring(0, matches.index);
              op = matches[0];
              right = filterStr.substring(matches.index + op.length);
            } else if (matches = filterStr.match(EXACT_KEY_REG_EXP)) {
              left = matches[0];
            } else {
              throw new SyntaxError('syntax error: `' + filterStr + '` contains characters not valid in a filter');
            }
            filterStr = '';
            var condition = {};
            if (left) {
              var leftMatch = left.match(REPLACE_REG_EXP);
              left = leftMatch ? params[+leftMatch[1]] : normalize(left);
              condition.left = left;
            }
            if (op)
              condition.op = op;
            if (right) {
              var rightMatch = right.match(REPLACE_REG_EXP);
              right = rightMatch ? params[+rightMatch[1]] : normalize(right);
              condition.right = right;
            }
            if ('left' in condition || 'right' in condition)
              filter.push(condition);
            right = '';
            left = '';
            op = '';
            if (c === EFILTER) {
              if (filter.length) {
                var filters = selector.filters || (selector.filters = []);
                filters.push(filter);
              }
              filter = null;
            }
            continue;
          }
          filterStr += c;
        } else {
          if (c && KEY_CHARACTER_REG_EXP.test(c)) {
            key += c;
          } else if (key && (!c || c === COMMA || c === BMASK || c === BFILTER || c === EMASK)) {
            var keyMatch = key.match(REPLACE_REG_EXP);
            history[0].mask.push(selector = { key: keyMatch ? params[+keyMatch[1]] : normalize(key) });
            key = '';
          } else if (c && key) {
            throw new SyntaxError('syntax error: `' + c + '` is not a valid character in a key');
          }
          if (c === BMASK) {
            selector.mask = [];
            history.unshift(selector);
          } else if (c === EMASK) {
            history.shift();
          }
          if (c === BFILTER) {
            filter = [];
          }
        }
      }
      if (history.length !== 1)
        throw new SyntaxError('syntax error');
      return history[0];
    };
    module.exports = parse;
  },
  './node_modules/spotify-glue-cat/strings/arb.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': 'Album',
      'AndMore': 'and {0} more',
      'Artist': 'Artist',
      'By': 'by',
      'Follow': 'Follow',
      'Follower': 'Follower',
      'FollowersLabel': 'Followers',
      'Following': 'Following',
      'FollowingLabel': 'Following',
      'FollowsYou': 'Follows You',
      'HoldToPreview': 'Click and Hold to Preview',
      'ListenCount': '{0} plays',
      'ListenReactionMulti': '{0} listeners in your network',
      'ListenReactionSingle': '{0} listens to this',
      'More': 'More',
      'Pause': 'Pause',
      'Play': 'Play',
      'Plays': 'Plays',
      'Playlist': 'Playlist',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': 'Popularity',
      'Remove': 'Remove',
      'RemoveYourMusic': 'Remove from Your Music',
      'Save': 'Save',
      'SaveYourMusic': 'Save to Your Music',
      'Saved': 'Saved',
      'Song': 'Song',
      'Starred': 'Starred',
      'StartRadio': 'Start Radio',
      'Time': 'Time',
      'Toplist': 'Top tracks',
      'Track': 'Track',
      'Unfollow': 'Unfollow',
      'User': 'User',
      'ViewAll': 'View All',
      'HoursShort': '{0} hr',
      'MinutesShort': '{0} min',
      'SecondsShort': '{0} sec'
    };
  },
  './node_modules/spotify-glue-cat/strings/de.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': 'Album',
      'AndMore': 'und {0} weitere',
      'Artist': 'K\xFCnstler',
      'By': 'by',
      'Follow': 'Folgen',
      'Follower': 'Follower',
      'FollowersLabel': 'Follower',
      'Following': 'Folge ich',
      'FollowingLabel': 'Folge ich',
      'FollowsYou': 'Folgt Dir',
      'HoldToPreview': 'Zum Reinh\xF6ren gedr\xFCckt halten',
      'ListenCount': '{0} Wiedergaben',
      'ListenReactionMulti': '{0} H\xF6rer in Deinem Netzwerk',
      'ListenReactionSingle': '{0} h\xF6rt sich das an',
      'More': 'Mehr',
      'Pause': 'Pause',
      'Play': 'Play',
      'Plays': 'Plays',
      'Playlist': 'Playlist',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': 'Beliebtheit',
      'Remove': 'Entfernen',
      'RemoveYourMusic': 'Aus \'Deine Musik\' entfernen',
      'Save': 'Speichern',
      'SaveYourMusic': 'In \'Deine Musik\' speichern',
      'Saved': 'Gespeichert',
      'Song': 'Song',
      'Starred': 'Mit Star bewertet',
      'StartRadio': 'Radio starten',
      'Time': 'Dauer',
      'Toplist': 'Top-Titel',
      'Track': 'Titel',
      'Unfollow': 'Nicht mehr folgen',
      'User': 'Nutzer',
      'ViewAll': 'Alle anzeigen',
      'HoursShort': '{0} Std.',
      'MinutesShort': '{0} Min.',
      'SecondsShort': '{0} Sek.'
    };
  },
  './node_modules/spotify-glue-cat/strings/el.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': '\u0386\u03BB\u03BC\u03C0\u03BF\u03C5\u03BC',
      'AndMore': '\u03BA\u03B1\u03B9 {0} \u03B1\u03BA\u03CC\u03BC\u03B1',
      'Artist': '\u039A\u03B1\u03BB\u03BB\u03B9\u03C4\u03AD\u03C7\u03BD\u03B7\u03C2',
      'By': 'by',
      'Follow': '\u0391\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B5',
      'Follower': '\u039F\u03C0\u03B1\u03B4\u03CC\u03C2',
      'FollowersLabel': '\u039F\u03C0\u03B1\u03B4\u03BF\u03AF',
      'Following': '\u0386\u03C4\u03BF\u03BC\u03B1 \u03C0\u03BF\u03C5 \u03B1\u03BA\u03BF\u03BB\u03BF\u03C5\u03B8\u03BF\u03CD\u03BD\u03C4\u03B1\u03B9',
      'FollowingLabel': '\u0386\u03C4\u03BF\u03BC\u03B1 \u03C0\u03BF\u03C5 \u03B1\u03BA\u03BF\u03BB\u03BF\u03C5\u03B8\u03BF\u03CD\u03BD\u03C4\u03B1\u03B9',
      'FollowsYou': '\u03A3\u03B5 \u03B1\u03BA\u03BF\u03BB\u03BF\u03C5\u03B8\u03B5\u03AF',
      'HoldToPreview': '\u03A0\u03AC\u03C4\u03B7\u03C3\u03B5 \u03BA\u03B1\u03B9 \u03BA\u03C1\u03AC\u03C4\u03B7\u03C3\u03B5 \u03C0\u03B1\u03C4\u03B7\u03BC\u03AD\u03BD\u03BF \u03B3\u03B9\u03B1 \u03C0\u03C1\u03BF\u03B5\u03C0\u03B9\u03C3\u03BA\u03CC\u03C0\u03B7\u03C3\u03B7',
      'ListenCount': '{0} \u03B1\u03BD\u03B1\u03C0\u03B1\u03C1\u03B1\u03B3\u03C9\u03B3\u03AD\u03C2',
      'ListenReactionMulti': '{0} \u03B1\u03BA\u03C1\u03BF\u03B1\u03C4\u03AD\u03C2 \u03C3\u03C4\u03BF \u03B4\u03AF\u03BA\u03C4\u03C5\u03CC \u03C3\u03BF\u03C5',
      'ListenReactionSingle': '\u039F \u03C7\u03C1\u03AE\u03C3\u03C4\u03B7\u03C2 {0} \u03B1\u03BA\u03BF\u03CD\u03B5\u03B9 \u03B1\u03C5\u03C4\u03CC',
      'More': '\u03A0\u03B5\u03C1\u03B9\u03C3\u03C3\u03CC\u03C4\u03B5\u03C1\u03B1',
      'Pause': '\u03A0\u03B1\u03CD\u03C3\u03B7',
      'Play': 'Play',
      'Plays': 'Plays',
      'Playlist': '\u039B\u03AF\u03C3\u03C4\u03B1',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': '\u0394\u03B7\u03BC\u03BF\u03C6\u03B9\u03BB\u03AF\u03B1',
      'Remove': '\u0391\u03C6\u03B1\u03AF\u03C1\u03B5\u03C3\u03B7',
      'RemoveYourMusic': '\u0391\u03C6\u03B1\u03AF\u03C1\u03B5\u03C3\u03B7 \u03B1\u03C0\u03CC \u03C4\u03B7 M\u03BF\u03C5\u03C3\u03B9\u03BA\u03AE \u03C3\u03BF\u03C5',
      'Save': '\u0391\u03C0\u03BF\u03B8\u03AE\u03BA\u03B5\u03C5\u03C3\u03B7',
      'SaveYourMusic': '\u0391\u03C0\u03BF\u03B8\u03AE\u03BA\u03B5\u03C5\u03C3\u03B7 \u03C3\u03C4\u03B7 M\u03BF\u03C5\u03C3\u03B9\u03BA\u03AE \u03C3\u03BF\u03C5',
      'Saved': '\u0391\u03C0\u03BF\u03B8\u03B7\u03BA\u03B5\u03CD\u03C4\u03B7\u03BA\u03B5',
      'Song': '\u03A4\u03C1\u03B1\u03B3\u03BF\u03CD\u03B4\u03B9',
      'Starred': '\u0391\u03B3\u03B1\u03C0\u03B7\u03BC\u03AD\u03BD\u03B1',
      'StartRadio': '\u0388\u03BD\u03B1\u03C1\u03BE\u03B7 \u03C1\u03B1\u03B4\u03B9\u03BF\u03C6\u03CE\u03BD\u03BF\u03C5',
      'Time': '\u0394\u03B9\u03AC\u03C1\u03BA\u03B5\u03B9\u03B1',
      'Toplist': '\u039A\u03BF\u03C1\u03C5\u03C6\u03B1\u03AF\u03B1 \u03C4\u03C1\u03B1\u03B3\u03BF\u03CD\u03B4\u03B9\u03B1',
      'Track': '\u039A\u03BF\u03BC\u03BC\u03AC\u03C4\u03B9',
      'Unfollow': '\u0386\u03C1\u03C3\u03B7 \u03B1\u03BA\u03BF\u03BB\u03BF\u03CD\u03B8\u03B7\u03C3\u03B7\u03C2',
      'User': '\u03A7\u03C1\u03AE\u03C3\u03C4\u03B7\u03C2',
      'ViewAll': '\u03A0\u03C1\u03BF\u03B2\u03BF\u03BB\u03AE \u03CC\u03BB\u03C9\u03BD',
      'HoursShort': '{0} \u03CE\u03C1.',
      'MinutesShort': '{0} \u03BB.',
      'SecondsShort': '{0} \u03B4\u03B5\u03C5\u03C4.'
    };
  },
  './node_modules/spotify-glue-cat/strings/en.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': 'Album',
      'AndMore': 'and {0} more',
      'Artist': 'Artist',
      'By': 'by',
      'Filter': 'Filter',
      'Follow': 'Follow',
      'Follower': 'Follower',
      'FollowersLabel': 'Followers',
      'Following': 'Following',
      'FollowingLabel': 'Following',
      'FollowsYou': 'Follows You',
      'HoldToPreview': 'Click and Hold to Preview',
      'ListenCount': '{0} plays',
      'ListenReactionMulti': '{0} listeners in your network',
      'ListenReactionSingle': '{0} listens to this',
      'LocalFile': 'Local File',
      'More': 'More',
      'Pause': 'Pause',
      'Play': 'Play',
      'Playlist': 'Playlist',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': 'Popularity',
      'Remove': 'Remove',
      'RemoveYourMusic': 'Remove from Your Music',
      'Save': 'Save',
      'SaveYourMusic': 'Save to Your Music',
      'Saved': 'Saved',
      'Song': 'Song',
      'Starred': 'Starred',
      'StartRadio': 'Start Radio',
      'Time': 'Time',
      'Toplist': 'Top tracks',
      'Track': 'Track',
      'Unfollow': 'Unfollow',
      'User': 'User',
      'ViewAll': 'View All',
      'HoursShort': '{0} hr',
      'MinutesShort': '{0} min',
      'SecondsShort': '{0} sec'
    };
  },
  './node_modules/spotify-glue-cat/strings/es.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': '\xC1lbum',
      'AndMore': 'y {0} m\xE1s',
      'Artist': 'Artista',
      'By': 'by',
      'Follow': 'Seguir',
      'Follower': 'Seguidor',
      'FollowersLabel': 'Seguidores',
      'Following': 'Siguiendo',
      'FollowingLabel': 'Siguiendo',
      'FollowsYou': 'Te sigue',
      'HoldToPreview': 'Pulsa y mant\xE9n pulsado para o\xEDr la muestra preliminar',
      'ListenCount': '{0} reproducciones',
      'ListenReactionMulti': '{0} oyentes en tu red',
      'ListenReactionSingle': '{0} escucha esto',
      'More': 'M\xE1s',
      'Pause': 'Pausa',
      'Play': 'Reproducir',
      'Plays': 'Plays',
      'Playlist': 'Playlist',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': 'Popularidad',
      'Remove': 'Eliminar',
      'RemoveYourMusic': 'Eliminar de Tu m\xFAsica',
      'Save': 'Guardar',
      'SaveYourMusic': 'Guardar en Tu m\xFAsica',
      'Saved': ' Guardado',
      'Song': 'Canci\xF3n',
      'Starred': 'Favoritos',
      'StartRadio': 'Iniciar radio',
      'Time': 'Tiempo',
      'Toplist': 'Canciones m\xE1s escuchadas',
      'Track': 'Canci\xF3n',
      'Unfollow': 'No seguir',
      'User': 'Usuario',
      'ViewAll': 'Ver todos',
      'HoursShort': '{0} hr',
      'MinutesShort': '{0} min',
      'SecondsShort': '{0} seg'
    };
  },
  './node_modules/spotify-glue-cat/strings/es-419.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': '\xC1lbum',
      'AndMore': 'y {0} m\xE1s',
      'Artist': 'Artista',
      'By': 'by',
      'Follow': 'Seguir',
      'Follower': 'Seguidor',
      'FollowersLabel': 'Seguidores',
      'Following': 'Siguiendo',
      'FollowingLabel': 'Siguiendo',
      'FollowsYou': 'Te sigue',
      'HoldToPreview': 'Haz clic y mant\xE9n pulsado para o\xEDr la muestra preliminar',
      'ListenCount': '{0} reproducciones',
      'ListenReactionMulti': '{0} oyentes en tu red',
      'ListenReactionSingle': '{0} escucha esto',
      'More': 'M\xE1s',
      'Pause': 'Pausa',
      'Play': 'Reproducir',
      'Plays': 'Plays',
      'Playlist': 'Playlist',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': 'Popularidad',
      'Remove': 'Eliminar',
      'RemoveYourMusic': 'Eliminar de Tu M\xFAsica',
      'Save': 'Guardar',
      'SaveYourMusic': 'Guardar en Tu M\xFAsica',
      'Saved': 'Guardado',
      'Song': 'Canci\xF3n',
      'Starred': 'Seleccionada(s)',
      'StartRadio': 'Iniciar radio',
      'Time': 'Tiempo',
      'Toplist': 'Canciones favoritas',
      'Track': 'Canci\xF3n',
      'Unfollow': 'Dejar de seguir',
      'User': 'Usuario',
      'ViewAll': 'Ver todos',
      'HoursShort': '{0} h',
      'MinutesShort': '{0} min',
      'SecondsShort': '{0} seg'
    };
  },
  './node_modules/spotify-glue-cat/strings/fi.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': 'Albumi',
      'AndMore': 'ja {0} muuta',
      'Artist': 'Artisti',
      'By': 'by',
      'Follow': 'Seuraa',
      'Follower': 'Seuraaja',
      'FollowersLabel': 'Seuraajat',
      'Following': 'Seurataan',
      'FollowingLabel': 'Seuratut',
      'FollowsYou': 'Seuraa sinua',
      'HoldToPreview': 'Kuuntele p\xE4tk\xE4 pit\xE4m\xE4ll\xE4 t\xE4t\xE4 painettuna',
      'ListenCount': '{0} toistoa',
      'ListenReactionMulti': '{0} kuuntelijaa verkostossasi',
      'ListenReactionSingle': '{0} kuuntelee t\xE4t\xE4',
      'More': 'Lis\xE4\xE4',
      'Pause': 'Tauko',
      'Play': 'Toista',
      'Plays': 'Plays',
      'Playlist': 'Soittolista',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': 'Suosio',
      'Remove': 'Poista',
      'RemoveYourMusic': 'Poista Omasta Musiikista',
      'Save': 'Tallenna',
      'SaveYourMusic': 'Tallenna Omaan musiikkiin',
      'Saved': 'Tallennettu',
      'Song': 'Kappale',
      'Starred': 'T\xE4hdell\xE4 merkityt',
      'StartRadio': 'K\xE4ynnist\xE4 radio',
      'Time': 'Kesto',
      'Toplist': 'Soitetuimmat kappaleet',
      'Track': 'Kappale',
      'Unfollow': 'Lopeta seuraaminen',
      'User': 'K\xE4ytt\xE4j\xE4',
      'ViewAll': 'N\xE4yt\xE4 kaikki',
      'HoursShort': '{0} h',
      'MinutesShort': '{0} min',
      'SecondsShort': '{0} s'
    };
  },
  './node_modules/spotify-glue-cat/strings/fr.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': 'Album',
      'AndMore': 'et {0}\xA0autres',
      'Artist': 'Artiste',
      'By': 'by',
      'Follow': 'Suivre',
      'Follower': 'Abonn\xE9',
      'FollowersLabel': 'Abonn\xE9s',
      'Following': 'Abonn\xE9',
      'FollowingLabel': 'Suivis',
      'FollowsYou': 'Vous suit',
      'HoldToPreview': 'Appuyez longuement pour avoir un aper\xE7u.',
      'ListenCount': '{0}\xA0\xE9coutes',
      'ListenReactionMulti': '{0}\xA0auditeurs dans votre r\xE9seau',
      'ListenReactionSingle': '{0} \xE9coute ceci.',
      'More': 'Plus',
      'Pause': 'Pause',
      'Play': 'Lire',
      'Plays': 'Plays',
      'Playlist': 'Playlist',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': 'Popularit\xE9',
      'Remove': 'Supprimer',
      'RemoveYourMusic': 'Supprimer de Ma musique',
      'Save': 'Sauvegarder',
      'SaveYourMusic': 'Ajouter dans Ma musique',
      'Saved': 'Ajout\xE9',
      'Song': 'Titre',
      'Starred': 'S\xE9lection',
      'StartRadio': 'Lancer la radio',
      'Time': 'Dur\xE9e',
      'Toplist': 'Top titres',
      'Track': 'Titre',
      'Unfollow': 'Ne plus suivre',
      'User': 'Utilisateur',
      'ViewAll': 'Voir tout',
      'HoursShort': '{0}\xA0h',
      'MinutesShort': '{0}\xA0min',
      'SecondsShort': '{0}\xA0s'
    };
  },
  './node_modules/spotify-glue-cat/strings/hu.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': 'Album',
      'AndMore': '\xE9s m\xE9g {0} m\xE1sik',
      'Artist': 'El\u0151ad\xF3',
      'By': 'by',
      'Follow': 'K\xF6vet\xE9s',
      'Follower': 'K\xF6vet\u0151',
      'FollowersLabel': 'K\xF6vet\u0151k',
      'Following': 'K\xF6veted',
      'FollowingLabel': 'K\xF6vet\xE9sek',
      'FollowsYou': 'K\xF6vet t\xE9ged',
      'HoldToPreview': 'Tartsd nyomva a belehallgat\xE1shoz',
      'ListenCount': '{0} lej\xE1tsz\xE1s',
      'ListenReactionMulti': '{0} ismer\u0151s\xF6d hallgatta meg',
      'ListenReactionSingle': '{0} felhaszn\xE1l\xF3 hallgatta meg',
      'More': 'Tov\xE1bb',
      'Pause': 'Sz\xFCnet',
      'Play': 'Lej\xE1tsz\xE1s',
      'Plays': 'Plays',
      'Playlist': 'Lej\xE1tsz\xE1si lista',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': 'N\xE9pszer\u0171s\xE9g',
      'Remove': 'Elt\xE1vol\xEDt\xE1s',
      'RemoveYourMusic': 'T\xF6rl\xE9s a Saj\xE1t zen\xE9k k\xF6z\xFCl',
      'Save': 'Ment\xE9s',
      'SaveYourMusic': 'Ment\xE9s a Saj\xE1t zen\xE9k k\xF6z\xE9',
      'Saved': 'Mentve',
      'Song': 'Dal',
      'Starred': 'Kedvencek',
      'StartRadio': 'R\xE1di\xF3 ind\xEDt\xE1sa',
      'Time': 'Id\u0151',
      'Toplist': 'Toplist\xE1s sz\xE1mok',
      'Track': 'Sz\xE1m',
      'Unfollow': 'Nem k\xF6vetem',
      'User': 'Felhaszn\xE1l\xF3',
      'ViewAll': 'Mind',
      'HoursShort': '{0} \xF3ra',
      'MinutesShort': '{0} perc',
      'SecondsShort': '{0} m\xE1sodperc'
    };
  },
  './node_modules/spotify-glue-cat/strings/id.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': 'Album',
      'AndMore': 'dan {0} lainnya',
      'Artist': 'Artis',
      'By': 'by',
      'Follow': 'Ikuti',
      'Follower': 'Pengikut',
      'FollowersLabel': 'Pengikut',
      'Following': 'Mengikuti',
      'FollowingLabel': 'Mengikuti',
      'FollowsYou': 'Mengikuti Anda',
      'HoldToPreview': 'Klik dan Tahan untuk Pratinjau',
      'ListenCount': '{0} pemutaran',
      'ListenReactionMulti': '{0} pendengar di jaringan Anda',
      'ListenReactionSingle': '{0} mendengarkan ini',
      'More': 'Lainnya',
      'Pause': 'Jeda',
      'Play': 'Putar',
      'Plays': 'Plays',
      'Playlist': 'Daftar putar',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': 'Popularitas',
      'Remove': 'Hapus',
      'RemoveYourMusic': 'Hapus dari Musik Anda',
      'Save': 'Simpan',
      'SaveYourMusic': 'Simpan di Musik Anda',
      'Saved': 'Disimpan',
      'Song': 'Lagu',
      'Starred': 'Diberi bintang',
      'StartRadio': 'Mulai Radio',
      'Time': 'Waktu',
      'Toplist': 'Lagu teratas',
      'Track': 'Lagu',
      'Unfollow': 'Berhenti mengikuti',
      'User': 'Pengguna',
      'ViewAll': 'Lihat Semua',
      'HoursShort': '{0} jam',
      'MinutesShort': '{0} mnt',
      'SecondsShort': '{0} dtk'
    };
  },
  './node_modules/spotify-glue-cat/strings/it.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': 'Album',
      'AndMore': 'e altri {0}',
      'Artist': 'Artista',
      'By': 'by',
      'Follow': 'Segui',
      'Follower': 'Follower',
      'FollowersLabel': 'Follower',
      'Following': 'Following',
      'FollowingLabel': 'Following',
      'FollowsYou': 'Ti segue',
      'HoldToPreview': 'Tieni premuto per un\'anteprima',
      'ListenCount': '{0} riproduzioni',
      'ListenReactionMulti': '{0} ascoltatori nella tua rete',
      'ListenReactionSingle': '{0} ascolta questo',
      'More': 'Altro',
      'Pause': 'Pausa',
      'Play': 'Play',
      'Plays': 'Plays',
      'Playlist': 'Playlist',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': 'Popolarit\xE0',
      'Remove': 'Elimina',
      'RemoveYourMusic': 'Elimina da La tua musica',
      'Save': 'Salva',
      'SaveYourMusic': 'Salva in La tua musica',
      'Saved': 'Salvato',
      'Song': 'Brano',
      'Starred': 'Aggiunto ai preferiti',
      'StartRadio': 'Avvia una radio',
      'Time': 'Durata',
      'Toplist': 'Brani top',
      'Track': 'Brano',
      'Unfollow': 'Non seguire',
      'User': 'Utente',
      'ViewAll': 'Visualizza tutto',
      'HoursShort': '{0} hr',
      'MinutesShort': '{0} min',
      'SecondsShort': '{0} sec'
    };
  },
  './node_modules/spotify-glue-cat/strings/ja.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': '\u30A2\u30EB\u30D0\u30E0',
      'AndMore': '\u305D\u306E\u4ED6{0}\u4EBA',
      'Artist': '\u30A2\u30FC\u30C6\u30A3\u30B9\u30C8',
      'By': 'by',
      'Follow': '\u30D5\u30A9\u30ED\u30FC',
      'Follower': '\u30D5\u30A9\u30ED\u30EF\u30FC',
      'FollowersLabel': '\u30D5\u30A9\u30ED\u30EF\u30FC',
      'Following': '\u30D5\u30A9\u30ED\u30FC\u4E2D',
      'FollowingLabel': '\u30D5\u30A9\u30ED\u30FC\u4E2D',
      'FollowsYou': '\u3042\u306A\u305F\u3092\u30D5\u30A9\u30ED\u30FC\u3057\u3066\u3044\u307E\u3059',
      'HoldToPreview': '\u30D7\u30EC\u30D3\u30E5\u30FC\u3059\u308B\u306B\u306F\u3001\u9577\u62BC\u3057\u3057\u307E\u3059',
      'ListenCount': '{0}\u56DE\u518D\u751F',
      'ListenReactionMulti': '\u30CD\u30C3\u30C8\u30EF\u30FC\u30AF\u5185\u3067{0}\u4EBA\u304C\u8074\u3044\u3066\u3044\u307E\u3059',
      'ListenReactionSingle': '{0}\u3055\u3093\u306F\u3053\u308C\u3092\u8074\u3044\u3066\u3044\u307E\u3059',
      'More': '\u8A73\u7D30',
      'Pause': '\u4E00\u6642\u505C\u6B62',
      'Play': '\u518D\u751F',
      'Plays': 'Plays',
      'Playlist': '\u30D7\u30EC\u30A4\u30EA\u30B9\u30C8',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': '\u4EBA\u6C17',
      'Remove': '\u524A\u9664',
      'RemoveYourMusic': '\u81EA\u5206\u306E\u30DF\u30E5\u30FC\u30B8\u30C3\u30AF\u304B\u3089\u524A\u9664',
      'Save': '\u4FDD\u5B58',
      'SaveYourMusic': '\u81EA\u5206\u306E\u30DF\u30E5\u30FC\u30B8\u30C3\u30AF\u306B\u4FDD\u5B58',
      'Saved': '\u4FDD\u5B58\u6E08\u307F',
      'Song': '\u66F2',
      'Starred': '\u30B9\u30BF\u30FC',
      'StartRadio': '\u30E9\u30B8\u30AA\u3092\u958B\u59CB',
      'Time': '\u6642\u9593',
      'Toplist': '\u30C8\u30C3\u30D7\u66F2',
      'Track': '\u66F2',
      'Unfollow': '\u30D5\u30A9\u30ED\u30FC\u3092\u3084\u3081\u308B',
      'User': '\u30E6\u30FC\u30B6\u30FC',
      'ViewAll': '\u3059\u3079\u3066\u8868\u793A',
      'HoursShort': '{0}\u6642\u9593',
      'MinutesShort': '{0}\u5206',
      'SecondsShort': '{0}\u79D2'
    };
  },
  './node_modules/spotify-glue-cat/strings/nl.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': 'Album',
      'AndMore': 'en {0} andere',
      'Artist': 'Artiest',
      'By': 'by',
      'Follow': 'Volgen',
      'Follower': 'Volger',
      'FollowersLabel': 'Volgers',
      'Following': 'Volgend',
      'FollowingLabel': 'Volgend',
      'FollowsYou': 'Volgt jou',
      'HoldToPreview': 'Klikken en vasthouden om een stukje te horen',
      'ListenCount': '{0} keer afgespeeld',
      'ListenReactionMulti': '{0} luisteraars in jouw netwerk',
      'ListenReactionSingle': '{0} luistert hiernaar',
      'More': 'Meer',
      'Pause': 'Pauze',
      'Play': 'Afspelen',
      'Plays': 'Plays',
      'Playlist': 'Afspeellijst',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': 'Populariteit',
      'Remove': 'Verwijderen',
      'RemoveYourMusic': 'Verwijderen uit Jouw Muziek',
      'Save': 'Opslaan',
      'SaveYourMusic': 'Opslaan in Jouw Muziek',
      'Saved': 'Opgeslagen',
      'Song': 'Nummer',
      'Starred': 'Favorieten',
      'StartRadio': 'Radiozender beginnen',
      'Time': 'Tijd',
      'Toplist': 'Topnummers',
      'Track': 'Nummer',
      'Unfollow': 'Niet meer volgen',
      'User': 'Gebruiker',
      'ViewAll': 'Alles bekijken',
      'HoursShort': '{0} uur',
      'MinutesShort': '{0} min',
      'SecondsShort': '{0} sec'
    };
  },
  './node_modules/spotify-glue-cat/strings/pl.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': 'Album',
      'AndMore': 'i {0} wi\u0119cej',
      'Artist': 'Wykonawca',
      'By': 'by',
      'Follow': 'Obserwuj',
      'Follower': 'Obserwuj\u0105cy',
      'FollowersLabel': 'Obserwuj\u0105cy',
      'Following': 'Obserwujesz',
      'FollowingLabel': 'Obserwowani',
      'FollowsYou': 'Obserwuje Ci\u0119',
      'HoldToPreview': 'Aby wy\u015Bwietli\u0107 podgl\u0105d, kliknij i przytrzymaj',
      'ListenCount': 'Liczba odtworze\u0144: {0}',
      'ListenReactionMulti': 'Liczba s\u0142uchaczy w Twojej sieci: {0}',
      'ListenReactionSingle': 'U\u017Cytkownik {0} s\u0142ucha tego',
      'More': 'Wi\u0119cej',
      'Pause': 'Pauza',
      'Play': 'Odtwarzaj',
      'Plays': 'Plays',
      'Playlist': 'Playlista',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': 'Popularno\u015B\u0107',
      'Remove': 'Usu\u0144',
      'RemoveYourMusic': 'Usu\u0144 z kolekcji Twoja muzyka',
      'Save': 'Zapisz',
      'SaveYourMusic': 'Zapisz w kolekcji Twoja muzyka',
      'Saved': 'Zapisano',
      'Song': 'Utw\xF3r',
      'Starred': 'Oznaczono gwiazdk\u0105',
      'StartRadio': 'W\u0142\u0105cz radio',
      'Time': 'Czas',
      'Toplist': 'Najpopularniejsze utwory',
      'Track': 'Utw\xF3r',
      'Unfollow': 'Nie obserwuj',
      'User': 'U\u017Cytkownik',
      'ViewAll': 'Zobacz wszystkie',
      'HoursShort': '{0} godz.',
      'MinutesShort': '{0} min',
      'SecondsShort': '{0} s'
    };
  },
  './node_modules/spotify-glue-cat/strings/pt-br.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': '\xC1lbum',
      'AndMore': 'e mais {0}',
      'Artist': 'Artista',
      'By': 'by',
      'Follow': 'Seguir',
      'Follower': 'Seguidor',
      'FollowersLabel': 'Seguidores',
      'Following': 'Seguindo',
      'FollowingLabel': 'Seguindo',
      'FollowsYou': 'Segue voc\xEA',
      'HoldToPreview': 'Clique e segure para a pr\xE9via',
      'ListenCount': '{0} reprodu\xE7\xF5es',
      'ListenReactionMulti': '{0} ouvintes na sua rede',
      'ListenReactionSingle': '{0} ouve isso',
      'More': 'Mais',
      'Pause': 'Pausar',
      'Play': 'Play',
      'Plays': 'Plays',
      'Playlist': 'Playlist',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': 'Popularidade',
      'Remove': 'Tirar',
      'RemoveYourMusic': 'Tirar de Suas m\xFAsicas',
      'Save': 'Salvar',
      'SaveYourMusic': 'Salvar em Suas m\xFAsicas',
      'Saved': 'Salvo',
      'Song': 'M\xFAsica',
      'Starred': 'Favoritos',
      'StartRadio': 'Abrir r\xE1dio',
      'Time': 'Tempo',
      'Toplist': 'As mais tocadas',
      'Track': 'Faixa',
      'Unfollow': 'Deixar de seguir',
      'User': 'Usu\xE1rio',
      'ViewAll': 'Ver tudo',
      'HoursShort': '{0} h',
      'MinutesShort': '{0} min',
      'SecondsShort': '{0} seg'
    };
  },
  './node_modules/spotify-glue-cat/strings/ro.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': 'Album',
      'AndMore': 'and {0} more',
      'Artist': 'Artist',
      'By': 'by',
      'Follow': 'Follow',
      'Follower': 'Follower',
      'FollowersLabel': 'Followers',
      'Following': 'Following',
      'FollowingLabel': 'Following',
      'FollowsYou': 'Follows You',
      'HoldToPreview': 'Click and Hold to Preview',
      'ListenCount': '{0} plays',
      'ListenReactionMulti': '{0} listeners in your network',
      'ListenReactionSingle': '{0} listens to this',
      'More': 'More',
      'Pause': 'Pause',
      'Play': 'Play',
      'Plays': 'Plays',
      'Playlist': 'Playlist',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': 'Popularity',
      'Remove': 'Remove',
      'RemoveYourMusic': 'Remove from Your Music',
      'Save': 'Save',
      'SaveYourMusic': 'Save to Your Music',
      'Saved': 'Saved',
      'Song': 'Song',
      'Starred': 'Starred',
      'StartRadio': 'Start Radio',
      'Time': 'Time',
      'Toplist': 'Top tracks',
      'Track': 'Track',
      'Unfollow': 'Unfollow',
      'User': 'User',
      'ViewAll': 'View All',
      'HoursShort': '{0} hr',
      'MinutesShort': '{0} min',
      'SecondsShort': '{0} sec'
    };
  },
  './node_modules/spotify-glue-cat/strings/ru.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': '\u0410\u043B\u044C\u0431\u043E\u043C',
      'AndMore': '\u0438 \u0435\u0449\u0435 {0}',
      'Artist': '\u0418\u0441\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C',
      'By': 'by',
      'Follow': '\u041F\u043E\u0434\u043F\u0438\u0441\u0430\u0442\u044C\u0441\u044F',
      'Follower': '\u041F\u043E\u0434\u043F\u0438\u0441\u0447\u0438\u043A',
      'FollowersLabel': '\u041F\u043E\u0434\u043F\u0438\u0441\u0447\u0438\u043A\u0438',
      'Following': '\u0412\u044B \u0441\u043B\u0435\u0434\u0438\u0442\u0435 \u0437\u0430 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F\u043C\u0438',
      'FollowingLabel': '\u041F\u043E\u0434\u043F\u0438\u0441\u043A\u0438',
      'FollowsYou': '\u041F\u043E\u0434\u043F\u0438\u0441\u043A\u0430 \u043D\u0430 \u0432\u0430\u0448\u0438 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F',
      'HoldToPreview': '\u041D\u0430\u0436\u043C\u0438\u0442\u0435 \u0438 \u0443\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439\u0442\u0435 \u0434\u043B\u044F \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0430',
      'ListenCount': '\u0412\u043E\u0441\u043F\u0440\u043E\u0438\u0437\u0432\u0435\u0434\u0435\u043D\u0438\u0439: {0}',
      'ListenReactionMulti': '\u0421\u043B\u0443\u0448\u0430\u0442\u0435\u043B\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0441\u0435\u0442\u0438: {0}',
      'ListenReactionSingle': '{0} \u0441\u043B\u0443\u0448\u0430\u0435\u0442 \u044D\u0442\u043E',
      'More': '\u0415\u0449\u0435',
      'Pause': '\u041F\u0430\u0443\u0437\u0430',
      'Play': '\u0412\u043E\u0441\u043F\u0440\u043E\u0438\u0437\u0432\u0435\u0441\u0442\u0438',
      'Plays': 'Plays',
      'Playlist': '\u041F\u043B\u0435\u0439\u043B\u0438\u0441\u0442',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': '\u041F\u043E\u043F\u0443\u043B\u044F\u0440\u043D\u043E\u0441\u0442\u044C',
      'Remove': '\u0423\u0434\u0430\u043B\u0438\u0442\u044C',
      'RemoveYourMusic': '\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0438\u0437 "\u041C\u043E\u0435\u0439 \u043C\u0443\u0437\u044B\u043A\u0438"',
      'Save': '\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C',
      'SaveYourMusic': '\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u0432 "\u041C\u043E\u0435\u0439 \u043C\u0443\u0437\u044B\u043A\u0435"',
      'Saved': '\u0421\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u043E',
      'Song': '\u041A\u043E\u043C\u043F\u043E\u0437\u0438\u0446\u0438\u044F',
      'Starred': '\u0418\u0437\u0431\u0440\u0430\u043D\u043D\u043E\u0435',
      'StartRadio': '\u0412\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0440\u0430\u0434\u0438\u043E',
      'Time': '\u0412\u0440\u0435\u043C\u044F',
      'Toplist': '\u041B\u0443\u0447\u0448\u0438\u0435 \u0442\u0440\u0435\u043A\u0438',
      'Track': '\u0422\u0440\u0435\u043A',
      'Unfollow': '\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C \u043F\u043E\u0434\u043F\u0438\u0441\u043A\u0443',
      'User': '\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C',
      'ViewAll': '\u041F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u0432\u0441\u0435',
      'HoursShort': '{0} \u0447.',
      'MinutesShort': '{0} \u043C\u0438\u043D.',
      'SecondsShort': '{0} \u0441.'
    };
  },
  './node_modules/spotify-glue-cat/strings/sv.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': 'Album',
      'AndMore': 'och {0} till',
      'Artist': 'Artist',
      'By': 'by',
      'Follow': 'F\xF6lj',
      'Follower': 'F\xF6ljare',
      'FollowersLabel': 'F\xF6ljare',
      'Following': 'F\xF6ljer',
      'FollowingLabel': 'F\xF6ljer',
      'FollowsYou': 'F\xF6ljer dig',
      'HoldToPreview': 'Klicka och h\xE5ll kvar f\xF6r att f\xF6rhandslyssna',
      'ListenCount': '{0} uppspelningar',
      'ListenReactionMulti': '{0} lyssnare i ditt n\xE4tverk',
      'ListenReactionSingle': '{0} lyssnar p\xE5 detta',
      'More': 'Mer',
      'Pause': 'Pausa',
      'Play': 'Spela upp',
      'Plays': 'Plays',
      'Playlist': 'Spellista',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': 'Popularitet',
      'Remove': 'Ta bort',
      'RemoveYourMusic': 'Ta bort fr\xE5n Din musik',
      'Save': 'Spara',
      'SaveYourMusic': 'Spara i Din musik',
      'Saved': 'Sparad',
      'Song': 'Sp\xE5r',
      'Starred': 'Favoriter',
      'StartRadio': 'Starta radio',
      'Time': 'Tid',
      'Toplist': 'Popul\xE4ra sp\xE5r',
      'Track': 'Sp\xE5r',
      'Unfollow': 'Sluta f\xF6lja',
      'User': 'Anv\xE4ndare',
      'ViewAll': 'Visa alla',
      'HoursShort': '{0}\xA0tim',
      'MinutesShort': '{0}\xA0min',
      'SecondsShort': '{0}\xA0sek'
    };
  },
  './node_modules/spotify-glue-cat/strings/tr.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': 'Alb\xFCm',
      'AndMore': 've {0} daha',
      'Artist': 'Sanat\xE7\u0131',
      'By': 'by',
      'Follow': 'Takip Et',
      'Follower': 'Takip\xE7i',
      'FollowersLabel': 'Takip\xE7iler',
      'Following': 'Takip Ediliyor',
      'FollowingLabel': 'Takip Ediliyor',
      'FollowsYou': 'Seni Takip Ediyor',
      'HoldToPreview': 'Bas\u0131l\u0131 Tut ve \xD6nizle',
      'ListenCount': '{0} \xE7alma',
      'ListenReactionMulti': 'A\u011F\u0131nda {0} dinleyici',
      'ListenReactionSingle': '{0} bunu dinliyor',
      'More': 'Daha fazla',
      'Pause': 'Duraklat',
      'Play': '\xC7al',
      'Plays': 'Plays',
      'Playlist': '\xC7alma Listesi',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': 'Pop\xFClerlik',
      'Remove': 'Kald\u0131r',
      'RemoveYourMusic': 'M\xFCziklerin\'den \xC7\u0131kar',
      'Save': 'Kaydet',
      'SaveYourMusic': 'M\xFCziklerin\'e Kaydet',
      'Saved': 'Kaydedildi',
      'Song': '\u015Eark\u0131',
      'Starred': 'Y\u0131ld\u0131zl\u0131lar',
      'StartRadio': 'Radyo\'yu Ba\u015Flat',
      'Time': 'Saat',
      'Toplist': 'En \xE7ok dinlenen par\xE7alar',
      'Track': 'Par\xE7a',
      'Unfollow': 'Takip Etmeyi B\u0131rak',
      'User': 'Kullan\u0131c\u0131',
      'ViewAll': 'T\xFCm\xFCn\xFC G\xF6r\xFCnt\xFCle',
      'HoursShort': '{0} sa',
      'MinutesShort': '{0} dk',
      'SecondsShort': '{0} sn'
    };
  },
  './node_modules/spotify-glue-cat/strings/th.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': '\u0E2D\u0E31\u0E25\u0E1A\u0E31\u0E49\u0E21',
      'AndMore': '\u0E41\u0E25\u0E30\u0E2D\u0E35\u0E01 {0}',
      'Artist': '\u0E28\u0E34\u0E25\u0E1B\u0E34\u0E19',
      'By': 'by',
      'Follow': '\u0E15\u0E34\u0E14\u0E15\u0E32\u0E21',
      'Follower': '\u0E1C\u0E39\u0E49\u0E15\u0E34\u0E14\u0E15\u0E32\u0E21',
      'FollowersLabel': '\u0E1C\u0E39\u0E49\u0E15\u0E34\u0E14\u0E15\u0E32\u0E21',
      'Following': '\u0E01\u0E33\u0E25\u0E31\u0E07\u0E15\u0E34\u0E14\u0E15\u0E32\u0E21',
      'FollowingLabel': '\u0E01\u0E33\u0E25\u0E31\u0E07\u0E15\u0E34\u0E14\u0E15\u0E32\u0E21',
      'FollowsYou': '\u0E15\u0E34\u0E14\u0E15\u0E32\u0E21\u0E04\u0E38\u0E13',
      'HoldToPreview': '\u0E04\u0E25\u0E34\u0E01\u0E04\u0E49\u0E32\u0E07\u0E44\u0E27\u0E49\u0E40\u0E1E\u0E37\u0E48\u0E2D\u0E1F\u0E31\u0E07\u0E15\u0E31\u0E27\u0E2D\u0E22\u0E48\u0E32\u0E07',
      'ListenCount': '\u0E40\u0E25\u0E48\u0E19 {0} \u0E04\u0E23\u0E31\u0E49\u0E07',
      'ListenReactionMulti': '\u0E1C\u0E39\u0E49\u0E1F\u0E31\u0E07 {0} \u0E04\u0E19\u0E1A\u0E19\u0E40\u0E04\u0E23\u0E37\u0E2D\u0E02\u0E48\u0E32\u0E22\u0E02\u0E2D\u0E07\u0E04\u0E38\u0E13 ',
      'ListenReactionSingle': '{0} \u0E1F\u0E31\u0E07\u0E40\u0E1E\u0E25\u0E07\u0E19\u0E35\u0E49',
      'More': '\u0E40\u0E1E\u0E34\u0E48\u0E21\u0E40\u0E15\u0E34\u0E21',
      'Pause': '\u0E2B\u0E22\u0E38\u0E14\u0E0A\u0E31\u0E48\u0E27\u0E04\u0E23\u0E32\u0E27',
      'Play': '\u0E40\u0E25\u0E48\u0E19',
      'Plays': 'Plays',
      'Playlist': '\u0E40\u0E1E\u0E25\u0E22\u0E4C\u0E25\u0E34\u0E2A\u0E15\u0E4C',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': '\u0E04\u0E27\u0E32\u0E21\u0E19\u0E34\u0E22\u0E21',
      'Remove': '\u0E25\u0E1A',
      'RemoveYourMusic': '\u0E25\u0E1A\u0E2D\u0E2D\u0E01\u0E08\u0E32\u0E01\u0E23\u0E32\u0E22\u0E01\u0E32\u0E23\u0E40\u0E1E\u0E25\u0E07\u0E02\u0E2D\u0E07\u0E04\u0E38\u0E13',
      'Save': '\u0E1A\u0E31\u0E19\u0E17\u0E36\u0E01',
      'SaveYourMusic': '\u0E1A\u0E31\u0E19\u0E17\u0E36\u0E01\u0E44\u0E1B\u0E22\u0E31\u0E07\u0E23\u0E32\u0E22\u0E01\u0E32\u0E23\u0E40\u0E1E\u0E25\u0E07\u0E02\u0E2D\u0E07\u0E04\u0E38\u0E13',
      'Saved': '\u0E1A\u0E31\u0E19\u0E17\u0E36\u0E01',
      'Song': '\u0E40\u0E1E\u0E25\u0E07',
      'Starred': '\u0E15\u0E34\u0E14\u0E14\u0E32\u0E27\u0E41\u0E25\u0E49\u0E27',
      'StartRadio': '\u0E40\u0E23\u0E34\u0E48\u0E21\u0E43\u0E0A\u0E49\u0E27\u0E34\u0E17\u0E22\u0E38',
      'Time': '\u0E40\u0E27\u0E25\u0E32',
      'Toplist': '\u0E41\u0E17\u0E23\u0E47\u0E01\u0E15\u0E34\u0E14\u0E2D\u0E31\u0E19\u0E14\u0E31\u0E1A',
      'Track': '\u0E41\u0E17\u0E23\u0E47\u0E01',
      'Unfollow': '\u0E40\u0E25\u0E34\u0E01\u0E15\u0E34\u0E14\u0E15\u0E32\u0E21',
      'User': '\u0E1C\u0E39\u0E49\u0E43\u0E0A\u0E49',
      'ViewAll': '\u0E14\u0E39\u0E17\u0E31\u0E49\u0E07\u0E2B\u0E21\u0E14',
      'HoursShort': '{0} \u0E0A\u0E21.',
      'MinutesShort': '{0} \u0E19.',
      'SecondsShort': '{0} \u0E27\u0E34'
    };
  },
  './node_modules/spotify-glue-cat/strings/zh-hant.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': '\u5C08\u8F2F',
      'AndMore': '\u9084\u6709 {0} \u9996',
      'Artist': '\u85DD\u4EBA',
      'By': 'by',
      'Follow': '\u95DC\u6CE8',
      'Follower': '\u7C89\u7D72',
      'FollowersLabel': '\u7C89\u7D72',
      'Following': '\u6B63\u5728\u95DC\u6CE8',
      'FollowingLabel': '\u95DC\u6CE8\u4EBA\u6578',
      'FollowsYou': '\u95DC\u6CE8\u4F60',
      'HoldToPreview': '\u6309\u4F4F\u5373\u53EF\u9810\u89BD',
      'ListenCount': '\u64AD\u653E\u4E86 {0} \u6B21',
      'ListenReactionMulti': '\u5728\u4F60\u7684\u793E\u7FA4\u7DB2\u8DEF\u4E2D\u6709 {0} \u540D\u807D\u773E',
      'ListenReactionSingle': '{0} \u6536\u807D\u4E86\u9019\u9996\u6B4C\u66F2',
      'More': '\u66F4\u591A',
      'Pause': '\u66AB\u505C',
      'Play': '\u64AD\u653E',
      'Plays': 'Plays',
      'Playlist': '\u64AD\u653E\u6E05\u55AE',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': '\u6D41\u884C\u5EA6',
      'Remove': '\u79FB\u9664',
      'RemoveYourMusic': '\u5F9E\u4F60\u7684\u97F3\u6A02\u4E2D\u79FB\u9664',
      'Save': '\u5132\u5B58',
      'SaveYourMusic': '\u5132\u5B58\u81F3\u4F60\u7684\u97F3\u6A02',
      'Saved': '\u5DF2\u5132\u5B58',
      'Song': '\u6B4C\u66F2',
      'Starred': '\u5DF2\u661F\u8A55',
      'StartRadio': '\u958B\u59CB\u6536\u807D\u96FB\u53F0',
      'Time': '\u6642\u9593',
      'Toplist': '\u7576\u7D05\u6B4C\u66F2',
      'Track': '\u6B4C\u66F2',
      'Unfollow': '\u53D6\u6D88\u95DC\u6CE8',
      'User': '\u4F7F\u7528\u8005',
      'ViewAll': '\u6AA2\u8996\u5168\u90E8',
      'HoursShort': '{0} \u5C0F\u6642',
      'MinutesShort': '{0} \u5206\u9418',
      'SecondsShort': '{0} \u79D2\u9418'
    };
  },
  './node_modules/spotify-glue-cat/strings/zsm.loc/strings.json': function (require, module, exports, global) {
    module.exports = {
      'Album': 'Album',
      'AndMore': 'dan {0} lagi',
      'Artist': 'Artis',
      'By': 'by',
      'Follow': 'Ikuti',
      'Follower': 'Pengikut',
      'FollowersLabel': 'Pengikut',
      'Following': 'Mengikuti',
      'FollowingLabel': 'Mengikuti',
      'FollowsYou': 'Megikuti Anda',
      'HoldToPreview': 'Klik dan Tahan untuk Pratonton',
      'ListenCount': '{0} memainkan',
      'ListenReactionMulti': '{0} pendengar dalam rangkaian anda',
      'ListenReactionSingle': '{0} mendengar ini',
      'More': 'Lebih lagi',
      'Pause': 'Jeda',
      'Play': 'Main',
      'Plays': 'Plays',
      'Playlist': 'Playlist',
      'PressEnterToPlay': 'Press Enter to play',
      'Popularity': 'Populariti',
      'Remove': 'Keluarkan',
      'RemoveYourMusic': 'Keluarkan dari Muzik Anda',
      'Save': 'Simpan',
      'SaveYourMusic': 'Simpan ke Muzik Anda',
      'Saved': 'Disimpan',
      'Song': 'Lagu',
      'Starred': 'Dibintangkan',
      'StartRadio': 'Mulakan Radio',
      'Time': 'Masa',
      'Toplist': 'Lagu paling popular',
      'Track': 'Lagu',
      'Unfollow': 'Nyahikut',
      'User': 'Pengguna',
      'ViewAll': 'Lihat Semua',
      'HoursShort': '{0} jam',
      'MinutesShort': '{0} min',
      'SecondsShort': '{0} saat'
    };
  },
  './node_modules/spotify-navigation-bar/node_modules/underscore/underscore.js': function (require, module, exports, global) {
    (function () {
      var root = this;
      var previousUnderscore = root._;
      var breaker = {};
      var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
      var push = ArrayProto.push, slice = ArrayProto.slice, concat = ArrayProto.concat, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
      var nativeForEach = ArrayProto.forEach, nativeMap = ArrayProto.map, nativeReduce = ArrayProto.reduce, nativeReduceRight = ArrayProto.reduceRight, nativeFilter = ArrayProto.filter, nativeEvery = ArrayProto.every, nativeSome = ArrayProto.some, nativeIndexOf = ArrayProto.indexOf, nativeLastIndexOf = ArrayProto.lastIndexOf, nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind;
      var _ = function (obj) {
        if (obj instanceof _)
          return obj;
        if (!(this instanceof _))
          return new _(obj);
        this._wrapped = obj;
      };
      if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
          exports = module.exports = _;
        }
        exports._ = _;
      } else {
        root._ = _;
      }
      _.VERSION = '1.5.2';
      var each = _.each = _.forEach = function (obj, iterator, context) {
          if (obj == null)
            return;
          if (nativeForEach && obj.forEach === nativeForEach) {
            obj.forEach(iterator, context);
          } else if (obj.length === +obj.length) {
            for (var i = 0, length = obj.length; i < length; i++) {
              if (iterator.call(context, obj[i], i, obj) === breaker)
                return;
            }
          } else {
            var keys = _.keys(obj);
            for (var i = 0, length = keys.length; i < length; i++) {
              if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker)
                return;
            }
          }
        };
      _.map = _.collect = function (obj, iterator, context) {
        var results = [];
        if (obj == null)
          return results;
        if (nativeMap && obj.map === nativeMap)
          return obj.map(iterator, context);
        each(obj, function (value, index, list) {
          results.push(iterator.call(context, value, index, list));
        });
        return results;
      };
      var reduceError = 'Reduce of empty array with no initial value';
      _.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (obj == null)
          obj = [];
        if (nativeReduce && obj.reduce === nativeReduce) {
          if (context)
            iterator = _.bind(iterator, context);
          return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
        }
        each(obj, function (value, index, list) {
          if (!initial) {
            memo = value;
            initial = true;
          } else {
            memo = iterator.call(context, memo, value, index, list);
          }
        });
        if (!initial)
          throw new TypeError(reduceError);
        return memo;
      };
      _.reduceRight = _.foldr = function (obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (obj == null)
          obj = [];
        if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
          if (context)
            iterator = _.bind(iterator, context);
          return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
        }
        var length = obj.length;
        if (length !== +length) {
          var keys = _.keys(obj);
          length = keys.length;
        }
        each(obj, function (value, index, list) {
          index = keys ? keys[--length] : --length;
          if (!initial) {
            memo = obj[index];
            initial = true;
          } else {
            memo = iterator.call(context, memo, obj[index], index, list);
          }
        });
        if (!initial)
          throw new TypeError(reduceError);
        return memo;
      };
      _.find = _.detect = function (obj, iterator, context) {
        var result;
        any(obj, function (value, index, list) {
          if (iterator.call(context, value, index, list)) {
            result = value;
            return true;
          }
        });
        return result;
      };
      _.filter = _.select = function (obj, iterator, context) {
        var results = [];
        if (obj == null)
          return results;
        if (nativeFilter && obj.filter === nativeFilter)
          return obj.filter(iterator, context);
        each(obj, function (value, index, list) {
          if (iterator.call(context, value, index, list))
            results.push(value);
        });
        return results;
      };
      _.reject = function (obj, iterator, context) {
        return _.filter(obj, function (value, index, list) {
          return !iterator.call(context, value, index, list);
        }, context);
      };
      _.every = _.all = function (obj, iterator, context) {
        iterator || (iterator = _.identity);
        var result = true;
        if (obj == null)
          return result;
        if (nativeEvery && obj.every === nativeEvery)
          return obj.every(iterator, context);
        each(obj, function (value, index, list) {
          if (!(result = result && iterator.call(context, value, index, list)))
            return breaker;
        });
        return !!result;
      };
      var any = _.some = _.any = function (obj, iterator, context) {
          iterator || (iterator = _.identity);
          var result = false;
          if (obj == null)
            return result;
          if (nativeSome && obj.some === nativeSome)
            return obj.some(iterator, context);
          each(obj, function (value, index, list) {
            if (result || (result = iterator.call(context, value, index, list)))
              return breaker;
          });
          return !!result;
        };
      _.contains = _.include = function (obj, target) {
        if (obj == null)
          return false;
        if (nativeIndexOf && obj.indexOf === nativeIndexOf)
          return obj.indexOf(target) != -1;
        return any(obj, function (value) {
          return value === target;
        });
      };
      _.invoke = function (obj, method) {
        var args = slice.call(arguments, 2);
        var isFunc = _.isFunction(method);
        return _.map(obj, function (value) {
          return (isFunc ? method : value[method]).apply(value, args);
        });
      };
      _.pluck = function (obj, key) {
        return _.map(obj, function (value) {
          return value[key];
        });
      };
      _.where = function (obj, attrs, first) {
        if (_.isEmpty(attrs))
          return first ? void 0 : [];
        return _[first ? 'find' : 'filter'](obj, function (value) {
          for (var key in attrs) {
            if (attrs[key] !== value[key])
              return false;
          }
          return true;
        });
      };
      _.findWhere = function (obj, attrs) {
        return _.where(obj, attrs, true);
      };
      _.max = function (obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
          return Math.max.apply(Math, obj);
        }
        if (!iterator && _.isEmpty(obj))
          return -Infinity;
        var result = {
            computed: -Infinity,
            value: -Infinity
          };
        each(obj, function (value, index, list) {
          var computed = iterator ? iterator.call(context, value, index, list) : value;
          computed > result.computed && (result = {
            value: value,
            computed: computed
          });
        });
        return result.value;
      };
      _.min = function (obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
          return Math.min.apply(Math, obj);
        }
        if (!iterator && _.isEmpty(obj))
          return Infinity;
        var result = {
            computed: Infinity,
            value: Infinity
          };
        each(obj, function (value, index, list) {
          var computed = iterator ? iterator.call(context, value, index, list) : value;
          computed < result.computed && (result = {
            value: value,
            computed: computed
          });
        });
        return result.value;
      };
      _.shuffle = function (obj) {
        var rand;
        var index = 0;
        var shuffled = [];
        each(obj, function (value) {
          rand = _.random(index++);
          shuffled[index - 1] = shuffled[rand];
          shuffled[rand] = value;
        });
        return shuffled;
      };
      _.sample = function (obj, n, guard) {
        if (arguments.length < 2 || guard) {
          return obj[_.random(obj.length - 1)];
        }
        return _.shuffle(obj).slice(0, Math.max(0, n));
      };
      var lookupIterator = function (value) {
        return _.isFunction(value) ? value : function (obj) {
          return obj[value];
        };
      };
      _.sortBy = function (obj, value, context) {
        var iterator = lookupIterator(value);
        return _.pluck(_.map(obj, function (value, index, list) {
          return {
            value: value,
            index: index,
            criteria: iterator.call(context, value, index, list)
          };
        }).sort(function (left, right) {
          var a = left.criteria;
          var b = right.criteria;
          if (a !== b) {
            if (a > b || a === void 0)
              return 1;
            if (a < b || b === void 0)
              return -1;
          }
          return left.index - right.index;
        }), 'value');
      };
      var group = function (behavior) {
        return function (obj, value, context) {
          var result = {};
          var iterator = value == null ? _.identity : lookupIterator(value);
          each(obj, function (value, index) {
            var key = iterator.call(context, value, index, obj);
            behavior(result, key, value);
          });
          return result;
        };
      };
      _.groupBy = group(function (result, key, value) {
        (_.has(result, key) ? result[key] : result[key] = []).push(value);
      });
      _.indexBy = group(function (result, key, value) {
        result[key] = value;
      });
      _.countBy = group(function (result, key) {
        _.has(result, key) ? result[key]++ : result[key] = 1;
      });
      _.sortedIndex = function (array, obj, iterator, context) {
        iterator = iterator == null ? _.identity : lookupIterator(iterator);
        var value = iterator.call(context, obj);
        var low = 0, high = array.length;
        while (low < high) {
          var mid = low + high >>> 1;
          iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
        }
        return low;
      };
      _.toArray = function (obj) {
        if (!obj)
          return [];
        if (_.isArray(obj))
          return slice.call(obj);
        if (obj.length === +obj.length)
          return _.map(obj, _.identity);
        return _.values(obj);
      };
      _.size = function (obj) {
        if (obj == null)
          return 0;
        return obj.length === +obj.length ? obj.length : _.keys(obj).length;
      };
      _.first = _.head = _.take = function (array, n, guard) {
        if (array == null)
          return void 0;
        return n == null || guard ? array[0] : slice.call(array, 0, n);
      };
      _.initial = function (array, n, guard) {
        return slice.call(array, 0, array.length - (n == null || guard ? 1 : n));
      };
      _.last = function (array, n, guard) {
        if (array == null)
          return void 0;
        if (n == null || guard) {
          return array[array.length - 1];
        } else {
          return slice.call(array, Math.max(array.length - n, 0));
        }
      };
      _.rest = _.tail = _.drop = function (array, n, guard) {
        return slice.call(array, n == null || guard ? 1 : n);
      };
      _.compact = function (array) {
        return _.filter(array, _.identity);
      };
      var flatten = function (input, shallow, output) {
        if (shallow && _.every(input, _.isArray)) {
          return concat.apply(output, input);
        }
        each(input, function (value) {
          if (_.isArray(value) || _.isArguments(value)) {
            shallow ? push.apply(output, value) : flatten(value, shallow, output);
          } else {
            output.push(value);
          }
        });
        return output;
      };
      _.flatten = function (array, shallow) {
        return flatten(array, shallow, []);
      };
      _.without = function (array) {
        return _.difference(array, slice.call(arguments, 1));
      };
      _.uniq = _.unique = function (array, isSorted, iterator, context) {
        if (_.isFunction(isSorted)) {
          context = iterator;
          iterator = isSorted;
          isSorted = false;
        }
        var initial = iterator ? _.map(array, iterator, context) : array;
        var results = [];
        var seen = [];
        each(initial, function (value, index) {
          if (isSorted ? !index || seen[seen.length - 1] !== value : !_.contains(seen, value)) {
            seen.push(value);
            results.push(array[index]);
          }
        });
        return results;
      };
      _.union = function () {
        return _.uniq(_.flatten(arguments, true));
      };
      _.intersection = function (array) {
        var rest = slice.call(arguments, 1);
        return _.filter(_.uniq(array), function (item) {
          return _.every(rest, function (other) {
            return _.indexOf(other, item) >= 0;
          });
        });
      };
      _.difference = function (array) {
        var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
        return _.filter(array, function (value) {
          return !_.contains(rest, value);
        });
      };
      _.zip = function () {
        var length = _.max(_.pluck(arguments, 'length').concat(0));
        var results = new Array(length);
        for (var i = 0; i < length; i++) {
          results[i] = _.pluck(arguments, '' + i);
        }
        return results;
      };
      _.object = function (list, values) {
        if (list == null)
          return {};
        var result = {};
        for (var i = 0, length = list.length; i < length; i++) {
          if (values) {
            result[list[i]] = values[i];
          } else {
            result[list[i][0]] = list[i][1];
          }
        }
        return result;
      };
      _.indexOf = function (array, item, isSorted) {
        if (array == null)
          return -1;
        var i = 0, length = array.length;
        if (isSorted) {
          if (typeof isSorted == 'number') {
            i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
          } else {
            i = _.sortedIndex(array, item);
            return array[i] === item ? i : -1;
          }
        }
        if (nativeIndexOf && array.indexOf === nativeIndexOf)
          return array.indexOf(item, isSorted);
        for (; i < length; i++)
          if (array[i] === item)
            return i;
        return -1;
      };
      _.lastIndexOf = function (array, item, from) {
        if (array == null)
          return -1;
        var hasIndex = from != null;
        if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
          return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
        }
        var i = hasIndex ? from : array.length;
        while (i--)
          if (array[i] === item)
            return i;
        return -1;
      };
      _.range = function (start, stop, step) {
        if (arguments.length <= 1) {
          stop = start || 0;
          start = 0;
        }
        step = arguments[2] || 1;
        var length = Math.max(Math.ceil((stop - start) / step), 0);
        var idx = 0;
        var range = new Array(length);
        while (idx < length) {
          range[idx++] = start;
          start += step;
        }
        return range;
      };
      var ctor = function () {
      };
      _.bind = function (func, context) {
        var args, bound;
        if (nativeBind && func.bind === nativeBind)
          return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func))
          throw new TypeError();
        args = slice.call(arguments, 2);
        return bound = function () {
          if (!(this instanceof bound))
            return func.apply(context, args.concat(slice.call(arguments)));
          ctor.prototype = func.prototype;
          var self = new ctor();
          ctor.prototype = null;
          var result = func.apply(self, args.concat(slice.call(arguments)));
          if (Object(result) === result)
            return result;
          return self;
        };
      };
      _.partial = function (func) {
        var args = slice.call(arguments, 1);
        return function () {
          return func.apply(this, args.concat(slice.call(arguments)));
        };
      };
      _.bindAll = function (obj) {
        var funcs = slice.call(arguments, 1);
        if (funcs.length === 0)
          throw new Error('bindAll must be passed function names');
        each(funcs, function (f) {
          obj[f] = _.bind(obj[f], obj);
        });
        return obj;
      };
      _.memoize = function (func, hasher) {
        var memo = {};
        hasher || (hasher = _.identity);
        return function () {
          var key = hasher.apply(this, arguments);
          return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments);
        };
      };
      _.delay = function (func, wait) {
        var args = slice.call(arguments, 2);
        return setTimeout(function () {
          return func.apply(null, args);
        }, wait);
      };
      _.defer = function (func) {
        return _.delay.apply(_, [
          func,
          1
        ].concat(slice.call(arguments, 1)));
      };
      _.throttle = function (func, wait, options) {
        var context, args, result;
        var timeout = null;
        var previous = 0;
        options || (options = {});
        var later = function () {
          previous = options.leading === false ? 0 : new Date();
          timeout = null;
          result = func.apply(context, args);
        };
        return function () {
          var now = new Date();
          if (!previous && options.leading === false)
            previous = now;
          var remaining = wait - (now - previous);
          context = this;
          args = arguments;
          if (remaining <= 0) {
            clearTimeout(timeout);
            timeout = null;
            previous = now;
            result = func.apply(context, args);
          } else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
          }
          return result;
        };
      };
      _.debounce = function (func, wait, immediate) {
        var timeout, args, context, timestamp, result;
        return function () {
          context = this;
          args = arguments;
          timestamp = new Date();
          var later = function () {
            var last = new Date() - timestamp;
            if (last < wait) {
              timeout = setTimeout(later, wait - last);
            } else {
              timeout = null;
              if (!immediate)
                result = func.apply(context, args);
            }
          };
          var callNow = immediate && !timeout;
          if (!timeout) {
            timeout = setTimeout(later, wait);
          }
          if (callNow)
            result = func.apply(context, args);
          return result;
        };
      };
      _.once = function (func) {
        var ran = false, memo;
        return function () {
          if (ran)
            return memo;
          ran = true;
          memo = func.apply(this, arguments);
          func = null;
          return memo;
        };
      };
      _.wrap = function (func, wrapper) {
        return function () {
          var args = [func];
          push.apply(args, arguments);
          return wrapper.apply(this, args);
        };
      };
      _.compose = function () {
        var funcs = arguments;
        return function () {
          var args = arguments;
          for (var i = funcs.length - 1; i >= 0; i--) {
            args = [funcs[i].apply(this, args)];
          }
          return args[0];
        };
      };
      _.after = function (times, func) {
        return function () {
          if (--times < 1) {
            return func.apply(this, arguments);
          }
        };
      };
      _.keys = nativeKeys || function (obj) {
        if (obj !== Object(obj))
          throw new TypeError('Invalid object');
        var keys = [];
        for (var key in obj)
          if (_.has(obj, key))
            keys.push(key);
        return keys;
      };
      _.values = function (obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var values = new Array(length);
        for (var i = 0; i < length; i++) {
          values[i] = obj[keys[i]];
        }
        return values;
      };
      _.pairs = function (obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var pairs = new Array(length);
        for (var i = 0; i < length; i++) {
          pairs[i] = [
            keys[i],
            obj[keys[i]]
          ];
        }
        return pairs;
      };
      _.invert = function (obj) {
        var result = {};
        var keys = _.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) {
          result[obj[keys[i]]] = keys[i];
        }
        return result;
      };
      _.functions = _.methods = function (obj) {
        var names = [];
        for (var key in obj) {
          if (_.isFunction(obj[key]))
            names.push(key);
        }
        return names.sort();
      };
      _.extend = function (obj) {
        each(slice.call(arguments, 1), function (source) {
          if (source) {
            for (var prop in source) {
              obj[prop] = source[prop];
            }
          }
        });
        return obj;
      };
      _.pick = function (obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        each(keys, function (key) {
          if (key in obj)
            copy[key] = obj[key];
        });
        return copy;
      };
      _.omit = function (obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        for (var key in obj) {
          if (!_.contains(keys, key))
            copy[key] = obj[key];
        }
        return copy;
      };
      _.defaults = function (obj) {
        each(slice.call(arguments, 1), function (source) {
          if (source) {
            for (var prop in source) {
              if (obj[prop] === void 0)
                obj[prop] = source[prop];
            }
          }
        });
        return obj;
      };
      _.clone = function (obj) {
        if (!_.isObject(obj))
          return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
      };
      _.tap = function (obj, interceptor) {
        interceptor(obj);
        return obj;
      };
      var eq = function (a, b, aStack, bStack) {
        if (a === b)
          return a !== 0 || 1 / a == 1 / b;
        if (a == null || b == null)
          return a === b;
        if (a instanceof _)
          a = a._wrapped;
        if (b instanceof _)
          b = b._wrapped;
        var className = toString.call(a);
        if (className != toString.call(b))
          return false;
        switch (className) {
        case '[object String]':
          return a == String(b);
        case '[object Number]':
          return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b;
        case '[object Date]':
        case '[object Boolean]':
          return +a == +b;
        case '[object RegExp]':
          return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
        }
        if (typeof a != 'object' || typeof b != 'object')
          return false;
        var length = aStack.length;
        while (length--) {
          if (aStack[length] == a)
            return bStack[length] == b;
        }
        var aCtor = a.constructor, bCtor = b.constructor;
        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor)) {
          return false;
        }
        aStack.push(a);
        bStack.push(b);
        var size = 0, result = true;
        if (className == '[object Array]') {
          size = a.length;
          result = size == b.length;
          if (result) {
            while (size--) {
              if (!(result = eq(a[size], b[size], aStack, bStack)))
                break;
            }
          }
        } else {
          for (var key in a) {
            if (_.has(a, key)) {
              size++;
              if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack)))
                break;
            }
          }
          if (result) {
            for (key in b) {
              if (_.has(b, key) && !size--)
                break;
            }
            result = !size;
          }
        }
        aStack.pop();
        bStack.pop();
        return result;
      };
      _.isEqual = function (a, b) {
        return eq(a, b, [], []);
      };
      _.isEmpty = function (obj) {
        if (obj == null)
          return true;
        if (_.isArray(obj) || _.isString(obj))
          return obj.length === 0;
        for (var key in obj)
          if (_.has(obj, key))
            return false;
        return true;
      };
      _.isElement = function (obj) {
        return !!(obj && obj.nodeType === 1);
      };
      _.isArray = nativeIsArray || function (obj) {
        return toString.call(obj) == '[object Array]';
      };
      _.isObject = function (obj) {
        return obj === Object(obj);
      };
      each([
        'Arguments',
        'Function',
        'String',
        'Number',
        'Date',
        'RegExp'
      ], function (name) {
        _['is' + name] = function (obj) {
          return toString.call(obj) == '[object ' + name + ']';
        };
      });
      if (!_.isArguments(arguments)) {
        _.isArguments = function (obj) {
          return !!(obj && _.has(obj, 'callee'));
        };
      }
      if (typeof /./ !== 'function') {
        _.isFunction = function (obj) {
          return typeof obj === 'function';
        };
      }
      _.isFinite = function (obj) {
        return isFinite(obj) && !isNaN(parseFloat(obj));
      };
      _.isNaN = function (obj) {
        return _.isNumber(obj) && obj != +obj;
      };
      _.isBoolean = function (obj) {
        return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
      };
      _.isNull = function (obj) {
        return obj === null;
      };
      _.isUndefined = function (obj) {
        return obj === void 0;
      };
      _.has = function (obj, key) {
        return hasOwnProperty.call(obj, key);
      };
      _.noConflict = function () {
        root._ = previousUnderscore;
        return this;
      };
      _.identity = function (value) {
        return value;
      };
      _.times = function (n, iterator, context) {
        var accum = Array(Math.max(0, n));
        for (var i = 0; i < n; i++)
          accum[i] = iterator.call(context, i);
        return accum;
      };
      _.random = function (min, max) {
        if (max == null) {
          max = min;
          min = 0;
        }
        return min + Math.floor(Math.random() * (max - min + 1));
      };
      var entityMap = {
          escape: {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            '\'': '&#x27;'
          }
        };
      entityMap.unescape = _.invert(entityMap.escape);
      var entityRegexes = {
          escape: new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
          unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
        };
      _.each([
        'escape',
        'unescape'
      ], function (method) {
        _[method] = function (string) {
          if (string == null)
            return '';
          return ('' + string).replace(entityRegexes[method], function (match) {
            return entityMap[method][match];
          });
        };
      });
      _.result = function (object, property) {
        if (object == null)
          return void 0;
        var value = object[property];
        return _.isFunction(value) ? value.call(object) : value;
      };
      _.mixin = function (obj) {
        each(_.functions(obj), function (name) {
          var func = _[name] = obj[name];
          _.prototype[name] = function () {
            var args = [this._wrapped];
            push.apply(args, arguments);
            return result.call(this, func.apply(_, args));
          };
        });
      };
      var idCounter = 0;
      _.uniqueId = function (prefix) {
        var id = ++idCounter + '';
        return prefix ? prefix + id : id;
      };
      _.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
      };
      var noMatch = /(.)^/;
      var escapes = {
          '\'': '\'',
          '\\': '\\',
          '\r': 'r',
          '\n': 'n',
          '\t': 't',
          '\u2028': 'u2028',
          '\u2029': 'u2029'
        };
      var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
      _.template = function (text, data, settings) {
        var render;
        settings = _.defaults({}, settings, _.templateSettings);
        var matcher = new RegExp([
            (settings.escape || noMatch).source,
            (settings.interpolate || noMatch).source,
            (settings.evaluate || noMatch).source
          ].join('|') + '|$', 'g');
        var index = 0;
        var source = '__p+=\'';
        text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
          source += text.slice(index, offset).replace(escaper, function (match) {
            return '\\' + escapes[match];
          });
          if (escape) {
            source += '\'+\n((__t=(' + escape + '))==null?\'\':_.escape(__t))+\n\'';
          }
          if (interpolate) {
            source += '\'+\n((__t=(' + interpolate + '))==null?\'\':__t)+\n\'';
          }
          if (evaluate) {
            source += '\';\n' + evaluate + '\n__p+=\'';
          }
          index = offset + match.length;
          return match;
        });
        source += '\';\n';
        if (!settings.variable)
          source = 'with(obj||{}){\n' + source + '}\n';
        source = 'var __t,__p=\'\',__j=Array.prototype.join,' + 'print=function(){__p+=__j.call(arguments,\'\');};\n' + source + 'return __p;\n';
        try {
          render = new Function(settings.variable || 'obj', '_', source);
        } catch (e) {
          e.source = source;
          throw e;
        }
        if (data)
          return render(data, _);
        var template = function (data) {
          return render.call(this, data, _);
        };
        template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';
        return template;
      };
      _.chain = function (obj) {
        return _(obj).chain();
      };
      var result = function (obj) {
        return this._chain ? _(obj).chain() : obj;
      };
      _.mixin(_);
      each([
        'pop',
        'push',
        'reverse',
        'shift',
        'sort',
        'splice',
        'unshift'
      ], function (name) {
        var method = ArrayProto[name];
        _.prototype[name] = function () {
          var obj = this._wrapped;
          method.apply(obj, arguments);
          if ((name == 'shift' || name == 'splice') && obj.length === 0)
            delete obj[0];
          return result.call(this, obj);
        };
      });
      each([
        'concat',
        'join',
        'slice'
      ], function (name) {
        var method = ArrayProto[name];
        _.prototype[name] = function () {
          return result.call(this, method.apply(this._wrapped, arguments));
        };
      });
      _.extend(_.prototype, {
        chain: function () {
          this._chain = true;
          return this;
        },
        value: function () {
          return this._wrapped;
        }
      });
    }.call(this));
  },
  './node_modules/spotify-navigation-bar/node_modules/jquery2/jquery-2.0.3.js': function (require, module, exports, global) {
    (function (window, undefined) {
      var rootjQuery, readyList, core_strundefined = typeof undefined, location = window.location, document = window.document, docElem = document.documentElement, _jQuery = window.jQuery, _$ = window.$, class2type = {}, core_deletedIds = [], core_version = '2.0.3', core_concat = core_deletedIds.concat, core_push = core_deletedIds.push, core_slice = core_deletedIds.slice, core_indexOf = core_deletedIds.indexOf, core_toString = class2type.toString, core_hasOwn = class2type.hasOwnProperty, core_trim = core_version.trim, jQuery = function (selector, context) {
          return new jQuery.fn.init(selector, context, rootjQuery);
        }, core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, core_rnotwhite = /\S+/g, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, fcamelCase = function (all, letter) {
          return letter.toUpperCase();
        }, completed = function () {
          document.removeEventListener('DOMContentLoaded', completed, false);
          window.removeEventListener('load', completed, false);
          jQuery.ready();
        };
      jQuery.fn = jQuery.prototype = {
        jquery: core_version,
        constructor: jQuery,
        init: function (selector, context, rootjQuery) {
          var match, elem;
          if (!selector) {
            return this;
          }
          if (typeof selector === 'string') {
            if (selector.charAt(0) === '<' && selector.charAt(selector.length - 1) === '>' && selector.length >= 3) {
              match = [
                null,
                selector,
                null
              ];
            } else {
              match = rquickExpr.exec(selector);
            }
            if (match && (match[1] || !context)) {
              if (match[1]) {
                context = context instanceof jQuery ? context[0] : context;
                jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                  for (match in context) {
                    if (jQuery.isFunction(this[match])) {
                      this[match](context[match]);
                    } else {
                      this.attr(match, context[match]);
                    }
                  }
                }
                return this;
              } else {
                elem = document.getElementById(match[2]);
                if (elem && elem.parentNode) {
                  this.length = 1;
                  this[0] = elem;
                }
                this.context = document;
                this.selector = selector;
                return this;
              }
            } else if (!context || context.jquery) {
              return (context || rootjQuery).find(selector);
            } else {
              return this.constructor(context).find(selector);
            }
          } else if (selector.nodeType) {
            this.context = this[0] = selector;
            this.length = 1;
            return this;
          } else if (jQuery.isFunction(selector)) {
            return rootjQuery.ready(selector);
          }
          if (selector.selector !== undefined) {
            this.selector = selector.selector;
            this.context = selector.context;
          }
          return jQuery.makeArray(selector, this);
        },
        selector: '',
        length: 0,
        toArray: function () {
          return core_slice.call(this);
        },
        get: function (num) {
          return num == null ? this.toArray() : num < 0 ? this[this.length + num] : this[num];
        },
        pushStack: function (elems) {
          var ret = jQuery.merge(this.constructor(), elems);
          ret.prevObject = this;
          ret.context = this.context;
          return ret;
        },
        each: function (callback, args) {
          return jQuery.each(this, callback, args);
        },
        ready: function (fn) {
          jQuery.ready.promise().done(fn);
          return this;
        },
        slice: function () {
          return this.pushStack(core_slice.apply(this, arguments));
        },
        first: function () {
          return this.eq(0);
        },
        last: function () {
          return this.eq(-1);
        },
        eq: function (i) {
          var len = this.length, j = +i + (i < 0 ? len : 0);
          return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        map: function (callback) {
          return this.pushStack(jQuery.map(this, function (elem, i) {
            return callback.call(elem, i, elem);
          }));
        },
        end: function () {
          return this.prevObject || this.constructor(null);
        },
        push: core_push,
        sort: [].sort,
        splice: [].splice
      };
      jQuery.fn.init.prototype = jQuery.fn;
      jQuery.extend = jQuery.fn.extend = function () {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === 'boolean') {
          deep = target;
          target = arguments[1] || {};
          i = 2;
        }
        if (typeof target !== 'object' && !jQuery.isFunction(target)) {
          target = {};
        }
        if (length === i) {
          target = this;
          --i;
        }
        for (; i < length; i++) {
          if ((options = arguments[i]) != null) {
            for (name in options) {
              src = target[name];
              copy = options[name];
              if (target === copy) {
                continue;
              }
              if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && jQuery.isArray(src) ? src : [];
                } else {
                  clone = src && jQuery.isPlainObject(src) ? src : {};
                }
                target[name] = jQuery.extend(deep, clone, copy);
              } else if (copy !== undefined) {
                target[name] = copy;
              }
            }
          }
        }
        return target;
      };
      jQuery.extend({
        expando: 'jQuery' + (core_version + Math.random()).replace(/\D/g, ''),
        noConflict: function (deep) {
          if (window.$ === jQuery) {
            window.$ = _$;
          }
          if (deep && window.jQuery === jQuery) {
            window.jQuery = _jQuery;
          }
          return jQuery;
        },
        isReady: false,
        readyWait: 1,
        holdReady: function (hold) {
          if (hold) {
            jQuery.readyWait++;
          } else {
            jQuery.ready(true);
          }
        },
        ready: function (wait) {
          if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
            return;
          }
          jQuery.isReady = true;
          if (wait !== true && --jQuery.readyWait > 0) {
            return;
          }
          readyList.resolveWith(document, [jQuery]);
          if (jQuery.fn.trigger) {
            jQuery(document).trigger('ready').off('ready');
          }
        },
        isFunction: function (obj) {
          return jQuery.type(obj) === 'function';
        },
        isArray: Array.isArray,
        isWindow: function (obj) {
          return obj != null && obj === obj.window;
        },
        isNumeric: function (obj) {
          return !isNaN(parseFloat(obj)) && isFinite(obj);
        },
        type: function (obj) {
          if (obj == null) {
            return String(obj);
          }
          return typeof obj === 'object' || typeof obj === 'function' ? class2type[core_toString.call(obj)] || 'object' : typeof obj;
        },
        isPlainObject: function (obj) {
          if (jQuery.type(obj) !== 'object' || obj.nodeType || jQuery.isWindow(obj)) {
            return false;
          }
          try {
            if (obj.constructor && !core_hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {
              return false;
            }
          } catch (e) {
            return false;
          }
          return true;
        },
        isEmptyObject: function (obj) {
          var name;
          for (name in obj) {
            return false;
          }
          return true;
        },
        error: function (msg) {
          throw new Error(msg);
        },
        parseHTML: function (data, context, keepScripts) {
          if (!data || typeof data !== 'string') {
            return null;
          }
          if (typeof context === 'boolean') {
            keepScripts = context;
            context = false;
          }
          context = context || document;
          var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
          if (parsed) {
            return [context.createElement(parsed[1])];
          }
          parsed = jQuery.buildFragment([data], context, scripts);
          if (scripts) {
            jQuery(scripts).remove();
          }
          return jQuery.merge([], parsed.childNodes);
        },
        parseJSON: JSON.parse,
        parseXML: function (data) {
          var xml, tmp;
          if (!data || typeof data !== 'string') {
            return null;
          }
          try {
            tmp = new DOMParser();
            xml = tmp.parseFromString(data, 'text/xml');
          } catch (e) {
            xml = undefined;
          }
          if (!xml || xml.getElementsByTagName('parsererror').length) {
            jQuery.error('Invalid XML: ' + data);
          }
          return xml;
        },
        noop: function () {
        },
        globalEval: function (code) {
          var script, indirect = eval;
          code = jQuery.trim(code);
          if (code) {
            if (code.indexOf('use strict') === 1) {
              script = document.createElement('script');
              script.text = code;
              document.head.appendChild(script).parentNode.removeChild(script);
            } else {
              indirect(code);
            }
          }
        },
        camelCase: function (string) {
          return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase);
        },
        nodeName: function (elem, name) {
          return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
        each: function (obj, callback, args) {
          var value, i = 0, length = obj.length, isArray = isArraylike(obj);
          if (args) {
            if (isArray) {
              for (; i < length; i++) {
                value = callback.apply(obj[i], args);
                if (value === false) {
                  break;
                }
              }
            } else {
              for (i in obj) {
                value = callback.apply(obj[i], args);
                if (value === false) {
                  break;
                }
              }
            }
          } else {
            if (isArray) {
              for (; i < length; i++) {
                value = callback.call(obj[i], i, obj[i]);
                if (value === false) {
                  break;
                }
              }
            } else {
              for (i in obj) {
                value = callback.call(obj[i], i, obj[i]);
                if (value === false) {
                  break;
                }
              }
            }
          }
          return obj;
        },
        trim: function (text) {
          return text == null ? '' : core_trim.call(text);
        },
        makeArray: function (arr, results) {
          var ret = results || [];
          if (arr != null) {
            if (isArraylike(Object(arr))) {
              jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr);
            } else {
              core_push.call(ret, arr);
            }
          }
          return ret;
        },
        inArray: function (elem, arr, i) {
          return arr == null ? -1 : core_indexOf.call(arr, elem, i);
        },
        merge: function (first, second) {
          var l = second.length, i = first.length, j = 0;
          if (typeof l === 'number') {
            for (; j < l; j++) {
              first[i++] = second[j];
            }
          } else {
            while (second[j] !== undefined) {
              first[i++] = second[j++];
            }
          }
          first.length = i;
          return first;
        },
        grep: function (elems, callback, inv) {
          var retVal, ret = [], i = 0, length = elems.length;
          inv = !!inv;
          for (; i < length; i++) {
            retVal = !!callback(elems[i], i);
            if (inv !== retVal) {
              ret.push(elems[i]);
            }
          }
          return ret;
        },
        map: function (elems, callback, arg) {
          var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
          if (isArray) {
            for (; i < length; i++) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret[ret.length] = value;
              }
            }
          } else {
            for (i in elems) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret[ret.length] = value;
              }
            }
          }
          return core_concat.apply([], ret);
        },
        guid: 1,
        proxy: function (fn, context) {
          var tmp, args, proxy;
          if (typeof context === 'string') {
            tmp = fn[context];
            context = fn;
            fn = tmp;
          }
          if (!jQuery.isFunction(fn)) {
            return undefined;
          }
          args = core_slice.call(arguments, 2);
          proxy = function () {
            return fn.apply(context || this, args.concat(core_slice.call(arguments)));
          };
          proxy.guid = fn.guid = fn.guid || jQuery.guid++;
          return proxy;
        },
        access: function (elems, fn, key, value, chainable, emptyGet, raw) {
          var i = 0, length = elems.length, bulk = key == null;
          if (jQuery.type(key) === 'object') {
            chainable = true;
            for (i in key) {
              jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
            }
          } else if (value !== undefined) {
            chainable = true;
            if (!jQuery.isFunction(value)) {
              raw = true;
            }
            if (bulk) {
              if (raw) {
                fn.call(elems, value);
                fn = null;
              } else {
                bulk = fn;
                fn = function (elem, key, value) {
                  return bulk.call(jQuery(elem), value);
                };
              }
            }
            if (fn) {
              for (; i < length; i++) {
                fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
              }
            }
          }
          return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
        },
        now: Date.now,
        swap: function (elem, options, callback, args) {
          var ret, name, old = {};
          for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
          }
          ret = callback.apply(elem, args || []);
          for (name in options) {
            elem.style[name] = old[name];
          }
          return ret;
        }
      });
      jQuery.ready.promise = function (obj) {
        if (!readyList) {
          readyList = jQuery.Deferred();
          if (document.readyState === 'complete') {
            setTimeout(jQuery.ready);
          } else {
            document.addEventListener('DOMContentLoaded', completed, false);
            window.addEventListener('load', completed, false);
          }
        }
        return readyList.promise(obj);
      };
      jQuery.each('Boolean Number String Function Array Date RegExp Object Error'.split(' '), function (i, name) {
        class2type['[object ' + name + ']'] = name.toLowerCase();
      });
      function isArraylike(obj) {
        var length = obj.length, type = jQuery.type(obj);
        if (jQuery.isWindow(obj)) {
          return false;
        }
        if (obj.nodeType === 1 && length) {
          return true;
        }
        return type === 'array' || type !== 'function' && (length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj);
      }
      rootjQuery = jQuery(document);
      (function (window, undefined) {
        var i, support, cachedruns, Expr, getText, isXML, compile, outermostContext, sortInput, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = 'sizzle' + -new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), hasDuplicate = false, sortOrder = function (a, b) {
            if (a === b) {
              hasDuplicate = true;
              return 0;
            }
            return 0;
          }, strundefined = typeof undefined, MAX_NEGATIVE = 1 << 31, hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = arr.indexOf || function (elem) {
            var i = 0, len = this.length;
            for (; i < len; i++) {
              if (this[i] === elem) {
                return i;
              }
            }
            return -1;
          }, booleans = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped', whitespace = '[\\x20\\t\\r\\n\\f]', characterEncoding = '(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+', identifier = characterEncoding.replace('w', 'w#'), attributes = '\\[' + whitespace + '*(' + characterEncoding + ')' + whitespace + '*(?:([*^$|!~]?=)' + whitespace + '*(?:([\'"])((?:\\\\.|[^\\\\])*?)\\3|(' + identifier + ')|)|)' + whitespace + '*\\]', pseudos = ':(' + characterEncoding + ')(?:\\((([\'"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|' + attributes.replace(3, 8) + ')*)|.*)\\)|)', rtrim = new RegExp('^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$', 'g'), rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'), rcombinators = new RegExp('^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*'), rsibling = new RegExp(whitespace + '*[+~]'), rattributeQuotes = new RegExp('=' + whitespace + '*([^\\]\'"]*)' + whitespace + '*\\]', 'g'), rpseudo = new RegExp(pseudos), ridentifier = new RegExp('^' + identifier + '$'), matchExpr = {
            'ID': new RegExp('^#(' + characterEncoding + ')'),
            'CLASS': new RegExp('^\\.(' + characterEncoding + ')'),
            'TAG': new RegExp('^(' + characterEncoding.replace('w', 'w*') + ')'),
            'ATTR': new RegExp('^' + attributes),
            'PSEUDO': new RegExp('^' + pseudos),
            'CHILD': new RegExp('^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' + whitespace + '*(even|odd|(([+-]|)(\\d*)n|)' + whitespace + '*(?:([+-]|)' + whitespace + '*(\\d+)|))' + whitespace + '*\\)|)', 'i'),
            'bool': new RegExp('^(?:' + booleans + ')$', 'i'),
            'needsContext': new RegExp('^' + whitespace + '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + whitespace + '*((?:-\\d)?\\d*)' + whitespace + '*\\)|)(?=[^-]|$)', 'i')
          }, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rescape = /'|\\/g, runescape = new RegExp('\\\\([\\da-f]{1,6}' + whitespace + '?|(' + whitespace + ')|.)', 'ig'), funescape = function (_, escaped, escapedWhitespace) {
            var high = '0x' + escaped - 65536;
            return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
          };
        try {
          push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
          arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
          push = {
            apply: arr.length ? function (target, els) {
              push_native.apply(target, slice.call(els));
            } : function (target, els) {
              var j = target.length, i = 0;
              while (target[j++] = els[i++]) {
              }
              target.length = j - 1;
            }
          };
        }
        function Sizzle(selector, context, results, seed) {
          var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
          if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
            setDocument(context);
          }
          context = context || document;
          results = results || [];
          if (!selector || typeof selector !== 'string') {
            return results;
          }
          if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {
            return [];
          }
          if (documentIsHTML && !seed) {
            if (match = rquickExpr.exec(selector)) {
              if (m = match[1]) {
                if (nodeType === 9) {
                  elem = context.getElementById(m);
                  if (elem && elem.parentNode) {
                    if (elem.id === m) {
                      results.push(elem);
                      return results;
                    }
                  } else {
                    return results;
                  }
                } else {
                  if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                    results.push(elem);
                    return results;
                  }
                }
              } else if (match[2]) {
                push.apply(results, context.getElementsByTagName(selector));
                return results;
              } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                push.apply(results, context.getElementsByClassName(m));
                return results;
              }
            }
            if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
              nid = old = expando;
              newContext = context;
              newSelector = nodeType === 9 && selector;
              if (nodeType === 1 && context.nodeName.toLowerCase() !== 'object') {
                groups = tokenize(selector);
                if (old = context.getAttribute('id')) {
                  nid = old.replace(rescape, '\\$&');
                } else {
                  context.setAttribute('id', nid);
                }
                nid = '[id=\'' + nid + '\'] ';
                i = groups.length;
                while (i--) {
                  groups[i] = nid + toSelector(groups[i]);
                }
                newContext = rsibling.test(selector) && context.parentNode || context;
                newSelector = groups.join(',');
              }
              if (newSelector) {
                try {
                  push.apply(results, newContext.querySelectorAll(newSelector));
                  return results;
                } catch (qsaError) {
                } finally {
                  if (!old) {
                    context.removeAttribute('id');
                  }
                }
              }
            }
          }
          return select(selector.replace(rtrim, '$1'), context, results, seed);
        }
        function createCache() {
          var keys = [];
          function cache(key, value) {
            if (keys.push(key += ' ') > Expr.cacheLength) {
              delete cache[keys.shift()];
            }
            return cache[key] = value;
          }
          return cache;
        }
        function markFunction(fn) {
          fn[expando] = true;
          return fn;
        }
        function assert(fn) {
          var div = document.createElement('div');
          try {
            return !!fn(div);
          } catch (e) {
            return false;
          } finally {
            if (div.parentNode) {
              div.parentNode.removeChild(div);
            }
            div = null;
          }
        }
        function addHandle(attrs, handler) {
          var arr = attrs.split('|'), i = attrs.length;
          while (i--) {
            Expr.attrHandle[arr[i]] = handler;
          }
        }
        function siblingCheck(a, b) {
          var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
          if (diff) {
            return diff;
          }
          if (cur) {
            while (cur = cur.nextSibling) {
              if (cur === b) {
                return -1;
              }
            }
          }
          return a ? 1 : -1;
        }
        function createInputPseudo(type) {
          return function (elem) {
            var name = elem.nodeName.toLowerCase();
            return name === 'input' && elem.type === type;
          };
        }
        function createButtonPseudo(type) {
          return function (elem) {
            var name = elem.nodeName.toLowerCase();
            return (name === 'input' || name === 'button') && elem.type === type;
          };
        }
        function createPositionalPseudo(fn) {
          return markFunction(function (argument) {
            argument = +argument;
            return markFunction(function (seed, matches) {
              var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
              while (i--) {
                if (seed[j = matchIndexes[i]]) {
                  seed[j] = !(matches[j] = seed[j]);
                }
              }
            });
          });
        }
        isXML = Sizzle.isXML = function (elem) {
          var documentElement = elem && (elem.ownerDocument || elem).documentElement;
          return documentElement ? documentElement.nodeName !== 'HTML' : false;
        };
        support = Sizzle.support = {};
        setDocument = Sizzle.setDocument = function (node) {
          var doc = node ? node.ownerDocument || node : preferredDoc, parent = doc.defaultView;
          if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
            return document;
          }
          document = doc;
          docElem = doc.documentElement;
          documentIsHTML = !isXML(doc);
          if (parent && parent.attachEvent && parent !== parent.top) {
            parent.attachEvent('onbeforeunload', function () {
              setDocument();
            });
          }
          support.attributes = assert(function (div) {
            div.className = 'i';
            return !div.getAttribute('className');
          });
          support.getElementsByTagName = assert(function (div) {
            div.appendChild(doc.createComment(''));
            return !div.getElementsByTagName('*').length;
          });
          support.getElementsByClassName = assert(function (div) {
            div.innerHTML = '<div class=\'a\'></div><div class=\'a i\'></div>';
            div.firstChild.className = 'i';
            return div.getElementsByClassName('i').length === 2;
          });
          support.getById = assert(function (div) {
            docElem.appendChild(div).id = expando;
            return !doc.getElementsByName || !doc.getElementsByName(expando).length;
          });
          if (support.getById) {
            Expr.find['ID'] = function (id, context) {
              if (typeof context.getElementById !== strundefined && documentIsHTML) {
                var m = context.getElementById(id);
                return m && m.parentNode ? [m] : [];
              }
            };
            Expr.filter['ID'] = function (id) {
              var attrId = id.replace(runescape, funescape);
              return function (elem) {
                return elem.getAttribute('id') === attrId;
              };
            };
          } else {
            delete Expr.find['ID'];
            Expr.filter['ID'] = function (id) {
              var attrId = id.replace(runescape, funescape);
              return function (elem) {
                var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode('id');
                return node && node.value === attrId;
              };
            };
          }
          Expr.find['TAG'] = support.getElementsByTagName ? function (tag, context) {
            if (typeof context.getElementsByTagName !== strundefined) {
              return context.getElementsByTagName(tag);
            }
          } : function (tag, context) {
            var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
            if (tag === '*') {
              while (elem = results[i++]) {
                if (elem.nodeType === 1) {
                  tmp.push(elem);
                }
              }
              return tmp;
            }
            return results;
          };
          Expr.find['CLASS'] = support.getElementsByClassName && function (className, context) {
            if (typeof context.getElementsByClassName !== strundefined && documentIsHTML) {
              return context.getElementsByClassName(className);
            }
          };
          rbuggyMatches = [];
          rbuggyQSA = [];
          if (support.qsa = rnative.test(doc.querySelectorAll)) {
            assert(function (div) {
              div.innerHTML = '<select><option selected=\'\'></option></select>';
              if (!div.querySelectorAll('[selected]').length) {
                rbuggyQSA.push('\\[' + whitespace + '*(?:value|' + booleans + ')');
              }
              if (!div.querySelectorAll(':checked').length) {
                rbuggyQSA.push(':checked');
              }
            });
            assert(function (div) {
              var input = doc.createElement('input');
              input.setAttribute('type', 'hidden');
              div.appendChild(input).setAttribute('t', '');
              if (div.querySelectorAll('[t^=\'\']').length) {
                rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\'\'|"")');
              }
              if (!div.querySelectorAll(':enabled').length) {
                rbuggyQSA.push(':enabled', ':disabled');
              }
              div.querySelectorAll('*,:x');
              rbuggyQSA.push(',.*:');
            });
          }
          if (support.matchesSelector = rnative.test(matches = docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
            assert(function (div) {
              support.disconnectedMatch = matches.call(div, 'div');
              matches.call(div, '[s!=\'\']:x');
              rbuggyMatches.push('!=', pseudos);
            });
          }
          rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));
          rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join('|'));
          contains = rnative.test(docElem.contains) || docElem.compareDocumentPosition ? function (a, b) {
            var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
            return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
          } : function (a, b) {
            if (b) {
              while (b = b.parentNode) {
                if (b === a) {
                  return true;
                }
              }
            }
            return false;
          };
          sortOrder = docElem.compareDocumentPosition ? function (a, b) {
            if (a === b) {
              hasDuplicate = true;
              return 0;
            }
            var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition(b);
            if (compare) {
              if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                if (a === doc || contains(preferredDoc, a)) {
                  return -1;
                }
                if (b === doc || contains(preferredDoc, b)) {
                  return 1;
                }
                return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
              }
              return compare & 4 ? -1 : 1;
            }
            return a.compareDocumentPosition ? -1 : 1;
          } : function (a, b) {
            var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
            if (a === b) {
              hasDuplicate = true;
              return 0;
            } else if (!aup || !bup) {
              return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
            } else if (aup === bup) {
              return siblingCheck(a, b);
            }
            cur = a;
            while (cur = cur.parentNode) {
              ap.unshift(cur);
            }
            cur = b;
            while (cur = cur.parentNode) {
              bp.unshift(cur);
            }
            while (ap[i] === bp[i]) {
              i++;
            }
            return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
          };
          return doc;
        };
        Sizzle.matches = function (expr, elements) {
          return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function (elem, expr) {
          if ((elem.ownerDocument || elem) !== document) {
            setDocument(elem);
          }
          expr = expr.replace(rattributeQuotes, '=\'$1\']');
          if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
            try {
              var ret = matches.call(elem, expr);
              if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                return ret;
              }
            } catch (e) {
            }
          }
          return Sizzle(expr, document, null, [elem]).length > 0;
        };
        Sizzle.contains = function (context, elem) {
          if ((context.ownerDocument || context) !== document) {
            setDocument(context);
          }
          return contains(context, elem);
        };
        Sizzle.attr = function (elem, name) {
          if ((elem.ownerDocument || elem) !== document) {
            setDocument(elem);
          }
          var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
          return val === undefined ? support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null : val;
        };
        Sizzle.error = function (msg) {
          throw new Error('Syntax error, unrecognized expression: ' + msg);
        };
        Sizzle.uniqueSort = function (results) {
          var elem, duplicates = [], j = 0, i = 0;
          hasDuplicate = !support.detectDuplicates;
          sortInput = !support.sortStable && results.slice(0);
          results.sort(sortOrder);
          if (hasDuplicate) {
            while (elem = results[i++]) {
              if (elem === results[i]) {
                j = duplicates.push(i);
              }
            }
            while (j--) {
              results.splice(duplicates[j], 1);
            }
          }
          return results;
        };
        getText = Sizzle.getText = function (elem) {
          var node, ret = '', i = 0, nodeType = elem.nodeType;
          if (!nodeType) {
            for (; node = elem[i]; i++) {
              ret += getText(node);
            }
          } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
            if (typeof elem.textContent === 'string') {
              return elem.textContent;
            } else {
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                ret += getText(elem);
              }
            }
          } else if (nodeType === 3 || nodeType === 4) {
            return elem.nodeValue;
          }
          return ret;
        };
        Expr = Sizzle.selectors = {
          cacheLength: 50,
          createPseudo: markFunction,
          match: matchExpr,
          attrHandle: {},
          find: {},
          relative: {
            '>': {
              dir: 'parentNode',
              first: true
            },
            ' ': { dir: 'parentNode' },
            '+': {
              dir: 'previousSibling',
              first: true
            },
            '~': { dir: 'previousSibling' }
          },
          preFilter: {
            'ATTR': function (match) {
              match[1] = match[1].replace(runescape, funescape);
              match[3] = (match[4] || match[5] || '').replace(runescape, funescape);
              if (match[2] === '~=') {
                match[3] = ' ' + match[3] + ' ';
              }
              return match.slice(0, 4);
            },
            'CHILD': function (match) {
              match[1] = match[1].toLowerCase();
              if (match[1].slice(0, 3) === 'nth') {
                if (!match[3]) {
                  Sizzle.error(match[0]);
                }
                match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === 'even' || match[3] === 'odd'));
                match[5] = +(match[7] + match[8] || match[3] === 'odd');
              } else if (match[3]) {
                Sizzle.error(match[0]);
              }
              return match;
            },
            'PSEUDO': function (match) {
              var excess, unquoted = !match[5] && match[2];
              if (matchExpr['CHILD'].test(match[0])) {
                return null;
              }
              if (match[3] && match[4] !== undefined) {
                match[2] = match[4];
              } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(')', unquoted.length - excess) - unquoted.length)) {
                match[0] = match[0].slice(0, excess);
                match[2] = unquoted.slice(0, excess);
              }
              return match.slice(0, 3);
            }
          },
          filter: {
            'TAG': function (nodeNameSelector) {
              var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
              return nodeNameSelector === '*' ? function () {
                return true;
              } : function (elem) {
                return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
              };
            },
            'CLASS': function (className) {
              var pattern = classCache[className + ' '];
              return pattern || (pattern = new RegExp('(^|' + whitespace + ')' + className + '(' + whitespace + '|$)')) && classCache(className, function (elem) {
                return pattern.test(typeof elem.className === 'string' && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute('class') || '');
              });
            },
            'ATTR': function (name, operator, check) {
              return function (elem) {
                var result = Sizzle.attr(elem, name);
                if (result == null) {
                  return operator === '!=';
                }
                if (!operator) {
                  return true;
                }
                result += '';
                return operator === '=' ? result === check : operator === '!=' ? result !== check : operator === '^=' ? check && result.indexOf(check) === 0 : operator === '*=' ? check && result.indexOf(check) > -1 : operator === '$=' ? check && result.slice(-check.length) === check : operator === '~=' ? (' ' + result + ' ').indexOf(check) > -1 : operator === '|=' ? result === check || result.slice(0, check.length + 1) === check + '-' : false;
              };
            },
            'CHILD': function (type, what, argument, first, last) {
              var simple = type.slice(0, 3) !== 'nth', forward = type.slice(-4) !== 'last', ofType = what === 'of-type';
              return first === 1 && last === 0 ? function (elem) {
                return !!elem.parentNode;
              } : function (elem, context, xml) {
                var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? 'nextSibling' : 'previousSibling', parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
                if (parent) {
                  if (simple) {
                    while (dir) {
                      node = elem;
                      while (node = node[dir]) {
                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                          return false;
                        }
                      }
                      start = dir = type === 'only' && !start && 'nextSibling';
                    }
                    return true;
                  }
                  start = [forward ? parent.firstChild : parent.lastChild];
                  if (forward && useCache) {
                    outerCache = parent[expando] || (parent[expando] = {});
                    cache = outerCache[type] || [];
                    nodeIndex = cache[0] === dirruns && cache[1];
                    diff = cache[0] === dirruns && cache[2];
                    node = nodeIndex && parent.childNodes[nodeIndex];
                    while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                      if (node.nodeType === 1 && ++diff && node === elem) {
                        outerCache[type] = [
                          dirruns,
                          nodeIndex,
                          diff
                        ];
                        break;
                      }
                    }
                  } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                    diff = cache[1];
                  } else {
                    while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                      if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                        if (useCache) {
                          (node[expando] || (node[expando] = {}))[type] = [
                            dirruns,
                            diff
                          ];
                        }
                        if (node === elem) {
                          break;
                        }
                      }
                    }
                  }
                  diff -= last;
                  return diff === first || diff % first === 0 && diff / first >= 0;
                }
              };
            },
            'PSEUDO': function (pseudo, argument) {
              var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error('unsupported pseudo: ' + pseudo);
              if (fn[expando]) {
                return fn(argument);
              }
              if (fn.length > 1) {
                args = [
                  pseudo,
                  pseudo,
                  '',
                  argument
                ];
                return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                  var idx, matched = fn(seed, argument), i = matched.length;
                  while (i--) {
                    idx = indexOf.call(seed, matched[i]);
                    seed[idx] = !(matches[idx] = matched[i]);
                  }
                }) : function (elem) {
                  return fn(elem, 0, args);
                };
              }
              return fn;
            }
          },
          pseudos: {
            'not': markFunction(function (selector) {
              var input = [], results = [], matcher = compile(selector.replace(rtrim, '$1'));
              return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
                var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                while (i--) {
                  if (elem = unmatched[i]) {
                    seed[i] = !(matches[i] = elem);
                  }
                }
              }) : function (elem, context, xml) {
                input[0] = elem;
                matcher(input, null, xml, results);
                return !results.pop();
              };
            }),
            'has': markFunction(function (selector) {
              return function (elem) {
                return Sizzle(selector, elem).length > 0;
              };
            }),
            'contains': markFunction(function (text) {
              return function (elem) {
                return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
              };
            }),
            'lang': markFunction(function (lang) {
              if (!ridentifier.test(lang || '')) {
                Sizzle.error('unsupported lang: ' + lang);
              }
              lang = lang.replace(runescape, funescape).toLowerCase();
              return function (elem) {
                var elemLang;
                do {
                  if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute('xml:lang') || elem.getAttribute('lang')) {
                    elemLang = elemLang.toLowerCase();
                    return elemLang === lang || elemLang.indexOf(lang + '-') === 0;
                  }
                } while ((elem = elem.parentNode) && elem.nodeType === 1);
                return false;
              };
            }),
            'target': function (elem) {
              var hash = window.location && window.location.hash;
              return hash && hash.slice(1) === elem.id;
            },
            'root': function (elem) {
              return elem === docElem;
            },
            'focus': function (elem) {
              return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
            },
            'enabled': function (elem) {
              return elem.disabled === false;
            },
            'disabled': function (elem) {
              return elem.disabled === true;
            },
            'checked': function (elem) {
              var nodeName = elem.nodeName.toLowerCase();
              return nodeName === 'input' && !!elem.checked || nodeName === 'option' && !!elem.selected;
            },
            'selected': function (elem) {
              if (elem.parentNode) {
                elem.parentNode.selectedIndex;
              }
              return elem.selected === true;
            },
            'empty': function (elem) {
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                if (elem.nodeName > '@' || elem.nodeType === 3 || elem.nodeType === 4) {
                  return false;
                }
              }
              return true;
            },
            'parent': function (elem) {
              return !Expr.pseudos['empty'](elem);
            },
            'header': function (elem) {
              return rheader.test(elem.nodeName);
            },
            'input': function (elem) {
              return rinputs.test(elem.nodeName);
            },
            'button': function (elem) {
              var name = elem.nodeName.toLowerCase();
              return name === 'input' && elem.type === 'button' || name === 'button';
            },
            'text': function (elem) {
              var attr;
              return elem.nodeName.toLowerCase() === 'input' && elem.type === 'text' && ((attr = elem.getAttribute('type')) == null || attr.toLowerCase() === elem.type);
            },
            'first': createPositionalPseudo(function () {
              return [0];
            }),
            'last': createPositionalPseudo(function (matchIndexes, length) {
              return [length - 1];
            }),
            'eq': createPositionalPseudo(function (matchIndexes, length, argument) {
              return [argument < 0 ? argument + length : argument];
            }),
            'even': createPositionalPseudo(function (matchIndexes, length) {
              var i = 0;
              for (; i < length; i += 2) {
                matchIndexes.push(i);
              }
              return matchIndexes;
            }),
            'odd': createPositionalPseudo(function (matchIndexes, length) {
              var i = 1;
              for (; i < length; i += 2) {
                matchIndexes.push(i);
              }
              return matchIndexes;
            }),
            'lt': createPositionalPseudo(function (matchIndexes, length, argument) {
              var i = argument < 0 ? argument + length : argument;
              for (; --i >= 0;) {
                matchIndexes.push(i);
              }
              return matchIndexes;
            }),
            'gt': createPositionalPseudo(function (matchIndexes, length, argument) {
              var i = argument < 0 ? argument + length : argument;
              for (; ++i < length;) {
                matchIndexes.push(i);
              }
              return matchIndexes;
            })
          }
        };
        Expr.pseudos['nth'] = Expr.pseudos['eq'];
        for (i in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
          }) {
          Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {
            submit: true,
            reset: true
          }) {
          Expr.pseudos[i] = createButtonPseudo(i);
        }
        function setFilters() {
        }
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        function tokenize(selector, parseOnly) {
          var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + ' '];
          if (cached) {
            return parseOnly ? 0 : cached.slice(0);
          }
          soFar = selector;
          groups = [];
          preFilters = Expr.preFilter;
          while (soFar) {
            if (!matched || (match = rcomma.exec(soFar))) {
              if (match) {
                soFar = soFar.slice(match[0].length) || soFar;
              }
              groups.push(tokens = []);
            }
            matched = false;
            if (match = rcombinators.exec(soFar)) {
              matched = match.shift();
              tokens.push({
                value: matched,
                type: match[0].replace(rtrim, ' ')
              });
              soFar = soFar.slice(matched.length);
            }
            for (type in Expr.filter) {
              if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  type: type,
                  matches: match
                });
                soFar = soFar.slice(matched.length);
              }
            }
            if (!matched) {
              break;
            }
          }
          return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
        }
        function toSelector(tokens) {
          var i = 0, len = tokens.length, selector = '';
          for (; i < len; i++) {
            selector += tokens[i].value;
          }
          return selector;
        }
        function addCombinator(matcher, combinator, base) {
          var dir = combinator.dir, checkNonElements = base && dir === 'parentNode', doneName = done++;
          return combinator.first ? function (elem, context, xml) {
            while (elem = elem[dir]) {
              if (elem.nodeType === 1 || checkNonElements) {
                return matcher(elem, context, xml);
              }
            }
          } : function (elem, context, xml) {
            var data, cache, outerCache, dirkey = dirruns + ' ' + doneName;
            if (xml) {
              while (elem = elem[dir]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  if (matcher(elem, context, xml)) {
                    return true;
                  }
                }
              }
            } else {
              while (elem = elem[dir]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  outerCache = elem[expando] || (elem[expando] = {});
                  if ((cache = outerCache[dir]) && cache[0] === dirkey) {
                    if ((data = cache[1]) === true || data === cachedruns) {
                      return data === true;
                    }
                  } else {
                    cache = outerCache[dir] = [dirkey];
                    cache[1] = matcher(elem, context, xml) || cachedruns;
                    if (cache[1] === true) {
                      return true;
                    }
                  }
                }
              }
            }
          };
        }
        function elementMatcher(matchers) {
          return matchers.length > 1 ? function (elem, context, xml) {
            var i = matchers.length;
            while (i--) {
              if (!matchers[i](elem, context, xml)) {
                return false;
              }
            }
            return true;
          } : matchers[0];
        }
        function condense(unmatched, map, filter, context, xml) {
          var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
          for (; i < len; i++) {
            if (elem = unmatched[i]) {
              if (!filter || filter(elem, context, xml)) {
                newUnmatched.push(elem);
                if (mapped) {
                  map.push(i);
                }
              }
            }
          }
          return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
          if (postFilter && !postFilter[expando]) {
            postFilter = setMatcher(postFilter);
          }
          if (postFinder && !postFinder[expando]) {
            postFinder = setMatcher(postFinder, postSelector);
          }
          return markFunction(function (seed, results, context, xml) {
            var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || '*', context.nodeType ? [context] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
            if (matcher) {
              matcher(matcherIn, matcherOut, context, xml);
            }
            if (postFilter) {
              temp = condense(matcherOut, postMap);
              postFilter(temp, [], context, xml);
              i = temp.length;
              while (i--) {
                if (elem = temp[i]) {
                  matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                }
              }
            }
            if (seed) {
              if (postFinder || preFilter) {
                if (postFinder) {
                  temp = [];
                  i = matcherOut.length;
                  while (i--) {
                    if (elem = matcherOut[i]) {
                      temp.push(matcherIn[i] = elem);
                    }
                  }
                  postFinder(null, matcherOut = [], temp, xml);
                }
                i = matcherOut.length;
                while (i--) {
                  if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
                    seed[temp] = !(results[temp] = elem);
                  }
                }
              }
            } else {
              matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
              if (postFinder) {
                postFinder(null, results, matcherOut, xml);
              } else {
                push.apply(results, matcherOut);
              }
            }
          });
        }
        function matcherFromTokens(tokens) {
          var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[' '], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function (elem) {
              return elem === checkContext;
            }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) {
              return indexOf.call(checkContext, elem) > -1;
            }, implicitRelative, true), matchers = [function (elem, context, xml) {
                return !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
              }];
          for (; i < len; i++) {
            if (matcher = Expr.relative[tokens[i].type]) {
              matchers = [addCombinator(elementMatcher(matchers), matcher)];
            } else {
              matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
              if (matcher[expando]) {
                j = ++i;
                for (; j < len; j++) {
                  if (Expr.relative[tokens[j].type]) {
                    break;
                  }
                }
                return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === ' ' ? '*' : '' })).replace(rtrim, '$1'), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
              }
              matchers.push(matcher);
            }
          }
          return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
          var matcherCachedRuns = 0, bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, expandContext) {
              var elem, j, matcher, setMatched = [], matchedCount = 0, i = '0', unmatched = seed && [], outermost = expandContext != null, contextBackup = outermostContext, elems = seed || byElement && Expr.find['TAG']('*', expandContext && context.parentNode || context), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1;
              if (outermost) {
                outermostContext = context !== document && context;
                cachedruns = matcherCachedRuns;
              }
              for (; (elem = elems[i]) != null; i++) {
                if (byElement && elem) {
                  j = 0;
                  while (matcher = elementMatchers[j++]) {
                    if (matcher(elem, context, xml)) {
                      results.push(elem);
                      break;
                    }
                  }
                  if (outermost) {
                    dirruns = dirrunsUnique;
                    cachedruns = ++matcherCachedRuns;
                  }
                }
                if (bySet) {
                  if (elem = !matcher && elem) {
                    matchedCount--;
                  }
                  if (seed) {
                    unmatched.push(elem);
                  }
                }
              }
              matchedCount += i;
              if (bySet && i !== matchedCount) {
                j = 0;
                while (matcher = setMatchers[j++]) {
                  matcher(unmatched, setMatched, context, xml);
                }
                if (seed) {
                  if (matchedCount > 0) {
                    while (i--) {
                      if (!(unmatched[i] || setMatched[i])) {
                        setMatched[i] = pop.call(results);
                      }
                    }
                  }
                  setMatched = condense(setMatched);
                }
                push.apply(results, setMatched);
                if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                  Sizzle.uniqueSort(results);
                }
              }
              if (outermost) {
                dirruns = dirrunsUnique;
                outermostContext = contextBackup;
              }
              return unmatched;
            };
          return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle.compile = function (selector, group) {
          var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + ' '];
          if (!cached) {
            if (!group) {
              group = tokenize(selector);
            }
            i = group.length;
            while (i--) {
              cached = matcherFromTokens(group[i]);
              if (cached[expando]) {
                setMatchers.push(cached);
              } else {
                elementMatchers.push(cached);
              }
            }
            cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
          }
          return cached;
        };
        function multipleContexts(selector, contexts, results) {
          var i = 0, len = contexts.length;
          for (; i < len; i++) {
            Sizzle(selector, contexts[i], results);
          }
          return results;
        }
        function select(selector, context, results, seed) {
          var i, tokens, token, type, find, match = tokenize(selector);
          if (!seed) {
            if (match.length === 1) {
              tokens = match[0] = match[0].slice(0);
              if (tokens.length > 2 && (token = tokens[0]).type === 'ID' && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                context = (Expr.find['ID'](token.matches[0].replace(runescape, funescape), context) || [])[0];
                if (!context) {
                  return results;
                }
                selector = selector.slice(tokens.shift().value.length);
              }
              i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length;
              while (i--) {
                token = tokens[i];
                if (Expr.relative[type = token.type]) {
                  break;
                }
                if (find = Expr.find[type]) {
                  if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && context.parentNode || context)) {
                    tokens.splice(i, 1);
                    selector = seed.length && toSelector(tokens);
                    if (!selector) {
                      push.apply(results, seed);
                      return results;
                    }
                    break;
                  }
                }
              }
            }
          }
          compile(selector, match)(seed, context, !documentIsHTML, results, rsibling.test(selector));
          return results;
        }
        support.sortStable = expando.split('').sort(sortOrder).join('') === expando;
        support.detectDuplicates = hasDuplicate;
        setDocument();
        support.sortDetached = assert(function (div1) {
          return div1.compareDocumentPosition(document.createElement('div')) & 1;
        });
        if (!assert(function (div) {
            div.innerHTML = '<a href=\'#\'></a>';
            return div.firstChild.getAttribute('href') === '#';
          })) {
          addHandle('type|href|height|width', function (elem, name, isXML) {
            if (!isXML) {
              return elem.getAttribute(name, name.toLowerCase() === 'type' ? 1 : 2);
            }
          });
        }
        if (!support.attributes || !assert(function (div) {
            div.innerHTML = '<input/>';
            div.firstChild.setAttribute('value', '');
            return div.firstChild.getAttribute('value') === '';
          })) {
          addHandle('value', function (elem, name, isXML) {
            if (!isXML && elem.nodeName.toLowerCase() === 'input') {
              return elem.defaultValue;
            }
          });
        }
        if (!assert(function (div) {
            return div.getAttribute('disabled') == null;
          })) {
          addHandle(booleans, function (elem, name, isXML) {
            var val;
            if (!isXML) {
              return (val = elem.getAttributeNode(name)) && val.specified ? val.value : elem[name] === true ? name.toLowerCase() : null;
            }
          });
        }
        jQuery.find = Sizzle;
        jQuery.expr = Sizzle.selectors;
        jQuery.expr[':'] = jQuery.expr.pseudos;
        jQuery.unique = Sizzle.uniqueSort;
        jQuery.text = Sizzle.getText;
        jQuery.isXMLDoc = Sizzle.isXML;
        jQuery.contains = Sizzle.contains;
      }(window));
      var optionsCache = {};
      function createOptions(options) {
        var object = optionsCache[options] = {};
        jQuery.each(options.match(core_rnotwhite) || [], function (_, flag) {
          object[flag] = true;
        });
        return object;
      }
      jQuery.Callbacks = function (options) {
        options = typeof options === 'string' ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
        var memory, fired, firing, firingStart, firingLength, firingIndex, list = [], stack = !options.once && [], fire = function (data) {
            memory = options.memory && data;
            fired = true;
            firingIndex = firingStart || 0;
            firingStart = 0;
            firingLength = list.length;
            firing = true;
            for (; list && firingIndex < firingLength; firingIndex++) {
              if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                memory = false;
                break;
              }
            }
            firing = false;
            if (list) {
              if (stack) {
                if (stack.length) {
                  fire(stack.shift());
                }
              } else if (memory) {
                list = [];
              } else {
                self.disable();
              }
            }
          }, self = {
            add: function () {
              if (list) {
                var start = list.length;
                (function add(args) {
                  jQuery.each(args, function (_, arg) {
                    var type = jQuery.type(arg);
                    if (type === 'function') {
                      if (!options.unique || !self.has(arg)) {
                        list.push(arg);
                      }
                    } else if (arg && arg.length && type !== 'string') {
                      add(arg);
                    }
                  });
                }(arguments));
                if (firing) {
                  firingLength = list.length;
                } else if (memory) {
                  firingStart = start;
                  fire(memory);
                }
              }
              return this;
            },
            remove: function () {
              if (list) {
                jQuery.each(arguments, function (_, arg) {
                  var index;
                  while ((index = jQuery.inArray(arg, list, index)) > -1) {
                    list.splice(index, 1);
                    if (firing) {
                      if (index <= firingLength) {
                        firingLength--;
                      }
                      if (index <= firingIndex) {
                        firingIndex--;
                      }
                    }
                  }
                });
              }
              return this;
            },
            has: function (fn) {
              return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
            },
            empty: function () {
              list = [];
              firingLength = 0;
              return this;
            },
            disable: function () {
              list = stack = memory = undefined;
              return this;
            },
            disabled: function () {
              return !list;
            },
            lock: function () {
              stack = undefined;
              if (!memory) {
                self.disable();
              }
              return this;
            },
            locked: function () {
              return !stack;
            },
            fireWith: function (context, args) {
              if (list && (!fired || stack)) {
                args = args || [];
                args = [
                  context,
                  args.slice ? args.slice() : args
                ];
                if (firing) {
                  stack.push(args);
                } else {
                  fire(args);
                }
              }
              return this;
            },
            fire: function () {
              self.fireWith(this, arguments);
              return this;
            },
            fired: function () {
              return !!fired;
            }
          };
        return self;
      };
      jQuery.extend({
        Deferred: function (func) {
          var tuples = [
              [
                'resolve',
                'done',
                jQuery.Callbacks('once memory'),
                'resolved'
              ],
              [
                'reject',
                'fail',
                jQuery.Callbacks('once memory'),
                'rejected'
              ],
              [
                'notify',
                'progress',
                jQuery.Callbacks('memory')
              ]
            ], state = 'pending', promise = {
              state: function () {
                return state;
              },
              always: function () {
                deferred.done(arguments).fail(arguments);
                return this;
              },
              then: function () {
                var fns = arguments;
                return jQuery.Deferred(function (newDefer) {
                  jQuery.each(tuples, function (i, tuple) {
                    var action = tuple[0], fn = jQuery.isFunction(fns[i]) && fns[i];
                    deferred[tuple[1]](function () {
                      var returned = fn && fn.apply(this, arguments);
                      if (returned && jQuery.isFunction(returned.promise)) {
                        returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                      } else {
                        newDefer[action + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                      }
                    });
                  });
                  fns = null;
                }).promise();
              },
              promise: function (obj) {
                return obj != null ? jQuery.extend(obj, promise) : promise;
              }
            }, deferred = {};
          promise.pipe = promise.then;
          jQuery.each(tuples, function (i, tuple) {
            var list = tuple[2], stateString = tuple[3];
            promise[tuple[1]] = list.add;
            if (stateString) {
              list.add(function () {
                state = stateString;
              }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
            }
            deferred[tuple[0]] = function () {
              deferred[tuple[0] + 'With'](this === deferred ? promise : this, arguments);
              return this;
            };
            deferred[tuple[0] + 'With'] = list.fireWith;
          });
          promise.promise(deferred);
          if (func) {
            func.call(deferred, deferred);
          }
          return deferred;
        },
        when: function (subordinate) {
          var i = 0, resolveValues = core_slice.call(arguments), length = resolveValues.length, remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0, deferred = remaining === 1 ? subordinate : jQuery.Deferred(), updateFunc = function (i, contexts, values) {
              return function (value) {
                contexts[i] = this;
                values[i] = arguments.length > 1 ? core_slice.call(arguments) : value;
                if (values === progressValues) {
                  deferred.notifyWith(contexts, values);
                } else if (!--remaining) {
                  deferred.resolveWith(contexts, values);
                }
              };
            }, progressValues, progressContexts, resolveContexts;
          if (length > 1) {
            progressValues = new Array(length);
            progressContexts = new Array(length);
            resolveContexts = new Array(length);
            for (; i < length; i++) {
              if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
              } else {
                --remaining;
              }
            }
          }
          if (!remaining) {
            deferred.resolveWith(resolveContexts, resolveValues);
          }
          return deferred.promise();
        }
      });
      jQuery.support = function (support) {
        var input = document.createElement('input'), fragment = document.createDocumentFragment(), div = document.createElement('div'), select = document.createElement('select'), opt = select.appendChild(document.createElement('option'));
        if (!input.type) {
          return support;
        }
        input.type = 'checkbox';
        support.checkOn = input.value !== '';
        support.optSelected = opt.selected;
        support.reliableMarginRight = true;
        support.boxSizingReliable = true;
        support.pixelPosition = false;
        input.checked = true;
        support.noCloneChecked = input.cloneNode(true).checked;
        select.disabled = true;
        support.optDisabled = !opt.disabled;
        input = document.createElement('input');
        input.value = 't';
        input.type = 'radio';
        support.radioValue = input.value === 't';
        input.setAttribute('checked', 't');
        input.setAttribute('name', 't');
        fragment.appendChild(input);
        support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
        support.focusinBubbles = 'onfocusin' in window;
        div.style.backgroundClip = 'content-box';
        div.cloneNode(true).style.backgroundClip = '';
        support.clearCloneStyle = div.style.backgroundClip === 'content-box';
        jQuery(function () {
          var container, marginDiv, divReset = 'padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box', body = document.getElementsByTagName('body')[0];
          if (!body) {
            return;
          }
          container = document.createElement('div');
          container.style.cssText = 'border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px';
          body.appendChild(container).appendChild(div);
          div.innerHTML = '';
          div.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%';
          jQuery.swap(body, body.style.zoom != null ? { zoom: 1 } : {}, function () {
            support.boxSizing = div.offsetWidth === 4;
          });
          if (window.getComputedStyle) {
            support.pixelPosition = (window.getComputedStyle(div, null) || {}).top !== '1%';
            support.boxSizingReliable = (window.getComputedStyle(div, null) || { width: '4px' }).width === '4px';
            marginDiv = div.appendChild(document.createElement('div'));
            marginDiv.style.cssText = div.style.cssText = divReset;
            marginDiv.style.marginRight = marginDiv.style.width = '0';
            div.style.width = '1px';
            support.reliableMarginRight = !parseFloat((window.getComputedStyle(marginDiv, null) || {}).marginRight);
          }
          body.removeChild(container);
        });
        return support;
      }({});
      var data_user, data_priv, rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/, rmultiDash = /([A-Z])/g;
      function Data() {
        Object.defineProperty(this.cache = {}, 0, {
          get: function () {
            return {};
          }
        });
        this.expando = jQuery.expando + Math.random();
      }
      Data.uid = 1;
      Data.accepts = function (owner) {
        return owner.nodeType ? owner.nodeType === 1 || owner.nodeType === 9 : true;
      };
      Data.prototype = {
        key: function (owner) {
          if (!Data.accepts(owner)) {
            return 0;
          }
          var descriptor = {}, unlock = owner[this.expando];
          if (!unlock) {
            unlock = Data.uid++;
            try {
              descriptor[this.expando] = { value: unlock };
              Object.defineProperties(owner, descriptor);
            } catch (e) {
              descriptor[this.expando] = unlock;
              jQuery.extend(owner, descriptor);
            }
          }
          if (!this.cache[unlock]) {
            this.cache[unlock] = {};
          }
          return unlock;
        },
        set: function (owner, data, value) {
          var prop, unlock = this.key(owner), cache = this.cache[unlock];
          if (typeof data === 'string') {
            cache[data] = value;
          } else {
            if (jQuery.isEmptyObject(cache)) {
              jQuery.extend(this.cache[unlock], data);
            } else {
              for (prop in data) {
                cache[prop] = data[prop];
              }
            }
          }
          return cache;
        },
        get: function (owner, key) {
          var cache = this.cache[this.key(owner)];
          return key === undefined ? cache : cache[key];
        },
        access: function (owner, key, value) {
          var stored;
          if (key === undefined || key && typeof key === 'string' && value === undefined) {
            stored = this.get(owner, key);
            return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
          }
          this.set(owner, key, value);
          return value !== undefined ? value : key;
        },
        remove: function (owner, key) {
          var i, name, camel, unlock = this.key(owner), cache = this.cache[unlock];
          if (key === undefined) {
            this.cache[unlock] = {};
          } else {
            if (jQuery.isArray(key)) {
              name = key.concat(key.map(jQuery.camelCase));
            } else {
              camel = jQuery.camelCase(key);
              if (key in cache) {
                name = [
                  key,
                  camel
                ];
              } else {
                name = camel;
                name = name in cache ? [name] : name.match(core_rnotwhite) || [];
              }
            }
            i = name.length;
            while (i--) {
              delete cache[name[i]];
            }
          }
        },
        hasData: function (owner) {
          return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
        },
        discard: function (owner) {
          if (owner[this.expando]) {
            delete this.cache[owner[this.expando]];
          }
        }
      };
      data_user = new Data();
      data_priv = new Data();
      jQuery.extend({
        acceptData: Data.accepts,
        hasData: function (elem) {
          return data_user.hasData(elem) || data_priv.hasData(elem);
        },
        data: function (elem, name, data) {
          return data_user.access(elem, name, data);
        },
        removeData: function (elem, name) {
          data_user.remove(elem, name);
        },
        _data: function (elem, name, data) {
          return data_priv.access(elem, name, data);
        },
        _removeData: function (elem, name) {
          data_priv.remove(elem, name);
        }
      });
      jQuery.fn.extend({
        data: function (key, value) {
          var attrs, name, elem = this[0], i = 0, data = null;
          if (key === undefined) {
            if (this.length) {
              data = data_user.get(elem);
              if (elem.nodeType === 1 && !data_priv.get(elem, 'hasDataAttrs')) {
                attrs = elem.attributes;
                for (; i < attrs.length; i++) {
                  name = attrs[i].name;
                  if (name.indexOf('data-') === 0) {
                    name = jQuery.camelCase(name.slice(5));
                    dataAttr(elem, name, data[name]);
                  }
                }
                data_priv.set(elem, 'hasDataAttrs', true);
              }
            }
            return data;
          }
          if (typeof key === 'object') {
            return this.each(function () {
              data_user.set(this, key);
            });
          }
          return jQuery.access(this, function (value) {
            var data, camelKey = jQuery.camelCase(key);
            if (elem && value === undefined) {
              data = data_user.get(elem, key);
              if (data !== undefined) {
                return data;
              }
              data = data_user.get(elem, camelKey);
              if (data !== undefined) {
                return data;
              }
              data = dataAttr(elem, camelKey, undefined);
              if (data !== undefined) {
                return data;
              }
              return;
            }
            this.each(function () {
              var data = data_user.get(this, camelKey);
              data_user.set(this, camelKey, value);
              if (key.indexOf('-') !== -1 && data !== undefined) {
                data_user.set(this, key, value);
              }
            });
          }, null, value, arguments.length > 1, null, true);
        },
        removeData: function (key) {
          return this.each(function () {
            data_user.remove(this, key);
          });
        }
      });
      function dataAttr(elem, key, data) {
        var name;
        if (data === undefined && elem.nodeType === 1) {
          name = 'data-' + key.replace(rmultiDash, '-$1').toLowerCase();
          data = elem.getAttribute(name);
          if (typeof data === 'string') {
            try {
              data = data === 'true' ? true : data === 'false' ? false : data === 'null' ? null : +data + '' === data ? +data : rbrace.test(data) ? JSON.parse(data) : data;
            } catch (e) {
            }
            data_user.set(elem, key, data);
          } else {
            data = undefined;
          }
        }
        return data;
      }
      jQuery.extend({
        queue: function (elem, type, data) {
          var queue;
          if (elem) {
            type = (type || 'fx') + 'queue';
            queue = data_priv.get(elem, type);
            if (data) {
              if (!queue || jQuery.isArray(data)) {
                queue = data_priv.access(elem, type, jQuery.makeArray(data));
              } else {
                queue.push(data);
              }
            }
            return queue || [];
          }
        },
        dequeue: function (elem, type) {
          type = type || 'fx';
          var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
              jQuery.dequeue(elem, type);
            };
          if (fn === 'inprogress') {
            fn = queue.shift();
            startLength--;
          }
          if (fn) {
            if (type === 'fx') {
              queue.unshift('inprogress');
            }
            delete hooks.stop;
            fn.call(elem, next, hooks);
          }
          if (!startLength && hooks) {
            hooks.empty.fire();
          }
        },
        _queueHooks: function (elem, type) {
          var key = type + 'queueHooks';
          return data_priv.get(elem, key) || data_priv.access(elem, key, {
            empty: jQuery.Callbacks('once memory').add(function () {
              data_priv.remove(elem, [
                type + 'queue',
                key
              ]);
            })
          });
        }
      });
      jQuery.fn.extend({
        queue: function (type, data) {
          var setter = 2;
          if (typeof type !== 'string') {
            data = type;
            type = 'fx';
            setter--;
          }
          if (arguments.length < setter) {
            return jQuery.queue(this[0], type);
          }
          return data === undefined ? this : this.each(function () {
            var queue = jQuery.queue(this, type, data);
            jQuery._queueHooks(this, type);
            if (type === 'fx' && queue[0] !== 'inprogress') {
              jQuery.dequeue(this, type);
            }
          });
        },
        dequeue: function (type) {
          return this.each(function () {
            jQuery.dequeue(this, type);
          });
        },
        delay: function (time, type) {
          time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
          type = type || 'fx';
          return this.queue(type, function (next, hooks) {
            var timeout = setTimeout(next, time);
            hooks.stop = function () {
              clearTimeout(timeout);
            };
          });
        },
        clearQueue: function (type) {
          return this.queue(type || 'fx', []);
        },
        promise: function (type, obj) {
          var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
              if (!--count) {
                defer.resolveWith(elements, [elements]);
              }
            };
          if (typeof type !== 'string') {
            obj = type;
            type = undefined;
          }
          type = type || 'fx';
          while (i--) {
            tmp = data_priv.get(elements[i], type + 'queueHooks');
            if (tmp && tmp.empty) {
              count++;
              tmp.empty.add(resolve);
            }
          }
          resolve();
          return defer.promise(obj);
        }
      });
      var nodeHook, boolHook, rclass = /[\t\r\n\f]/g, rreturn = /\r/g, rfocusable = /^(?:input|select|textarea|button)$/i;
      jQuery.fn.extend({
        attr: function (name, value) {
          return jQuery.access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function (name) {
          return this.each(function () {
            jQuery.removeAttr(this, name);
          });
        },
        prop: function (name, value) {
          return jQuery.access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function (name) {
          return this.each(function () {
            delete this[jQuery.propFix[name] || name];
          });
        },
        addClass: function (value) {
          var classes, elem, cur, clazz, j, i = 0, len = this.length, proceed = typeof value === 'string' && value;
          if (jQuery.isFunction(value)) {
            return this.each(function (j) {
              jQuery(this).addClass(value.call(this, j, this.className));
            });
          }
          if (proceed) {
            classes = (value || '').match(core_rnotwhite) || [];
            for (; i < len; i++) {
              elem = this[i];
              cur = elem.nodeType === 1 && (elem.className ? (' ' + elem.className + ' ').replace(rclass, ' ') : ' ');
              if (cur) {
                j = 0;
                while (clazz = classes[j++]) {
                  if (cur.indexOf(' ' + clazz + ' ') < 0) {
                    cur += clazz + ' ';
                  }
                }
                elem.className = jQuery.trim(cur);
              }
            }
          }
          return this;
        },
        removeClass: function (value) {
          var classes, elem, cur, clazz, j, i = 0, len = this.length, proceed = arguments.length === 0 || typeof value === 'string' && value;
          if (jQuery.isFunction(value)) {
            return this.each(function (j) {
              jQuery(this).removeClass(value.call(this, j, this.className));
            });
          }
          if (proceed) {
            classes = (value || '').match(core_rnotwhite) || [];
            for (; i < len; i++) {
              elem = this[i];
              cur = elem.nodeType === 1 && (elem.className ? (' ' + elem.className + ' ').replace(rclass, ' ') : '');
              if (cur) {
                j = 0;
                while (clazz = classes[j++]) {
                  while (cur.indexOf(' ' + clazz + ' ') >= 0) {
                    cur = cur.replace(' ' + clazz + ' ', ' ');
                  }
                }
                elem.className = value ? jQuery.trim(cur) : '';
              }
            }
          }
          return this;
        },
        toggleClass: function (value, stateVal) {
          var type = typeof value;
          if (typeof stateVal === 'boolean' && type === 'string') {
            return stateVal ? this.addClass(value) : this.removeClass(value);
          }
          if (jQuery.isFunction(value)) {
            return this.each(function (i) {
              jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
            });
          }
          return this.each(function () {
            if (type === 'string') {
              var className, i = 0, self = jQuery(this), classNames = value.match(core_rnotwhite) || [];
              while (className = classNames[i++]) {
                if (self.hasClass(className)) {
                  self.removeClass(className);
                } else {
                  self.addClass(className);
                }
              }
            } else if (type === core_strundefined || type === 'boolean') {
              if (this.className) {
                data_priv.set(this, '__className__', this.className);
              }
              this.className = this.className || value === false ? '' : data_priv.get(this, '__className__') || '';
            }
          });
        },
        hasClass: function (selector) {
          var className = ' ' + selector + ' ', i = 0, l = this.length;
          for (; i < l; i++) {
            if (this[i].nodeType === 1 && (' ' + this[i].className + ' ').replace(rclass, ' ').indexOf(className) >= 0) {
              return true;
            }
          }
          return false;
        },
        val: function (value) {
          var hooks, ret, isFunction, elem = this[0];
          if (!arguments.length) {
            if (elem) {
              hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
              if (hooks && 'get' in hooks && (ret = hooks.get(elem, 'value')) !== undefined) {
                return ret;
              }
              ret = elem.value;
              return typeof ret === 'string' ? ret.replace(rreturn, '') : ret == null ? '' : ret;
            }
            return;
          }
          isFunction = jQuery.isFunction(value);
          return this.each(function (i) {
            var val;
            if (this.nodeType !== 1) {
              return;
            }
            if (isFunction) {
              val = value.call(this, i, jQuery(this).val());
            } else {
              val = value;
            }
            if (val == null) {
              val = '';
            } else if (typeof val === 'number') {
              val += '';
            } else if (jQuery.isArray(val)) {
              val = jQuery.map(val, function (value) {
                return value == null ? '' : value + '';
              });
            }
            hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
            if (!hooks || !('set' in hooks) || hooks.set(this, val, 'value') === undefined) {
              this.value = val;
            }
          });
        }
      });
      jQuery.extend({
        valHooks: {
          option: {
            get: function (elem) {
              var val = elem.attributes.value;
              return !val || val.specified ? elem.value : elem.text;
            }
          },
          select: {
            get: function (elem) {
              var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === 'select-one' || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
              for (; i < max; i++) {
                option = options[i];
                if ((option.selected || i === index) && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute('disabled') === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, 'optgroup'))) {
                  value = jQuery(option).val();
                  if (one) {
                    return value;
                  }
                  values.push(value);
                }
              }
              return values;
            },
            set: function (elem, value) {
              var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
              while (i--) {
                option = options[i];
                if (option.selected = jQuery.inArray(jQuery(option).val(), values) >= 0) {
                  optionSet = true;
                }
              }
              if (!optionSet) {
                elem.selectedIndex = -1;
              }
              return values;
            }
          }
        },
        attr: function (elem, name, value) {
          var hooks, ret, nType = elem.nodeType;
          if (!elem || nType === 3 || nType === 8 || nType === 2) {
            return;
          }
          if (typeof elem.getAttribute === core_strundefined) {
            return jQuery.prop(elem, name, value);
          }
          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            name = name.toLowerCase();
            hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
          }
          if (value !== undefined) {
            if (value === null) {
              jQuery.removeAttr(elem, name);
            } else if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
              return ret;
            } else {
              elem.setAttribute(name, value + '');
              return value;
            }
          } else if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret;
          } else {
            ret = jQuery.find.attr(elem, name);
            return ret == null ? undefined : ret;
          }
        },
        removeAttr: function (elem, value) {
          var name, propName, i = 0, attrNames = value && value.match(core_rnotwhite);
          if (attrNames && elem.nodeType === 1) {
            while (name = attrNames[i++]) {
              propName = jQuery.propFix[name] || name;
              if (jQuery.expr.match.bool.test(name)) {
                elem[propName] = false;
              }
              elem.removeAttribute(name);
            }
          }
        },
        attrHooks: {
          type: {
            set: function (elem, value) {
              if (!jQuery.support.radioValue && value === 'radio' && jQuery.nodeName(elem, 'input')) {
                var val = elem.value;
                elem.setAttribute('type', value);
                if (val) {
                  elem.value = val;
                }
                return value;
              }
            }
          }
        },
        propFix: {
          'for': 'htmlFor',
          'class': 'className'
        },
        prop: function (elem, name, value) {
          var ret, hooks, notxml, nType = elem.nodeType;
          if (!elem || nType === 3 || nType === 8 || nType === 2) {
            return;
          }
          notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
          if (notxml) {
            name = jQuery.propFix[name] || name;
            hooks = jQuery.propHooks[name];
          }
          if (value !== undefined) {
            return hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
          } else {
            return hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
          }
        },
        propHooks: {
          tabIndex: {
            get: function (elem) {
              return elem.hasAttribute('tabindex') || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;
            }
          }
        }
      });
      boolHook = {
        set: function (elem, value, name) {
          if (value === false) {
            jQuery.removeAttr(elem, name);
          } else {
            elem.setAttribute(name, name);
          }
          return name;
        }
      };
      jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
        var getter = jQuery.expr.attrHandle[name] || jQuery.find.attr;
        jQuery.expr.attrHandle[name] = function (elem, name, isXML) {
          var fn = jQuery.expr.attrHandle[name], ret = isXML ? undefined : (jQuery.expr.attrHandle[name] = undefined) != getter(elem, name, isXML) ? name.toLowerCase() : null;
          jQuery.expr.attrHandle[name] = fn;
          return ret;
        };
      });
      if (!jQuery.support.optSelected) {
        jQuery.propHooks.selected = {
          get: function (elem) {
            var parent = elem.parentNode;
            if (parent && parent.parentNode) {
              parent.parentNode.selectedIndex;
            }
            return null;
          }
        };
      }
      jQuery.each([
        'tabIndex',
        'readOnly',
        'maxLength',
        'cellSpacing',
        'cellPadding',
        'rowSpan',
        'colSpan',
        'useMap',
        'frameBorder',
        'contentEditable'
      ], function () {
        jQuery.propFix[this.toLowerCase()] = this;
      });
      jQuery.each([
        'radio',
        'checkbox'
      ], function () {
        jQuery.valHooks[this] = {
          set: function (elem, value) {
            if (jQuery.isArray(value)) {
              return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
            }
          }
        };
        if (!jQuery.support.checkOn) {
          jQuery.valHooks[this].get = function (elem) {
            return elem.getAttribute('value') === null ? 'on' : elem.value;
          };
        }
      });
      var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
      function returnTrue() {
        return true;
      }
      function returnFalse() {
        return false;
      }
      function safeActiveElement() {
        try {
          return document.activeElement;
        } catch (err) {
        }
      }
      jQuery.event = {
        global: {},
        add: function (elem, types, handler, data, selector) {
          var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.get(elem);
          if (!elemData) {
            return;
          }
          if (handler.handler) {
            handleObjIn = handler;
            handler = handleObjIn.handler;
            selector = handleObjIn.selector;
          }
          if (!handler.guid) {
            handler.guid = jQuery.guid++;
          }
          if (!(events = elemData.events)) {
            events = elemData.events = {};
          }
          if (!(eventHandle = elemData.handle)) {
            eventHandle = elemData.handle = function (e) {
              return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;
            };
            eventHandle.elem = elem;
          }
          types = (types || '').match(core_rnotwhite) || [''];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || '').split('.').sort();
            if (!type) {
              continue;
            }
            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            special = jQuery.event.special[type] || {};
            handleObj = jQuery.extend({
              type: type,
              origType: origType,
              data: data,
              handler: handler,
              guid: handler.guid,
              selector: selector,
              needsContext: selector && jQuery.expr.match.needsContext.test(selector),
              namespace: namespaces.join('.')
            }, handleObjIn);
            if (!(handlers = events[type])) {
              handlers = events[type] = [];
              handlers.delegateCount = 0;
              if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                if (elem.addEventListener) {
                  elem.addEventListener(type, eventHandle, false);
                }
              }
            }
            if (special.add) {
              special.add.call(elem, handleObj);
              if (!handleObj.handler.guid) {
                handleObj.handler.guid = handler.guid;
              }
            }
            if (selector) {
              handlers.splice(handlers.delegateCount++, 0, handleObj);
            } else {
              handlers.push(handleObj);
            }
            jQuery.event.global[type] = true;
          }
          elem = null;
        },
        remove: function (elem, types, handler, selector, mappedTypes) {
          var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.hasData(elem) && data_priv.get(elem);
          if (!elemData || !(events = elemData.events)) {
            return;
          }
          types = (types || '').match(core_rnotwhite) || [''];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || '').split('.').sort();
            if (!type) {
              for (type in events) {
                jQuery.event.remove(elem, type + types[t], handler, selector, true);
              }
              continue;
            }
            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            handlers = events[type] || [];
            tmp = tmp[2] && new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');
            origCount = j = handlers.length;
            while (j--) {
              handleObj = handlers[j];
              if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
                handlers.splice(j, 1);
                if (handleObj.selector) {
                  handlers.delegateCount--;
                }
                if (special.remove) {
                  special.remove.call(elem, handleObj);
                }
              }
            }
            if (origCount && !handlers.length) {
              if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                jQuery.removeEvent(elem, type, elemData.handle);
              }
              delete events[type];
            }
          }
          if (jQuery.isEmptyObject(events)) {
            delete elemData.handle;
            data_priv.remove(elem, 'events');
          }
        },
        trigger: function (event, data, elem, onlyHandlers) {
          var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document], type = core_hasOwn.call(event, 'type') ? event.type : event, namespaces = core_hasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];
          cur = tmp = elem = elem || document;
          if (elem.nodeType === 3 || elem.nodeType === 8) {
            return;
          }
          if (rfocusMorph.test(type + jQuery.event.triggered)) {
            return;
          }
          if (type.indexOf('.') >= 0) {
            namespaces = type.split('.');
            type = namespaces.shift();
            namespaces.sort();
          }
          ontype = type.indexOf(':') < 0 && 'on' + type;
          event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === 'object' && event);
          event.isTrigger = onlyHandlers ? 2 : 3;
          event.namespace = namespaces.join('.');
          event.namespace_re = event.namespace ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;
          event.result = undefined;
          if (!event.target) {
            event.target = elem;
          }
          data = data == null ? [event] : jQuery.makeArray(data, [event]);
          special = jQuery.event.special[type] || {};
          if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
            return;
          }
          if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
            bubbleType = special.delegateType || type;
            if (!rfocusMorph.test(bubbleType + type)) {
              cur = cur.parentNode;
            }
            for (; cur; cur = cur.parentNode) {
              eventPath.push(cur);
              tmp = cur;
            }
            if (tmp === (elem.ownerDocument || document)) {
              eventPath.push(tmp.defaultView || tmp.parentWindow || window);
            }
          }
          i = 0;
          while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
            event.type = i > 1 ? bubbleType : special.bindType || type;
            handle = (data_priv.get(cur, 'events') || {})[event.type] && data_priv.get(cur, 'handle');
            if (handle) {
              handle.apply(cur, data);
            }
            handle = ontype && cur[ontype];
            if (handle && jQuery.acceptData(cur) && handle.apply && handle.apply(cur, data) === false) {
              event.preventDefault();
            }
          }
          event.type = type;
          if (!onlyHandlers && !event.isDefaultPrevented()) {
            if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
              if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
                tmp = elem[ontype];
                if (tmp) {
                  elem[ontype] = null;
                }
                jQuery.event.triggered = type;
                elem[type]();
                jQuery.event.triggered = undefined;
                if (tmp) {
                  elem[ontype] = tmp;
                }
              }
            }
          }
          return event.result;
        },
        dispatch: function (event) {
          event = jQuery.event.fix(event);
          var i, j, ret, matched, handleObj, handlerQueue = [], args = core_slice.call(arguments), handlers = (data_priv.get(this, 'events') || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
          args[0] = event;
          event.delegateTarget = this;
          if (special.preDispatch && special.preDispatch.call(this, event) === false) {
            return;
          }
          handlerQueue = jQuery.event.handlers.call(this, event, handlers);
          i = 0;
          while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
            event.currentTarget = matched.elem;
            j = 0;
            while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
              if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                event.handleObj = handleObj;
                event.data = handleObj.data;
                ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                if (ret !== undefined) {
                  if ((event.result = ret) === false) {
                    event.preventDefault();
                    event.stopPropagation();
                  }
                }
              }
            }
          }
          if (special.postDispatch) {
            special.postDispatch.call(this, event);
          }
          return event.result;
        },
        handlers: function (event, handlers) {
          var i, matches, sel, handleObj, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
          if (delegateCount && cur.nodeType && (!event.button || event.type !== 'click')) {
            for (; cur !== this; cur = cur.parentNode || this) {
              if (cur.disabled !== true || event.type !== 'click') {
                matches = [];
                for (i = 0; i < delegateCount; i++) {
                  handleObj = handlers[i];
                  sel = handleObj.selector + ' ';
                  if (matches[sel] === undefined) {
                    matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
                  }
                  if (matches[sel]) {
                    matches.push(handleObj);
                  }
                }
                if (matches.length) {
                  handlerQueue.push({
                    elem: cur,
                    handlers: matches
                  });
                }
              }
            }
          }
          if (delegateCount < handlers.length) {
            handlerQueue.push({
              elem: this,
              handlers: handlers.slice(delegateCount)
            });
          }
          return handlerQueue;
        },
        props: 'altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which'.split(' '),
        fixHooks: {},
        keyHooks: {
          props: 'char charCode key keyCode'.split(' '),
          filter: function (event, original) {
            if (event.which == null) {
              event.which = original.charCode != null ? original.charCode : original.keyCode;
            }
            return event;
          }
        },
        mouseHooks: {
          props: 'button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement'.split(' '),
          filter: function (event, original) {
            var eventDoc, doc, body, button = original.button;
            if (event.pageX == null && original.clientX != null) {
              eventDoc = event.target.ownerDocument || document;
              doc = eventDoc.documentElement;
              body = eventDoc.body;
              event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
              event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
            }
            if (!event.which && button !== undefined) {
              event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
            }
            return event;
          }
        },
        fix: function (event) {
          if (event[jQuery.expando]) {
            return event;
          }
          var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
          if (!fixHook) {
            this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
          }
          copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
          event = new jQuery.Event(originalEvent);
          i = copy.length;
          while (i--) {
            prop = copy[i];
            event[prop] = originalEvent[prop];
          }
          if (!event.target) {
            event.target = document;
          }
          if (event.target.nodeType === 3) {
            event.target = event.target.parentNode;
          }
          return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },
        special: {
          load: { noBubble: true },
          focus: {
            trigger: function () {
              if (this !== safeActiveElement() && this.focus) {
                this.focus();
                return false;
              }
            },
            delegateType: 'focusin'
          },
          blur: {
            trigger: function () {
              if (this === safeActiveElement() && this.blur) {
                this.blur();
                return false;
              }
            },
            delegateType: 'focusout'
          },
          click: {
            trigger: function () {
              if (this.type === 'checkbox' && this.click && jQuery.nodeName(this, 'input')) {
                this.click();
                return false;
              }
            },
            _default: function (event) {
              return jQuery.nodeName(event.target, 'a');
            }
          },
          beforeunload: {
            postDispatch: function (event) {
              if (event.result !== undefined) {
                event.originalEvent.returnValue = event.result;
              }
            }
          }
        },
        simulate: function (type, elem, event, bubble) {
          var e = jQuery.extend(new jQuery.Event(), event, {
              type: type,
              isSimulated: true,
              originalEvent: {}
            });
          if (bubble) {
            jQuery.event.trigger(e, null, elem);
          } else {
            jQuery.event.dispatch.call(elem, e);
          }
          if (e.isDefaultPrevented()) {
            event.preventDefault();
          }
        }
      };
      jQuery.removeEvent = function (elem, type, handle) {
        if (elem.removeEventListener) {
          elem.removeEventListener(type, handle, false);
        }
      };
      jQuery.Event = function (src, props) {
        if (!(this instanceof jQuery.Event)) {
          return new jQuery.Event(src, props);
        }
        if (src && src.type) {
          this.originalEvent = src;
          this.type = src.type;
          this.isDefaultPrevented = src.defaultPrevented || src.getPreventDefault && src.getPreventDefault() ? returnTrue : returnFalse;
        } else {
          this.type = src;
        }
        if (props) {
          jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || jQuery.now();
        this[jQuery.expando] = true;
      };
      jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        preventDefault: function () {
          var e = this.originalEvent;
          this.isDefaultPrevented = returnTrue;
          if (e && e.preventDefault) {
            e.preventDefault();
          }
        },
        stopPropagation: function () {
          var e = this.originalEvent;
          this.isPropagationStopped = returnTrue;
          if (e && e.stopPropagation) {
            e.stopPropagation();
          }
        },
        stopImmediatePropagation: function () {
          this.isImmediatePropagationStopped = returnTrue;
          this.stopPropagation();
        }
      };
      jQuery.each({
        mouseenter: 'mouseover',
        mouseleave: 'mouseout'
      }, function (orig, fix) {
        jQuery.event.special[orig] = {
          delegateType: fix,
          bindType: fix,
          handle: function (event) {
            var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
            if (!related || related !== target && !jQuery.contains(target, related)) {
              event.type = handleObj.origType;
              ret = handleObj.handler.apply(this, arguments);
              event.type = fix;
            }
            return ret;
          }
        };
      });
      if (!jQuery.support.focusinBubbles) {
        jQuery.each({
          focus: 'focusin',
          blur: 'focusout'
        }, function (orig, fix) {
          var attaches = 0, handler = function (event) {
              jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
            };
          jQuery.event.special[fix] = {
            setup: function () {
              if (attaches++ === 0) {
                document.addEventListener(orig, handler, true);
              }
            },
            teardown: function () {
              if (--attaches === 0) {
                document.removeEventListener(orig, handler, true);
              }
            }
          };
        });
      }
      jQuery.fn.extend({
        on: function (types, selector, data, fn, one) {
          var origFn, type;
          if (typeof types === 'object') {
            if (typeof selector !== 'string') {
              data = data || selector;
              selector = undefined;
            }
            for (type in types) {
              this.on(type, selector, data, types[type], one);
            }
            return this;
          }
          if (data == null && fn == null) {
            fn = selector;
            data = selector = undefined;
          } else if (fn == null) {
            if (typeof selector === 'string') {
              fn = data;
              data = undefined;
            } else {
              fn = data;
              data = selector;
              selector = undefined;
            }
          }
          if (fn === false) {
            fn = returnFalse;
          } else if (!fn) {
            return this;
          }
          if (one === 1) {
            origFn = fn;
            fn = function (event) {
              jQuery().off(event);
              return origFn.apply(this, arguments);
            };
            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
          }
          return this.each(function () {
            jQuery.event.add(this, types, fn, data, selector);
          });
        },
        one: function (types, selector, data, fn) {
          return this.on(types, selector, data, fn, 1);
        },
        off: function (types, selector, fn) {
          var handleObj, type;
          if (types && types.preventDefault && types.handleObj) {
            handleObj = types.handleObj;
            jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
            return this;
          }
          if (typeof types === 'object') {
            for (type in types) {
              this.off(type, selector, types[type]);
            }
            return this;
          }
          if (selector === false || typeof selector === 'function') {
            fn = selector;
            selector = undefined;
          }
          if (fn === false) {
            fn = returnFalse;
          }
          return this.each(function () {
            jQuery.event.remove(this, types, fn, selector);
          });
        },
        trigger: function (type, data) {
          return this.each(function () {
            jQuery.event.trigger(type, data, this);
          });
        },
        triggerHandler: function (type, data) {
          var elem = this[0];
          if (elem) {
            return jQuery.event.trigger(type, data, elem, true);
          }
        }
      });
      var isSimple = /^.[^:#\[\.,]*$/, rparentsprev = /^(?:parents|prev(?:Until|All))/, rneedsContext = jQuery.expr.match.needsContext, guaranteedUnique = {
          children: true,
          contents: true,
          next: true,
          prev: true
        };
      jQuery.fn.extend({
        find: function (selector) {
          var i, ret = [], self = this, len = self.length;
          if (typeof selector !== 'string') {
            return this.pushStack(jQuery(selector).filter(function () {
              for (i = 0; i < len; i++) {
                if (jQuery.contains(self[i], this)) {
                  return true;
                }
              }
            }));
          }
          for (i = 0; i < len; i++) {
            jQuery.find(selector, self[i], ret);
          }
          ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
          ret.selector = this.selector ? this.selector + ' ' + selector : selector;
          return ret;
        },
        has: function (target) {
          var targets = jQuery(target, this), l = targets.length;
          return this.filter(function () {
            var i = 0;
            for (; i < l; i++) {
              if (jQuery.contains(this, targets[i])) {
                return true;
              }
            }
          });
        },
        not: function (selector) {
          return this.pushStack(winnow(this, selector || [], true));
        },
        filter: function (selector) {
          return this.pushStack(winnow(this, selector || [], false));
        },
        is: function (selector) {
          return !!winnow(this, typeof selector === 'string' && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        },
        closest: function (selectors, context) {
          var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || typeof selectors !== 'string' ? jQuery(selectors, context || this.context) : 0;
          for (; i < l; i++) {
            for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
              if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                cur = matched.push(cur);
                break;
              }
            }
          }
          return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
        },
        index: function (elem) {
          if (!elem) {
            return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
          }
          if (typeof elem === 'string') {
            return core_indexOf.call(jQuery(elem), this[0]);
          }
          return core_indexOf.call(this, elem.jquery ? elem[0] : elem);
        },
        add: function (selector, context) {
          var set = typeof selector === 'string' ? jQuery(selector, context) : jQuery.makeArray(selector && selector.nodeType ? [selector] : selector), all = jQuery.merge(this.get(), set);
          return this.pushStack(jQuery.unique(all));
        },
        addBack: function (selector) {
          return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
      });
      function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {
        }
        return cur;
      }
      jQuery.each({
        parent: function (elem) {
          var parent = elem.parentNode;
          return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function (elem) {
          return jQuery.dir(elem, 'parentNode');
        },
        parentsUntil: function (elem, i, until) {
          return jQuery.dir(elem, 'parentNode', until);
        },
        next: function (elem) {
          return sibling(elem, 'nextSibling');
        },
        prev: function (elem) {
          return sibling(elem, 'previousSibling');
        },
        nextAll: function (elem) {
          return jQuery.dir(elem, 'nextSibling');
        },
        prevAll: function (elem) {
          return jQuery.dir(elem, 'previousSibling');
        },
        nextUntil: function (elem, i, until) {
          return jQuery.dir(elem, 'nextSibling', until);
        },
        prevUntil: function (elem, i, until) {
          return jQuery.dir(elem, 'previousSibling', until);
        },
        siblings: function (elem) {
          return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        children: function (elem) {
          return jQuery.sibling(elem.firstChild);
        },
        contents: function (elem) {
          return elem.contentDocument || jQuery.merge([], elem.childNodes);
        }
      }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
          var matched = jQuery.map(this, fn, until);
          if (name.slice(-5) !== 'Until') {
            selector = until;
          }
          if (selector && typeof selector === 'string') {
            matched = jQuery.filter(selector, matched);
          }
          if (this.length > 1) {
            if (!guaranteedUnique[name]) {
              jQuery.unique(matched);
            }
            if (rparentsprev.test(name)) {
              matched.reverse();
            }
          }
          return this.pushStack(matched);
        };
      });
      jQuery.extend({
        filter: function (expr, elems, not) {
          var elem = elems[0];
          if (not) {
            expr = ':not(' + expr + ')';
          }
          return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
            return elem.nodeType === 1;
          }));
        },
        dir: function (elem, dir, until) {
          var matched = [], truncate = until !== undefined;
          while ((elem = elem[dir]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
              if (truncate && jQuery(elem).is(until)) {
                break;
              }
              matched.push(elem);
            }
          }
          return matched;
        },
        sibling: function (n, elem) {
          var matched = [];
          for (; n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
              matched.push(n);
            }
          }
          return matched;
        }
      });
      function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
          return jQuery.grep(elements, function (elem, i) {
            return !!qualifier.call(elem, i, elem) !== not;
          });
        }
        if (qualifier.nodeType) {
          return jQuery.grep(elements, function (elem) {
            return elem === qualifier !== not;
          });
        }
        if (typeof qualifier === 'string') {
          if (isSimple.test(qualifier)) {
            return jQuery.filter(qualifier, elements, not);
          }
          qualifier = jQuery.filter(qualifier, elements);
        }
        return jQuery.grep(elements, function (elem) {
          return core_indexOf.call(qualifier, elem) >= 0 !== not;
        });
      }
      var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i, manipulation_rcheckableType = /^(?:checkbox|radio)$/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, wrapMap = {
          option: [
            1,
            '<select multiple=\'multiple\'>',
            '</select>'
          ],
          thead: [
            1,
            '<table>',
            '</table>'
          ],
          col: [
            2,
            '<table><colgroup>',
            '</colgroup></table>'
          ],
          tr: [
            2,
            '<table><tbody>',
            '</tbody></table>'
          ],
          td: [
            3,
            '<table><tbody><tr>',
            '</tr></tbody></table>'
          ],
          _default: [
            0,
            '',
            ''
          ]
        };
      wrapMap.optgroup = wrapMap.option;
      wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
      wrapMap.th = wrapMap.td;
      jQuery.fn.extend({
        text: function (value) {
          return jQuery.access(this, function (value) {
            return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
          }, null, value, arguments.length);
        },
        append: function () {
          return this.domManip(arguments, function (elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.appendChild(elem);
            }
          });
        },
        prepend: function () {
          return this.domManip(arguments, function (elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.insertBefore(elem, target.firstChild);
            }
          });
        },
        before: function () {
          return this.domManip(arguments, function (elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this);
            }
          });
        },
        after: function () {
          return this.domManip(arguments, function (elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this.nextSibling);
            }
          });
        },
        remove: function (selector, keepData) {
          var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0;
          for (; (elem = elems[i]) != null; i++) {
            if (!keepData && elem.nodeType === 1) {
              jQuery.cleanData(getAll(elem));
            }
            if (elem.parentNode) {
              if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                setGlobalEval(getAll(elem, 'script'));
              }
              elem.parentNode.removeChild(elem);
            }
          }
          return this;
        },
        empty: function () {
          var elem, i = 0;
          for (; (elem = this[i]) != null; i++) {
            if (elem.nodeType === 1) {
              jQuery.cleanData(getAll(elem, false));
              elem.textContent = '';
            }
          }
          return this;
        },
        clone: function (dataAndEvents, deepDataAndEvents) {
          dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
          deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
          return this.map(function () {
            return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
          });
        },
        html: function (value) {
          return jQuery.access(this, function (value) {
            var elem = this[0] || {}, i = 0, l = this.length;
            if (value === undefined && elem.nodeType === 1) {
              return elem.innerHTML;
            }
            if (typeof value === 'string' && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
                '',
                ''
              ])[1].toLowerCase()]) {
              value = value.replace(rxhtmlTag, '<$1></$2>');
              try {
                for (; i < l; i++) {
                  elem = this[i] || {};
                  if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.innerHTML = value;
                  }
                }
                elem = 0;
              } catch (e) {
              }
            }
            if (elem) {
              this.empty().append(value);
            }
          }, null, value, arguments.length);
        },
        replaceWith: function () {
          var args = jQuery.map(this, function (elem) {
              return [
                elem.nextSibling,
                elem.parentNode
              ];
            }), i = 0;
          this.domManip(arguments, function (elem) {
            var next = args[i++], parent = args[i++];
            if (parent) {
              if (next && next.parentNode !== parent) {
                next = this.nextSibling;
              }
              jQuery(this).remove();
              parent.insertBefore(elem, next);
            }
          }, true);
          return i ? this : this.remove();
        },
        detach: function (selector) {
          return this.remove(selector, true);
        },
        domManip: function (args, callback, allowIntersection) {
          args = core_concat.apply([], args);
          var fragment, first, scripts, hasScripts, node, doc, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
          if (isFunction || !(l <= 1 || typeof value !== 'string' || jQuery.support.checkClone || !rchecked.test(value))) {
            return this.each(function (index) {
              var self = set.eq(index);
              if (isFunction) {
                args[0] = value.call(this, index, self.html());
              }
              self.domManip(args, callback, allowIntersection);
            });
          }
          if (l) {
            fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, !allowIntersection && this);
            first = fragment.firstChild;
            if (fragment.childNodes.length === 1) {
              fragment = first;
            }
            if (first) {
              scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
              hasScripts = scripts.length;
              for (; i < l; i++) {
                node = fragment;
                if (i !== iNoClone) {
                  node = jQuery.clone(node, true, true);
                  if (hasScripts) {
                    jQuery.merge(scripts, getAll(node, 'script'));
                  }
                }
                callback.call(this[i], node, i);
              }
              if (hasScripts) {
                doc = scripts[scripts.length - 1].ownerDocument;
                jQuery.map(scripts, restoreScript);
                for (i = 0; i < hasScripts; i++) {
                  node = scripts[i];
                  if (rscriptType.test(node.type || '') && !data_priv.access(node, 'globalEval') && jQuery.contains(doc, node)) {
                    if (node.src) {
                      jQuery._evalUrl(node.src);
                    } else {
                      jQuery.globalEval(node.textContent.replace(rcleanScript, ''));
                    }
                  }
                }
              }
            }
          }
          return this;
        }
      });
      jQuery.each({
        appendTo: 'append',
        prependTo: 'prepend',
        insertBefore: 'before',
        insertAfter: 'after',
        replaceAll: 'replaceWith'
      }, function (name, original) {
        jQuery.fn[name] = function (selector) {
          var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
          for (; i <= last; i++) {
            elems = i === last ? this : this.clone(true);
            jQuery(insert[i])[original](elems);
            core_push.apply(ret, elems.get());
          }
          return this.pushStack(ret);
        };
      });
      jQuery.extend({
        clone: function (elem, dataAndEvents, deepDataAndEvents) {
          var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);
          if (!jQuery.support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
            destElements = getAll(clone);
            srcElements = getAll(elem);
            for (i = 0, l = srcElements.length; i < l; i++) {
              fixInput(srcElements[i], destElements[i]);
            }
          }
          if (dataAndEvents) {
            if (deepDataAndEvents) {
              srcElements = srcElements || getAll(elem);
              destElements = destElements || getAll(clone);
              for (i = 0, l = srcElements.length; i < l; i++) {
                cloneCopyEvent(srcElements[i], destElements[i]);
              }
            } else {
              cloneCopyEvent(elem, clone);
            }
          }
          destElements = getAll(clone, 'script');
          if (destElements.length > 0) {
            setGlobalEval(destElements, !inPage && getAll(elem, 'script'));
          }
          return clone;
        },
        buildFragment: function (elems, context, scripts, selection) {
          var elem, tmp, tag, wrap, contains, j, i = 0, l = elems.length, fragment = context.createDocumentFragment(), nodes = [];
          for (; i < l; i++) {
            elem = elems[i];
            if (elem || elem === 0) {
              if (jQuery.type(elem) === 'object') {
                jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
              } else if (!rhtml.test(elem)) {
                nodes.push(context.createTextNode(elem));
              } else {
                tmp = tmp || fragment.appendChild(context.createElement('div'));
                tag = (rtagName.exec(elem) || [
                  '',
                  ''
                ])[1].toLowerCase();
                wrap = wrapMap[tag] || wrapMap._default;
                tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, '<$1></$2>') + wrap[2];
                j = wrap[0];
                while (j--) {
                  tmp = tmp.lastChild;
                }
                jQuery.merge(nodes, tmp.childNodes);
                tmp = fragment.firstChild;
                tmp.textContent = '';
              }
            }
          }
          fragment.textContent = '';
          i = 0;
          while (elem = nodes[i++]) {
            if (selection && jQuery.inArray(elem, selection) !== -1) {
              continue;
            }
            contains = jQuery.contains(elem.ownerDocument, elem);
            tmp = getAll(fragment.appendChild(elem), 'script');
            if (contains) {
              setGlobalEval(tmp);
            }
            if (scripts) {
              j = 0;
              while (elem = tmp[j++]) {
                if (rscriptType.test(elem.type || '')) {
                  scripts.push(elem);
                }
              }
            }
          }
          return fragment;
        },
        cleanData: function (elems) {
          var data, elem, events, type, key, j, special = jQuery.event.special, i = 0;
          for (; (elem = elems[i]) !== undefined; i++) {
            if (Data.accepts(elem)) {
              key = elem[data_priv.expando];
              if (key && (data = data_priv.cache[key])) {
                events = Object.keys(data.events || {});
                if (events.length) {
                  for (j = 0; (type = events[j]) !== undefined; j++) {
                    if (special[type]) {
                      jQuery.event.remove(elem, type);
                    } else {
                      jQuery.removeEvent(elem, type, data.handle);
                    }
                  }
                }
                if (data_priv.cache[key]) {
                  delete data_priv.cache[key];
                }
              }
            }
            delete data_user.cache[elem[data_user.expando]];
          }
        },
        _evalUrl: function (url) {
          return jQuery.ajax({
            url: url,
            type: 'GET',
            dataType: 'script',
            async: false,
            global: false,
            'throws': true
          });
        }
      });
      function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, 'table') && jQuery.nodeName(content.nodeType === 1 ? content : content.firstChild, 'tr') ? elem.getElementsByTagName('tbody')[0] || elem.appendChild(elem.ownerDocument.createElement('tbody')) : elem;
      }
      function disableScript(elem) {
        elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type;
        return elem;
      }
      function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
          elem.type = match[1];
        } else {
          elem.removeAttribute('type');
        }
        return elem;
      }
      function setGlobalEval(elems, refElements) {
        var l = elems.length, i = 0;
        for (; i < l; i++) {
          data_priv.set(elems[i], 'globalEval', !refElements || data_priv.get(refElements[i], 'globalEval'));
        }
      }
      function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
        if (dest.nodeType !== 1) {
          return;
        }
        if (data_priv.hasData(src)) {
          pdataOld = data_priv.access(src);
          pdataCur = data_priv.set(dest, pdataOld);
          events = pdataOld.events;
          if (events) {
            delete pdataCur.handle;
            pdataCur.events = {};
            for (type in events) {
              for (i = 0, l = events[type].length; i < l; i++) {
                jQuery.event.add(dest, type, events[type][i]);
              }
            }
          }
        }
        if (data_user.hasData(src)) {
          udataOld = data_user.access(src);
          udataCur = jQuery.extend({}, udataOld);
          data_user.set(dest, udataCur);
        }
      }
      function getAll(context, tag) {
        var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || '*') : context.querySelectorAll ? context.querySelectorAll(tag || '*') : [];
        return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
      }
      function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();
        if (nodeName === 'input' && manipulation_rcheckableType.test(src.type)) {
          dest.checked = src.checked;
        } else if (nodeName === 'input' || nodeName === 'textarea') {
          dest.defaultValue = src.defaultValue;
        }
      }
      jQuery.fn.extend({
        wrapAll: function (html) {
          var wrap;
          if (jQuery.isFunction(html)) {
            return this.each(function (i) {
              jQuery(this).wrapAll(html.call(this, i));
            });
          }
          if (this[0]) {
            wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
            if (this[0].parentNode) {
              wrap.insertBefore(this[0]);
            }
            wrap.map(function () {
              var elem = this;
              while (elem.firstElementChild) {
                elem = elem.firstElementChild;
              }
              return elem;
            }).append(this);
          }
          return this;
        },
        wrapInner: function (html) {
          if (jQuery.isFunction(html)) {
            return this.each(function (i) {
              jQuery(this).wrapInner(html.call(this, i));
            });
          }
          return this.each(function () {
            var self = jQuery(this), contents = self.contents();
            if (contents.length) {
              contents.wrapAll(html);
            } else {
              self.append(html);
            }
          });
        },
        wrap: function (html) {
          var isFunction = jQuery.isFunction(html);
          return this.each(function (i) {
            jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
          });
        },
        unwrap: function () {
          return this.parent().each(function () {
            if (!jQuery.nodeName(this, 'body')) {
              jQuery(this).replaceWith(this.childNodes);
            }
          }).end();
        }
      });
      var curCSS, iframe, rdisplayswap = /^(none|table(?!-c[ea]).+)/, rmargin = /^margin/, rnumsplit = new RegExp('^(' + core_pnum + ')(.*)$', 'i'), rnumnonpx = new RegExp('^(' + core_pnum + ')(?!px)[a-z%]+$', 'i'), rrelNum = new RegExp('^([+-])=(' + core_pnum + ')', 'i'), elemdisplay = { BODY: 'block' }, cssShow = {
          position: 'absolute',
          visibility: 'hidden',
          display: 'block'
        }, cssNormalTransform = {
          letterSpacing: 0,
          fontWeight: 400
        }, cssExpand = [
          'Top',
          'Right',
          'Bottom',
          'Left'
        ], cssPrefixes = [
          'Webkit',
          'O',
          'Moz',
          'ms'
        ];
      function vendorPropName(style, name) {
        if (name in style) {
          return name;
        }
        var capName = name.charAt(0).toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length;
        while (i--) {
          name = cssPrefixes[i] + capName;
          if (name in style) {
            return name;
          }
        }
        return origName;
      }
      function isHidden(elem, el) {
        elem = el || elem;
        return jQuery.css(elem, 'display') === 'none' || !jQuery.contains(elem.ownerDocument, elem);
      }
      function getStyles(elem) {
        return window.getComputedStyle(elem, null);
      }
      function showHide(elements, show) {
        var display, elem, hidden, values = [], index = 0, length = elements.length;
        for (; index < length; index++) {
          elem = elements[index];
          if (!elem.style) {
            continue;
          }
          values[index] = data_priv.get(elem, 'olddisplay');
          display = elem.style.display;
          if (show) {
            if (!values[index] && display === 'none') {
              elem.style.display = '';
            }
            if (elem.style.display === '' && isHidden(elem)) {
              values[index] = data_priv.access(elem, 'olddisplay', css_defaultDisplay(elem.nodeName));
            }
          } else {
            if (!values[index]) {
              hidden = isHidden(elem);
              if (display && display !== 'none' || !hidden) {
                data_priv.set(elem, 'olddisplay', hidden ? display : jQuery.css(elem, 'display'));
              }
            }
          }
        }
        for (index = 0; index < length; index++) {
          elem = elements[index];
          if (!elem.style) {
            continue;
          }
          if (!show || elem.style.display === 'none' || elem.style.display === '') {
            elem.style.display = show ? values[index] || '' : 'none';
          }
        }
        return elements;
      }
      jQuery.fn.extend({
        css: function (name, value) {
          return jQuery.access(this, function (elem, name, value) {
            var styles, len, map = {}, i = 0;
            if (jQuery.isArray(name)) {
              styles = getStyles(elem);
              len = name.length;
              for (; i < len; i++) {
                map[name[i]] = jQuery.css(elem, name[i], false, styles);
              }
              return map;
            }
            return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
          }, name, value, arguments.length > 1);
        },
        show: function () {
          return showHide(this, true);
        },
        hide: function () {
          return showHide(this);
        },
        toggle: function (state) {
          if (typeof state === 'boolean') {
            return state ? this.show() : this.hide();
          }
          return this.each(function () {
            if (isHidden(this)) {
              jQuery(this).show();
            } else {
              jQuery(this).hide();
            }
          });
        }
      });
      jQuery.extend({
        cssHooks: {
          opacity: {
            get: function (elem, computed) {
              if (computed) {
                var ret = curCSS(elem, 'opacity');
                return ret === '' ? '1' : ret;
              }
            }
          }
        },
        cssNumber: {
          'columnCount': true,
          'fillOpacity': true,
          'fontWeight': true,
          'lineHeight': true,
          'opacity': true,
          'order': true,
          'orphans': true,
          'widows': true,
          'zIndex': true,
          'zoom': true
        },
        cssProps: { 'float': 'cssFloat' },
        style: function (elem, name, value, extra) {
          if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
            return;
          }
          var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
          name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
          if (value !== undefined) {
            type = typeof value;
            if (type === 'string' && (ret = rrelNum.exec(value))) {
              value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
              type = 'number';
            }
            if (value == null || type === 'number' && isNaN(value)) {
              return;
            }
            if (type === 'number' && !jQuery.cssNumber[origName]) {
              value += 'px';
            }
            if (!jQuery.support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {
              style[name] = 'inherit';
            }
            if (!hooks || !('set' in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
              style[name] = value;
            }
          } else {
            if (hooks && 'get' in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
              return ret;
            }
            return style[name];
          }
        },
        css: function (elem, name, extra, styles) {
          var val, num, hooks, origName = jQuery.camelCase(name);
          name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
          if (hooks && 'get' in hooks) {
            val = hooks.get(elem, true, extra);
          }
          if (val === undefined) {
            val = curCSS(elem, name, styles);
          }
          if (val === 'normal' && name in cssNormalTransform) {
            val = cssNormalTransform[name];
          }
          if (extra === '' || extra) {
            num = parseFloat(val);
            return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
          }
          return val;
        }
      });
      curCSS = function (elem, name, _computed) {
        var width, minWidth, maxWidth, computed = _computed || getStyles(elem), ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined, style = elem.style;
        if (computed) {
          if (ret === '' && !jQuery.contains(elem.ownerDocument, elem)) {
            ret = jQuery.style(elem, name);
          }
          if (rnumnonpx.test(ret) && rmargin.test(name)) {
            width = style.width;
            minWidth = style.minWidth;
            maxWidth = style.maxWidth;
            style.minWidth = style.maxWidth = style.width = ret;
            ret = computed.width;
            style.width = width;
            style.minWidth = minWidth;
            style.maxWidth = maxWidth;
          }
        }
        return ret;
      };
      function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || 'px') : value;
      }
      function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? 'border' : 'content') ? 4 : name === 'width' ? 1 : 0, val = 0;
        for (; i < 4; i += 2) {
          if (extra === 'margin') {
            val += jQuery.css(elem, extra + cssExpand[i], true, styles);
          }
          if (isBorderBox) {
            if (extra === 'content') {
              val -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
            }
            if (extra !== 'margin') {
              val -= jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
            }
          } else {
            val += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
            if (extra !== 'padding') {
              val += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
            }
          }
        }
        return val;
      }
      function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox = true, val = name === 'width' ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = jQuery.support.boxSizing && jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';
        if (val <= 0 || val == null) {
          val = curCSS(elem, name, styles);
          if (val < 0 || val == null) {
            val = elem.style[name];
          }
          if (rnumnonpx.test(val)) {
            return val;
          }
          valueIsBorderBox = isBorderBox && (jQuery.support.boxSizingReliable || val === elem.style[name]);
          val = parseFloat(val) || 0;
        }
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? 'border' : 'content'), valueIsBorderBox, styles) + 'px';
      }
      function css_defaultDisplay(nodeName) {
        var doc = document, display = elemdisplay[nodeName];
        if (!display) {
          display = actualDisplay(nodeName, doc);
          if (display === 'none' || !display) {
            iframe = (iframe || jQuery('<iframe frameborder=\'0\' width=\'0\' height=\'0\'/>').css('cssText', 'display:block !important')).appendTo(doc.documentElement);
            doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;
            doc.write('<!doctype html><html><body>');
            doc.close();
            display = actualDisplay(nodeName, doc);
            iframe.detach();
          }
          elemdisplay[nodeName] = display;
        }
        return display;
      }
      function actualDisplay(name, doc) {
        var elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = jQuery.css(elem[0], 'display');
        elem.remove();
        return display;
      }
      jQuery.each([
        'height',
        'width'
      ], function (i, name) {
        jQuery.cssHooks[name] = {
          get: function (elem, computed, extra) {
            if (computed) {
              return elem.offsetWidth === 0 && rdisplayswap.test(jQuery.css(elem, 'display')) ? jQuery.swap(elem, cssShow, function () {
                return getWidthOrHeight(elem, name, extra);
              }) : getWidthOrHeight(elem, name, extra);
            }
          },
          set: function (elem, value, extra) {
            var styles = extra && getStyles(elem);
            return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.support.boxSizing && jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', styles) : 0);
          }
        };
      });
      jQuery(function () {
        if (!jQuery.support.reliableMarginRight) {
          jQuery.cssHooks.marginRight = {
            get: function (elem, computed) {
              if (computed) {
                return jQuery.swap(elem, { 'display': 'inline-block' }, curCSS, [
                  elem,
                  'marginRight'
                ]);
              }
            }
          };
        }
        if (!jQuery.support.pixelPosition && jQuery.fn.position) {
          jQuery.each([
            'top',
            'left'
          ], function (i, prop) {
            jQuery.cssHooks[prop] = {
              get: function (elem, computed) {
                if (computed) {
                  computed = curCSS(elem, prop);
                  return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed;
                }
              }
            };
          });
        }
      });
      if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.hidden = function (elem) {
          return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
        };
        jQuery.expr.filters.visible = function (elem) {
          return !jQuery.expr.filters.hidden(elem);
        };
      }
      jQuery.each({
        margin: '',
        padding: '',
        border: 'Width'
      }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
          expand: function (value) {
            var i = 0, expanded = {}, parts = typeof value === 'string' ? value.split(' ') : [value];
            for (; i < 4; i++) {
              expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
            }
            return expanded;
          }
        };
        if (!rmargin.test(prefix)) {
          jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
      });
      var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
      jQuery.fn.extend({
        serialize: function () {
          return jQuery.param(this.serializeArray());
        },
        serializeArray: function () {
          return this.map(function () {
            var elements = jQuery.prop(this, 'elements');
            return elements ? jQuery.makeArray(elements) : this;
          }).filter(function () {
            var type = this.type;
            return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !manipulation_rcheckableType.test(type));
          }).map(function (i, elem) {
            var val = jQuery(this).val();
            return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
              return {
                name: elem.name,
                value: val.replace(rCRLF, '\r\n')
              };
            }) : {
              name: elem.name,
              value: val.replace(rCRLF, '\r\n')
            };
          }).get();
        }
      });
      jQuery.param = function (a, traditional) {
        var prefix, s = [], add = function (key, value) {
            value = jQuery.isFunction(value) ? value() : value == null ? '' : value;
            s[s.length] = encodeURIComponent(key) + '=' + encodeURIComponent(value);
          };
        if (traditional === undefined) {
          traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }
        if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
          jQuery.each(a, function () {
            add(this.name, this.value);
          });
        } else {
          for (prefix in a) {
            buildParams(prefix, a[prefix], traditional, add);
          }
        }
        return s.join('&').replace(r20, '+');
      };
      function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) {
          jQuery.each(obj, function (i, v) {
            if (traditional || rbracket.test(prefix)) {
              add(prefix, v);
            } else {
              buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add);
            }
          });
        } else if (!traditional && jQuery.type(obj) === 'object') {
          for (name in obj) {
            buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
          }
        } else {
          add(prefix, obj);
        }
      }
      jQuery.each(('blur focus focusin focusout load resize scroll unload click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select submit keydown keypress keyup error contextmenu').split(' '), function (i, name) {
        jQuery.fn[name] = function (data, fn) {
          return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
      });
      jQuery.fn.extend({
        hover: function (fnOver, fnOut) {
          return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        },
        bind: function (types, data, fn) {
          return this.on(types, null, data, fn);
        },
        unbind: function (types, fn) {
          return this.off(types, null, fn);
        },
        delegate: function (selector, types, data, fn) {
          return this.on(types, selector, data, fn);
        },
        undelegate: function (selector, types, fn) {
          return arguments.length === 1 ? this.off(selector, '**') : this.off(types, selector || '**', fn);
        }
      });
      var ajaxLocParts, ajaxLocation, ajax_nonce = jQuery.now(), ajax_rquery = /\?/, rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/, _load = jQuery.fn.load, prefilters = {}, transports = {}, allTypes = '*/'.concat('*');
      try {
        ajaxLocation = location.href;
      } catch (e) {
        ajaxLocation = document.createElement('a');
        ajaxLocation.href = '';
        ajaxLocation = ajaxLocation.href;
      }
      ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
      function addToPrefiltersOrTransports(structure) {
        return function (dataTypeExpression, func) {
          if (typeof dataTypeExpression !== 'string') {
            func = dataTypeExpression;
            dataTypeExpression = '*';
          }
          var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(core_rnotwhite) || [];
          if (jQuery.isFunction(func)) {
            while (dataType = dataTypes[i++]) {
              if (dataType[0] === '+') {
                dataType = dataType.slice(1) || '*';
                (structure[dataType] = structure[dataType] || []).unshift(func);
              } else {
                (structure[dataType] = structure[dataType] || []).push(func);
              }
            }
          }
        };
      }
      function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
          var selected;
          inspected[dataType] = true;
          jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
            var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
            if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {
              options.dataTypes.unshift(dataTypeOrTransport);
              inspect(dataTypeOrTransport);
              return false;
            } else if (seekingTransport) {
              return !(selected = dataTypeOrTransport);
            }
          });
          return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected['*'] && inspect('*');
      }
      function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
          if (src[key] !== undefined) {
            (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
          }
        }
        if (deep) {
          jQuery.extend(true, target, deep);
        }
        return target;
      }
      jQuery.fn.load = function (url, params, callback) {
        if (typeof url !== 'string' && _load) {
          return _load.apply(this, arguments);
        }
        var selector, type, response, self = this, off = url.indexOf(' ');
        if (off >= 0) {
          selector = url.slice(off);
          url = url.slice(0, off);
        }
        if (jQuery.isFunction(params)) {
          callback = params;
          params = undefined;
        } else if (params && typeof params === 'object') {
          type = 'POST';
        }
        if (self.length > 0) {
          jQuery.ajax({
            url: url,
            type: type,
            dataType: 'html',
            data: params
          }).done(function (responseText) {
            response = arguments;
            self.html(selector ? jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : responseText);
          }).complete(callback && function (jqXHR, status) {
            self.each(callback, response || [
              jqXHR.responseText,
              status,
              jqXHR
            ]);
          });
        }
        return this;
      };
      jQuery.each([
        'ajaxStart',
        'ajaxStop',
        'ajaxComplete',
        'ajaxError',
        'ajaxSuccess',
        'ajaxSend'
      ], function (i, type) {
        jQuery.fn[type] = function (fn) {
          return this.on(type, fn);
        };
      });
      jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
          url: ajaxLocation,
          type: 'GET',
          isLocal: rlocalProtocol.test(ajaxLocParts[1]),
          global: true,
          processData: true,
          async: true,
          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
          accepts: {
            '*': allTypes,
            text: 'text/plain',
            html: 'text/html',
            xml: 'application/xml, text/xml',
            json: 'application/json, text/javascript'
          },
          contents: {
            xml: /xml/,
            html: /html/,
            json: /json/
          },
          responseFields: {
            xml: 'responseXML',
            text: 'responseText',
            json: 'responseJSON'
          },
          converters: {
            '* text': String,
            'text html': true,
            'text json': jQuery.parseJSON,
            'text xml': jQuery.parseXML
          },
          flatOptions: {
            url: true,
            context: true
          }
        },
        ajaxSetup: function (target, settings) {
          return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function (url, options) {
          if (typeof url === 'object') {
            options = url;
            url = undefined;
          }
          options = options || {};
          var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, parts, fireGlobals, i, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks('once memory'), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0, strAbort = 'canceled', jqXHR = {
              readyState: 0,
              getResponseHeader: function (key) {
                var match;
                if (state === 2) {
                  if (!responseHeaders) {
                    responseHeaders = {};
                    while (match = rheaders.exec(responseHeadersString)) {
                      responseHeaders[match[1].toLowerCase()] = match[2];
                    }
                  }
                  match = responseHeaders[key.toLowerCase()];
                }
                return match == null ? null : match;
              },
              getAllResponseHeaders: function () {
                return state === 2 ? responseHeadersString : null;
              },
              setRequestHeader: function (name, value) {
                var lname = name.toLowerCase();
                if (!state) {
                  name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                  requestHeaders[name] = value;
                }
                return this;
              },
              overrideMimeType: function (type) {
                if (!state) {
                  s.mimeType = type;
                }
                return this;
              },
              statusCode: function (map) {
                var code;
                if (map) {
                  if (state < 2) {
                    for (code in map) {
                      statusCode[code] = [
                        statusCode[code],
                        map[code]
                      ];
                    }
                  } else {
                    jqXHR.always(map[jqXHR.status]);
                  }
                }
                return this;
              },
              abort: function (statusText) {
                var finalText = statusText || strAbort;
                if (transport) {
                  transport.abort(finalText);
                }
                done(0, finalText);
                return this;
              }
            };
          deferred.promise(jqXHR).complete = completeDeferred.add;
          jqXHR.success = jqXHR.done;
          jqXHR.error = jqXHR.fail;
          s.url = ((url || s.url || ajaxLocation) + '').replace(rhash, '').replace(rprotocol, ajaxLocParts[1] + '//');
          s.type = options.method || options.type || s.method || s.type;
          s.dataTypes = jQuery.trim(s.dataType || '*').toLowerCase().match(core_rnotwhite) || [''];
          if (s.crossDomain == null) {
            parts = rurl.exec(s.url.toLowerCase());
            s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === 'http:' ? '80' : '443')) !== (ajaxLocParts[3] || (ajaxLocParts[1] === 'http:' ? '80' : '443'))));
          }
          if (s.data && s.processData && typeof s.data !== 'string') {
            s.data = jQuery.param(s.data, s.traditional);
          }
          inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
          if (state === 2) {
            return jqXHR;
          }
          fireGlobals = s.global;
          if (fireGlobals && jQuery.active++ === 0) {
            jQuery.event.trigger('ajaxStart');
          }
          s.type = s.type.toUpperCase();
          s.hasContent = !rnoContent.test(s.type);
          cacheURL = s.url;
          if (!s.hasContent) {
            if (s.data) {
              cacheURL = s.url += (ajax_rquery.test(cacheURL) ? '&' : '?') + s.data;
              delete s.data;
            }
            if (s.cache === false) {
              s.url = rts.test(cacheURL) ? cacheURL.replace(rts, '$1_=' + ajax_nonce++) : cacheURL + (ajax_rquery.test(cacheURL) ? '&' : '?') + '_=' + ajax_nonce++;
            }
          }
          if (s.ifModified) {
            if (jQuery.lastModified[cacheURL]) {
              jqXHR.setRequestHeader('If-Modified-Since', jQuery.lastModified[cacheURL]);
            }
            if (jQuery.etag[cacheURL]) {
              jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL]);
            }
          }
          if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
            jqXHR.setRequestHeader('Content-Type', s.contentType);
          }
          jqXHR.setRequestHeader('Accept', s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '') : s.accepts['*']);
          for (i in s.headers) {
            jqXHR.setRequestHeader(i, s.headers[i]);
          }
          if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
            return jqXHR.abort();
          }
          strAbort = 'abort';
          for (i in {
              success: 1,
              error: 1,
              complete: 1
            }) {
            jqXHR[i](s[i]);
          }
          transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
          if (!transport) {
            done(-1, 'No Transport');
          } else {
            jqXHR.readyState = 1;
            if (fireGlobals) {
              globalEventContext.trigger('ajaxSend', [
                jqXHR,
                s
              ]);
            }
            if (s.async && s.timeout > 0) {
              timeoutTimer = setTimeout(function () {
                jqXHR.abort('timeout');
              }, s.timeout);
            }
            try {
              state = 1;
              transport.send(requestHeaders, done);
            } catch (e) {
              if (state < 2) {
                done(-1, e);
              } else {
                throw e;
              }
            }
          }
          function done(status, nativeStatusText, responses, headers) {
            var isSuccess, success, error, response, modified, statusText = nativeStatusText;
            if (state === 2) {
              return;
            }
            state = 2;
            if (timeoutTimer) {
              clearTimeout(timeoutTimer);
            }
            transport = undefined;
            responseHeadersString = headers || '';
            jqXHR.readyState = status > 0 ? 4 : 0;
            isSuccess = status >= 200 && status < 300 || status === 304;
            if (responses) {
              response = ajaxHandleResponses(s, jqXHR, responses);
            }
            response = ajaxConvert(s, response, jqXHR, isSuccess);
            if (isSuccess) {
              if (s.ifModified) {
                modified = jqXHR.getResponseHeader('Last-Modified');
                if (modified) {
                  jQuery.lastModified[cacheURL] = modified;
                }
                modified = jqXHR.getResponseHeader('etag');
                if (modified) {
                  jQuery.etag[cacheURL] = modified;
                }
              }
              if (status === 204 || s.type === 'HEAD') {
                statusText = 'nocontent';
              } else if (status === 304) {
                statusText = 'notmodified';
              } else {
                statusText = response.state;
                success = response.data;
                error = response.error;
                isSuccess = !error;
              }
            } else {
              error = statusText;
              if (status || !statusText) {
                statusText = 'error';
                if (status < 0) {
                  status = 0;
                }
              }
            }
            jqXHR.status = status;
            jqXHR.statusText = (nativeStatusText || statusText) + '';
            if (isSuccess) {
              deferred.resolveWith(callbackContext, [
                success,
                statusText,
                jqXHR
              ]);
            } else {
              deferred.rejectWith(callbackContext, [
                jqXHR,
                statusText,
                error
              ]);
            }
            jqXHR.statusCode(statusCode);
            statusCode = undefined;
            if (fireGlobals) {
              globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError', [
                jqXHR,
                s,
                isSuccess ? success : error
              ]);
            }
            completeDeferred.fireWith(callbackContext, [
              jqXHR,
              statusText
            ]);
            if (fireGlobals) {
              globalEventContext.trigger('ajaxComplete', [
                jqXHR,
                s
              ]);
              if (!--jQuery.active) {
                jQuery.event.trigger('ajaxStop');
              }
            }
          }
          return jqXHR;
        },
        getJSON: function (url, data, callback) {
          return jQuery.get(url, data, callback, 'json');
        },
        getScript: function (url, callback) {
          return jQuery.get(url, undefined, callback, 'script');
        }
      });
      jQuery.each([
        'get',
        'post'
      ], function (i, method) {
        jQuery[method] = function (url, data, callback, type) {
          if (jQuery.isFunction(data)) {
            type = type || callback;
            callback = data;
            data = undefined;
          }
          return jQuery.ajax({
            url: url,
            type: method,
            dataType: type,
            data: data,
            success: callback
          });
        };
      });
      function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        while (dataTypes[0] === '*') {
          dataTypes.shift();
          if (ct === undefined) {
            ct = s.mimeType || jqXHR.getResponseHeader('Content-Type');
          }
        }
        if (ct) {
          for (type in contents) {
            if (contents[type] && contents[type].test(ct)) {
              dataTypes.unshift(type);
              break;
            }
          }
        }
        if (dataTypes[0] in responses) {
          finalDataType = dataTypes[0];
        } else {
          for (type in responses) {
            if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
              finalDataType = type;
              break;
            }
            if (!firstDataType) {
              firstDataType = type;
            }
          }
          finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
          if (finalDataType !== dataTypes[0]) {
            dataTypes.unshift(finalDataType);
          }
          return responses[finalDataType];
        }
      }
      function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
          for (conv in s.converters) {
            converters[conv.toLowerCase()] = s.converters[conv];
          }
        }
        current = dataTypes.shift();
        while (current) {
          if (s.responseFields[current]) {
            jqXHR[s.responseFields[current]] = response;
          }
          if (!prev && isSuccess && s.dataFilter) {
            response = s.dataFilter(response, s.dataType);
          }
          prev = current;
          current = dataTypes.shift();
          if (current) {
            if (current === '*') {
              current = prev;
            } else if (prev !== '*' && prev !== current) {
              conv = converters[prev + ' ' + current] || converters['* ' + current];
              if (!conv) {
                for (conv2 in converters) {
                  tmp = conv2.split(' ');
                  if (tmp[1] === current) {
                    conv = converters[prev + ' ' + tmp[0]] || converters['* ' + tmp[0]];
                    if (conv) {
                      if (conv === true) {
                        conv = converters[conv2];
                      } else if (converters[conv2] !== true) {
                        current = tmp[0];
                        dataTypes.unshift(tmp[1]);
                      }
                      break;
                    }
                  }
                }
              }
              if (conv !== true) {
                if (conv && s['throws']) {
                  response = conv(response);
                } else {
                  try {
                    response = conv(response);
                  } catch (e) {
                    return {
                      state: 'parsererror',
                      error: conv ? e : 'No conversion from ' + prev + ' to ' + current
                    };
                  }
                }
              }
            }
          }
        }
        return {
          state: 'success',
          data: response
        };
      }
      jQuery.ajaxSetup({
        accepts: { script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript' },
        contents: { script: /(?:java|ecma)script/ },
        converters: {
          'text script': function (text) {
            jQuery.globalEval(text);
            return text;
          }
        }
      });
      jQuery.ajaxPrefilter('script', function (s) {
        if (s.cache === undefined) {
          s.cache = false;
        }
        if (s.crossDomain) {
          s.type = 'GET';
        }
      });
      jQuery.ajaxTransport('script', function (s) {
        if (s.crossDomain) {
          var script, callback;
          return {
            send: function (_, complete) {
              script = jQuery('<script>').prop({
                async: true,
                charset: s.scriptCharset,
                src: s.url
              }).on('load error', callback = function (evt) {
                script.remove();
                callback = null;
                if (evt) {
                  complete(evt.type === 'error' ? 404 : 200, evt.type);
                }
              });
              document.head.appendChild(script[0]);
            },
            abort: function () {
              if (callback) {
                callback();
              }
            }
          };
        }
      });
      var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
      jQuery.ajaxSetup({
        jsonp: 'callback',
        jsonpCallback: function () {
          var callback = oldCallbacks.pop() || jQuery.expando + '_' + ajax_nonce++;
          this[callback] = true;
          return callback;
        }
      });
      jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? 'url' : typeof s.data === 'string' && !(s.contentType || '').indexOf('application/x-www-form-urlencoded') && rjsonp.test(s.data) && 'data');
        if (jsonProp || s.dataTypes[0] === 'jsonp') {
          callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
          if (jsonProp) {
            s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName);
          } else if (s.jsonp !== false) {
            s.url += (ajax_rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName;
          }
          s.converters['script json'] = function () {
            if (!responseContainer) {
              jQuery.error(callbackName + ' was not called');
            }
            return responseContainer[0];
          };
          s.dataTypes[0] = 'json';
          overwritten = window[callbackName];
          window[callbackName] = function () {
            responseContainer = arguments;
          };
          jqXHR.always(function () {
            window[callbackName] = overwritten;
            if (s[callbackName]) {
              s.jsonpCallback = originalSettings.jsonpCallback;
              oldCallbacks.push(callbackName);
            }
            if (responseContainer && jQuery.isFunction(overwritten)) {
              overwritten(responseContainer[0]);
            }
            responseContainer = overwritten = undefined;
          });
          return 'script';
        }
      });
      jQuery.ajaxSettings.xhr = function () {
        try {
          return new XMLHttpRequest();
        } catch (e) {
        }
      };
      var xhrSupported = jQuery.ajaxSettings.xhr(), xhrSuccessStatus = {
          0: 200,
          1223: 204
        }, xhrId = 0, xhrCallbacks = {};
      if (window.ActiveXObject) {
        jQuery(window).on('unload', function () {
          for (var key in xhrCallbacks) {
            xhrCallbacks[key]();
          }
          xhrCallbacks = undefined;
        });
      }
      jQuery.support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
      jQuery.support.ajax = xhrSupported = !!xhrSupported;
      jQuery.ajaxTransport(function (options) {
        var callback;
        if (jQuery.support.cors || xhrSupported && !options.crossDomain) {
          return {
            send: function (headers, complete) {
              var i, id, xhr = options.xhr();
              xhr.open(options.type, options.url, options.async, options.username, options.password);
              if (options.xhrFields) {
                for (i in options.xhrFields) {
                  xhr[i] = options.xhrFields[i];
                }
              }
              if (options.mimeType && xhr.overrideMimeType) {
                xhr.overrideMimeType(options.mimeType);
              }
              if (!options.crossDomain && !headers['X-Requested-With']) {
                headers['X-Requested-With'] = 'XMLHttpRequest';
              }
              for (i in headers) {
                xhr.setRequestHeader(i, headers[i]);
              }
              callback = function (type) {
                return function () {
                  if (callback) {
                    delete xhrCallbacks[id];
                    callback = xhr.onload = xhr.onerror = null;
                    if (type === 'abort') {
                      xhr.abort();
                    } else if (type === 'error') {
                      complete(xhr.status || 404, xhr.statusText);
                    } else {
                      complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, typeof xhr.responseText === 'string' ? { text: xhr.responseText } : undefined, xhr.getAllResponseHeaders());
                    }
                  }
                };
              };
              xhr.onload = callback();
              xhr.onerror = callback('error');
              callback = xhrCallbacks[id = xhrId++] = callback('abort');
              xhr.send(options.hasContent && options.data || null);
            },
            abort: function () {
              if (callback) {
                callback();
              }
            }
          };
        }
      });
      var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp('^(?:([+-])=|)(' + core_pnum + ')([a-z%]*)$', 'i'), rrun = /queueHooks$/, animationPrefilters = [defaultPrefilter], tweeners = {
          '*': [function (prop, value) {
              var tween = this.createTween(prop, value), target = tween.cur(), parts = rfxnum.exec(value), unit = parts && parts[3] || (jQuery.cssNumber[prop] ? '' : 'px'), start = (jQuery.cssNumber[prop] || unit !== 'px' && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)), scale = 1, maxIterations = 20;
              if (start && start[3] !== unit) {
                unit = unit || start[3];
                parts = parts || [];
                start = +target || 1;
                do {
                  scale = scale || '.5';
                  start = start / scale;
                  jQuery.style(tween.elem, prop, start + unit);
                } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
              }
              if (parts) {
                start = tween.start = +start || +target || 0;
                tween.unit = unit;
                tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
              }
              return tween;
            }]
        };
      function createFxNow() {
        setTimeout(function () {
          fxNow = undefined;
        });
        return fxNow = jQuery.now();
      }
      function createTween(value, prop, animation) {
        var tween, collection = (tweeners[prop] || []).concat(tweeners['*']), index = 0, length = collection.length;
        for (; index < length; index++) {
          if (tween = collection[index].call(animation, prop, value)) {
            return tween;
          }
        }
      }
      function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function () {
            delete tick.elem;
          }), tick = function () {
            if (stopped) {
              return false;
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
            for (; index < length; index++) {
              animation.tweens[index].run(percent);
            }
            deferred.notifyWith(elem, [
              animation,
              percent,
              remaining
            ]);
            if (percent < 1 && length) {
              return remaining;
            } else {
              deferred.resolveWith(elem, [animation]);
              return false;
            }
          }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, { specialEasing: {} }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function (prop, end) {
              var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
              animation.tweens.push(tween);
              return tween;
            },
            stop: function (gotoEnd) {
              var index = 0, length = gotoEnd ? animation.tweens.length : 0;
              if (stopped) {
                return this;
              }
              stopped = true;
              for (; index < length; index++) {
                animation.tweens[index].run(1);
              }
              if (gotoEnd) {
                deferred.resolveWith(elem, [
                  animation,
                  gotoEnd
                ]);
              } else {
                deferred.rejectWith(elem, [
                  animation,
                  gotoEnd
                ]);
              }
              return this;
            }
          }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) {
          result = animationPrefilters[index].call(animation, elem, props, animation.opts);
          if (result) {
            return result;
          }
        }
        jQuery.map(props, createTween, animation);
        if (jQuery.isFunction(animation.opts.start)) {
          animation.opts.start.call(elem, animation);
        }
        jQuery.fx.timer(jQuery.extend(tick, {
          elem: elem,
          anim: animation,
          queue: animation.opts.queue
        }));
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
      }
      function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
          name = jQuery.camelCase(index);
          easing = specialEasing[name];
          value = props[index];
          if (jQuery.isArray(value)) {
            easing = value[1];
            value = props[index] = value[0];
          }
          if (index !== name) {
            props[name] = value;
            delete props[index];
          }
          hooks = jQuery.cssHooks[name];
          if (hooks && 'expand' in hooks) {
            value = hooks.expand(value);
            delete props[name];
            for (index in value) {
              if (!(index in props)) {
                props[index] = value[index];
                specialEasing[index] = easing;
              }
            }
          } else {
            specialEasing[name] = easing;
          }
        }
      }
      jQuery.Animation = jQuery.extend(Animation, {
        tweener: function (props, callback) {
          if (jQuery.isFunction(props)) {
            callback = props;
            props = ['*'];
          } else {
            props = props.split(' ');
          }
          var prop, index = 0, length = props.length;
          for (; index < length; index++) {
            prop = props[index];
            tweeners[prop] = tweeners[prop] || [];
            tweeners[prop].unshift(callback);
          }
        },
        prefilter: function (callback, prepend) {
          if (prepend) {
            animationPrefilters.unshift(callback);
          } else {
            animationPrefilters.push(callback);
          }
        }
      });
      function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, tween, hooks, oldfire, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = data_priv.get(elem, 'fxshow');
        if (!opts.queue) {
          hooks = jQuery._queueHooks(elem, 'fx');
          if (hooks.unqueued == null) {
            hooks.unqueued = 0;
            oldfire = hooks.empty.fire;
            hooks.empty.fire = function () {
              if (!hooks.unqueued) {
                oldfire();
              }
            };
          }
          hooks.unqueued++;
          anim.always(function () {
            anim.always(function () {
              hooks.unqueued--;
              if (!jQuery.queue(elem, 'fx').length) {
                hooks.empty.fire();
              }
            });
          });
        }
        if (elem.nodeType === 1 && ('height' in props || 'width' in props)) {
          opts.overflow = [
            style.overflow,
            style.overflowX,
            style.overflowY
          ];
          if (jQuery.css(elem, 'display') === 'inline' && jQuery.css(elem, 'float') === 'none') {
            style.display = 'inline-block';
          }
        }
        if (opts.overflow) {
          style.overflow = 'hidden';
          anim.always(function () {
            style.overflow = opts.overflow[0];
            style.overflowX = opts.overflow[1];
            style.overflowY = opts.overflow[2];
          });
        }
        for (prop in props) {
          value = props[prop];
          if (rfxtypes.exec(value)) {
            delete props[prop];
            toggle = toggle || value === 'toggle';
            if (value === (hidden ? 'hide' : 'show')) {
              if (value === 'show' && dataShow && dataShow[prop] !== undefined) {
                hidden = true;
              } else {
                continue;
              }
            }
            orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
          }
        }
        if (!jQuery.isEmptyObject(orig)) {
          if (dataShow) {
            if ('hidden' in dataShow) {
              hidden = dataShow.hidden;
            }
          } else {
            dataShow = data_priv.access(elem, 'fxshow', {});
          }
          if (toggle) {
            dataShow.hidden = !hidden;
          }
          if (hidden) {
            jQuery(elem).show();
          } else {
            anim.done(function () {
              jQuery(elem).hide();
            });
          }
          anim.done(function () {
            var prop;
            data_priv.remove(elem, 'fxshow');
            for (prop in orig) {
              jQuery.style(elem, prop, orig[prop]);
            }
          });
          for (prop in orig) {
            tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
              dataShow[prop] = tween.start;
              if (hidden) {
                tween.end = tween.start;
                tween.start = prop === 'width' || prop === 'height' ? 1 : 0;
              }
            }
          }
        }
      }
      function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
      }
      jQuery.Tween = Tween;
      Tween.prototype = {
        constructor: Tween,
        init: function (elem, options, prop, end, easing, unit) {
          this.elem = elem;
          this.prop = prop;
          this.easing = easing || 'swing';
          this.options = options;
          this.start = this.now = this.cur();
          this.end = end;
          this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px');
        },
        cur: function () {
          var hooks = Tween.propHooks[this.prop];
          return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function (percent) {
          var eased, hooks = Tween.propHooks[this.prop];
          if (this.options.duration) {
            this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
          } else {
            this.pos = eased = percent;
          }
          this.now = (this.end - this.start) * eased + this.start;
          if (this.options.step) {
            this.options.step.call(this.elem, this.now, this);
          }
          if (hooks && hooks.set) {
            hooks.set(this);
          } else {
            Tween.propHooks._default.set(this);
          }
          return this;
        }
      };
      Tween.prototype.init.prototype = Tween.prototype;
      Tween.propHooks = {
        _default: {
          get: function (tween) {
            var result;
            if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
              return tween.elem[tween.prop];
            }
            result = jQuery.css(tween.elem, tween.prop, '');
            return !result || result === 'auto' ? 0 : result;
          },
          set: function (tween) {
            if (jQuery.fx.step[tween.prop]) {
              jQuery.fx.step[tween.prop](tween);
            } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
              jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
            } else {
              tween.elem[tween.prop] = tween.now;
            }
          }
        }
      };
      Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function (tween) {
          if (tween.elem.nodeType && tween.elem.parentNode) {
            tween.elem[tween.prop] = tween.now;
          }
        }
      };
      jQuery.each([
        'toggle',
        'show',
        'hide'
      ], function (i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function (speed, easing, callback) {
          return speed == null || typeof speed === 'boolean' ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
      });
      jQuery.fn.extend({
        fadeTo: function (speed, to, easing, callback) {
          return this.filter(isHidden).css('opacity', 0).show().end().animate({ opacity: to }, speed, easing, callback);
        },
        animate: function (prop, speed, easing, callback) {
          var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () {
              var anim = Animation(this, jQuery.extend({}, prop), optall);
              if (empty || data_priv.get(this, 'finish')) {
                anim.stop(true);
              }
            };
          doAnimation.finish = doAnimation;
          return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function (type, clearQueue, gotoEnd) {
          var stopQueue = function (hooks) {
            var stop = hooks.stop;
            delete hooks.stop;
            stop(gotoEnd);
          };
          if (typeof type !== 'string') {
            gotoEnd = clearQueue;
            clearQueue = type;
            type = undefined;
          }
          if (clearQueue && type !== false) {
            this.queue(type || 'fx', []);
          }
          return this.each(function () {
            var dequeue = true, index = type != null && type + 'queueHooks', timers = jQuery.timers, data = data_priv.get(this);
            if (index) {
              if (data[index] && data[index].stop) {
                stopQueue(data[index]);
              }
            } else {
              for (index in data) {
                if (data[index] && data[index].stop && rrun.test(index)) {
                  stopQueue(data[index]);
                }
              }
            }
            for (index = timers.length; index--;) {
              if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                timers[index].anim.stop(gotoEnd);
                dequeue = false;
                timers.splice(index, 1);
              }
            }
            if (dequeue || !gotoEnd) {
              jQuery.dequeue(this, type);
            }
          });
        },
        finish: function (type) {
          if (type !== false) {
            type = type || 'fx';
          }
          return this.each(function () {
            var index, data = data_priv.get(this), queue = data[type + 'queue'], hooks = data[type + 'queueHooks'], timers = jQuery.timers, length = queue ? queue.length : 0;
            data.finish = true;
            jQuery.queue(this, type, []);
            if (hooks && hooks.stop) {
              hooks.stop.call(this, true);
            }
            for (index = timers.length; index--;) {
              if (timers[index].elem === this && timers[index].queue === type) {
                timers[index].anim.stop(true);
                timers.splice(index, 1);
              }
            }
            for (index = 0; index < length; index++) {
              if (queue[index] && queue[index].finish) {
                queue[index].finish.call(this);
              }
            }
            delete data.finish;
          });
        }
      });
      function genFx(type, includeWidth) {
        var which, attrs = { height: type }, i = 0;
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
          which = cssExpand[i];
          attrs['margin' + which] = attrs['padding' + which] = type;
        }
        if (includeWidth) {
          attrs.opacity = attrs.width = type;
        }
        return attrs;
      }
      jQuery.each({
        slideDown: genFx('show'),
        slideUp: genFx('hide'),
        slideToggle: genFx('toggle'),
        fadeIn: { opacity: 'show' },
        fadeOut: { opacity: 'hide' },
        fadeToggle: { opacity: 'toggle' }
      }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
          return this.animate(props, speed, easing, callback);
        };
      });
      jQuery.speed = function (speed, easing, fn) {
        var opt = speed && typeof speed === 'object' ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
          };
        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === 'number' ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
        if (opt.queue == null || opt.queue === true) {
          opt.queue = 'fx';
        }
        opt.old = opt.complete;
        opt.complete = function () {
          if (jQuery.isFunction(opt.old)) {
            opt.old.call(this);
          }
          if (opt.queue) {
            jQuery.dequeue(this, opt.queue);
          }
        };
        return opt;
      };
      jQuery.easing = {
        linear: function (p) {
          return p;
        },
        swing: function (p) {
          return 0.5 - Math.cos(p * Math.PI) / 2;
        }
      };
      jQuery.timers = [];
      jQuery.fx = Tween.prototype.init;
      jQuery.fx.tick = function () {
        var timer, timers = jQuery.timers, i = 0;
        fxNow = jQuery.now();
        for (; i < timers.length; i++) {
          timer = timers[i];
          if (!timer() && timers[i] === timer) {
            timers.splice(i--, 1);
          }
        }
        if (!timers.length) {
          jQuery.fx.stop();
        }
        fxNow = undefined;
      };
      jQuery.fx.timer = function (timer) {
        if (timer() && jQuery.timers.push(timer)) {
          jQuery.fx.start();
        }
      };
      jQuery.fx.interval = 13;
      jQuery.fx.start = function () {
        if (!timerId) {
          timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
        }
      };
      jQuery.fx.stop = function () {
        clearInterval(timerId);
        timerId = null;
      };
      jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
      };
      jQuery.fx.step = {};
      if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.animated = function (elem) {
          return jQuery.grep(jQuery.timers, function (fn) {
            return elem === fn.elem;
          }).length;
        };
      }
      jQuery.fn.offset = function (options) {
        if (arguments.length) {
          return options === undefined ? this : this.each(function (i) {
            jQuery.offset.setOffset(this, options, i);
          });
        }
        var docElem, win, elem = this[0], box = {
            top: 0,
            left: 0
          }, doc = elem && elem.ownerDocument;
        if (!doc) {
          return;
        }
        docElem = doc.documentElement;
        if (!jQuery.contains(docElem, elem)) {
          return box;
        }
        if (typeof elem.getBoundingClientRect !== core_strundefined) {
          box = elem.getBoundingClientRect();
        }
        win = getWindow(doc);
        return {
          top: box.top + win.pageYOffset - docElem.clientTop,
          left: box.left + win.pageXOffset - docElem.clientLeft
        };
      };
      jQuery.offset = {
        setOffset: function (elem, options, i) {
          var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, 'position'), curElem = jQuery(elem), props = {};
          if (position === 'static') {
            elem.style.position = 'relative';
          }
          curOffset = curElem.offset();
          curCSSTop = jQuery.css(elem, 'top');
          curCSSLeft = jQuery.css(elem, 'left');
          calculatePosition = (position === 'absolute' || position === 'fixed') && (curCSSTop + curCSSLeft).indexOf('auto') > -1;
          if (calculatePosition) {
            curPosition = curElem.position();
            curTop = curPosition.top;
            curLeft = curPosition.left;
          } else {
            curTop = parseFloat(curCSSTop) || 0;
            curLeft = parseFloat(curCSSLeft) || 0;
          }
          if (jQuery.isFunction(options)) {
            options = options.call(elem, i, curOffset);
          }
          if (options.top != null) {
            props.top = options.top - curOffset.top + curTop;
          }
          if (options.left != null) {
            props.left = options.left - curOffset.left + curLeft;
          }
          if ('using' in options) {
            options.using.call(elem, props);
          } else {
            curElem.css(props);
          }
        }
      };
      jQuery.fn.extend({
        position: function () {
          if (!this[0]) {
            return;
          }
          var offsetParent, offset, elem = this[0], parentOffset = {
              top: 0,
              left: 0
            };
          if (jQuery.css(elem, 'position') === 'fixed') {
            offset = elem.getBoundingClientRect();
          } else {
            offsetParent = this.offsetParent();
            offset = this.offset();
            if (!jQuery.nodeName(offsetParent[0], 'html')) {
              parentOffset = offsetParent.offset();
            }
            parentOffset.top += jQuery.css(offsetParent[0], 'borderTopWidth', true);
            parentOffset.left += jQuery.css(offsetParent[0], 'borderLeftWidth', true);
          }
          return {
            top: offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),
            left: offset.left - parentOffset.left - jQuery.css(elem, 'marginLeft', true)
          };
        },
        offsetParent: function () {
          return this.map(function () {
            var offsetParent = this.offsetParent || docElem;
            while (offsetParent && (!jQuery.nodeName(offsetParent, 'html') && jQuery.css(offsetParent, 'position') === 'static')) {
              offsetParent = offsetParent.offsetParent;
            }
            return offsetParent || docElem;
          });
        }
      });
      jQuery.each({
        scrollLeft: 'pageXOffset',
        scrollTop: 'pageYOffset'
      }, function (method, prop) {
        var top = 'pageYOffset' === prop;
        jQuery.fn[method] = function (val) {
          return jQuery.access(this, function (elem, method, val) {
            var win = getWindow(elem);
            if (val === undefined) {
              return win ? win[prop] : elem[method];
            }
            if (win) {
              win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);
            } else {
              elem[method] = val;
            }
          }, method, val, arguments.length, null);
        };
      });
      function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
      }
      jQuery.each({
        Height: 'height',
        Width: 'width'
      }, function (name, type) {
        jQuery.each({
          padding: 'inner' + name,
          content: type,
          '': 'outer' + name
        }, function (defaultExtra, funcName) {
          jQuery.fn[funcName] = function (margin, value) {
            var chainable = arguments.length && (defaultExtra || typeof margin !== 'boolean'), extra = defaultExtra || (margin === true || value === true ? 'margin' : 'border');
            return jQuery.access(this, function (elem, type, value) {
              var doc;
              if (jQuery.isWindow(elem)) {
                return elem.document.documentElement['client' + name];
              }
              if (elem.nodeType === 9) {
                doc = elem.documentElement;
                return Math.max(elem.body['scroll' + name], doc['scroll' + name], elem.body['offset' + name], doc['offset' + name], doc['client' + name]);
              }
              return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
            }, type, chainable ? margin : undefined, chainable, null);
          };
        });
      });
      jQuery.fn.size = function () {
        return this.length;
      };
      jQuery.fn.andSelf = jQuery.fn.addBack;
      if (typeof module === 'object' && module && typeof module.exports === 'object') {
        module.exports = jQuery;
      } else {
        if (typeof define === 'function' && define.amd) {
          define('jquery', [], function () {
            return jQuery;
          });
        }
      }
    }(window));
  },
  './buildConf.json': function (require, module, exports, global) {
    module.exports = { 'disableConsoleLog': true };
  },
  './scripts/tracking.coffee': function (require, module, exports, global) {
    var LogRouter, StackTraceParser, gaHtml, gaLog, subEventMapping;
    if (window._gaq == null) {
      window._gaq = [];
    }
    StackTraceParser = require('./node_modules/stacktrace-parser/index.js');
    window.DomLogger = require('./node_modules/spotify-dom-logger/dom-logger.js');
    subEventMapping = {
      'play-button': 'play_button',
      'add-button': 'add_button',
      'follow-button': 'add_button',
      'context-menu-button': 'context_button'
    };
    gaHtml = '<script type="text/javascript">\n  var _gaq = _gaq || [];\n  _gaq.push([\'_setAccount\', \'UA-47006824-2\']);\n  _gaq.push([\'_gat._forceSSL\']);\n  _gaq.push([\'_setSampleRate\', \'5\']);\n  (function() {\n    var ga = document.createElement(\'script\'); ga.type = \'text/javascript\'; ga.async = true;\n    ga.src = (\'https:\' == document.location.protocol ? \'https://ssl\' : \'http://www\') + \'.google-analytics.com/ga.js\';\n    var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(ga, s);\n  })();\n</script>';
    j('body').append(gaHtml);
    LogRouter = function () {
      function LogRouter() {
      }
      LogRouter.prototype.userHit = function (event, data, context) {
        console.log('DomLogger:', JSON.stringify({
          event: event,
          data: data,
          context: context
        }));
        data.section = window.sp.application.appURI;
        if (window.sp.application['arguments'] != null) {
          data.section += ':' + window.sp.application['arguments'];
        }
        window.adiLogger.userHit(event, data, context);
        return gaLog(event, data, context);
      };
      LogRouter.prototype.userSelect = function (event, data, context) {
        window.adiLogger.userSelect(event, data, context);
        return gaLog(event, data, context);
      };
      return LogRouter;
    }();
    gaLog = function (event, data, context) {
      var label;
      label = '' + data.target + ' ' + data.name;
      context = data.section + ':' + context;
      context = context.replace('spotify:app:', '');
      return window._gaq.push([
        '_trackEvent',
        event,
        context,
        label,
        data.index
      ]);
    };
    new window.DomLogger({ logger: new LogRouter() }).init();
    window.sendErrorReport = function (err, category, skipTrace) {
      var file, label, line, lineNo, lines, methodName, section, _i, _len, _ref;
      if (category == null) {
        category = 'error_misc';
      }
      if (skipTrace == null) {
        skipTrace = false;
      }
      section = window.env + window['package'].version + window.sp.application.appURI;
      if (window.sp.application['arguments'] != null) {
        section += ':' + window.sp.application['arguments'];
      }
      label = err.message;
      if (!(skipTrace || err.stack == null)) {
        lines = StackTraceParser.parse(err.stack);
        label += ' trace: ';
        _ref = _.first(lines, 10);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          line = _ref[_i];
          file = line.file.slice(line.file.lastIndexOf('/') + 1, -3);
          lineNo = line.lineNumber;
          methodName = line.methodName;
          label += '' + file + ':' + lineNo + ':' + methodName + ' ';
        }
      }
      return window._gaq.push([
        '_trackEvent',
        category,
        section,
        label
      ]);
    };
  },
  './scripts/boot.coffee': function (require, module, exports, global) {
    var init;
    window.boot = function () {
      events.attach();
      window.live('spotify:application').update({ version: window['package'].version });
      window.client = window.live('spotify:client');
      return client.query('session(online)', function (_this) {
        return function (err, data) {
          window.appOnline = data.session.online;
          if (window.appOnline) {
            init();
          } else {
            j('#app').append(window.errorOfflineTemplate({ offlineTitle: helpers.loc('notAvailableOffline') }));
            j('.error-and-offline').css({ display: 'inherit' });
            j('.offline-content').css({ display: 'inherit' });
            console.warn('Client offline. Waiting for connection.');
          }
          return client.get('session').on('update', function (properties) {
            var d, online, _i, _len, _ref;
            console.log('Session changed', properties);
            if (properties.online != null) {
              online = properties.online;
            }
            if (online != null) {
              if (online === true && window.appOnline === false) {
                if (window.sp.application == null) {
                  window.location.reload();
                }
                if (j('.error-and-offline').length !== 0) {
                  j('.error-and-offline').remove();
                }
                _ref = window.requestsWaitingForConnection;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  d = _ref[_i];
                  d.resolve();
                }
                window.requestsWaitingForConnection = [];
              }
              return window.appOnline = online;
            }
          });
        };
      }(this));
    };
    init = function () {
      return window.liveReq('spotify:client', 'currentUser(uri, username), session(device, language, country, developer, product, online, employee)').done(function (data) {
        return window.liveReq('spotify:application', 'appURI').done(function (app) {
          var decached, err;
          try {
            window.sp.application = app;
            window.sp.session = data.session;
            window.sp.currentUser = data.currentUser;
            if (sp.session.country != null) {
              window.region = sp.session.country.toLowerCase();
            } else {
              window.region = 'us';
            }
            console.log('Region: ' + window.region);
            window.requestMethod = 'cosmos';
            if (sp.session.language.length > 0) {
              window.language = sp.session.language;
            } else {
              window.language = 'en';
            }
            console.log('Language: ' + window.language);
            window.moment.lang(window.spotifyLocales(window.language, 'moment'));
            if (sp.currentUser.uri) {
              _gaq.push([
                '_setCustomVar',
                1,
                'UID',
                crc32(sp.currentUser.uri),
                2
              ]);
            }
            _gaq.push([
              '_setCustomVar',
              2,
              'version',
              sp.application.appURI.split(':')[2] + window['package'].version,
              2
            ]);
            _gaq.push([
              '_setCustomVar',
              3,
              'env',
              window.env,
              2
            ]);
            _gaq.push([
              '_trackPageview',
              sp.application.appURI
            ]);
            window.abHighlights = 0;
            window.appWidget = new App();
          } catch (_error) {
            err = _error;
            console.error('Error during boot.', err.name);
            console.error(err.stack);
            console.error(err.message);
            if (buildConf.disableConsoleLog) {
              window.sendErrorReport(err, 'error_boot');
            }
          }
          cosmos.resolver.subscribe({ url: 'sp://messages/v1/container/control' }, function (err, resp) {
            var body;
            if (err == null) {
              if ((resp != null ? resp.getJSONBody() : void 0) != null) {
                body = resp.getJSONBody();
                if (body.type === 'refresh-view') {
                  return window.location.reload();
                }
              }
            }
          });
          if (sp.session.employee) {
            if (window.decached != null) {
              decached = 'checked';
            } else {
              decached = '';
            }
            j('body').append('<div id="showAdmin" style=\'z-index: 9001; position: fixed; top: 5px; right: 10px; width: 20px; height: 20px;\' class=\'spoticon-gears-16\'></div>\n<div id="adminMenu" style=\'z-index: 9001; display: none; position: fixed; top: 25px; right: 10px; width: 300px; background-color: rgba(0,0,0,0.8); padding: 5px; -webkit-box-shadow: 0 0 4px 0 #638e00; box-shadow: 0 0 4px 0 #638e00;\'>\n  <p id="adminRegion" style=\'float: left;\'>Current region: ' + window.region + '</p>\n  <p style=\'float: right;\'>' + window['package'].name + ' v' + window['package'].version + '</p>\n  <input class=\'form-control\' id="regionCode" type="text" placeholder="region code here"> </input><button id="setRegion" class=\'btn btn-small btn-primary\'>Change Region</button>\n  <br/>\n  <p><input id="decacheCheckbox" type="checkbox" name="decached" value="true" ' + decached + '/>decache</p>\n  <p><input checked id="cosmosCheckbox" type="checkbox" name="cosmos" value="false" />cosmos</p>\n  <p id="currentApiUrl" style=\'float: left;\'>api: ' + window.apiUrl + '</p>\n  <input class=\'form-control\' id="apiUrl" type="text" value="http://app01.tunigo.cloud.spotify.net/v3/"> </input><button id="setApi" class=\'btn btn-small btn-primary\'>Change Api</button>\n</div>');
            j('#showAdmin').click(function () {
              if (j('#adminMenu').css('display') === 'none') {
                return j('#adminMenu').css({ 'display': 'block' });
              } else if (j('#adminMenu').css('display') === 'block') {
                return j('#adminMenu').css({ 'display': 'none' });
              }
            });
            j('#setRegion').click(function () {
              window.region = j('#regionCode').val().slice(-2);
              appWidget.destroy();
              j('#adminRegion').text('Current region: ' + window.region);
              return window.appWidget = new App();
            });
            j('#setApi').click(function () {
              var val;
              val = j('#apiUrl').val();
              if (val.indexOf('<') === -1) {
                appWidget.destroy();
                window.apiUrl = val;
                j('#currentApiUrl').text('api: ' + window.apiUrl);
                return window.appWidget = new App();
              }
            });
            j('#decacheCheckbox').click(function () {
              appWidget.destroy();
              if (j('#decacheCheckbox').is(':checked')) {
                window.decache = true;
              } else {
                delete window.decache;
              }
              return window.appWidget = new App();
            });
            return j('#cosmosCheckbox').click(function () {
              appWidget.destroy();
              if (j('#cosmosCheckbox').is(':checked')) {
                window.requestMethod = 'cosmos';
              } else {
                window.requestMethod = 'jsonp';
              }
              return window.appWidget = new App();
            });
          }
        });
      });
    };
  },
  './node_modules/spotify-live/index.js': function (require, module, exports, global) {
    'use strict';
    var prime = require('./node_modules/prime/index.js');
    var defer = require('./node_modules/prime/defer.js');
    var Emitter = require('./node_modules/prime/emitter.js');
    var isPlainObject = require('./node_modules/mout/lang/isPlainObject.js');
    var isArray = require('./node_modules/mout/lang/isArray.js');
    var isRegExp = require('./node_modules/mout/lang/isRegExp.js');
    var isNumber = function (n) {
      return typeof n === 'number';
    };
    var isString = function (s) {
      return typeof s === 'string';
    };
    var escapeRegExp = require('./node_modules/mout/string/escapeRegExp.js');
    var _difference = require('./node_modules/mout/array/difference.js');
    var filter = require('./node_modules/mout/array/filter.js');
    var combine = require('./node_modules/mout/array/combine.js');
    var map = require('./node_modules/mout/array/map.js');
    var deepMixIn = require('./node_modules/mout/object/deepMixIn.js');
    var pick = require('./node_modules/mout/object/pick.js');
    var keys = require('./node_modules/mout/object/keys.js');
    var flow = require('./node_modules/finally/index.js');
    var OrderedSet = require('./node_modules/spotify-live/util/ordered-set.js');
    var Range = require('./node_modules/spotify-range2/index.js');
    var parse = require('./node_modules/spotify-live/util/parser.js');
    var throttle = require('./node_modules/spotify-live/util/throttle.js');
    var isLiveList = function (item) {
      return item instanceof LiveList;
    };
    var isLiveObject = function (item) {
      return item instanceof LiveObject;
    };
    var simpleClone = function (object) {
      var clone = {};
      for (var key in object) {
        clone[key] = object[key];
      }
      return clone;
    };
    var difference = function (a, b) {
      return a.length === 0 ? [] : _difference.apply(this, arguments);
    };
    var values = function (object, keys) {
      var values = [];
      var key;
      for (var i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        if (key in object)
          values.push(object[key]);
        else
          values.length++;
      }
      return values;
    };
    var rdifference = function (ranges1, ranges2) {
      if (!ranges1.length)
        return [];
      var resultingRanges = [];
      for (var i = 0, len = ranges1.length; i < len; i++) {
        var range = ranges1[i];
        resultingRanges = resultingRanges.concat(range.subtract(ranges2));
      }
      resultingRanges = new Range(0, 0).merge(resultingRanges);
      resultingRanges = filter(resultingRanges, function (range) {
        return !!range.length;
      });
      return resultingRanges;
    };
    var rcombine = function (ranges1, ranges2) {
      for (var i = 0, len = ranges1.length; i < len; i++) {
        var range = ranges1[i];
        ranges2 = range.merge(ranges2);
      }
      return ranges2;
    };
    var IDX = 0;
    var slice_ = Array.prototype.slice;
    var transform = function (item, method) {
      if (isPlainObject(item)) {
        if ('operations' in item)
          return new LiveList().update(item.operations);
        return live(item.uri)._update(item, method);
      }
      if (isArray(item)) {
        return new LiveList()._update([{
            type: 'insert',
            index: 0,
            length: item.length,
            values: item
          }], method);
      }
      return item;
    };
    var LiveList = prime({
        mixin: Emitter,
        constructor: function LiveList(length) {
          this._data = new OrderedSet(length);
          this._mergeThrottled = throttle(this._merge, this);
          this._waiting = [];
          var self = this;
          var lastWait = '';
          if (live.debug)
            setInterval(function () {
              var thisWait = self._waiting.toString();
              if (lastWait === thisWait)
                return;
              lastWait = thisWait;
              if (self._waiting.length) {
                console.warn(self, 'waiting for', self._waiting);
              } else {
                console.warn(self, 'all done');
              }
            }, 2000);
        },
        get index() {
          return this._data.index;
        },
        get length() {
          return this._data.length;
        },
        get keys() {
          return this._data.keys;
        },
        get values() {
          return this._data.values;
        },
        indexOf: function (key) {
          return this._data.indexOf(key);
        },
        indexOfMany: function (keys) {
          return this._data.indexOfMany(keys);
        },
        valueOf: function (key) {
          return this._data.valueOf(key);
        },
        hasKey: function (key) {
          return this._data.hasKey(key);
        },
        forEach: function (fn, ctx) {
          this._data.forEach(fn, ctx);
          return this;
        },
        map: function (fn, ctx) {
          return this._data.map(fn, ctx);
        },
        _merge: function () {
          var data = this._data;
          var publish = this._publish;
          var before = this._before;
          if (publish) {
            delete this._publish;
            if (this._listeners && this._listeners.publish) {
              var publishDiff = data.diff(publish);
              if (publishDiff.length)
                this.emit('publish', publishDiff, EMIT_SYNC);
            }
          } else if (before) {
            delete this._before;
            if (this._listeners && this._listeners.update) {
              var updateDiff = before.diff(data);
              if (updateDiff.length)
                this.emit('update', updateDiff, EMIT_SYNC);
            }
          }
          return this;
        },
        _update: function (operations, method) {
          var branch;
          if (method === PUBLISH) {
            if (this._before)
              return this;
            branch = this._publish || (this._publish = this._data.clone());
          } else if (method === UPDATE) {
            if (this._publish)
              delete this._publish;
            if (!this._before)
              this._before = this._data.clone();
            branch = this._data;
          }
          var op;
          for (var opIndex = 0, opLen = operations.length; opIndex < opLen; opIndex++) {
            op = operations[opIndex];
            switch (op.type) {
            case 'length':
              branch.length = op.length;
              break;
            case 'sort':
              branch.sort(op.compareFunction);
              break;
            case 'move':
              branch.move(op.from, op.to, op.length);
              break;
            case 'remove':
              branch.remove(op.index, op.length);
              break;
            case 'insert':
              var values = [];
              var keys = op.keys || [];
              for (var i = 0, len = op.values.length; i < len; i++) {
                if (!op.keys || !op.keys[i])
                  keys[i] = (IDX++).toString(36);
                values[i] = transform(op.values[i], method);
              }
              branch.insert(op.index, keys, values);
              break;
            }
          }
          if (method === UPDATE)
            this._waiting = rdifference(this._waiting, this.index);
          this._mergeThrottled();
          return this;
        },
        publish: function (operations) {
          return this._update(operations, PUBLISH);
        },
        update: function (operations) {
          return this._update(operations, UPDATE);
        },
        serialize: function (limit) {
          if (limit === 0)
            return [];
          var array = [];
          var nextLimit = limit === undefined ? undefined : limit - 1;
          for (var i = 0; i < this.length; i++) {
            var value = this.values[i];
            var serializedValue = value;
            if (value && value.serialize) {
              serializedValue = value.serialize(nextLimit);
            }
            array.push(serializedValue);
          }
          return array;
        },
        _getDataFromMask: function (mask) {
          var items = [];
          if (mask.length > 0) {
            for (var i = 0, l = this.length; i < l; i++) {
              var item = this.get(i);
              var parsedItem;
              var isObjectOrList = item && item._getDataFromMask;
              if (isObjectOrList) {
                parsedItem = item._getDataFromMask(mask);
              }
              items.push(parsedItem);
            }
          }
          return items;
        },
        _query: function (selector, callback, mode, timeout) {
          var self = this;
          var query = function () {
            queryList(self, selector, function (error, data, wasSync) {
              if (error)
                return callback(error);
              if (!wasSync) {
                self._query(selector, callback, mode);
              } else {
                callback(null, data);
              }
            }, timeout);
          };
          if (mode === ASYNC)
            defer(query);
          else
            query();
        },
        query: function (selector, params, callback, mode, timeout) {
          if (typeof params === 'function') {
            timeout = mode;
            mode = callback;
            callback = params;
            params = [];
          }
          if (!callback) {
            return this._getDataFromMask(parse(selector, params).mask);
          }
          if (!mode) {
            mode = ASYNC;
          } else if (isNumber(mode)) {
            timeout = mode;
            mode = ASYNC;
          }
          this._query(parse(selector, params), callback, mode, timeout);
          return this;
        },
        _wait: function (ranges) {
          if (!this._required) {
            this._required = [];
            defer(function () {
              var missingFromIndex = this.missing(this._required);
              var missingFromWaiting = rdifference(missingFromIndex, this._waiting);
              this._waiting = rcombine(this._waiting, missingFromWaiting);
              delete this._required;
              if (missingFromWaiting.length)
                this.emit('wait', missingFromWaiting, EMIT_SYNC);
            }, this);
          }
          this._required = rcombine(this._required, ranges);
        },
        missing: function (ranges) {
          return rdifference(ranges, this.index);
        },
        _get: function (ranges, callback, timeout) {
          if (this.missing(ranges).length) {
            this._wait(ranges);
            var timeoutFn;
            var check = function () {
              var needed = this.missing(ranges);
              if (!needed.length) {
                this.off('update', check);
                clearTimeout(timeoutFn);
                callback.call(this);
              }
            };
            this.on('update', check);
            if (timeout) {
              timeoutFn = setTimeout(function () {
                this.off('update', check);
                callback(new Error('Timeout Expired: ' + timeout + ' milliseconds'));
              }.bind(this), timeout);
            }
          } else {
            callback.call(this, null, true);
          }
        },
        has: function (fromIndex, toIndex) {
          var hasToIndex = toIndex !== undefined;
          if (!hasToIndex)
            toIndex = fromIndex + 1;
          var range = new Range(fromIndex, toIndex);
          return range.contained(this.index);
        },
        get: function (fromIndex, toIndex) {
          if (arguments.length === 1) {
            if (isNumber(fromIndex))
              return this.values[fromIndex];
            if (isString(fromIndex))
              return this.valueOf(fromIndex);
          }
          var self = this;
          var args = slice_.call(arguments);
          var callback, mode, requested, timeout;
          for (var i = 0, len = args.length; i < len; i++) {
            var arg = args[i];
            if (typeof arg === 'function') {
              var split = args.splice(i, 3);
              len = args.length;
              callback = split[0];
              if (split[1]) {
                if (isNumber(split[1])) {
                  mode = ASYNC;
                  timeout = split[1];
                } else {
                  mode = split[1];
                  timeout = split[2];
                }
              } else {
                mode = ASYNC;
              }
              break;
            }
          }
          var asArray = false;
          var asSingleValue = false;
          if (fromIndex instanceof Range) {
            requested = args;
            asArray = !callback && requested.length > 1;
          } else if (isArray(fromIndex)) {
            asArray = true;
            requested = fromIndex;
          } else {
            var hasToIndex = !isNaN(toIndex);
            if (!hasToIndex)
              toIndex = fromIndex + 1;
            asSingleValue = !hasToIndex;
            requested = [new Range(fromIndex, toIndex)];
          }
          var result = function () {
            return map(requested, function (range) {
              return self.values.slice(range.start, range.end);
            });
          };
          var done = function () {
            if (asArray)
              callback.call(self, null, result());
            else if (asSingleValue)
              callback.call(self, null, self.values[fromIndex]);
            else
              callback.apply(self, [null].concat(result()));
          };
          if (!callback) {
            if (asArray)
              return result();
            return result()[0];
          } else if (mode === SYNC) {
            done();
          } else {
            if (mode === ASYNC && !this.missing(requested).length) {
              defer(function () {
                this._get(requested, done);
              }, this);
            } else {
              this._get(requested, done, timeout);
            }
          }
          return this;
        }
      });
    var LiveObject = prime({
        mixin: Emitter,
        constructor: function LiveObject(_uri) {
          this.uri = _uri;
          this._data = { uri: _uri };
          this._mergeThrottled = throttle(this._merge, this);
          this.index = [];
          this._waiting = [];
          this.emit('init', EMIT_SYNC);
          var self = this;
          var lastWait = '';
          if (live.debug)
            setInterval(function () {
              var thisWait = self._waiting.toString();
              if (lastWait === thisWait)
                return;
              lastWait = thisWait;
              if (self._waiting.length) {
                console.warn(self, self._waiting);
              } else {
                console.warn(self, 'all done');
              }
            }, 2000);
        },
        emit: function () {
          var uri = this.uri;
          if (uri) {
            var keys = emitters.keys;
            var values = emitters.values;
            var key;
            var args;
            for (var i = 0, len = keys.length; i < len; i++) {
              key = keys[i];
              if (uri.match(key)) {
                if (!args) {
                  args = new Array(arguments.length);
                  for (var j = 0; j < arguments.length; ++j) {
                    args[j] = arguments[j];
                  }
                  args.splice(1, 0, this);
                }
                var emitter = values[i];
                emitter.emit.apply(emitter, args);
              }
            }
          }
          Emitter.prototype.emit.apply(this, arguments);
        },
        _merge: function () {
          var data = this._data;
          var before = this._before;
          var publish = this._publish;
          var value;
          var key;
          if (publish) {
            delete this._publish;
            if (this.uri || this._listeners && this._listeners.publish) {
              var publishEvent = {};
              for (key in publish) {
                value = publish[key];
                if (data[key] !== value)
                  publishEvent[key] = value;
              }
              if (Object.keys(publishEvent).length) {
                this.emit('publish', publishEvent, EMIT_SYNC);
              }
            }
          }
          if (before) {
            delete this._before;
            var updateEvent = {};
            if (this.uri || this._listeners && this._listeners.update) {
              for (key in data) {
                value = data[key];
                if (!(key in before) || before[key] !== value)
                  updateEvent[key] = value;
              }
              for (key in before) {
                value = before[key];
                if (!(key in data))
                  updateEvent[key] = undefined;
              }
              if (Object.keys(updateEvent).length) {
                this.emit('update', updateEvent, EMIT_SYNC);
              }
            }
          }
          return this;
        },
        _update: function (object, method) {
          var branch;
          if (method === PUBLISH) {
            branch = this._publish || (this._publish = simpleClone(this._data));
          } else if (method === UPDATE) {
            if (!this._before)
              this._before = simpleClone(this._data);
            branch = this._data;
          }
          var value;
          for (var key in object) {
            value = object[key];
            var previous = !(key in branch) ? undefined : branch[key];
            if (isLiveList(previous)) {
              if (isArray(value)) {
                previous._update([
                  {
                    type: 'remove',
                    index: 0,
                    length: previous.length
                  },
                  {
                    type: 'insert',
                    index: 0,
                    values: value
                  }
                ], method);
                continue;
              } else if (isPlainObject(value) && 'operations' in value) {
                previous._update(value.operations, method);
                continue;
              }
            }
            if (method === UPDATE && value === undefined)
              delete branch[key];
            else
              branch[key] = transform(value, method);
          }
          if (method === UPDATE) {
            this.index = keys(branch);
            this._waiting = difference(this._waiting, this.index);
          }
          this._mergeThrottled();
          return this;
        },
        delete: function (key) {
          var object = {};
          object[key] = undefined;
          return this.update(object);
        },
        update: function (object) {
          return this._update(object, UPDATE);
        },
        publish: function (object) {
          return this._update(object, PUBLISH);
        },
        serialize: function (limit) {
          if (limit === 0)
            return {};
          var object = {};
          var data = this._data;
          var nextLimit = limit === undefined ? undefined : limit - 1;
          for (var key in data) {
            var value = data[key];
            if (value === undefined)
              continue;
            var serializedValue = value;
            if (value && value.serialize) {
              serializedValue = value.serialize(nextLimit);
            }
            object[key] = serializedValue;
          }
          return object;
        },
        _getDataFromMask: function (mask) {
          var data = {};
          for (var i = 0, l = mask.length; i < l; i++) {
            var thisMask = mask[i];
            var nextMask = thisMask.mask;
            var key = thisMask.key;
            var realValue = this.get(key);
            var value = realValue;
            if (isLiveObject(realValue))
              value = {};
            if (isLiveList(realValue))
              value = [];
            if (nextMask) {
              if (isLiveObject(realValue)) {
                var innerData = realValue._getDataFromMask(nextMask);
                deepMixIn(value, innerData);
              } else if (isLiveList(realValue)) {
                value = realValue._getDataFromMask(nextMask);
              }
            }
            data[key] = value;
          }
          return data;
        },
        _query: function (selector, callback, mode, timeout) {
          var self = this;
          var query = function () {
            queryObject(self, selector, function (error, data, wasSync) {
              if (error)
                return callback.call(this, error);
              if (!wasSync) {
                self._query(selector, callback, mode);
              } else {
                callback.call(this, null, data);
              }
            }, timeout);
          };
          if (mode === ASYNC)
            defer(query);
          else
            query();
        },
        query: function (selector, params, callback, mode, timeout) {
          if (typeof params === 'function') {
            timeout = mode;
            mode = callback;
            callback = params;
            params = [];
          }
          if (!callback) {
            return this._getDataFromMask(parse(selector, params).mask);
          }
          if (!mode) {
            mode = ASYNC;
          } else if (isNumber(mode)) {
            timeout = mode;
            mode = ASYNC;
          }
          this._query(parse(selector, params), callback, mode, timeout);
          return this;
        },
        _wait: function (keys) {
          if (!this._required) {
            this._required = [];
            defer(function () {
              var missingFromIndex = this.missing(this._required);
              var missingFromWaiting = difference(missingFromIndex, this._waiting);
              this._waiting = combine(this._waiting, missingFromWaiting);
              delete this._required;
              if (missingFromWaiting.length)
                this.emit('wait', missingFromWaiting, EMIT_SYNC);
            }, this);
          }
          this._required = combine(this._required, keys);
        },
        missing: function (keys) {
          return difference(keys, this.index);
        },
        has: function (key) {
          return this.index.indexOf(key) > -1;
        },
        _get: function (keys, callback, timeout) {
          if (this.missing(keys).length) {
            this._wait(keys);
            var timeoutFn;
            var check = function () {
              var needed = this.missing(keys);
              if (!needed.length) {
                this.off('update', check);
                clearTimeout(timeoutFn);
                callback.call(this);
              }
            };
            this.on('update', check);
            if (timeout) {
              timeoutFn = setTimeout(function () {
                this.off('update', check);
                callback(new Error('Timeout Expired: ' + timeout + ' milliseconds'));
              }.bind(this), timeout);
            }
          } else {
            callback.call(this, null, true);
          }
        },
        get: function (key) {
          var data = this._data;
          if (arguments.length === 1 && isString(key))
            return data[key];
          var self = this;
          var args = slice_.call(arguments);
          var callback, mode, keys, timeout;
          for (var i = 0, len = args.length; i < len; i++) {
            var arg = args[i];
            if (typeof arg === 'function') {
              var split = args.splice(i, 3);
              len = args.length;
              callback = split[0];
              if (split[1]) {
                if (isNumber(split[1])) {
                  mode = ASYNC;
                  timeout = split[1];
                } else {
                  mode = split[1];
                  timeout = split[2];
                }
              } else {
                mode = ASYNC;
              }
              break;
            }
          }
          var asArray = false;
          if (isArray(key)) {
            keys = key;
            asArray = true;
          } else {
            keys = args;
          }
          var done = function () {
            var vals = values(data, keys);
            if (asArray) {
              callback.call(self, null, vals);
            } else {
              vals.unshift(null);
              callback.apply(self, vals);
            }
          };
          if (!callback) {
            return values(data, keys);
          } else if (mode === SYNC) {
            done();
          } else {
            if (mode === ASYNC && !this.missing(keys).length) {
              defer(function () {
                self._get(keys, done);
              });
            } else {
              this._get(keys, done, timeout);
            }
          }
          return this;
        }
      });
    var queryAny = function (object, selector, callback, timeout) {
      if (isPlainObject(object) || isLiveObject(object))
        return queryObject(object, selector, callback, timeout);
      else if (isArray(object) || isLiveList(object))
        return queryList(object, selector, callback, timeout);
      else
        return callback(null, object, true);
    };
    var queryObject = function (object, selector, callback, timeout) {
      var data = {};
      var isSync = true;
      if (!selector)
        callback(null, data, isSync);
      var keys = map(selector.mask, 'key');
      var done = function (values) {
        flow().parallel(values, function (objectValue, i) {
          var control = this;
          queryAny(objectValue, selector.mask[i], function (error, dataValue, wasSync) {
            if (error)
              return control.break(error);
            if (!wasSync)
              isSync = false;
            if (data[keys[i]])
              deepMixIn(data[keys[i]], dataValue);
            else
              data[keys[i]] = dataValue;
            control.done();
          });
        }).finally(function (error) {
          callback(error, data, isSync);
        });
      };
      if (isLiveObject(object)) {
        object._get(keys, function (error, wasSync) {
          if (error)
            return callback(error);
          if (!wasSync)
            isSync = false;
          var values = map(keys, function (key) {
              return object._data[key];
            });
          done(values);
        }, timeout);
      } else {
        var values = pick(object, keys);
        done(values);
      }
    };
    var satisfies = function (value, op, right) {
      if (!op)
        return !!value;
      if (isRegExp(right))
        return right.test(value);
      if (op === '=')
        return value === right;
      if (op === '!=')
        return value !== right;
      if (isNumber(right)) {
        if (op === '>')
          return value > right;
        if (op === '>=')
          return value >= right;
        if (op === '<')
          return value < right;
        if (op === '<=')
          return value <= right;
      }
      if (isString(right)) {
        var escapedRight = escapeRegExp(right);
        if (op === '^=')
          return new RegExp('^' + escapedRight).test(value);
        if (op === '$=')
          return new RegExp(escapedRight + '$').test(value);
        if (op === '~=')
          return new RegExp('(^|\\s)' + escapedRight + '(\\s|$)').test(value);
        if (op === '|=')
          return new RegExp('^' + escapedRight + '(-|$)').test(value);
        if (op === ' *=')
          return value.toString().indexOf(right) !== -1;
      }
      return false;
    };
    var filterArray = function (array, left, op, right, callback) {
      var isSync = true;
      var filtered = [];
      flow().parallel(array, function (item, i) {
        var ctrl = this;
        if (isLiveObject(item)) {
          item._get([left], function (error, wasSync) {
            if (error)
              return ctrl.break(error);
            if (!wasSync)
              isSync = false;
            var value = item._data[left];
            if (satisfies(value, op, right))
              filtered[i] = item;
            ctrl.done();
          });
        } else if (isPlainObject(item)) {
          if (satisfies(item[left], op, right))
            filtered[i] = item;
          ctrl.done();
        } else {
          ctrl.done();
        }
      }).finally(function (error) {
        if (error)
          return callback(error);
        var clean = [];
        for (var i = 0; i < filtered.length; i++)
          if (i in filtered)
            clean.push(filtered[i]);
        callback(null, clean, isSync);
      });
    };
    var defaultFilters = [[{
            left: 0,
            op: ':'
          }]];
    var queryList = function (list, selector, callback, timeout) {
      var isSync = true;
      if (!selector.filters)
        selector.filters = defaultFilters;
      flow().sequential(selector.filters, function (conditions) {
        var sequential = this;
        var ref = [];
        flow().parallel(conditions, function (condition) {
          var parallel = this;
          var left = condition.left;
          var right = condition.right;
          var op = condition.op;
          if ('left' in condition && !('right' in condition) && isNumber(left)) {
            if (!op)
              right = left + 1;
            else if (op === ':')
              right = list.length;
            op = ':';
          }
          if ('right' in condition && !('left' in condition) && isNumber(right) && op === ':') {
            left = 0;
          }
          if (isNumber(left) && isNumber(right) && op === ':') {
            if (isArray(list)) {
              var filtered = slice_.call(list, left, right);
              ref = ref.concat(filtered);
              parallel.done();
            } else {
              list._get([new Range(left, right)], function (error, wasSync) {
                if (error)
                  return parallel.break(error);
                for (var i = left; i < right; i++)
                  ref.push(list.values[i]);
                if (!wasSync)
                  isSync = false;
                parallel.done();
              }, timeout);
            }
          } else {
            var done = function (array) {
              filterArray(array, left, op, right, function (error, filtered, wasSync) {
                if (error)
                  return parallel.break(error);
                if (!wasSync)
                  isSync = false;
                ref = ref.concat(filtered);
                parallel.done();
              });
            };
            if (isArray(list)) {
              done(list);
            } else {
              list._get([new Range(0, list.length)], function (error, wasSync) {
                if (error)
                  return parallel.break(error);
                var array = [];
                for (var i = 0; i < list.length; i++)
                  array.push(list.values[i]);
                if (!wasSync)
                  isSync = false;
                done(array);
              }, timeout);
            }
          }
        }).finally(function (error) {
          if (error)
            return sequential.break(error);
          list = ref;
          sequential.continue();
        });
      }).finally(function (error) {
        if (error)
          return callback(error);
        var data = [];
        flow().parallel(list, function (item, i) {
          var control = this;
          queryAny(item, selector, function (err, res, wasSync) {
            if (!wasSync)
              isSync = false;
            if (data[i])
              deepMixIn(data[i], res);
            else
              data[i] = res;
            control.done(err);
          }, timeout);
        }).finally(function (err) {
          callback(err, data, isSync);
        });
      });
    };
    var cache = {};
    var live = function (item) {
      if (isArray(item)) {
        return new LiveList().update([{
            type: 'insert',
            index: 0,
            length: item.length,
            values: item
          }]);
      } else if (isNumber(item)) {
        return new LiveList(item);
      } else if (isString(item)) {
        return cache[item] || (cache[item] = new LiveObject(item));
      } else if (isPlainObject(item)) {
        return live(item.uri).update(item);
      } else if (isLiveList(item) || isLiveObject(item)) {
        return item;
      }
      return new LiveObject();
    };
    var emitters = {
        keys: [],
        values: []
      };
    live.subscribe = function (match, name, handle) {
      if (match.matches)
        match = match.matches;
      var string = match.toString();
      var keys = emitters.keys;
      var values = emitters.values;
      var emitter;
      for (var i = 0, len = keys.length; i < len; i++) {
        var key = keys[i];
        if (key.toString() === string) {
          emitter = values[i];
          if (emitter)
            break;
        }
      }
      if (!emitter) {
        keys.push(match);
        values.push(emitter = new Emitter());
      }
      emitter.on(name, handle);
      return this;
    };
    live.unsubscribe = function (match, name, handle) {
      if (match.matches)
        match = match.matches;
      var string = match.toString();
      var keys = emitters.keys;
      var values = emitters.values;
      var emitter;
      for (var i = 0, len = keys.length; i < len; i++) {
        var key = keys[i];
        if (key.toString() === string) {
          emitter = values[i];
          if (emitter)
            break;
        }
      }
      if (emitter)
        emitter.off(name, handle);
      return this;
    };
    live.delete = function (uri) {
      delete cache[uri];
      return this;
    };
    live.purge = function () {
      cache = {};
      return this;
    };
    live.has = function (uri) {
      return !!cache[uri];
    };
    var EMIT_SYNC = live.EMIT_SYNC = Emitter.EMIT_SYNC;
    var ASYNC = live.ASYNC = 'ASYNC';
    var SYNC = live.SYNC = 'SYNC';
    var ASAP = live.ASAP = 'ASAP';
    var PUBLISH = 3;
    var UPDATE = 4;
    live.Object = LiveObject;
    live.List = LiveList;
    module.exports = live;
  },
  './node_modules/api/scripts/hermes.js': function (require, module, exports, global) {
    var SP = require('./node_modules/quickstart-spotify/spotify-api.js').SP;
    (function (models) {
      var Loadable = models.Loadable;
      var Promise = models.Promise;
      var ReadyState = {
          CONNECTING: 0,
          OPEN: 1,
          CLOSING: 2,
          CLOSED: 3
        };
      function _type(type) {
        return type.schema.id + '#' + type.name;
      }
      function Hermes() {
      }
      Hermes.get = function (uri, resultTypes, argumentTypes, timeout) {
        return new Request('GET', uri, resultTypes, argumentTypes, timeout);
      };
      Hermes.request = function (method, uri, resultTypes, argumentTypes, timeout) {
        return new Request(method, uri, resultTypes, argumentTypes, timeout);
      };
      Hermes.subscribe = function (uri, resultTypes, argumentTypes, args) {
        var promise = new models.Promise();
        var done = function (data) {
          promise.setDone(new Subscription(data.subscription_id));
        };
        var fail = function (_, error) {
          promise.setFail(error);
        };
        var rload = Promise.join(resultTypes.map(function (type) {
            return type.schema.load('id');
          }));
        var aload = Promise.join(argumentTypes.map(function (type) {
            return type.schema.load('id');
          }));
        Promise.join(rload, aload).done(function () {
          var rtypes = resultTypes.map(_type);
          var atypes = argumentTypes.map(_type);
          SP.request('hermes_subscribe', [
            uri,
            rtypes,
            atypes,
            args
          ], null, done, fail);
        }).fail(fail);
        return promise;
      };
      function Request(method, uri, resultTypes, argumentTypes, timeout) {
        Loadable.call(this);
        this.resolve('uri', uri);
        this.resolve('method', method);
        this.resolve('timeout', timeout || 0);
        this._rtypes = resultTypes;
        this._atypes = argumentTypes;
        var rload = Promise.join(this._rtypes.map(function (type) {
            return type.schema.load('id');
          }));
        var aload = Promise.join(this._atypes.map(function (type) {
            return type.schema.load('id');
          }));
        this._load = Promise.join(rload, aload);
      }
      SP.inherit(Request, Loadable);
      Loadable.define(Request, [
        'uri',
        'method',
        'timeout'
      ]);
      Request.prototype.send = function (var_args) {
        var promise = new Promise();
        var request = this;
        var reqArg = [].slice.call(arguments);
        this._load.done(function () {
          var done = function (data) {
            promise.setDone(data.result);
          };
          var rtypes = request._rtypes.map(_type);
          var atypes = request._atypes.map(_type);
          var requestArgs = [
              request.uri,
              request.method,
              rtypes,
              atypes,
              reqArg,
              request.timeout
            ];
          SP.request('hermes_send_request', requestArgs, promise, done, promise.setFail);
        }).fail(function (o, error) {
          promise.setFail(error);
        });
        return promise;
      };
      function Schema(urls) {
        Loadable.call(this);
        this._urls = urls;
      }
      SP.inherit(Schema, Loadable);
      Loadable.define(Schema, ['id'], '_register');
      Schema.fromURL = function (urls) {
        if (typeof urls === 'string')
          urls = [urls];
        return new this(urls);
      };
      Schema.prototype.type = function (name) {
        return {
          schema: this,
          name: name
        };
      };
      Schema.prototype._register = function (propsMask) {
        var load = function (data) {
          this.resolveMany(propsMask, data);
        };
        var fail = function (oops) {
          this.resolveFail(propsMask, oops);
        };
        SP.request('hermes_register_schema', this._urls, this, load, fail);
      };
      function Subscription(id) {
        models.BridgeLoadable.call(this);
        this.readyState = ReadyState.OPEN;
        this._id = id;
      }
      SP.inherit(Subscription, models.BridgeLoadable);
      Subscription.prototype._observed = function () {
        if (this.readyState != ReadyState.OPEN)
          return;
        this.bridgeListen('hermes_event_wait', [this._id]);
        this.addEventListener('close', function onClose() {
          this.removeEventListener('close', onClose);
          this.bridgeUnlisten();
          this.readyState = ReadyState.CLOSED;
        });
      };
      Subscription.prototype.close = function () {
        if (this.readyState != ReadyState.OPEN)
          return;
        this.readyState = ReadyState.CLOSING;
        SP.request('hermes_unsubscribe', [this._id]);
      };
      exports.Hermes = Hermes;
      exports.ReadyState = ReadyState;
      exports.Schema = Schema;
      exports.Subscription = Subscription;
    }(require('./node_modules/api/scripts/models.js')));
  },
  './node_modules/api/scripts/models.js': function (require, module, exports, global) {
    var SP = require('./node_modules/quickstart-spotify/spotify-api.js').SP;
    var _resolveResult = function (result) {
      this.object.resolveMany(0, result);
      this.setDone();
    };
    var _setDone = function () {
      this.setDone();
    };
    var promisedRequest = function (object, request, args, opt_resolveResult) {
      var promise = new Promise(object);
      SP.request(request, args, promise, opt_resolveResult ? _resolveResult : _setDone, promise.setFail);
      return promise;
    };
    var _artists = function (metadataWithUri) {
      return Artist.fromURI(metadataWithUri.uri, metadataWithUri);
    };
    var _albums = function (metadataWithUri) {
      return Album.fromURI(metadataWithUri.uri, metadataWithUri);
    };
    var _discs = function (metadataWithUri) {
      return Disc.fromURI(metadataWithUri.uri, metadataWithUri);
    };
    function Cache(itemClass) {
      this._items = {};
      this._class = itemClass;
    }
    Cache.lookup = function (uri, opt_metadata) {
      return this._cache.lookup(uri, opt_metadata);
    };
    Cache.lookupMany = function (uris) {
      var result = [];
      for (var i = 0, len = uris.length; i < len; i++) {
        result.push(this._cache.lookup(uris[i]));
      }
      return result;
    };
    Cache.prototype.cache = function (uri, item) {
      this._items[uri] = item;
    };
    Cache.prototype.lookup = function (uri, opt_metadata) {
      if (!uri)
        return null;
      var item = this._items[uri];
      if (!(item instanceof this._class)) {
        item = new this._class(uri);
        item.resolveMany(0, opt_metadata);
        this._items[uri] = item;
      }
      return item;
    };
    Cache.prototype.remove = function (uri) {
      delete this._items[uri];
    };
    Cache.prototype.update = function (uris, data) {
      for (var i = 0, len = uris.length; i < len; i++) {
        var item = this._items[uris[i]];
        if (item)
          item.resolveMany(0, data);
      }
    };
    function Observable() {
    }
    Observable.prototype._observed = function () {
    };
    Observable.prototype.addEventListener = function (eventType, observer) {
      if (!observer)
        return;
      if (!this._ob) {
        this._ob = {};
        this._obcount = 0;
      }
      var callbacks = this._ob[eventType];
      if (callbacks)
        callbacks.push(observer);
      else
        this._ob[eventType] = [observer];
      this._obcount++;
      if (this._obcount == 1)
        this._observed();
    };
    Observable.prototype.removeEventListener = function (eventType, observer) {
      var observers = this._ob || {};
      var callbacks = observers[eventType] || [];
      var index = callbacks.indexOf(observer);
      if (index != -1) {
        this._obcount--;
        callbacks.splice(index, 1);
        if (!callbacks.length)
          delete observers[eventType];
        if (!this._obcount)
          delete this._ob;
      }
    };
    Observable.prototype.dispatchEvent = function (evt) {
      if (typeof evt == 'string') {
        evt = { type: evt };
      }
      if (!evt || !evt.type) {
        throw new Error('Dispatched event must have a type.');
      }
      if (!evt.target) {
        evt.target = this;
      }
      var observers = this._ob || {};
      var callbacks = (observers[evt.type] || []).slice(0);
      if (!callbacks.length)
        return true;
      var ret = true;
      evt.preventDefault = function () {
        ret = false;
      };
      for (var i = 0; i < callbacks.length; i++) {
        try {
          if (callbacks[i].call(this, evt) === false)
            ret = false;
        } catch (error) {
          console.error(error);
          if (SP._throwError)
            throw error;
        }
      }
      return ret;
    };
    function Promise(opt_object) {
      this.object = opt_object;
      this._done = [];
      this._fail = [];
    }
    Promise.prototype.always = function (callbackOrThis, opt_callback) {
      var cbFunc, cbThis;
      if (opt_callback) {
        cbFunc = opt_callback;
        cbThis = callbackOrThis;
      } else {
        cbFunc = callbackOrThis;
        cbThis = this;
      }
      if (typeof cbFunc != 'function')
        throw new Error('A callback function is required');
      if (this._done) {
        this._done.push(SP.callback(SP.bind(cbFunc, cbThis)));
        this._fail.push(SP.callback(SP.bind(cbFunc, cbThis)));
      } else {
        cbFunc.apply(cbThis, this._args);
      }
      return this;
    };
    Promise.prototype.done = function (callbackOrThis, opt_callback) {
      var cbFunc, cbThis;
      if (opt_callback) {
        cbFunc = opt_callback;
        cbThis = callbackOrThis;
      } else {
        cbFunc = callbackOrThis;
        cbThis = this;
      }
      if (typeof cbFunc != 'function')
        throw new Error('A callback function is required');
      if (this._isDone)
        cbFunc.apply(cbThis, this._args);
      else if (this._done)
        this._done.push(SP.callback(SP.bind(cbFunc, cbThis)));
      return this;
    };
    Promise.prototype.fail = function (callbackOrThis, opt_callback) {
      var cbFunc, cbThis;
      if (opt_callback) {
        cbFunc = opt_callback;
        cbThis = callbackOrThis;
      } else {
        cbFunc = callbackOrThis;
        cbThis = this;
      }
      if (typeof cbFunc != 'function')
        throw new Error('A callback function is required');
      if (this._isFail)
        cbFunc.apply(cbThis, this._args);
      else if (this._fail)
        this._fail.push(SP.callback(SP.bind(cbFunc, cbThis)));
      return this;
    };
    Promise.prototype.each = function (callbackOrThis, opt_callback) {
      if (this._objs) {
        var cbFunc, cbThis;
        if (opt_callback) {
          cbFunc = opt_callback;
          cbThis = callbackOrThis;
        } else {
          cbFunc = callbackOrThis;
          cbThis = this;
        }
        if (typeof cbFunc != 'function')
          throw new Error('A callback function is required');
        if (this._each) {
          this._each.push(SP.callback(SP.bind(cbFunc, cbThis)));
        }
        for (var i = 0, l = this._objs.length; i < l; i++)
          cbFunc.call(cbThis, this._objs[i]);
      }
      return this;
    };
    Promise.prototype.setDone = function (opt_object) {
      if (!this._done)
        return;
      var done = this._done;
      var fail = this._fail;
      delete this._done;
      delete this._fail;
      if (arguments.length == 1) {
        this.object = opt_object;
      }
      this._isDone = true;
      this._args = [this.object];
      for (var i = 0, l = done.length; i < l; i++)
        done[i].apply(undefined, this._args);
      for (var j = 0, k = fail.length; j < k; j++)
        fail[j].clear();
      delete this._each;
      delete this._join;
      delete this._numResolved;
      delete this._oneFailed;
    };
    Promise.prototype.setFail = function (error) {
      if (!this._done)
        return;
      var fail = this._fail;
      var done = this._done;
      delete this._done;
      delete this._fail;
      this._isFail = true;
      this._args = [
        this.object,
        error
      ];
      for (var i = 0, l = fail.length; i < l; i++)
        fail[i].apply(undefined, this._args);
      for (var j = 0, k = done.length; j < k; j++)
        done[j].clear();
      delete this._each;
      delete this._join;
      delete this._numResolved;
      delete this._oneFailed;
    };
    Promise.join = function (promises) {
      var promise = new Promise();
      promises = SP.varargs(arguments, 0, true);
      promise._join = promises;
      promise._each = [];
      promise._objs = [];
      promise._numResolved = 0;
      if (promises.length === 0)
        promise.setDone([]);
      for (var i = 0, l = promises.length; i < l; i++)
        promises[i].done(promise, promise._oneDone).fail(promise, promise._oneFail);
      return promise;
    };
    Promise.prototype._oneEither = function (object) {
      this._numResolved++;
      if (this._numResolved < this._join.length)
        return;
      this.object = [];
      for (var i = 0, l = this._join.length; i < l; i++)
        this.object.push(this._join[i].object);
      for (var j = 0, k = this._each.length; j < k; j++)
        this._each[j].clear();
      if (this._oneFailed)
        this.setFail();
      else
        this.setDone();
    };
    Promise.prototype._oneDone = function (object) {
      if (!this._done)
        return;
      this._objs.push(object);
      var nextEach = [];
      for (var i = 0, l = this._each.length; i < l; i++) {
        var cb = this._each[i];
        nextEach.push(cb.copy());
        cb.call(undefined, object);
      }
      this._each = nextEach;
      this._oneEither(object);
    };
    Promise.prototype._oneFail = function (object, error) {
      if (!this._done)
        return;
      this._oneFailed = true;
      this._oneEither(object);
    };
    function Loadable() {
      Observable.call(this);
    }
    SP.inherit(Loadable, Observable);
    Loadable.define = function (clazz, names, opt_func) {
      var proto = clazz.prototype;
      if (!proto._prop)
        proto._prop = {};
      if (!proto._next)
        proto._next = 0;
      var group = {
          mask: 0,
          func: opt_func
        };
      for (var i = 0, l = names.length; i < l; i++) {
        var mask = 1 << proto._next++;
        group.mask |= mask;
        proto._prop[names[i]] = {
          mask: mask,
          group: group
        };
      }
    };
    Loadable.prototype._make = function (name, value) {
      name = '_make_' + name;
      var func = this[name];
      return func ? func(value) : value;
    };
    Loadable.prototype.resolve = function (name, value, opt_silent) {
      var prop = this._prop[name];
      if (!prop)
        return;
      this._done |= this._prop[name].mask;
      this._wait &= ~this._done;
      var newValue = this._make(name, value);
      if (this.hasOwnProperty(name) && !opt_silent) {
        var oldValue = this[name];
        if (oldValue !== newValue) {
          this[name] = newValue;
          this.dispatchEvent({
            type: 'change:' + name,
            property: name,
            oldValue: oldValue
          });
        }
      } else {
        this[name] = newValue;
      }
      if (!this._wait)
        delete this._wait;
    };
    Loadable.prototype.resolveMany = function (propsMask, data, opt_silent) {
      for (var name in data)
        this.resolve(name, data[name], opt_silent);
      this._done |= propsMask;
      this._wait &= ~propsMask;
      this.resolveDone();
    };
    Loadable.prototype.resolveDone = function () {
      if (!this._reqs)
        return;
      var done = [];
      for (var i = 0; i < this._reqs.length; i++) {
        if (!(this._reqs[i]._need & ~this._done))
          done.push(this._reqs.splice(i--, 1)[0]);
      }
      if (!this._reqs.length)
        delete this._reqs;
      if (!this._wait)
        delete this._wait;
      for (var j = 0, l = done.length; j < l; j++) {
        done[j].setDone();
      }
    };
    Loadable.prototype.resolveFail = function (propsMask, error) {
      this._wait &= ~propsMask;
      if (!this._reqs)
        return;
      var fail = [];
      for (var i = 0; i < this._reqs.length; i++) {
        if (this._reqs[i]._need & propsMask)
          fail.push(this._reqs.splice(i--, 1)[0]);
      }
      if (!this._reqs.length)
        delete this._reqs;
      if (!this._wait)
        delete this._wait;
      for (var j = 0, l = fail.length; j < l; j++) {
        fail[j].setFail(error);
      }
    };
    Loadable.prototype.load = function (properties) {
      var args = SP.varargs(arguments);
      var req = new Promise(this);
      req._need = this._neededForLoad(args);
      if (req._need) {
        if (this._reqs)
          this._reqs.push(req);
        else
          this._reqs = [req];
        this._requestProperties(req._need);
      } else {
        req.setDone();
      }
      return req;
    };
    Loadable.prototype._neededForLoad = function (properties) {
      var neededMask = 0;
      for (var i = 0, l = properties.length; i < l; i++) {
        var name = properties[i];
        var prop = this._prop[name];
        if (!prop)
          throw new Error(name + ' is not a property.');
        neededMask |= prop.mask;
      }
      return neededMask & ~this._done;
    };
    Loadable.prototype._requestProperties = function (propsMask) {
      var groups = [];
      for (var name in this._prop) {
        var prop = this._prop[name];
        var mask = prop.group.mask;
        if (!(mask & propsMask))
          continue;
        if (mask & this._wait)
          continue;
        groups.push(prop.group);
        this._wait |= mask;
        propsMask &= ~mask;
        if (!propsMask)
          break;
      }
      for (var i = 0, l = groups.length; i < l; i++) {
        var func = this[groups[i].func];
        if (func)
          func.call(this, groups[i].mask);
      }
    };
    function BridgeLoadable() {
      Loadable.call(this);
    }
    SP.inherit(BridgeLoadable, Loadable);
    BridgeLoadable.prototype.bridgeListen = function (requestName, requestArgs) {
      if (!this._listening) {
        this._requestName = requestName;
        this._requestArgs = requestArgs;
        this._listening = true;
        this._eventWait();
      }
    };
    BridgeLoadable.prototype.bridgeUnlisten = function () {
      delete this._requestName;
      delete this._requestArgs;
      delete this._listening;
    };
    BridgeLoadable.prototype._eventWait = function () {
      if (this._listening)
        SP.request(this._requestName, this._requestArgs, this, this._eventDone, this._eventFail);
    };
    BridgeLoadable.prototype._eventDone = function (event) {
      this._eventWait();
      this.eventDone(event);
    };
    BridgeLoadable.prototype.eventDone = function (event) {
      if (event.receiver && this.hasOwnProperty(event.receiver)) {
        var receiver = this[event.receiver];
        receiver.resolveMany(0, event.data);
        receiver.dispatchEvent(event);
      } else {
        this.resolveMany(0, event.data);
        this.dispatchEvent(event);
      }
    };
    BridgeLoadable.prototype._eventFail = function (error) {
      if (error.error == 'timeout')
        this._eventWait();
      this.eventFail(error);
    };
    BridgeLoadable.prototype.eventFail = function (error) {
    };
    function ProxyListener() {
      BridgeLoadable.call(this);
      this._filters = [];
      this._receivers = [];
    }
    SP.inherit(ProxyListener, BridgeLoadable);
    ProxyListener.prototype.filter = function (filter) {
      this._filters.push(filter);
    };
    ProxyListener.prototype.proxyTo = function (receiver) {
      this._receivers.push(receiver);
    };
    ProxyListener.prototype.eventDone = function (evt) {
      var i, len, proxy = true;
      for (i = 0, len = this._filters.length; i < len; i++) {
        if (this._filters[i](evt) === false)
          proxy = false;
      }
      if (!proxy)
        return;
      for (i = 0, len = this._receivers.length; i < len; i++) {
        this._receivers[i].eventDone(evt);
      }
    };
    function MdL(uri) {
      BridgeLoadable.call(this);
    }
    SP.inherit(MdL, BridgeLoadable);
    MdL.init = function (clazz, prefix) {
      clazz._type = prefix;
    };
    MdL.prototype.imageForSize = function (size) {
      var images = this.images;
      size *= window.devicePixelRatio || 1;
      for (var i = 0, l = images ? images.length : 0; i < l; i++) {
        if (images[i][0] >= size || i == l - 1)
          return images[i][1].replace('{size}', size);
      }
      return this.image;
    };
    MdL.prototype._metadata = function (propsMask) {
      var load = function (data) {
        this.resolveMany(propsMask, data);
      };
      var fail = function (oops) {
        this.resolveFail(propsMask, oops);
      };
      SP.request(this.constructor._type + '_metadata', [this.uri], this, load, fail);
    };
    MdL.prototype._profile = function (propsMask) {
      var load = function (data) {
        this.resolveMany(propsMask, data);
      };
      var fail = function (oops) {
        this.resolveFail(propsMask, oops);
      };
      SP.request(this.constructor._type + '_profile', [this.uri], this, load, fail);
    };
    MdL.prototype.toString = function () {
      return this.uri;
    };
    function Album(uri) {
      MdL.call(this);
      this.resolve('uri', uri);
    }
    SP.inherit(Album, MdL);
    Loadable.define(Album, ['uri']);
    Loadable.define(Album, [
      'availability',
      'artists',
      'date',
      'discs',
      'image',
      'images',
      'label',
      'name',
      'playable',
      'popularity',
      'type'
    ], '_metadata');
    Loadable.define(Album, ['copyrights'], '_profile');
    Loadable.define(Album, ['tracks'], '_collections');
    MdL.init(Album, 'album');
    Album.prototype._make_artists = function (value) {
      return value && value.map(_artists);
    };
    Album.prototype._make_discs = function (value) {
      return value && value.map(_discs);
    };
    Album.prototype._collections = function () {
      this.resolve('tracks', new BridgeCollection(Track, this.uri, 'album_tracks'));
      this.resolveDone();
    };
    Album.fromURI = Cache.lookup;
    Album.fromURIs = Cache.lookupMany;
    Album._cache = new Cache(Album);
    function Disc(uri) {
      MdL.call(this);
      this.resolve('uri', uri);
      this.resolve('tracks', new BridgeCollection(Track, uri, 'album_disc_tracks'));
    }
    SP.inherit(Disc, MdL);
    Loadable.define(Disc, [
      'uri',
      'tracks'
    ]);
    Loadable.define(Disc, [
      'album',
      'number'
    ], '_metadata');
    MdL.init(Disc, 'disc');
    Disc.prototype._make_album = function (value) {
      return value && Album.fromURI(value);
    };
    Disc.fromURI = Cache.lookup;
    Disc.fromURIs = Cache.lookupMany;
    Disc._cache = new Cache(Disc);
    function AlbumGroup(uri, metadata) {
      Loadable.call(this);
      this.resolve('albums', metadata && metadata.albums ? metadata.albums.map(_albums) : []);
    }
    SP.inherit(AlbumGroup, Loadable);
    Loadable.define(AlbumGroup, ['albums']);
    AlbumGroup.fromURI = function (uri, metadata) {
      return new this(uri, metadata);
    };
    function Client() {
      BridgeLoadable.call(this);
    }
    SP.inherit(Client, BridgeLoadable);
    Client.prototype._observed = function () {
      this.bridgeListen('client_event_wait', []);
    };
    Loadable.define(Client, ['features'], '_features');
    Loadable.define(Client, ['hide_hpto'], '_hide_hpto');
    Client.prototype._features = function (propsMask) {
      var load = function (data) {
        this.resolveMany(propsMask, data);
      };
      var fail = function (oops) {
        this.resolveFail(propsMask, oops);
      };
      SP.request('client_features', [], this, load, fail);
    };
    Client.prototype._hide_hpto = function (propsMask) {
      var load = function (data) {
        this.resolveMany(propsMask, data);
      };
      var fail = function (oops) {
        this.resolveFail(propsMask, oops);
      };
      SP.request('client_get_hide_hpto', [], this, load, fail);
    };
    Client.prototype.showShareUI = function (item, opt_message, opt_point) {
      var uri = item.uri || item;
      var message = opt_message || '';
      var args = [
          uri,
          message
        ];
      if (opt_point && 'x' in opt_point && 'y' in opt_point) {
        args.push(opt_point.x);
        args.push(opt_point.y);
      }
      return promisedRequest(this, 'client_show_share_ui', args);
    };
    Client.prototype.showContextUI = function (items, opt_point, opt_origin, opt_index) {
      var uris = Array.isArray(items) ? SP.uris(items) : [items.uri];
      var args = [uris];
      if (opt_point && 'x' in opt_point && 'y' in opt_point) {
        args.push(opt_point.x);
        args.push(opt_point.y);
      }
      if (opt_origin && opt_origin.uri) {
        args.push(opt_origin.uri);
      }
      if (typeof opt_index !== 'undefined' && opt_index % 1 === 0) {
        args.push(opt_index);
      }
      return promisedRequest(this, 'client_show_context_ui', args);
    };
    Client.prototype.broadcast = function (message) {
      return promisedRequest(this, 'client_broadcast', [message]);
    };
    function Application() {
      BridgeLoadable.call(this);
    }
    SP.inherit(Application, BridgeLoadable);
    Loadable.define(Application, [
      'arguments',
      'dropped',
      'identifier',
      'name',
      'uri'
    ], '_query');
    Application.prototype._observed = function () {
      this.bridgeListen('application_event_wait', []);
    };
    Application.prototype._make_dropped = function (value) {
      return value && value.map(function (i) {
        return fromURI(i);
      });
    };
    Application.prototype._query = function (propsMask) {
      var load = function (data) {
        this.resolveMany(propsMask, data);
      };
      var fail = function (oops) {
        this.resolveFail(propsMask, oops);
      };
      SP.request('application_query', [], this, load, fail);
    };
    Application.prototype.activate = function () {
      return promisedRequest(this, 'application_activate', [this.uri]);
    };
    Application.prototype.deactivate = function () {
      return promisedRequest(this, 'application_deactivate', [this.uri]);
    };
    Application.prototype.exit = function (opt_statusCode) {
      return promisedRequest(this, 'application_notify_exit', [opt_statusCode || 0]);
    };
    Application.prototype.hideLoadingScreen = function () {
      SP.request('application_notify_loaded', []);
    };
    Application.prototype.readFile = function (path) {
      var promise = new Promise();
      var request = new XMLHttpRequest();
      request.open('GET', path, true);
      request.onreadystatechange = function (e) {
        if (request.readyState !== 4)
          return;
        if (request.status !== 200 && request.status !== 0) {
          promise.setFail();
        } else {
          promise.setDone(request.responseText);
        }
      };
      request.send(null);
      return promise;
    };
    Application.prototype.openURI = function (uri, opt_context) {
      return promisedRequest(this, 'application_open_uri', [
        uri,
        opt_context || null
      ]);
    };
    Application.prototype.openApp = function (app, var_args) {
      var arg = SP.varargs(arguments, 1);
      var uriSegments = [
          'spotify',
          'app',
          app
        ];
      for (var i = 0, l = arg.length; i < l; i++) {
        uriSegments.push(encodeURIComponent(arg[i]));
      }
      return this.openURI(uriSegments.join(':'));
    };
    Application.prototype.setTitle = function (title, opt_subtitle) {
      return promisedRequest(this, 'application_set_title', [
        title,
        opt_subtitle || ''
      ]);
    };
    Application.prototype.setPreferredSize = function (width, height) {
      var promise = new Promise();
      var args = [
          width,
          height
        ];
      SP.request('application_set_preferred_size', args, promise, promise.setDone, promise.setFail);
      return promise;
    };
    Application.prototype.resolvePath = function (path) {
      return SP.resolvePath(path);
    };
    Application.prototype.clientEvent = function (context, event, eventVersion, testVersion, data) {
      return promisedRequest(this, 'application_client_event', [].slice.call(arguments));
    };
    Application.prototype.bannerShownEvent = function (eventInfo) {
      return promisedRequest(this, 'application_banner_shown_event', eventInfo);
    };
    function Artist(uri) {
      MdL.call(this);
      this.resolve('uri', uri);
    }
    SP.inherit(Artist, MdL);
    Loadable.define(Artist, ['uri']);
    Loadable.define(Artist, [
      'image',
      'images',
      'name',
      'popularity'
    ], '_metadata');
    Loadable.define(Artist, [
      'biography',
      'genres',
      'portraits',
      'years'
    ], '_profile');
    Loadable.define(Artist, [
      'albums',
      'appearances',
      'compilations',
      'related',
      'singles'
    ], '_collections');
    Loadable.define(Artist, ['user'], '_associatedUser');
    MdL.init(Artist, 'artist');
    Artist.prototype._collections = function () {
      this.resolve('albums', new BridgeCollection(AlbumGroup, this.uri, 'artist_albums'));
      this.resolve('appearances', new BridgeCollection(AlbumGroup, this.uri, 'artist_appearances'));
      this.resolve('compilations', new BridgeCollection(AlbumGroup, this.uri, 'artist_compilations'));
      this.resolve('related', new BridgeCollection(Artist, this.uri, 'artist_related_artists'));
      this.resolve('singles', new BridgeCollection(AlbumGroup, this.uri, 'artist_singles'));
      this.resolveDone();
    };
    Artist.prototype._associatedUser = function (propsMask) {
      var load = function (data) {
        this.resolveMany(propsMask, data);
      };
      var fail = function (oops) {
        this.resolveFail(propsMask, oops);
      };
      SP.request('artist_associated_user', [this.uri], this, load, fail);
    };
    Artist.prototype._make_user = function (value) {
      return value && User.fromURI(value);
    };
    Artist.fromURI = Cache.lookup;
    Artist.fromURIs = Cache.lookupMany;
    Artist._cache = new Cache(Artist);
    ListDescriptor.Types = {
      LIST: 'list',
      LISTS: 'lists',
      SORT: 'sort',
      FILTER: 'filter',
      RANGE: 'range',
      SHUFFLE: 'shuffle'
    };
    function ListDescriptor(type, opt_params) {
      this.type = type;
      for (var n in opt_params) {
        this[n] = opt_params[n];
      }
    }
    ListDescriptor.compare = function (a, b) {
      if (a.type !== b.type) {
        return false;
      }
      switch (a.type) {
      case ListDescriptor.Types.LIST:
        return a.uri === b.uri;
      case ListDescriptor.Types.LISTS:
        if (a.lists.length !== b.lists.length) {
          return false;
        }
        for (var i = 0; i < a.lists.length; i++) {
          if (!ListDescriptor.compare(a.lists[i], b.lists[i])) {
            return false;
          }
        }
        return true;
      case ListDescriptor.Types.FILTER:
      case ListDescriptor.Types.RANGE:
      case ListDescriptor.Types.SHUFFLE:
      case ListDescriptor.Types.SORT:
        if (a.version !== b.version) {
          return false;
        }
        if (a.args.toString() !== b.args.toString()) {
          return false;
        }
        return ListDescriptor.compare(a.list, b.list);
      default:
        return false;
      }
    };
    ListDescriptor.create = function (uri) {
      return new ListDescriptor(ListDescriptor.Types.LIST, { uri: uri });
    };
    ListDescriptor.createConcatenated = function (lists) {
      return new ListDescriptor(ListDescriptor.Types.LISTS, { lists: lists });
    };
    ListDescriptor.prototype.filter = function (operation, field, value) {
      return new ListDescriptor(ListDescriptor.Types.FILTER, {
        list: this,
        args: [
          operation,
          field,
          value
        ],
        version: 1
      });
    };
    ListDescriptor.prototype.range = function (offset, length) {
      return new ListDescriptor(ListDescriptor.Types.RANGE, {
        list: this,
        args: [
          offset,
          length
        ],
        version: 1
      });
    };
    ListDescriptor.prototype.shuffle = function (opt_seed) {
      return new ListDescriptor(ListDescriptor.Types.SHUFFLE, {
        list: this,
        args: [opt_seed || Math.floor(Math.random() * 200000000)],
        version: 1
      });
    };
    ListDescriptor.prototype.sort = function (field, opt_direction, var_args) {
      if (arguments.length > 2 && arguments.length % 2 != 0) {
        throw new Error('Invalid number of parameters');
      }
      var args = arguments.length == 1 ? [
          field,
          'asc'
        ] : Array.prototype.slice.call(arguments);
      return new ListDescriptor(ListDescriptor.Types.SORT, {
        list: this,
        args: args,
        version: 1
      });
    };
    ListDescriptor.prototype.getBase = function () {
      switch (this.type) {
      case ListDescriptor.Types.LIST:
      case ListDescriptor.Types.LISTS:
        return this;
      case ListDescriptor.Types.FILTER:
      case ListDescriptor.Types.RANGE:
      case ListDescriptor.Types.SHUFFLE:
      case ListDescriptor.Types.SORT:
        return this.list ? this.list.getBase() : null;
      }
      return null;
    };
    function Collection(itemClass, uri, snapshot, opt_descriptor, opt_itemFactory) {
      BridgeLoadable.call(this);
      this.resolve('descriptor', opt_descriptor instanceof ListDescriptor ? opt_descriptor : ListDescriptor.create(opt_descriptor || uri));
      this.resolve('type', itemClass);
      this.resolve('uri', uri);
      this._snapshot = snapshot;
      this._factory = opt_itemFactory || SP.bind(itemClass.fromURI, itemClass);
    }
    SP.inherit(Collection, BridgeLoadable);
    Loadable.define(Collection, [
      'descriptor',
      'type',
      'uri'
    ]);
    Collection.prototype.clone = function (opt_newDescriptor) {
      return new Collection(this.type, this.uri, this._snapshot, opt_newDescriptor || this.descriptor, this._factory);
    };
    Collection.prototype.snapshot = function (opt_start, opt_length, opt_raw) {
      var snapshot = new Snapshot(this, opt_start, opt_length, opt_raw);
      return snapshot.load('length', 'range');
    };
    Collection.prototype.add = function (items) {
      throw new Error('This method has not been implemented.');
    };
    Collection.prototype.insert = function (ref, items) {
      throw new Error('This method has not been implemented.');
    };
    Collection.prototype.remove = function (ref) {
      throw new Error('This method has not been implemented.');
    };
    Collection.prototype.trim = function (ref) {
      throw new Error('This method has not been implemented.');
    };
    Collection.prototype.clear = function () {
      throw new Error('This method has not been implemented.');
    };
    Collection.prototype.sort = function (field, opt_direction, var_args) {
      return this.clone(this.descriptor.sort.apply(this.descriptor, arguments));
    };
    Collection.prototype.filter = function (operation, field, value) {
      return this.clone(this.descriptor.filter(operation, field, value));
    };
    Collection.prototype.range = function (offset, length) {
      return this.clone(this.descriptor.range(offset, length));
    };
    Collection.prototype.shuffle = function (opt_seed) {
      return this.clone(this.descriptor.shuffle(opt_seed));
    };
    Collection.prototype.contains = function (items) {
      throw new Error('This method has not been implemented.');
    };
    function BridgeCollection(itemClass, uri, requestPrefix, opt_descriptor, opt_itemFactory) {
      Collection.call(this, itemClass, uri, this._requestSnapshot, opt_descriptor, opt_itemFactory);
      this._prefix = requestPrefix;
    }
    SP.inherit(BridgeCollection, Collection);
    BridgeCollection.prototype._requestSnapshot = function (descriptor, offset, length, raw) {
      var promise = new Promise();
      if (this._prefix.indexOf('toplist_region_') == 0 && descriptor.uri.match(/:country:USER$/) != null) {
        var onCountryLoaded = function (session) {
          descriptor.uri = descriptor.uri.replace(/:country:USER$/, ':country:' + session.country);
          SP.request(this._prefix + '_snapshot', [
            descriptor,
            offset,
            length,
            raw
          ], promise, promise.setDone, promise.setFail);
        };
        new Session().load('country').done(SP.bind(onCountryLoaded, this)).fail(promise.setFail);
        return promise;
      }
      SP.request(this._prefix + '_snapshot', [
        descriptor,
        offset,
        length,
        raw
      ], promise, promise.setDone, promise.setFail);
      return promise;
    };
    BridgeCollection.prototype.add = function (items) {
      var args = SP.uris(arguments);
      args.unshift(this.descriptor);
      return promisedRequest(this, this._prefix + '_append', args);
    };
    BridgeCollection.prototype.clear = function () {
      return promisedRequest(this, this._prefix + '_clear', [this.descriptor]);
    };
    BridgeCollection.prototype.clone = function (opt_newDescriptor) {
      return new BridgeCollection(this.type, this.uri, this._prefix, opt_newDescriptor || this.descriptor, this._factory);
    };
    BridgeCollection.prototype.insert = function (ref, items) {
      var args = [
          this.descriptor,
          ref.index,
          ref.uri
        ];
      var uris = SP.uris(arguments, 1);
      return promisedRequest(this, this._prefix + '_insert', args.concat(uris));
    };
    BridgeCollection.prototype.remove = function (ref) {
      return promisedRequest(this, this._prefix + '_remove', [
        this.descriptor,
        ref.index,
        ref.uri
      ]);
    };
    BridgeCollection.prototype.trim = function (ref) {
      return promisedRequest(this, this._prefix + '_trim', [
        this.descriptor,
        ref.index,
        ref.uri
      ]);
    };
    BridgeCollection.prototype.contains = function (items) {
      var args = SP.uris(arguments);
      args.unshift(this.descriptor);
      var promise = new Promise();
      var done = function (val) {
        if (args.length == 2 && !(items instanceof Array))
          promise.object = val.in_collection[0];
        else
          promise.object = val.in_collection;
        promise.setDone();
      };
      SP.request(this._prefix + '_contains', args, promise, done, promise.setFail);
      return promise;
    };
    function Context(uri) {
      Loadable.call(this);
      this.resolve('uri', uri);
    }
    SP.inherit(Context, Loadable);
    Loadable.define(Context, ['uri']);
    Context.prototype.toString = function () {
      return this.uri;
    };
    Context.fromURI = function (uri) {
      return new Context(uri);
    };
    function Group() {
      Loadable.call(this);
      this.resolve('descriptor', ListDescriptor.createConcatenated([]));
    }
    SP.inherit(Group, Loadable);
    Loadable.define(Group, ['descriptor']);
    Group.prototype.add = function (context) {
      var descriptor = context.descriptor || ListDescriptor.create(context.uri);
      this.descriptor.lists.push(descriptor);
    };
    Group.create = function () {
      var group = new Group();
      var promise = new Promise();
      promise.setDone(group);
      return promise;
    };
    function Player(id) {
      BridgeLoadable.call(this);
      this.resolve('id', id);
    }
    SP.inherit(Player, BridgeLoadable);
    Loadable.define(Player, [
      'context',
      'contexts',
      'duration',
      'id',
      'index',
      'playing',
      'repeat',
      'shuffle',
      'track',
      'volume'
    ], '_query');
    Loadable.define(Player, ['position'], '_position');
    Player.prototype._observed = function () {
      this.bridgeListen('player_event_wait', [this.id]);
    };
    Player.prototype.eventDone = function (event) {
      Player._superClass.eventDone.call(this, event);
      this._queryPosition();
    };
    Player.prototype._make_context = function (value) {
      return value && Context.fromURI(value.uri, value);
    };
    Player.prototype._make_track = function (value) {
      return value && Track.fromURI(value.uri, value);
    };
    Player.prototype._query = function (propsMask) {
      var load = function (data) {
        delete data.position;
        this.resolveMany(propsMask, data);
      };
      var fail = function (error) {
        this.resolveFail(propsMask, error);
      };
      SP.request('player_query', [this.id], this, load, fail);
      this.bridgeListen('player_event_wait', [this.id]);
    };
    Player.prototype._position = function (propsMask) {
      this._needsPosition = true;
      this._queryPosition(true);
    };
    Player.prototype._queryPosition = function (opt_immediate) {
      if (this._needsPosition) {
        if (opt_immediate || !this._pq && this.playing) {
          var time = opt_immediate ? 0 : 900;
          var self = this;
          this._pq = setTimeout(function () {
            SP.request('player_query', [self.id], self, self._progress);
          }, time);
        }
      }
    };
    Player.prototype._progress = function (data) {
      this._pq = null;
      this.resolve('position', data.position, true);
      delete data.position;
      this.resolveMany(0, data);
      this._queryPosition();
    };
    Player.prototype.mapTrackIdentifiers = function (map) {
      return promisedRequest(this, 'player_map_track_identifiers', [
        this.id,
        map
      ]);
    };
    Player.prototype.setVolume = function (volume) {
      return promisedRequest(this, 'player_set_volume', [
        this.id,
        volume
      ]);
    };
    Player.prototype.setRepeat = function (enabled) {
      return promisedRequest(this, 'player_set_repeat', [
        this.id,
        enabled
      ]);
    };
    Player.prototype.setShuffle = function (enabled) {
      return promisedRequest(this, 'player_set_shuffle', [
        this.id,
        enabled
      ]);
    };
    Player.prototype.play = function () {
      return promisedRequest(this, 'player_play', [this.id]);
    };
    Player.prototype.pause = function () {
      return promisedRequest(this, 'player_pause', [this.id]);
    };
    Player.prototype.stop = function () {
      return promisedRequest(this, 'player_stop', [this.id]);
    };
    Player.prototype.playTrack = function (track, ms, duration) {
      return promisedRequest(this, 'player_play_track', [
        this.id,
        track.uri,
        ms || 0,
        duration != undefined ? duration : -1
      ]);
    };
    Player.prototype.playContext = function (context, index, ms, duration) {
      if (index == null)
        index = -1;
      var descriptor = context.descriptor || ListDescriptor.create(context.uri);
      return promisedRequest(this, 'player_play_context', [
        this.id,
        descriptor,
        index,
        ms || 0,
        duration != undefined ? duration : -1
      ]);
    };
    Player.prototype.playContextGroup = function (group, contextIndex, index, ms) {
      if (contextIndex == undefined)
        contextIndex = -1;
      if (index == undefined)
        index = -1;
      return promisedRequest(this, 'player_play_context_group', [
        this.id,
        group.descriptor,
        contextIndex,
        index,
        ms || 0
      ]);
    };
    Player.prototype.skipToPrevTrack = function () {
      return promisedRequest(this, 'player_skip_to_prev', [this.id]);
    };
    Player.prototype.skipToNextTrack = function () {
      return promisedRequest(this, 'player_skip_to_next', [this.id]);
    };
    Player.prototype.seek = function (ms) {
      return promisedRequest(this, 'player_seek', [
        this.id,
        ms
      ]);
    };
    function Playlist(uri) {
      MdL.call(this);
      this.resolve('uri', uri);
    }
    SP.inherit(Playlist, MdL);
    Loadable.define(Playlist, ['uri']);
    Loadable.define(Playlist, [
      'allows',
      'collaborative',
      'description',
      'subscribed',
      'name',
      'owner',
      'published'
    ], '_metadata');
    Loadable.define(Playlist, [
      'image',
      'images'
    ], '_profile');
    Loadable.define(Playlist, [
      'subscribers',
      'tracks'
    ], '_collections');
    Loadable.define(Playlist, ['popularity'], '_popularity');
    MdL.init(Playlist, 'playlist');
    Playlist.prototype._make_owner = function (value) {
      return value && User.fromURI(value.uri, value);
    };
    Playlist.prototype._collections = function () {
      this.resolve('subscribers', new BridgeCollection(User, this.uri, 'playlist_subscribers'));
      this.resolve('tracks', new BridgeCollection(Track, this.uri, 'playlist_tracks'));
      this.resolveDone();
    };
    Playlist.prototype._popularity = function (propsMask) {
      var load = function (data) {
        this.resolveMany(propsMask, data);
      };
      var fail = function (oops) {
        this.resolveFail(propsMask, oops);
      };
      SP.request('playlist_popularity', [this.uri], this, load, fail);
    };
    Playlist._libraryListener = null;
    Playlist.fromURI = Cache.lookup;
    Playlist.fromURIs = Cache.lookupMany;
    Playlist._cache = new Cache(Playlist);
    Playlist.createTemporary = function (name) {
      var promise = new Promise();
      var done = function (result) {
        var playlist = new Playlist(result.uri);
        Playlist._cache.cache(result.uri, playlist);
        playlist.resolve('name', name);
        promise.setDone(playlist);
      };
      SP.request('playlist_create_temporary', [name], promise, done, promise.setFail);
      return promise;
    };
    Playlist.removeTemporary = function (playlist) {
      var promise = new Promise();
      var done = function (result) {
        Playlist._cache.remove(playlist.uri);
        promise.setDone();
      };
      SP.request('playlist_remove_temporary', [playlist.name], promise, done, promise.setFail);
      return promise;
    };
    Playlist.create = function (name) {
      var promise = new Promise();
      var done = function (result) {
        var playlist = new Playlist(result.uri);
        Playlist._cache.cache(result.uri, playlist);
        playlist.resolve('name', name);
        promise.setDone(playlist);
      };
      SP.request('playlist_create', [name], promise, done, promise.setFail);
      return promise;
    };
    Playlist.getOrCreateLibraryListener = function () {
      var listener = Playlist._libraryListener;
      if (!listener) {
        listener = new ProxyListener();
        listener.bridgeListen('library_event_wait', [exports.session.user.uri]);
        listener.filter(function (evt) {
          if (evt.type != 'insert' && evt.type != 'remove')
            return;
          var newState = evt.type == 'insert';
          switch (evt.receiver) {
          case 'playlists':
            Playlist._cache.update(evt.uris, { subscribed: newState });
            break;
          case 'published':
            Playlist._cache.update(evt.uris, { published: newState });
            break;
          }
        });
        Playlist._libraryListener = listener;
      }
      return listener;
    };
    Playlist.prototype.resolveMany = function (propsMask, data, opt_silent) {
      if (data && this._hasStaticName()) {
        delete data.name;
      }
      Playlist._superClass.resolveMany.call(this, propsMask, data, opt_silent);
    };
    Playlist.prototype.load = function () {
      var args = SP.varargs(arguments);
      if (Array.prototype.indexOf.call(args, 'subscribed') >= 0) {
        Playlist.getOrCreateLibraryListener();
      }
      var nameIndex;
      if ((nameIndex = Array.prototype.indexOf.call(args, 'name')) !== -1 && this._hasStaticName()) {
        var argsWithoutName = Array.prototype.slice.call(args, 0);
        argsWithoutName.splice(nameIndex, 1);
        var argsWithoutNamePromise = Playlist._superClass.load.apply(this, argsWithoutName);
        var promise = new Promise(this);
        Promise.join(argsWithoutNamePromise, this._loadStaticName()).done(function () {
          promise.setDone();
        }).fail(function () {
          promise.setFail();
        });
        return promise;
      } else {
        return Playlist._superClass.load.apply(this, args);
      }
    };
    Playlist._rStaticName = /^spotify:user:[^:]+:(starred|toplist|top:tracks)$/;
    Playlist.prototype._hasStaticName = function () {
      return Playlist._rStaticName.test(this.uri);
    };
    Playlist.prototype._loadStaticName = function () {
      var promise = new Promise(this);
      var matches = this.uri.match(Playlist._rStaticName);
      var type = matches && matches[1];
      if (type) {
        if (type == 'top:tracks') {
          type = 'toplist';
        }
        if (!Playlist._langStrings) {
          var self = this;
          (function (playlistStrings) {
            Playlist._langStrings = playlistStrings;
            self._resolveStaticName(type);
            promise.setDone();
          }(require.loc('./node_modules/api/@loc.loc/strings/playlist.lang')));
        } else {
          this._resolveStaticName(type);
          promise.setDone();
        }
      } else {
        promise.setFail('Invalid type');
      }
      return promise;
    };
    Playlist._stringKeyByType = {
      starred: 'Starred',
      toplist: 'Toplist'
    };
    Playlist.prototype._resolveStaticName = function (type) {
      var stringKey = Playlist._stringKeyByType[type];
      this.resolve('name', Playlist._langStrings.get(stringKey));
    };
    Playlist.prototype._observed = function () {
      this.bridgeListen('playlist_event_wait', [this.uri]);
    };
    Playlist.prototype.eventFail = function (error) {
      if (!this._obcount)
        this.bridgeUnlisten();
      Playlist._superClass.eventFail.call(this, error);
    };
    Playlist.prototype.setDescription = function (description) {
      return promisedRequest(this, 'playlist_set_description', [
        this.uri,
        description
      ], true);
    };
    Playlist.prototype.setImage = function (imageUrl) {
      return promisedRequest(this, 'playlist_set_image', [
        this.uri,
        imageUrl
      ], true);
    };
    Playlist.prototype.setName = function (name) {
      return promisedRequest(this, 'playlist_set_name', [
        this.uri,
        name
      ], true);
    };
    Playlist.prototype.setSource = function (source, link) {
      return promisedRequest(this, 'playlist_set_source', [
        this.uri,
        source,
        link
      ]);
    };
    Playlist.prototype.enforceRules = function (rules) {
      return promisedRequest(this, 'playlist_enforce_rules', [
        this.uri,
        rules
      ]);
    };
    function Profile(uri) {
      MdL.call(this);
      this.resolve('uri', uri);
    }
    SP.inherit(Profile, MdL);
    Profile.fromURI = Cache.lookup;
    Profile.fromURIs = Cache.lookupMany;
    Profile._cache = new Cache(Profile);
    Loadable.define(Profile, ['uri']);
    Loadable.define(Profile, [
      'artist',
      'user'
    ], '_loadArtistOrUser');
    Loadable.define(Profile, [
      'name',
      'image',
      'images'
    ], '_metadata');
    Profile.prototype._make_artist = function (uri) {
      return Artist.fromURI(uri);
    };
    Profile.prototype._make_user = function (uri) {
      return User.fromURI(uri);
    };
    Profile.prototype._loadArtistOrUser = function (propsMask) {
      var object = exports.fromURI(this.uri), promise;
      if (object instanceof Artist) {
        promise = object.load('user').done(this, function () {
          var uri = object.user ? object.user.uri : null;
          this.resolveMany(propsMask, {
            artist: object.uri,
            user: uri
          });
        });
      } else if (object instanceof User) {
        promise = object.load('artist').done(this, function () {
          var uri = object.artist ? object.artist.uri : null;
          this.resolveMany(propsMask, {
            artist: uri,
            user: object.uri
          });
        });
      } else {
        throw new Error('Invalid URI for Profile');
      }
      promise.fail(this, function () {
        this.resolveFail(propsMask, { message: 'Failed to resolve artist/user objects' });
      });
    };
    Profile.prototype._metadata = function (propsMask) {
      this.load('artist', 'user').done(this, function () {
        if (this.user) {
          this.user.load('name', 'username', 'image', 'images').done(this, function () {
            var data = {
                name: this.user.name,
                image: this.user.image,
                images: this.user.images
              };
            var nameDefined = data.name && data.name.toLowerCase() !== this.user.username, imageUploaded = data.image;
            if (!this.artist || nameDefined && imageUploaded)
              return this.resolveMany(propsMask, data);
            this.artist.load('name', 'image', 'images').done(this, function (artist) {
              if (!nameDefined)
                data.name = artist.name;
              if (!imageUploaded) {
                data.image = artist.image;
                data.images = artist.images;
              }
            }).always(this, function () {
              this.resolveMany(propsMask, data);
            });
          }).fail(this, function (_, error) {
            this.resolveFail(propsMask, error);
          });
        } else {
          this.artist.load('name', 'image', 'images').done(this, function (artist) {
            this.resolveMany(propsMask, {
              name: artist.name,
              image: artist.image,
              images: artist.images
            });
          }).fail(this, function (_, error) {
            this.resolveFail(propsMask, error);
          });
        }
      });
    };
    Playlist._playlistEventWait = function () {
      SP.request('playlist_event_wait_any', [], this, this._playlistEventDone, this._playlistEventFail);
    };
    Playlist._playlistEventDone = function (event) {
      var playlist = Playlist.fromURI(event.data.uri);
      playlist.resolveMany(0, event.data);
      playlist.dispatchEvent(event);
      this._playlistEventWait();
    };
    Playlist._playlistEventFail = function (error) {
      if (error.error == 'timeout')
        this._playlistEventWait();
    };
    function Reference(index, uri) {
      this.index = index;
      this.uri = uri;
    }
    function Session() {
      BridgeLoadable.call(this);
      this.resolve('user', User.fromURI('spotify:user:@'));
    }
    SP.inherit(Session, BridgeLoadable);
    Loadable.define(Session, ['user']);
    Loadable.define(Session, [
      'catalogue',
      'connecting',
      'connection',
      'country',
      'developer',
      'device',
      'incognito',
      'language',
      'online',
      'partner',
      'product',
      'resolution',
      'streaming',
      'testGroup',
      'capabilities'
    ], '_query');
    Session.prototype._observed = function () {
      this.bridgeListen('session_event_wait', []);
    };
    Session.prototype._query = function (propsMask) {
      var load = function (data) {
        this.resolveMany(propsMask, data);
      };
      var fail = function (oops) {
        this.resolveFail(propsMask, oops);
      };
      SP.request('session_query', [], this, load, fail);
    };
    Session.prototype.testGroupForTest = function (name) {
      var promise = new Promise();
      SP.request('session_test_group', [name], promise, function (result) {
        this.setDone(result.testGroup);
      }, Promise.setFail);
      return promise;
    };
    function Snapshot(collection, opt_start, opt_length, opt_raw) {
      Loadable.call(this);
      this._collection = collection;
      this._off = opt_start === undefined ? 0 : opt_start;
      this._len = opt_length === undefined ? -1 : opt_length;
      this._raw = !!opt_raw;
    }
    SP.inherit(Snapshot, Loadable);
    Loadable.define(Snapshot, [
      'length',
      'range'
    ], '_request');
    Snapshot.prototype._request = function () {
      var col = this._collection;
      col._snapshot(col.descriptor, this._off, this._len, this._raw).done(this, function (result) {
        this._uris = result.array;
        this._meta = result.metadata || [];
        this.resolve('length', result.length);
        this.resolve('range', {
          offset: this._off,
          length: this._uris.length
        });
        this.resolveDone();
      }).fail(this, function (error) {
        var propsMask = this._neededForLoad([
            'length',
            'range'
          ]);
        this.resolveFail(propsMask, error);
      });
    };
    Snapshot.prototype.get = function (index) {
      if (index instanceof Reference)
        index = index.index;
      index -= this._off;
      if (index < 0 || index > this._uris.length)
        return null;
      return this._collection._factory(this._uris[index], this._meta[index]);
    };
    Snapshot.prototype.find = function (item, first) {
      if (first instanceof Reference)
        first = first.index;
      var index = this._uris.indexOf(item.uri, first || 0);
      return index == -1 ? null : new Reference(index + this._off, this._uris[index]);
    };
    Snapshot.prototype.loadAll = function () {
      var promises = [], items = this.toArray();
      for (var i = 0, len = items.length; i < len; i++) {
        var item = items[i];
        promises.push(item.load.apply(item, arguments));
      }
      return Promise.join(promises);
    };
    Snapshot.prototype.ref = function (index) {
      var item = this.get(index);
      return new Reference(index, item ? item.uri : null);
    };
    Snapshot.prototype.toArray = function () {
      var array = [], col = this._collection;
      for (var i = 0, l = this._uris.length; i < l; i++)
        array[i] = col._factory(this._uris[i], this._meta[i]);
      return array;
    };
    Snapshot.prototype.toURIs = function () {
      return this._uris.slice();
    };
    function Track(uri) {
      MdL.call(this);
      this.resolve('uri', uri);
    }
    SP.inherit(Track, MdL);
    Loadable.define(Track, ['uri']);
    Loadable.define(Track, [
      'ad_metadata',
      'advertisement',
      'album',
      'artists',
      'availability',
      'disc',
      'duration',
      'explicit',
      'image',
      'images',
      'local',
      'name',
      'number',
      'placeholder',
      'playable',
      'popularity',
      'starred'
    ], '_metadata');
    MdL.init(Track, 'track');
    Track.prototype._make_album = function (value) {
      return value && Album.fromURI(value.uri, value);
    };
    Track.prototype._make_artists = function (value) {
      return value && value.map(_artists);
    };
    Track.fromURI = Cache.lookup;
    Track.fromURIs = Cache.lookupMany;
    Track._cache = new Cache(Track);
    Track.prototype.star = function () {
      return promisedRequest(this, 'library_star', [
        exports.session.user.uri,
        this.uri
      ]);
    };
    Track.prototype.unstar = function () {
      return promisedRequest(this, 'library_unstar', [
        exports.session.user.uri,
        this.uri
      ]);
    };
    Track._trackEventWait = function () {
      SP.request('track_event_wait_any', [], this, this._trackEventDone, this._trackEventFail);
    };
    Track._trackEventDone = function (event) {
      var track = Track.fromURI(event.data.uri);
      track.resolveMany(0, event.data);
      track.dispatchEvent(event);
      this._trackEventWait();
    };
    Track._trackEventFail = function (error) {
      if (error.error == 'timeout')
        this._trackEventWait();
    };
    function User(uri) {
      MdL.call(this);
      this.resolve('uri', uri);
    }
    SP.inherit(User, MdL);
    Loadable.define(User, ['uri']);
    Loadable.define(User, [
      'currentUser',
      'identifier',
      'image',
      'images',
      'name',
      'subscribed',
      'username'
    ], '_metadata');
    Loadable.define(User, ['artist'], '_associatedArtist');
    MdL.init(User, 'user');
    User.prototype._associatedArtist = function (propsMask) {
      var load = function (data) {
        this.resolveMany(propsMask, data);
      };
      var fail = function (oops) {
        this.resolveFail(propsMask, oops);
      };
      SP.request('user_associated_artist', [this.uri], this, load, fail);
    };
    User.prototype._make_artist = function (value) {
      return value && Artist.fromURI(value);
    };
    User._relationsListener = null;
    User.fromURI = Cache.lookup;
    User.fromURIs = Cache.lookupMany;
    User._cache = new Cache(User);
    User.fromUsername = function (username) {
      var escaped = encodeURIComponent(username), i = -1;
      while ((i = escaped.indexOf('%', i + 1)) > -1) {
        escaped = escaped.substring(0, i + 1) + escaped.substring(i + 1, i + 3).toLowerCase() + escaped.substring(i + 3);
      }
      return User.fromURI('spotify:user:' + escaped);
    };
    User.getOrCreateRelationsListener = function () {
      var listener = User._relationsListener;
      if (!listener) {
        listener = new ProxyListener();
        listener.bridgeListen('relations_event_wait', [exports.session.user.uri]);
        listener.filter(function (evt) {
          if (evt.receiver != 'subscriptions' || evt.type != 'add' && evt.type != 'remove')
            return;
          User._cache.update(evt.uris, { subscribed: evt.type == 'add' });
        });
        User._relationsListener = listener;
      }
      return listener;
    };
    User.prototype.load = function () {
      var args = SP.varargs(arguments);
      if (Array.prototype.indexOf.call(args, 'subscribed') >= 0) {
        User.getOrCreateRelationsListener();
      }
      return User._superClass.load.apply(this, args);
    };
    var fromURI = function (uri, opt_data) {
      var parts = uri.split(':');
      var result = null;
      switch (parts[1]) {
      case 'album':
        if (parts.length == 4)
          result = Disc.fromURI(uri, opt_data);
        else if (parts.length == 3)
          result = Album.fromURI(uri, opt_data);
        break;
      case 'artist':
        if (parts.length == 3)
          result = Artist.fromURI(uri, opt_data);
        break;
      case 'track':
        if (parts.length == 3)
          result = Track.fromURI(uri, opt_data);
        break;
      case 'local':
        if (parts.length === 6)
          result = Track.fromURI(uri, opt_data);
        else if (parts.length === 4)
          result = Album.fromURI(uri, opt_data);
        else if (parts.length === 3)
          result = Artist.fromURI(uri, opt_data);
        break;
      case 'user':
        if (parts.length > 3 && parts[3] == 'collection')
          return new BridgeCollection(Track, uri, 'library_tracks');
        if (parts.length > 3 && parts.length <= 5 && parts[2] != 'facebook')
          result = Playlist.fromURI(uri, opt_data);
        else if (parts.length == 3)
          result = User.fromURI(uri, opt_data);
        break;
      }
      return result;
    };
    Playlist._playlistEventWait();
    Track._trackEventWait();
    exports.Observable = Observable;
    exports.Loadable = Loadable;
    exports.BridgeLoadable = BridgeLoadable;
    exports.MdL = MdL;
    exports.Album = Album;
    exports.Application = Application;
    exports.Artist = Artist;
    exports.Cache = Cache;
    exports.Client = Client;
    exports.Collection = Collection;
    exports.BridgeCollection = BridgeCollection;
    exports.Context = Context;
    exports.Disc = Disc;
    exports.Group = Group;
    exports.ListDescriptor = ListDescriptor;
    exports.Player = Player;
    exports.Playlist = Playlist;
    exports.Profile = Profile;
    exports.Promise = Promise;
    exports.Session = Session;
    exports.Track = Track;
    exports.User = User;
    exports.application = new Application();
    exports.client = new Client();
    exports.fromURI = fromURI;
    exports.player = new Player('main');
    exports.preview = new Player('preview');
    exports.promisedRequest = promisedRequest;
    exports.session = new Session();
  },
  './tmpl/relatedArticle.hbs': function (require, module, exports, global) {
    var Handlebars = require('./node_modules/handlebars/dist/cjs/handlebars.runtime.js')['default'];
    var template = Handlebars.template(function (Handlebars, depth0, helpers, partials, data) {
        this.compilerInfo = [
          4,
          '>= 1.0.0'
        ];
        helpers = this.merge(helpers, Handlebars.helpers);
        data = data || {};
        var buffer = '', stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = 'function';
        buffer += '<div class="relatedArticle">\n  <div class="ctx">\n    <a href="' + escapeExpression((helper = helpers.href || depth0 && depth0.href, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, depth0 && depth0.url, options) : helperMissing.call(depth0, 'href', depth0 && depth0.url, options))) + '" data-log-click="related-article">\n      <div class="image" style="background-image: url(\'';
        if (helper = helpers.imgUrl) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.imgUrl;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + '\')"></div>\n    </a>\n    <div class="info">\n      <div class="date unhover">';
        if (helper = helpers.date) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.date;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + '</div>\n      <a href="' + escapeExpression((helper = helpers.href || depth0 && depth0.href, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, depth0 && depth0.url, options) : helperMissing.call(depth0, 'href', depth0 && depth0.url, options))) + '" data-log-click="related-article">\n        <div class="headline">';
        if (helper = helpers.headline) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.headline;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '</div>\n      </a>\n    </div>\n  </div>\n</div>\n';
        return buffer;
      });
    Handlebars.registerPartial('./tmpl/relatedArticle.hbs', template);
    module.exports = template;
  },
  './tmpl/article.hbs': function (require, module, exports, global) {
    var Handlebars = require('./node_modules/handlebars/dist/cjs/handlebars.runtime.js')['default'];
    var template = Handlebars.template(function (Handlebars, depth0, helpers, partials, data) {
        this.compilerInfo = [
          4,
          '>= 1.0.0'
        ];
        helpers = this.merge(helpers, Handlebars.helpers);
        data = data || {};
        var buffer = '', stack1, helper, options, functionType = 'function', escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing;
        buffer += '<div class="article" style="background-image: url(\'';
        if (helper = helpers.imgUrl) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.imgUrl;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + '\')">\n  <div class="text" data-log-context="article-text">\n    <div class="date">';
        if (helper = helpers.date) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.date;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + '</div>\n    <h1>';
        if (helper = helpers.headline) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.headline;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '</h1>\n    <div class="leadin">';
        if (helper = helpers.leadin) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.leadin;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + '</div>\n    <div class="hr"></div>\n    <div class="article-text editorial">\n      <div class="firstLinked" data-log-context="article-first-media"></div>\n      ';
        if (helper = helpers.body) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.body;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n    </div>\n    <div class="relatedAricles" data-log-context="related-article">\n      <h2>' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, 'Related Articles', options) : helperMissing.call(depth0, 'loc', 'Related Articles', options))) + '</h2>\n      <div class="hr"></div>\n      <div class="releated"></div>\n    </div>\n    <div class="otherRelated" data-log-context="related-media">\n      <h2>' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, 'Other Related', options) : helperMissing.call(depth0, 'loc', 'Other Related', options))) + '</h2>\n      <div class="hr"></div>\n      <div class="linked row"></div>\n    </div>\n  </div>\n</div>';
        return buffer;
      });
    Handlebars.registerPartial('./tmpl/article.hbs', template);
    module.exports = template;
  },
  './tmpl/genreHeader.hbs': function (require, module, exports, global) {
    var Handlebars = require('./node_modules/handlebars/dist/cjs/handlebars.runtime.js')['default'];
    var template = Handlebars.template(function (Handlebars, depth0, helpers, partials, data) {
        this.compilerInfo = [
          4,
          '>= 1.0.0'
        ];
        helpers = this.merge(helpers, Handlebars.helpers);
        data = data || {};
        var buffer = '', stack1, functionType = 'function', escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing, self = this;
        function program1(depth0, data) {
          return 'style="margin-top: 262px"';
        }
        function program3(depth0, data) {
          return 'style="margin-top: 217px"';
        }
        function program5(depth0, data) {
          var buffer = '', stack1, helper, options;
          buffer += '\n  <div class="navbar-fixed-wrapper">\n    <div class="navbar">\n      <div class="container">\n        <ul class="nav" data-log-context="navigation-bar" >\n          <li class="dropdown">\n            <a id="dropdown" class="dropdown-toggle subGenre" data-toggle="dropdown" data-log-click="sub-genre-filter-dropdown">';
          if (helper = helpers.dropDownText) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.dropDownText;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '<span class="caret"></span></a>\n            <ul id="subGenreMenu" class="dropdown-menu arrow-top" role="menu" >\n              <li data-log-click="sub-genre-filter">\n                <a tracking-target="' + escapeExpression((stack1 = (stack1 = depth0 && depth0.parentGenre, stack1 == null || stack1 === false ? stack1 : stack1.templateName), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '"  onclick="window.appWidget.argumentsChg(\'' + escapeExpression((stack1 = (stack1 = depth0 && depth0.parentGenre, stack1 == null || stack1 === false ? stack1 : stack1.templateName), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '\');">' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
            hash: {},
            data: data
          }, helper ? helper.call(depth0, 'All Subgenres', options) : helperMissing.call(depth0, 'loc', 'All Subgenres', options))) + '</a>\n              </li>\n              ';
          stack1 = helpers.each.call(depth0, (stack1 = depth0 && depth0.parentGenre, stack1 == null || stack1 === false ? stack1 : stack1.children), {
            hash: {},
            inverse: self.noop,
            fn: self.program(6, program6, data),
            data: data
          });
          if (stack1 || stack1 === 0) {
            buffer += stack1;
          }
          buffer += '\n            </ul>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n  ';
          return buffer;
        }
        function program6(depth0, data) {
          var buffer = '', stack1, helper;
          buffer += '\n                <li data-log-click="sub-genre-filter">\n                  <a tracking-target="';
          if (helper = helpers.templateName) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.templateName;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '" onclick="window.appWidget.argumentsChg(\'';
          if (helper = helpers.templateName) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.templateName;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '\');">';
          if (helper = helpers.name) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.name;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '</a>\n                </li>\n              ';
          return buffer;
        }
        buffer += '<div class="ctx">\n  <div class="moodImage" style="background-image: url(\'' + escapeExpression((stack1 = (stack1 = depth0 && depth0.parentGenre, stack1 == null || stack1 === false ? stack1 : stack1.headerImageUrl), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '\');"></div>\n  <div class="container" style="position: absolute;">\n    <h1 ';
        stack1 = helpers.unless.call(depth0, depth0 && depth0.showNav, {
          hash: {},
          inverse: self.program(3, program3, data),
          fn: self.program(1, program1, data),
          data: data
        });
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '>' + escapeExpression((stack1 = (stack1 = depth0 && depth0.parentGenre, stack1 == null || stack1 === false ? stack1 : stack1.name), typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '</h1>\n  </div>\n  ';
        stack1 = helpers['if'].call(depth0, depth0 && depth0.showNav, {
          hash: {},
          inverse: self.noop,
          fn: self.program(5, program5, data),
          data: data
        });
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n</div>';
        return buffer;
      });
    Handlebars.registerPartial('./tmpl/genreHeader.hbs', template);
    module.exports = template;
  },
  './tmpl/articleobject.hbs': function (require, module, exports, global) {
    var Handlebars = require('./node_modules/handlebars/dist/cjs/handlebars.runtime.js')['default'];
    var template = Handlebars.template(function (Handlebars, depth0, helpers, partials, data) {
        this.compilerInfo = [
          4,
          '>= 1.0.0'
        ];
        helpers = this.merge(helpers, Handlebars.helpers);
        data = data || {};
        var buffer = '', stack1, helper, options, functionType = 'function', escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing, self = this;
        function program1(depth0, data) {
          var buffer = '', stack1, helper;
          buffer += 'style="background-image: url(\'';
          if (helper = helpers.imageUrl) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.imageUrl;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '\')"';
          return buffer;
        }
        buffer += '<div class="mo-wrapper">\n  <div class="mo-image-wrapper">\n    <a href="' + escapeExpression((helper = helpers.href || depth0 && depth0.href, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, depth0 && depth0.uri, options) : helperMissing.call(depth0, 'href', depth0 && depth0.uri, options))) + '" data-uri="';
        if (helper = helpers.uri) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.uri;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + '" title="';
        if (helper = helpers.name) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.name;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + '" data-log-click="media-image">\n      <svg class="mo-placeholder" viewBox="0 0 10 10" preserveAspectRatio="xMidYMid meet">\n        <text class="playlist-placeholder" x="5" y="9.8">&#xf135;</text>\n        <text class="album-placeholder" x="5" y="9.8">&#xf101;</text>\n        <text class="artist-placeholder" x="5" y="9.8">&#xf103;</text>\n        <text class="user-placeholder" x="5" y="9.8">&#xf15d;</text>\n      </svg>\n\n      <div class="mo-image" ';
        stack1 = helpers['if'].call(depth0, depth0 && depth0.imageUrl, {
          hash: {},
          inverse: self.noop,
          fn: self.program(1, program1, data),
          data: data
        });
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '>\n        <span class="mo-verified">\n          <span class="spoticon-check-16"></span>\n        </span>\n      </div>\n      <div class="mo-overlay"></div>\n    </a>\n  </div>\n  <div class="mo-info meta hide-subtitle" data-log-context="media-info">\n    <div class="mo-info-wrapper">\n      <a class="mo-title" title="';
        if (helper = helpers.headline) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.headline;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + '" href="' + escapeExpression((helper = helpers.href || depth0 && depth0.href, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, depth0 && depth0.uri, options) : helperMissing.call(depth0, 'href', depth0 && depth0.uri, options))) + '" data-uri="';
        if (helper = helpers.uri) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.uri;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + '" data-log-click="media-title">\n    <span class="mo-title-border">\n      ';
        if (helper = helpers.headline) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.headline;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + '\n      <span class="ellipsis">&nbsp;</span>\n    </span>\n      </a>\n\n      <div class="mo-meta">';
        if (helper = helpers.date) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.date;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + '</div>\n      <div class="media-link-hider"></div>\n    </div>\n  </div>\n</div>';
        return buffer;
      });
    Handlebars.registerPartial('./tmpl/articleobject.hbs', template);
    module.exports = template;
  },
  './tmpl/genreobject.hbs': function (require, module, exports, global) {
    var Handlebars = require('./node_modules/handlebars/dist/cjs/handlebars.runtime.js')['default'];
    var template = Handlebars.template(function (Handlebars, depth0, helpers, partials, data) {
        this.compilerInfo = [
          4,
          '>= 1.0.0'
        ];
        helpers = this.merge(helpers, Handlebars.helpers);
        data = data || {};
        var buffer = '', stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, functionType = 'function';
        buffer += '<a href="' + escapeExpression((helper = helpers.href || depth0 && depth0.href, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, depth0 && depth0.uri, options) : helperMissing.call(depth0, 'href', depth0 && depth0.uri, options))) + '">\n  <div class="container">\n    <div class="container-inner">\n      <div class="ctx">\n        <div class="image">\n          <div class="ctx">\n            <div style="background-color: ';
        if (helper = helpers.genreColor) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.genreColor;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + ';" class="backdrop-4">\n              <div class="ctx backdrop-fade highlight" style="opacity: 0.10;"></div>\n              <div class="ctx backdrop-fade" style="opacity: 0.70;"></div>\n            </div>\n            <div style="background-color: ';
        if (helper = helpers.genreColor) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.genreColor;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + ';" class="backdrop-3">\n              <div class="ctx backdrop-fade highlight" style="opacity: 0.10;"></div>\n              <div class="ctx backdrop-fade" style="opacity: 0.50;"></div>\n            </div>\n            <div style="background-color: ';
        if (helper = helpers.genreColor) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.genreColor;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + ';" class="backdrop-2">\n              <div class="ctx backdrop-fade highlight" style="opacity: 0.10;"></div>\n              <div class="ctx backdrop-fade" style="opacity: 0.30;"></div>\n            </div>\n            <div style="background-color: ';
        if (helper = helpers.genreColor) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.genreColor;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + ';" class="backdrop-1">\n              <div class="ctx backdrop-fade highlight" style="opacity: 0.10;"></div>\n              <div class="ctx backdrop-fade" style="opacity: 0.10;"></div>\n            </div>\n            <div style="background-image: url(\'';
        if (helper = helpers.imageUrl) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.imageUrl;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + '\');" class="backdrop-0">\n              <div class="ctx backdrop-fade hover-fade"></div>\n            </div>\n          </div>\n        </div>\n        <div class="title-box">\n          <div class="ctx">\n            <div style="display: table; width: 100%; height: 100%;">\n              <div style="display: table-cell; vertical-align: middle;">\n                ' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, depth0 && depth0.name, options) : helperMissing.call(depth0, 'loc', depth0 && depth0.name, options))) + '\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</a>';
        return buffer;
      });
    Handlebars.registerPartial('./tmpl/genreobject.hbs', template);
    module.exports = template;
  },
  './tmpl/errorPage.hbs': function (require, module, exports, global) {
    var Handlebars = require('./node_modules/handlebars/dist/cjs/handlebars.runtime.js')['default'];
    var template = Handlebars.template(function (Handlebars, depth0, helpers, partials, data) {
        this.compilerInfo = [
          4,
          '>= 1.0.0'
        ];
        helpers = this.merge(helpers, Handlebars.helpers);
        data = data || {};
        return '<div id="errorPage" style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; z-index: 9001; background-color: #121314;">\n  <div class="loader" >\n    <div class="throbber-large">\n      <div></div>\n    </div>\n  </div>\n</div>';
      });
    Handlebars.registerPartial('./tmpl/errorPage.hbs', template);
    module.exports = template;
  },
  './tmpl/mediaImage.hbs': function (require, module, exports, global) {
    var Handlebars = require('./node_modules/handlebars/dist/cjs/handlebars.runtime.js')['default'];
    var template = Handlebars.template(function (Handlebars, depth0, helpers, partials, data) {
        this.compilerInfo = [
          4,
          '>= 1.0.0'
        ];
        helpers = this.merge(helpers, Handlebars.helpers);
        data = data || {};
        var buffer = '', stack1, helper, options, functionType = 'function', escapeExpression = this.escapeExpression, self = this, helperMissing = helpers.helperMissing;
        function program1(depth0, data) {
          var buffer = '', stack1;
          buffer += '\n        ';
          stack1 = helpers['if'].call(depth0, depth0 && depth0.imageUrl, {
            hash: {},
            inverse: self.noop,
            fn: self.program(2, program2, data),
            data: data
          });
          if (stack1 || stack1 === 0) {
            buffer += stack1;
          }
          buffer += '\n      ';
          return buffer;
        }
        function program2(depth0, data) {
          var buffer = '', stack1, helper;
          buffer += '\n          <div class="mo-image-background-color">\n            <div class="mo-image-background" style="background-image: url(\'';
          if (helper = helpers.imageUrl) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.imageUrl;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '\')"></div>\n          </div>\n        ';
          return buffer;
        }
        function program4(depth0, data) {
          var buffer = '', stack1, helper;
          buffer += 'style="background-image: url(\'';
          if (helper = helpers.imageUrl) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.imageUrl;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '\')"';
          return buffer;
        }
        buffer += '<div class="media-object link media-object-' + escapeExpression((helper = helpers.type || depth0 && depth0.type, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, depth0 && depth0.uri, options) : helperMissing.call(depth0, 'type', depth0 && depth0.uri, options))) + '">\n  <div class="mo-wrapper">\n    <div class="mo-image-wrapper" style="background-color: #222326">\n      <svg class="mo-placeholder" viewBox="0 0 10 10" preserveAspectRatio="xMidYMid meet">\n        <text class="playlist-placeholder" x="5" y="9.8">&#xf135;</text>\n        <text class="album-placeholder" x="5" y="9.8">&#xf101;</text>\n        <text class="artist-placeholder" x="5" y="9.8">&#xf103;</text>\n        <text class="user-placeholder" x="5" y="9.8">&#xf15d;</text>\n      </svg>\n\n      ';
        stack1 = (helper = helpers.type || depth0 && depth0.type, options = {
          hash: {},
          inverse: self.noop,
          fn: self.program(1, program1, data),
          data: data
        }, helper ? helper.call(depth0, depth0 && depth0.uri, 'user', 'artist', options) : helperMissing.call(depth0, 'type', depth0 && depth0.uri, 'user', 'artist', options));
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n\n      <div class="mo-image" ';
        stack1 = helpers['if'].call(depth0, depth0 && depth0.imageUrl, {
          hash: {},
          inverse: self.noop,
          fn: self.program(4, program4, data),
          data: data
        });
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '>\n      <span class="mo-verified">\n        <span class="spoticon-check-16"></span>\n      </span>\n      </div>\n    </div>\n  </div>\n</div>';
        return buffer;
      });
    Handlebars.registerPartial('./tmpl/mediaImage.hbs', template);
    module.exports = template;
  },
  './tmpl/survey.hbs': function (require, module, exports, global) {
    var Handlebars = require('./node_modules/handlebars/dist/cjs/handlebars.runtime.js')['default'];
    var template = Handlebars.template(function (Handlebars, depth0, helpers, partials, data) {
        this.compilerInfo = [
          4,
          '>= 1.0.0'
        ];
        helpers = this.merge(helpers, Handlebars.helpers);
        data = data || {};
        var buffer = '', helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression;
        buffer += '<div class="ctx" tracking-context sub-event="survey">\n  <button type="button" class="btn btn-icon btn-small spoticon-x-16 close-icon"><span>' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, 'sClose', options) : helperMissing.call(depth0, 'loc', 'sClose', options))) + '</span></button>\n  <div class="absoluteFill">\n    <div class="ctx" style="overflow: hidden;">\n      <div class="survey-content">\n        <div class="step3">\n          <div class="step2">\n            <div class="step1">\n              <h3 class="start title">' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, 'sTitle', options) : helperMissing.call(depth0, 'loc', 'sTitle', options))) + '</h3>\n\n              <div id="q1" class="qa-container">\n                <div class="question">' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, 'sQ1Question', options) : helperMissing.call(depth0, 'loc', 'sQ1Question', options))) + '</div>\n                <div class="scale">\n                  <label>0<input class="scale-input radio-q1" type="radio" name="recommend" value="0"></label>\n                  <label>1<input class="scale-input radio-q1" type="radio" name="recommend" value="1"></label>\n                  <label>2<input class="scale-input radio-q1" type="radio" name="recommend" value="2"></label>\n                  <label>3<input class="scale-input radio-q1" type="radio" name="recommend" value="3"></label>\n                  <label>4<input class="scale-input radio-q1" type="radio" name="recommend" value="4"></label>\n                  <label>5<input class="scale-input radio-q1" type="radio" name="recommend" value="5"></label>\n                  <label>6<input class="scale-input radio-q1" type="radio" name="recommend" value="6"></label>\n                  <label>7<input class="scale-input radio-q1" type="radio" name="recommend" value="7"></label>\n                  <label>8<input class="scale-input radio-q1" type="radio" name="recommend" value="8"></label>\n                  <label>9<input class="scale-input radio-q1" type="radio" name="recommend" value="9"></label>\n                  <label class="last">10<input class="scale-input radio-q1" type="radio" name="recommend"\n                                               value="10"></label>\n\n                  <div class="description">\n                    <p class="negative">' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, 'sQ1Negative', options) : helperMissing.call(depth0, 'loc', 'sQ1Negative', options))) + '</p>\n\n                    <p class="positive">' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, 'sQ1Positive', options) : helperMissing.call(depth0, 'loc', 'sQ1Positive', options))) + '</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div id="q2" class="qa-container">\n              <div class="question">' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, 'sQ2Question', options) : helperMissing.call(depth0, 'loc', 'sQ2Question', options))) + '</div>\n              <textarea name="why" maxlength="400"></textarea>\n            </div>\n            <div id="q3" class="qa-container">\n              <div class="question">' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, 'sQ3Question', options) : helperMissing.call(depth0, 'loc', 'sQ3Question', options))) + '</div>\n              <div class="scale">\n                <label>0<input class="scale-input radio-q2" type="radio" name="satisfied" value="0"></label>\n                <label>1<input class="scale-input radio-q2" type="radio" name="satisfied" value="1"></label>\n                <label>2<input class="scale-input radio-q2" type="radio" name="satisfied" value="2"></label>\n                <label>3<input class="scale-input radio-q2" type="radio" name="satisfied" value="3"></label>\n                <label>4<input class="scale-input radio-q2" type="radio" name="satisfied" value="4"></label>\n                <label>5<input class="scale-input radio-q2" type="radio" name="satisfied" value="5"></label>\n                <label>6<input class="scale-input radio-q2" type="radio" name="satisfied" value="6"></label>\n                <label>7<input class="scale-input radio-q2" type="radio" name="satisfied" value="7"></label>\n                <label>8<input class="scale-input radio-q2" type="radio" name="satisfied" value="8"></label>\n                <label>9<input class="scale-input radio-q2" type="radio" name="satisfied" value="9"></label>\n                <label class="last">10<input class="scale-input radio-q2" type="radio" name="satisfied"\n                                             value="10"></label>\n\n                <div class="description">\n                  <p class="negative">' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, 'sQ3Negative', options) : helperMissing.call(depth0, 'loc', 'sQ3Negative', options))) + '</p>\n\n                  <p class="positive">' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, 'sQ3Positive', options) : helperMissing.call(depth0, 'loc', 'sQ3Positive', options))) + '</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <button type="button" class="btn btn-primary submit" id="submit-survey">' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, 'sSubmit', options) : helperMissing.call(depth0, 'loc', 'sSubmit', options))) + '</button>\n        </div>\n        <div id="thanks" class="thanks step4">\n          <h2 class="title">' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, 'sThanks', options) : helperMissing.call(depth0, 'loc', 'sThanks', options))) + '<h3 class="spotify-team">/ ' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, 'sTeam', options) : helperMissing.call(depth0, 'loc', 'sTeam', options))) + '</h3></h2>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>';
        return buffer;
      });
    Handlebars.registerPartial('./tmpl/survey.hbs', template);
    module.exports = template;
  },
  './node_modules/spotify-glue-cat/templates/error-and-offline.hbs': function (require, module, exports, global) {
    var Handlebars = require('./node_modules/handlebars/dist/cjs/handlebars.runtime.js')['default'];
    var template = Handlebars.template(function (Handlebars, depth0, helpers, partials, data) {
        this.compilerInfo = [
          4,
          '>= 1.0.0'
        ];
        helpers = this.merge(helpers, Handlebars.helpers);
        data = data || {};
        var buffer = '', stack1, helper, functionType = 'function', escapeExpression = this.escapeExpression, self = this;
        function program1(depth0, data) {
          var buffer = '', stack1, helper;
          buffer += '\n        <a class="button button-info" href="';
          if (helper = helpers.errorEscapeUrl) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.errorEscapeUrl;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '" data-log-click="error-escape">';
          if (helper = helpers.errorEscapeMessage) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.errorEscapeMessage;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '</a>\n      ';
          return buffer;
        }
        function program3(depth0, data) {
          var buffer = '', stack1, helper;
          buffer += '\n        <a class="button button-info" href="';
          if (helper = helpers.offlineEscapeUrl) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.offlineEscapeUrl;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '" data-log-click="offline-escape">';
          if (helper = helpers.offlineEscapeMessage) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.offlineEscapeMessage;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '</a>\n      ';
          return buffer;
        }
        function program5(depth0, data) {
          var buffer = '', stack1, helper;
          buffer += '\n  <div class="error-version text-muted">';
          if (helper = helpers.errorVersion) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.errorVersion;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '</div>\n  ';
          return buffer;
        }
        buffer += '<div class="error-and-offline" data-log-context="error-and-offline">\n  <div class="container">\n    <div class="error-content">\n      <h1 class="hdr-l">';
        if (helper = helpers.errorTitle) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.errorTitle;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + '</h1>\n      <div class="message">';
        if (helper = helpers.errorMessage) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.errorMessage;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '</div>\n      ';
        stack1 = helpers['if'].call(depth0, depth0 && depth0.errorEscapeMessage, {
          hash: {},
          inverse: self.noop,
          fn: self.program(1, program1, data),
          data: data
        });
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n    </div>\n    <div class="offline-content">\n      <h1 class="hdr-l">';
        if (helper = helpers.offlineTitle) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.offlineTitle;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + '</h1>\n      <div class="message">';
        if (helper = helpers.offlineMessage) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.offlineMessage;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '</div>\n      ';
        stack1 = helpers['if'].call(depth0, depth0 && depth0.offlineEscapeMessage, {
          hash: {},
          inverse: self.noop,
          fn: self.program(3, program3, data),
          data: data
        });
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n    </div>\n  </div>\n  ';
        stack1 = helpers['if'].call(depth0, depth0 && depth0.errorVersion, {
          hash: {},
          inverse: self.noop,
          fn: self.program(5, program5, data),
          data: data
        });
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n</div>\n';
        return buffer;
      });
    Handlebars.registerPartial('./node_modules/spotify-glue-cat/templates/error-and-offline.hbs', template);
    module.exports = template;
  },
  './node_modules/spotify-glue-cat/templates/media-object.hbs': function (require, module, exports, global) {
    var Handlebars = require('./node_modules/handlebars/dist/cjs/handlebars.runtime.js')['default'];
    var template = Handlebars.template(function (Handlebars, depth0, helpers, partials, data) {
        this.compilerInfo = [
          4,
          '>= 1.0.0'
        ];
        helpers = this.merge(helpers, Handlebars.helpers);
        partials = this.merge(partials, Handlebars.partials);
        data = data || {};
        var buffer = '', stack1, helper, options, functionType = 'function', escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing, self = this, blockHelperMissing = helpers.blockHelperMissing;
        function program1(depth0, data) {
          return 'data-context';
        }
        function program3(depth0, data) {
          var buffer = '', stack1, helper;
          buffer += '\n        <div data-drag-text="';
          if (helper = helpers.title) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.title;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '" data-uri="';
          if (helper = helpers.uri) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.uri;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '" data-log-click="media-image" draggable="true">\n      ';
          return buffer;
        }
        function program5(depth0, data) {
          var buffer = '', stack1, helper, options;
          buffer += '\n        <a data-drag-text="';
          if (helper = helpers.title) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.title;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '" href="' + escapeExpression((helper = helpers.href || depth0 && depth0.href, options = {
            hash: {},
            data: data
          }, helper ? helper.call(depth0, depth0 && depth0.uri, options) : helperMissing.call(depth0, 'href', depth0 && depth0.uri, options))) + '" data-uri="';
          if (helper = helpers.uri) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.uri;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '" data-log-click="media-image">\n      ';
          return buffer;
        }
        function program7(depth0, data) {
          return '\n        </div>\n      ';
        }
        function program9(depth0, data) {
          return '\n        </a>\n      ';
        }
        buffer += '<div class="media-object media-object-' + escapeExpression((helper = helpers.type || depth0 && depth0.type, options = {
          hash: {},
          data: data
        }, helper ? helper.call(depth0, depth0 && depth0.uri, options) : helperMissing.call(depth0, 'type', depth0 && depth0.uri, options))) + ' ';
        if (helper = helpers.modifiers) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.modifiers;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + '"\n  ';
        options = {
          hash: {},
          inverse: self.program(1, program1, data),
          fn: self.noop,
          data: data
        };
        if (helper = helpers.noContext) {
          stack1 = helper.call(depth0, options);
        } else {
          helper = depth0 && depth0.noContext;
          stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper;
        }
        if (!helpers.noContext) {
          stack1 = blockHelperMissing.call(depth0, stack1, {
            hash: {},
            inverse: self.program(1, program1, data),
            fn: self.noop,
            data: data
          });
        }
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += ' data-uri="';
        if (helper = helpers.uri) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.uri;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + '"\n  data-log-context="media-object" data-log-data=\'{ "name": "';
        if (helper = helpers.name) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.name;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + '", "target_uri": "';
        if (helper = helpers.uri) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.uri;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + '" }\' data-contextmenu>\n  <div class="mo-wrapper">\n    <div class="mo-image-wrapper">\n      ';
        stack1 = helpers['if'].call(depth0, depth0 && depth0.noLink, {
          hash: {},
          inverse: self.program(5, program5, data),
          fn: self.program(3, program3, data),
          data: data
        });
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n          ';
        stack1 = self.invokePartial(partials['./node_modules/spotify-glue-cat/templates/media/image.hbs'], './node_modules/spotify-glue-cat/templates/media/image.hbs', depth0, helpers, partials, data);
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n          <div class="mo-overlay"></div>\n      ';
        stack1 = helpers['if'].call(depth0, depth0 && depth0.noLink, {
          hash: {},
          inverse: self.program(9, program9, data),
          fn: self.program(7, program7, data),
          data: data
        });
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n      ';
        stack1 = self.invokePartial(partials['./node_modules/spotify-glue-cat/templates/media/controllers.hbs'], './node_modules/spotify-glue-cat/templates/media/controllers.hbs', depth0, helpers, partials, data);
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n    </div>\n    ';
        stack1 = self.invokePartial(partials['./node_modules/spotify-glue-cat/templates/media/info.hbs'], './node_modules/spotify-glue-cat/templates/media/info.hbs', depth0, helpers, partials, data);
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n  </div>\n</div>\n';
        return buffer;
      });
    Handlebars.registerPartial('./node_modules/spotify-glue-cat/templates/media-object.hbs', template);
    require('./node_modules/spotify-glue-cat/templates/media/image.hbs');
    require('./node_modules/spotify-glue-cat/templates/media/controllers.hbs');
    require('./node_modules/spotify-glue-cat/templates/media/info.hbs');
    module.exports = template;
  },
  './node_modules/spotify-live/util/ordered-set.js': function (require, module, exports, global) {
    'use strict';
    var prime = require('./node_modules/prime/index.js');
    var forEach = require('./node_modules/mout/array/forEach.js');
    var Range = require('./node_modules/spotify-range2/index.js');
    var diff = require('./node_modules/spotify-live/util/diff.js');
    var OrderedSet = prime({
        constructor: function (length) {
          if (!length)
            length = 0;
          this.index = [];
          this.keys = new Array(length);
          this.values = new Array(length);
          this.objectStorage = {};
        },
        get length() {
          return this.keys.length;
        },
        set length(value) {
          this.keys.length = value;
          this.values.length = value;
        },
        forEach: function (fn, ctx) {
          var index = this.index;
          main:
            for (var k = 0; k < index.length; k++) {
              var range = index[k];
              for (var i = range.start; i < range.end; i++) {
                if (fn.call(ctx, this.values[i], i, this.keys[i], this) === false)
                  break main;
              }
            }
          return this;
        },
        map: function (fn, ctx) {
          var values = new Array(this.length);
          this.forEach(function (value, index, key) {
            values[index] = fn.call(ctx, value, index, key, this);
          }, this);
          return values;
        },
        copy: function (set) {
          this.index = set.index.slice();
          this.keys = set.keys.slice();
          this.values = set.values.slice();
          var length = this.keys.length;
          this.objectStorage = {};
          for (var i = 0; i < length; i++) {
            this.objectStorage[this.keys[i]] = this.values[i];
          }
          return this;
        },
        clone: function () {
          return new OrderedSet().copy(this);
        },
        indexOf: function (key) {
          var index = -1;
          this.forEach(function (v, i, k) {
            if (key === k) {
              index = i;
              return false;
            }
          });
          return index;
        },
        indexOfMany: function (keys) {
          var indexedKeys = {};
          var found = 0;
          var output = [];
          for (var i = 0; i < keys.length; i++) {
            indexedKeys[keys[i]] = -1;
          }
          this.forEach(function (v, i, k) {
            if (k in indexedKeys) {
              indexedKeys[k] = i;
              found++;
              if (found >= keys.length) {
                return false;
              }
            }
          });
          for (i = 0; i < keys.length; i++) {
            output[i] = indexedKeys[keys[i]];
          }
          return output;
        },
        valueOf: function (key) {
          return this.objectStorage[key] || null;
        },
        hasKey: function (key) {
          return this.objectStorage.hasOwnProperty(key);
        },
        sort: function (fn) {
          var keys = this.keys;
          var values = this.values;
          var operations = diff(values.slice(), values.sort(fn));
          forEach(operations, function (op) {
            diff.move(keys, op.from, op.to, op.length);
          });
          return this;
        },
        move: function (from, to, length) {
          if (from > this.length)
            return [];
          if (from + length > this.length)
            length = from - this.length;
          if (to > this.length)
            to = this.length;
          if (from === to)
            return [];
          diff.move(this.keys, from, to, length);
          diff.move(this.values, from, to, length);
          return this;
        },
        insert: function (index, keys, values) {
          if (keys.length !== values.length)
            throw new Error('length mismatch');
          var range = new Range(index, index + keys.length);
          this.index = range.insert(this.index);
          diff.insert(this.keys, index, keys);
          diff.insert(this.values, index, values);
          for (var i = 0, length = keys.length; i < length; i++) {
            this.objectStorage[keys[i]] = values[i];
          }
          return this;
        },
        remove: function (index, length) {
          if (index >= this.length)
            return [];
          if (index + length > this.length)
            length = this.length;
          var range = new Range(index, index + length);
          this.index = range.extract(this.index);
          for (var i = 0; i < length; i++) {
            delete this.objectStorage[this.keys[i + index]];
          }
          diff.remove(this.keys, index, length);
          diff.remove(this.values, index, length);
          return this;
        },
        diff: function (target) {
          var operations = diff.annotate(this.keys, target.keys);
          forEach(operations[0], function (op) {
            op.keys = op.values;
            op.values = this.values.slice(op.index, op.index + op.length);
          }, this);
          forEach(operations[1], function (op) {
            op.keys = op.values;
            op.values = this.values.slice(op.from, op.from + op.length);
          }, this);
          forEach(operations[2], function (op) {
            op.keys = op.values;
            op.values = target.values.slice(op.index, op.index + op.length);
          });
          return diff.offset.apply(diff, operations);
        },
        patch: function (operations) {
          forEach(operations, function (op) {
            switch (op.type) {
            case 'move':
              this.move(op.from, op.to, op.length);
              break;
            case 'remove':
              this.remove(op.index, op.length);
              break;
            case 'insert':
              this.insert(op.index, op.keys, op.values);
              break;
            }
          }, this);
          return this;
        }
      });
    module.exports = OrderedSet;
  },
  './node_modules/spotify-live/util/throttle.js': function (require, module, exports, global) {
    'use strict';
    var defer = require('./node_modules/prime/defer.js');
    var isInteger = function (n) {
      return typeof n === 'number' && n % 1 === 0;
    };
    var slice = Array.prototype.slice;
    var _throttle = function (fn, method, context) {
      var queued, args, cancel;
      return function () {
        args = arguments;
        if (!queued) {
          queued = true;
          cancel = method(function (time) {
            queued = false;
            fn.apply(context, slice.call(args).concat(time));
          });
        }
        return cancel;
      };
    };
    var throttle = function (callback, argument, context) {
      if (isInteger(argument))
        return throttle.timeout(callback, argument, context);
      else
        return throttle.immediate(callback, argument);
    };
    throttle.timeout = function (callback, ms, context) {
      return _throttle(callback, function (run) {
        return defer.timeout(run, ms, context);
      }, context);
    };
    throttle.frame = function (callback, context) {
      return _throttle(callback, function (run) {
        return defer.frame(run, context);
      }, context);
    };
    throttle.immediate = function (callback, context) {
      return _throttle(callback, function (run) {
        return defer.immediate(run, context);
      }, context);
    };
    module.exports = throttle;
  },
  './node_modules/underscore/underscore.js': function (require, module, exports, global) {
    (function () {
      var root = this;
      var previousUnderscore = root._;
      var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
      var push = ArrayProto.push, slice = ArrayProto.slice, concat = ArrayProto.concat, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
      var nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind;
      var _ = function (obj) {
        if (obj instanceof _)
          return obj;
        if (!(this instanceof _))
          return new _(obj);
        this._wrapped = obj;
      };
      if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
          exports = module.exports = _;
        }
        exports._ = _;
      } else {
        root._ = _;
      }
      _.VERSION = '1.7.0';
      var createCallback = function (func, context, argCount) {
        if (context === void 0)
          return func;
        switch (argCount == null ? 3 : argCount) {
        case 1:
          return function (value) {
            return func.call(context, value);
          };
        case 2:
          return function (value, other) {
            return func.call(context, value, other);
          };
        case 3:
          return function (value, index, collection) {
            return func.call(context, value, index, collection);
          };
        case 4:
          return function (accumulator, value, index, collection) {
            return func.call(context, accumulator, value, index, collection);
          };
        }
        return function () {
          return func.apply(context, arguments);
        };
      };
      _.iteratee = function (value, context, argCount) {
        if (value == null)
          return _.identity;
        if (_.isFunction(value))
          return createCallback(value, context, argCount);
        if (_.isObject(value))
          return _.matches(value);
        return _.property(value);
      };
      _.each = _.forEach = function (obj, iteratee, context) {
        if (obj == null)
          return obj;
        iteratee = createCallback(iteratee, context);
        var i, length = obj.length;
        if (length === +length) {
          for (i = 0; i < length; i++) {
            iteratee(obj[i], i, obj);
          }
        } else {
          var keys = _.keys(obj);
          for (i = 0, length = keys.length; i < length; i++) {
            iteratee(obj[keys[i]], keys[i], obj);
          }
        }
        return obj;
      };
      _.map = _.collect = function (obj, iteratee, context) {
        if (obj == null)
          return [];
        iteratee = _.iteratee(iteratee, context);
        var keys = obj.length !== +obj.length && _.keys(obj), length = (keys || obj).length, results = Array(length), currentKey;
        for (var index = 0; index < length; index++) {
          currentKey = keys ? keys[index] : index;
          results[index] = iteratee(obj[currentKey], currentKey, obj);
        }
        return results;
      };
      var reduceError = 'Reduce of empty array with no initial value';
      _.reduce = _.foldl = _.inject = function (obj, iteratee, memo, context) {
        if (obj == null)
          obj = [];
        iteratee = createCallback(iteratee, context, 4);
        var keys = obj.length !== +obj.length && _.keys(obj), length = (keys || obj).length, index = 0, currentKey;
        if (arguments.length < 3) {
          if (!length)
            throw new TypeError(reduceError);
          memo = obj[keys ? keys[index++] : index++];
        }
        for (; index < length; index++) {
          currentKey = keys ? keys[index] : index;
          memo = iteratee(memo, obj[currentKey], currentKey, obj);
        }
        return memo;
      };
      _.reduceRight = _.foldr = function (obj, iteratee, memo, context) {
        if (obj == null)
          obj = [];
        iteratee = createCallback(iteratee, context, 4);
        var keys = obj.length !== +obj.length && _.keys(obj), index = (keys || obj).length, currentKey;
        if (arguments.length < 3) {
          if (!index)
            throw new TypeError(reduceError);
          memo = obj[keys ? keys[--index] : --index];
        }
        while (index--) {
          currentKey = keys ? keys[index] : index;
          memo = iteratee(memo, obj[currentKey], currentKey, obj);
        }
        return memo;
      };
      _.find = _.detect = function (obj, predicate, context) {
        var result;
        predicate = _.iteratee(predicate, context);
        _.some(obj, function (value, index, list) {
          if (predicate(value, index, list)) {
            result = value;
            return true;
          }
        });
        return result;
      };
      _.filter = _.select = function (obj, predicate, context) {
        var results = [];
        if (obj == null)
          return results;
        predicate = _.iteratee(predicate, context);
        _.each(obj, function (value, index, list) {
          if (predicate(value, index, list))
            results.push(value);
        });
        return results;
      };
      _.reject = function (obj, predicate, context) {
        return _.filter(obj, _.negate(_.iteratee(predicate)), context);
      };
      _.every = _.all = function (obj, predicate, context) {
        if (obj == null)
          return true;
        predicate = _.iteratee(predicate, context);
        var keys = obj.length !== +obj.length && _.keys(obj), length = (keys || obj).length, index, currentKey;
        for (index = 0; index < length; index++) {
          currentKey = keys ? keys[index] : index;
          if (!predicate(obj[currentKey], currentKey, obj))
            return false;
        }
        return true;
      };
      _.some = _.any = function (obj, predicate, context) {
        if (obj == null)
          return false;
        predicate = _.iteratee(predicate, context);
        var keys = obj.length !== +obj.length && _.keys(obj), length = (keys || obj).length, index, currentKey;
        for (index = 0; index < length; index++) {
          currentKey = keys ? keys[index] : index;
          if (predicate(obj[currentKey], currentKey, obj))
            return true;
        }
        return false;
      };
      _.contains = _.include = function (obj, target) {
        if (obj == null)
          return false;
        if (obj.length !== +obj.length)
          obj = _.values(obj);
        return _.indexOf(obj, target) >= 0;
      };
      _.invoke = function (obj, method) {
        var args = slice.call(arguments, 2);
        var isFunc = _.isFunction(method);
        return _.map(obj, function (value) {
          return (isFunc ? method : value[method]).apply(value, args);
        });
      };
      _.pluck = function (obj, key) {
        return _.map(obj, _.property(key));
      };
      _.where = function (obj, attrs) {
        return _.filter(obj, _.matches(attrs));
      };
      _.findWhere = function (obj, attrs) {
        return _.find(obj, _.matches(attrs));
      };
      _.max = function (obj, iteratee, context) {
        var result = -Infinity, lastComputed = -Infinity, value, computed;
        if (iteratee == null && obj != null) {
          obj = obj.length === +obj.length ? obj : _.values(obj);
          for (var i = 0, length = obj.length; i < length; i++) {
            value = obj[i];
            if (value > result) {
              result = value;
            }
          }
        } else {
          iteratee = _.iteratee(iteratee, context);
          _.each(obj, function (value, index, list) {
            computed = iteratee(value, index, list);
            if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
              result = value;
              lastComputed = computed;
            }
          });
        }
        return result;
      };
      _.min = function (obj, iteratee, context) {
        var result = Infinity, lastComputed = Infinity, value, computed;
        if (iteratee == null && obj != null) {
          obj = obj.length === +obj.length ? obj : _.values(obj);
          for (var i = 0, length = obj.length; i < length; i++) {
            value = obj[i];
            if (value < result) {
              result = value;
            }
          }
        } else {
          iteratee = _.iteratee(iteratee, context);
          _.each(obj, function (value, index, list) {
            computed = iteratee(value, index, list);
            if (computed < lastComputed || computed === Infinity && result === Infinity) {
              result = value;
              lastComputed = computed;
            }
          });
        }
        return result;
      };
      _.shuffle = function (obj) {
        var set = obj && obj.length === +obj.length ? obj : _.values(obj);
        var length = set.length;
        var shuffled = Array(length);
        for (var index = 0, rand; index < length; index++) {
          rand = _.random(0, index);
          if (rand !== index)
            shuffled[index] = shuffled[rand];
          shuffled[rand] = set[index];
        }
        return shuffled;
      };
      _.sample = function (obj, n, guard) {
        if (n == null || guard) {
          if (obj.length !== +obj.length)
            obj = _.values(obj);
          return obj[_.random(obj.length - 1)];
        }
        return _.shuffle(obj).slice(0, Math.max(0, n));
      };
      _.sortBy = function (obj, iteratee, context) {
        iteratee = _.iteratee(iteratee, context);
        return _.pluck(_.map(obj, function (value, index, list) {
          return {
            value: value,
            index: index,
            criteria: iteratee(value, index, list)
          };
        }).sort(function (left, right) {
          var a = left.criteria;
          var b = right.criteria;
          if (a !== b) {
            if (a > b || a === void 0)
              return 1;
            if (a < b || b === void 0)
              return -1;
          }
          return left.index - right.index;
        }), 'value');
      };
      var group = function (behavior) {
        return function (obj, iteratee, context) {
          var result = {};
          iteratee = _.iteratee(iteratee, context);
          _.each(obj, function (value, index) {
            var key = iteratee(value, index, obj);
            behavior(result, value, key);
          });
          return result;
        };
      };
      _.groupBy = group(function (result, value, key) {
        if (_.has(result, key))
          result[key].push(value);
        else
          result[key] = [value];
      });
      _.indexBy = group(function (result, value, key) {
        result[key] = value;
      });
      _.countBy = group(function (result, value, key) {
        if (_.has(result, key))
          result[key]++;
        else
          result[key] = 1;
      });
      _.sortedIndex = function (array, obj, iteratee, context) {
        iteratee = _.iteratee(iteratee, context, 1);
        var value = iteratee(obj);
        var low = 0, high = array.length;
        while (low < high) {
          var mid = low + high >>> 1;
          if (iteratee(array[mid]) < value)
            low = mid + 1;
          else
            high = mid;
        }
        return low;
      };
      _.toArray = function (obj) {
        if (!obj)
          return [];
        if (_.isArray(obj))
          return slice.call(obj);
        if (obj.length === +obj.length)
          return _.map(obj, _.identity);
        return _.values(obj);
      };
      _.size = function (obj) {
        if (obj == null)
          return 0;
        return obj.length === +obj.length ? obj.length : _.keys(obj).length;
      };
      _.partition = function (obj, predicate, context) {
        predicate = _.iteratee(predicate, context);
        var pass = [], fail = [];
        _.each(obj, function (value, key, obj) {
          (predicate(value, key, obj) ? pass : fail).push(value);
        });
        return [
          pass,
          fail
        ];
      };
      _.first = _.head = _.take = function (array, n, guard) {
        if (array == null)
          return void 0;
        if (n == null || guard)
          return array[0];
        if (n < 0)
          return [];
        return slice.call(array, 0, n);
      };
      _.initial = function (array, n, guard) {
        return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
      };
      _.last = function (array, n, guard) {
        if (array == null)
          return void 0;
        if (n == null || guard)
          return array[array.length - 1];
        return slice.call(array, Math.max(array.length - n, 0));
      };
      _.rest = _.tail = _.drop = function (array, n, guard) {
        return slice.call(array, n == null || guard ? 1 : n);
      };
      _.compact = function (array) {
        return _.filter(array, _.identity);
      };
      var flatten = function (input, shallow, strict, output) {
        if (shallow && _.every(input, _.isArray)) {
          return concat.apply(output, input);
        }
        for (var i = 0, length = input.length; i < length; i++) {
          var value = input[i];
          if (!_.isArray(value) && !_.isArguments(value)) {
            if (!strict)
              output.push(value);
          } else if (shallow) {
            push.apply(output, value);
          } else {
            flatten(value, shallow, strict, output);
          }
        }
        return output;
      };
      _.flatten = function (array, shallow) {
        return flatten(array, shallow, false, []);
      };
      _.without = function (array) {
        return _.difference(array, slice.call(arguments, 1));
      };
      _.uniq = _.unique = function (array, isSorted, iteratee, context) {
        if (array == null)
          return [];
        if (!_.isBoolean(isSorted)) {
          context = iteratee;
          iteratee = isSorted;
          isSorted = false;
        }
        if (iteratee != null)
          iteratee = _.iteratee(iteratee, context);
        var result = [];
        var seen = [];
        for (var i = 0, length = array.length; i < length; i++) {
          var value = array[i];
          if (isSorted) {
            if (!i || seen !== value)
              result.push(value);
            seen = value;
          } else if (iteratee) {
            var computed = iteratee(value, i, array);
            if (_.indexOf(seen, computed) < 0) {
              seen.push(computed);
              result.push(value);
            }
          } else if (_.indexOf(result, value) < 0) {
            result.push(value);
          }
        }
        return result;
      };
      _.union = function () {
        return _.uniq(flatten(arguments, true, true, []));
      };
      _.intersection = function (array) {
        if (array == null)
          return [];
        var result = [];
        var argsLength = arguments.length;
        for (var i = 0, length = array.length; i < length; i++) {
          var item = array[i];
          if (_.contains(result, item))
            continue;
          for (var j = 1; j < argsLength; j++) {
            if (!_.contains(arguments[j], item))
              break;
          }
          if (j === argsLength)
            result.push(item);
        }
        return result;
      };
      _.difference = function (array) {
        var rest = flatten(slice.call(arguments, 1), true, true, []);
        return _.filter(array, function (value) {
          return !_.contains(rest, value);
        });
      };
      _.zip = function (array) {
        if (array == null)
          return [];
        var length = _.max(arguments, 'length').length;
        var results = Array(length);
        for (var i = 0; i < length; i++) {
          results[i] = _.pluck(arguments, i);
        }
        return results;
      };
      _.object = function (list, values) {
        if (list == null)
          return {};
        var result = {};
        for (var i = 0, length = list.length; i < length; i++) {
          if (values) {
            result[list[i]] = values[i];
          } else {
            result[list[i][0]] = list[i][1];
          }
        }
        return result;
      };
      _.indexOf = function (array, item, isSorted) {
        if (array == null)
          return -1;
        var i = 0, length = array.length;
        if (isSorted) {
          if (typeof isSorted == 'number') {
            i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
          } else {
            i = _.sortedIndex(array, item);
            return array[i] === item ? i : -1;
          }
        }
        for (; i < length; i++)
          if (array[i] === item)
            return i;
        return -1;
      };
      _.lastIndexOf = function (array, item, from) {
        if (array == null)
          return -1;
        var idx = array.length;
        if (typeof from == 'number') {
          idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);
        }
        while (--idx >= 0)
          if (array[idx] === item)
            return idx;
        return -1;
      };
      _.range = function (start, stop, step) {
        if (arguments.length <= 1) {
          stop = start || 0;
          start = 0;
        }
        step = step || 1;
        var length = Math.max(Math.ceil((stop - start) / step), 0);
        var range = Array(length);
        for (var idx = 0; idx < length; idx++, start += step) {
          range[idx] = start;
        }
        return range;
      };
      var Ctor = function () {
      };
      _.bind = function (func, context) {
        var args, bound;
        if (nativeBind && func.bind === nativeBind)
          return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func))
          throw new TypeError('Bind must be called on a function');
        args = slice.call(arguments, 2);
        bound = function () {
          if (!(this instanceof bound))
            return func.apply(context, args.concat(slice.call(arguments)));
          Ctor.prototype = func.prototype;
          var self = new Ctor();
          Ctor.prototype = null;
          var result = func.apply(self, args.concat(slice.call(arguments)));
          if (_.isObject(result))
            return result;
          return self;
        };
        return bound;
      };
      _.partial = function (func) {
        var boundArgs = slice.call(arguments, 1);
        return function () {
          var position = 0;
          var args = boundArgs.slice();
          for (var i = 0, length = args.length; i < length; i++) {
            if (args[i] === _)
              args[i] = arguments[position++];
          }
          while (position < arguments.length)
            args.push(arguments[position++]);
          return func.apply(this, args);
        };
      };
      _.bindAll = function (obj) {
        var i, length = arguments.length, key;
        if (length <= 1)
          throw new Error('bindAll must be passed function names');
        for (i = 1; i < length; i++) {
          key = arguments[i];
          obj[key] = _.bind(obj[key], obj);
        }
        return obj;
      };
      _.memoize = function (func, hasher) {
        var memoize = function (key) {
          var cache = memoize.cache;
          var address = hasher ? hasher.apply(this, arguments) : key;
          if (!_.has(cache, address))
            cache[address] = func.apply(this, arguments);
          return cache[address];
        };
        memoize.cache = {};
        return memoize;
      };
      _.delay = function (func, wait) {
        var args = slice.call(arguments, 2);
        return setTimeout(function () {
          return func.apply(null, args);
        }, wait);
      };
      _.defer = function (func) {
        return _.delay.apply(_, [
          func,
          1
        ].concat(slice.call(arguments, 1)));
      };
      _.throttle = function (func, wait, options) {
        var context, args, result;
        var timeout = null;
        var previous = 0;
        if (!options)
          options = {};
        var later = function () {
          previous = options.leading === false ? 0 : _.now();
          timeout = null;
          result = func.apply(context, args);
          if (!timeout)
            context = args = null;
        };
        return function () {
          var now = _.now();
          if (!previous && options.leading === false)
            previous = now;
          var remaining = wait - (now - previous);
          context = this;
          args = arguments;
          if (remaining <= 0 || remaining > wait) {
            clearTimeout(timeout);
            timeout = null;
            previous = now;
            result = func.apply(context, args);
            if (!timeout)
              context = args = null;
          } else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
          }
          return result;
        };
      };
      _.debounce = function (func, wait, immediate) {
        var timeout, args, context, timestamp, result;
        var later = function () {
          var last = _.now() - timestamp;
          if (last < wait && last > 0) {
            timeout = setTimeout(later, wait - last);
          } else {
            timeout = null;
            if (!immediate) {
              result = func.apply(context, args);
              if (!timeout)
                context = args = null;
            }
          }
        };
        return function () {
          context = this;
          args = arguments;
          timestamp = _.now();
          var callNow = immediate && !timeout;
          if (!timeout)
            timeout = setTimeout(later, wait);
          if (callNow) {
            result = func.apply(context, args);
            context = args = null;
          }
          return result;
        };
      };
      _.wrap = function (func, wrapper) {
        return _.partial(wrapper, func);
      };
      _.negate = function (predicate) {
        return function () {
          return !predicate.apply(this, arguments);
        };
      };
      _.compose = function () {
        var args = arguments;
        var start = args.length - 1;
        return function () {
          var i = start;
          var result = args[start].apply(this, arguments);
          while (i--)
            result = args[i].call(this, result);
          return result;
        };
      };
      _.after = function (times, func) {
        return function () {
          if (--times < 1) {
            return func.apply(this, arguments);
          }
        };
      };
      _.before = function (times, func) {
        var memo;
        return function () {
          if (--times > 0) {
            memo = func.apply(this, arguments);
          } else {
            func = null;
          }
          return memo;
        };
      };
      _.once = _.partial(_.before, 2);
      _.keys = function (obj) {
        if (!_.isObject(obj))
          return [];
        if (nativeKeys)
          return nativeKeys(obj);
        var keys = [];
        for (var key in obj)
          if (_.has(obj, key))
            keys.push(key);
        return keys;
      };
      _.values = function (obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var values = Array(length);
        for (var i = 0; i < length; i++) {
          values[i] = obj[keys[i]];
        }
        return values;
      };
      _.pairs = function (obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var pairs = Array(length);
        for (var i = 0; i < length; i++) {
          pairs[i] = [
            keys[i],
            obj[keys[i]]
          ];
        }
        return pairs;
      };
      _.invert = function (obj) {
        var result = {};
        var keys = _.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) {
          result[obj[keys[i]]] = keys[i];
        }
        return result;
      };
      _.functions = _.methods = function (obj) {
        var names = [];
        for (var key in obj) {
          if (_.isFunction(obj[key]))
            names.push(key);
        }
        return names.sort();
      };
      _.extend = function (obj) {
        if (!_.isObject(obj))
          return obj;
        var source, prop;
        for (var i = 1, length = arguments.length; i < length; i++) {
          source = arguments[i];
          for (prop in source) {
            if (hasOwnProperty.call(source, prop)) {
              obj[prop] = source[prop];
            }
          }
        }
        return obj;
      };
      _.pick = function (obj, iteratee, context) {
        var result = {}, key;
        if (obj == null)
          return result;
        if (_.isFunction(iteratee)) {
          iteratee = createCallback(iteratee, context);
          for (key in obj) {
            var value = obj[key];
            if (iteratee(value, key, obj))
              result[key] = value;
          }
        } else {
          var keys = concat.apply([], slice.call(arguments, 1));
          obj = new Object(obj);
          for (var i = 0, length = keys.length; i < length; i++) {
            key = keys[i];
            if (key in obj)
              result[key] = obj[key];
          }
        }
        return result;
      };
      _.omit = function (obj, iteratee, context) {
        if (_.isFunction(iteratee)) {
          iteratee = _.negate(iteratee);
        } else {
          var keys = _.map(concat.apply([], slice.call(arguments, 1)), String);
          iteratee = function (value, key) {
            return !_.contains(keys, key);
          };
        }
        return _.pick(obj, iteratee, context);
      };
      _.defaults = function (obj) {
        if (!_.isObject(obj))
          return obj;
        for (var i = 1, length = arguments.length; i < length; i++) {
          var source = arguments[i];
          for (var prop in source) {
            if (obj[prop] === void 0)
              obj[prop] = source[prop];
          }
        }
        return obj;
      };
      _.clone = function (obj) {
        if (!_.isObject(obj))
          return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
      };
      _.tap = function (obj, interceptor) {
        interceptor(obj);
        return obj;
      };
      var eq = function (a, b, aStack, bStack) {
        if (a === b)
          return a !== 0 || 1 / a === 1 / b;
        if (a == null || b == null)
          return a === b;
        if (a instanceof _)
          a = a._wrapped;
        if (b instanceof _)
          b = b._wrapped;
        var className = toString.call(a);
        if (className !== toString.call(b))
          return false;
        switch (className) {
        case '[object RegExp]':
        case '[object String]':
          return '' + a === '' + b;
        case '[object Number]':
          if (+a !== +a)
            return +b !== +b;
          return +a === 0 ? 1 / +a === 1 / b : +a === +b;
        case '[object Date]':
        case '[object Boolean]':
          return +a === +b;
        }
        if (typeof a != 'object' || typeof b != 'object')
          return false;
        var length = aStack.length;
        while (length--) {
          if (aStack[length] === a)
            return bStack[length] === b;
        }
        var aCtor = a.constructor, bCtor = b.constructor;
        if (aCtor !== bCtor && 'constructor' in a && 'constructor' in b && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor)) {
          return false;
        }
        aStack.push(a);
        bStack.push(b);
        var size, result;
        if (className === '[object Array]') {
          size = a.length;
          result = size === b.length;
          if (result) {
            while (size--) {
              if (!(result = eq(a[size], b[size], aStack, bStack)))
                break;
            }
          }
        } else {
          var keys = _.keys(a), key;
          size = keys.length;
          result = _.keys(b).length === size;
          if (result) {
            while (size--) {
              key = keys[size];
              if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack)))
                break;
            }
          }
        }
        aStack.pop();
        bStack.pop();
        return result;
      };
      _.isEqual = function (a, b) {
        return eq(a, b, [], []);
      };
      _.isEmpty = function (obj) {
        if (obj == null)
          return true;
        if (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))
          return obj.length === 0;
        for (var key in obj)
          if (_.has(obj, key))
            return false;
        return true;
      };
      _.isElement = function (obj) {
        return !!(obj && obj.nodeType === 1);
      };
      _.isArray = nativeIsArray || function (obj) {
        return toString.call(obj) === '[object Array]';
      };
      _.isObject = function (obj) {
        var type = typeof obj;
        return type === 'function' || type === 'object' && !!obj;
      };
      _.each([
        'Arguments',
        'Function',
        'String',
        'Number',
        'Date',
        'RegExp'
      ], function (name) {
        _['is' + name] = function (obj) {
          return toString.call(obj) === '[object ' + name + ']';
        };
      });
      if (!_.isArguments(arguments)) {
        _.isArguments = function (obj) {
          return _.has(obj, 'callee');
        };
      }
      if (typeof /./ !== 'function') {
        _.isFunction = function (obj) {
          return typeof obj == 'function' || false;
        };
      }
      _.isFinite = function (obj) {
        return isFinite(obj) && !isNaN(parseFloat(obj));
      };
      _.isNaN = function (obj) {
        return _.isNumber(obj) && obj !== +obj;
      };
      _.isBoolean = function (obj) {
        return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
      };
      _.isNull = function (obj) {
        return obj === null;
      };
      _.isUndefined = function (obj) {
        return obj === void 0;
      };
      _.has = function (obj, key) {
        return obj != null && hasOwnProperty.call(obj, key);
      };
      _.noConflict = function () {
        root._ = previousUnderscore;
        return this;
      };
      _.identity = function (value) {
        return value;
      };
      _.constant = function (value) {
        return function () {
          return value;
        };
      };
      _.noop = function () {
      };
      _.property = function (key) {
        return function (obj) {
          return obj[key];
        };
      };
      _.matches = function (attrs) {
        var pairs = _.pairs(attrs), length = pairs.length;
        return function (obj) {
          if (obj == null)
            return !length;
          obj = new Object(obj);
          for (var i = 0; i < length; i++) {
            var pair = pairs[i], key = pair[0];
            if (pair[1] !== obj[key] || !(key in obj))
              return false;
          }
          return true;
        };
      };
      _.times = function (n, iteratee, context) {
        var accum = Array(Math.max(0, n));
        iteratee = createCallback(iteratee, context, 1);
        for (var i = 0; i < n; i++)
          accum[i] = iteratee(i);
        return accum;
      };
      _.random = function (min, max) {
        if (max == null) {
          max = min;
          min = 0;
        }
        return min + Math.floor(Math.random() * (max - min + 1));
      };
      _.now = Date.now || function () {
        return new Date().getTime();
      };
      var escapeMap = {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          '\'': '&#x27;',
          '`': '&#x60;'
        };
      var unescapeMap = _.invert(escapeMap);
      var createEscaper = function (map) {
        var escaper = function (match) {
          return map[match];
        };
        var source = '(?:' + _.keys(map).join('|') + ')';
        var testRegexp = RegExp(source);
        var replaceRegexp = RegExp(source, 'g');
        return function (string) {
          string = string == null ? '' : '' + string;
          return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
        };
      };
      _.escape = createEscaper(escapeMap);
      _.unescape = createEscaper(unescapeMap);
      _.result = function (object, property) {
        if (object == null)
          return void 0;
        var value = object[property];
        return _.isFunction(value) ? object[property]() : value;
      };
      var idCounter = 0;
      _.uniqueId = function (prefix) {
        var id = ++idCounter + '';
        return prefix ? prefix + id : id;
      };
      _.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
      };
      var noMatch = /(.)^/;
      var escapes = {
          '\'': '\'',
          '\\': '\\',
          '\r': 'r',
          '\n': 'n',
          '\u2028': 'u2028',
          '\u2029': 'u2029'
        };
      var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
      var escapeChar = function (match) {
        return '\\' + escapes[match];
      };
      _.template = function (text, settings, oldSettings) {
        if (!settings && oldSettings)
          settings = oldSettings;
        settings = _.defaults({}, settings, _.templateSettings);
        var matcher = RegExp([
            (settings.escape || noMatch).source,
            (settings.interpolate || noMatch).source,
            (settings.evaluate || noMatch).source
          ].join('|') + '|$', 'g');
        var index = 0;
        var source = '__p+=\'';
        text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
          source += text.slice(index, offset).replace(escaper, escapeChar);
          index = offset + match.length;
          if (escape) {
            source += '\'+\n((__t=(' + escape + '))==null?\'\':_.escape(__t))+\n\'';
          } else if (interpolate) {
            source += '\'+\n((__t=(' + interpolate + '))==null?\'\':__t)+\n\'';
          } else if (evaluate) {
            source += '\';\n' + evaluate + '\n__p+=\'';
          }
          return match;
        });
        source += '\';\n';
        if (!settings.variable)
          source = 'with(obj||{}){\n' + source + '}\n';
        source = 'var __t,__p=\'\',__j=Array.prototype.join,' + 'print=function(){__p+=__j.call(arguments,\'\');};\n' + source + 'return __p;\n';
        try {
          var render = new Function(settings.variable || 'obj', '_', source);
        } catch (e) {
          e.source = source;
          throw e;
        }
        var template = function (data) {
          return render.call(this, data, _);
        };
        var argument = settings.variable || 'obj';
        template.source = 'function(' + argument + '){\n' + source + '}';
        return template;
      };
      _.chain = function (obj) {
        var instance = _(obj);
        instance._chain = true;
        return instance;
      };
      var result = function (obj) {
        return this._chain ? _(obj).chain() : obj;
      };
      _.mixin = function (obj) {
        _.each(_.functions(obj), function (name) {
          var func = _[name] = obj[name];
          _.prototype[name] = function () {
            var args = [this._wrapped];
            push.apply(args, arguments);
            return result.call(this, func.apply(_, args));
          };
        });
      };
      _.mixin(_);
      _.each([
        'pop',
        'push',
        'reverse',
        'shift',
        'sort',
        'splice',
        'unshift'
      ], function (name) {
        var method = ArrayProto[name];
        _.prototype[name] = function () {
          var obj = this._wrapped;
          method.apply(obj, arguments);
          if ((name === 'shift' || name === 'splice') && obj.length === 0)
            delete obj[0];
          return result.call(this, obj);
        };
      });
      _.each([
        'concat',
        'join',
        'slice'
      ], function (name) {
        var method = ArrayProto[name];
        _.prototype[name] = function () {
          return result.call(this, method.apply(this._wrapped, arguments));
        };
      });
      _.prototype.value = function () {
        return this._wrapped;
      };
      if (typeof define === 'function' && define.amd) {
        define('underscore', [], function () {
          return _;
        });
      }
    }.call(this));
  },
  './node_modules/spotify-numeral/index.js': function (require, module, exports, global) {
    var numeral = require('./node_modules/spotify-numeral/node_modules/numeral/numeral.js');
    var currentLanguage = require.loc('./node_modules/spotify-current-locale/@loc.js');
    switch (currentLanguage) {
    case 'arb':
      break;
    case 'bn':
      break;
    case 'de':
      numeral.language('de', require('./node_modules/spotify-numeral/node_modules/numeral/languages/de.js'));
      numeral.language('de');
      break;
    case 'el':
      break;
    case 'en':
      break;
    case 'es-419':
      numeral.language('es-ES', require('./node_modules/spotify-numeral/node_modules/numeral/languages/es-ES.js'));
      numeral.language('es-ES');
      break;
    case 'es':
      numeral.language('es-ES', require('./node_modules/spotify-numeral/node_modules/numeral/languages/es-ES.js'));
      numeral.language('es-ES');
      break;
    case 'fi':
      numeral.language('fi', require('./node_modules/spotify-numeral/node_modules/numeral/languages/fi.js'));
      numeral.language('fi');
      break;
    case 'fr':
      numeral.language('fr', require('./node_modules/spotify-numeral/node_modules/numeral/languages/fr.js'));
      numeral.language('fr');
      break;
    case 'hi':
      break;
    case 'hu':
      numeral.language('hu', require('./node_modules/spotify-numeral/node_modules/numeral/languages/hu.js'));
      numeral.language('hu');
      break;
    case 'id':
      break;
    case 'it':
      numeral.language('it', require('./node_modules/spotify-numeral/node_modules/numeral/languages/it.js'));
      numeral.language('it');
      break;
    case 'ja':
      numeral.language('ja', require('./node_modules/spotify-numeral/node_modules/numeral/languages/ja.js'));
      numeral.language('ja');
      break;
    case 'ko':
      break;
    case 'nl':
      numeral.language('nl-nl', require('./node_modules/spotify-numeral/node_modules/numeral/languages/nl-nl.js'));
      numeral.language('nl-nl');
      break;
    case 'pl':
      numeral.language('pl', require('./node_modules/spotify-numeral/node_modules/numeral/languages/pl.js'));
      numeral.language('pl');
      break;
    case 'pt-BR':
      numeral.language('pt-br', require('./node_modules/spotify-numeral/node_modules/numeral/languages/pt-br.js'));
      numeral.language('pt-br');
      break;
    case 'ro':
      break;
    case 'ru':
      numeral.language('ru', require('./node_modules/spotify-numeral/node_modules/numeral/languages/ru.js'));
      numeral.language('ru');
      break;
    case 'sv':
      break;
    case 'ta':
      break;
    case 'th':
      numeral.language('th', require('./node_modules/spotify-numeral/node_modules/numeral/languages/th.js'));
      numeral.language('th');
      break;
    case 'tr':
      numeral.language('tr', require('./node_modules/spotify-numeral/node_modules/numeral/languages/tr.js'));
      numeral.language('tr');
      break;
    case 'zh-Hant':
      break;
    case 'zsm':
      break;
    default:
      console.error('Unsupported language "' + currentLanguage + '", please update spotify-numeral');
      break;
    }
    module.exports = numeral;
  },
  './node_modules/moment/moment.js': function (require, module, exports, global) {
    (function (undefined) {
      var moment, VERSION = '2.8.3', globalScope = typeof global !== 'undefined' ? global : this, oldGlobalMoment, round = Math.round, hasOwnProperty = Object.prototype.hasOwnProperty, i, YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, locales = {}, momentProperties = [], hasModule = typeof module !== 'undefined' && module.exports, aspNetJsonRegex = /^\/?Date\((\-?\d+)/i, aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/, isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/, formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g, parseTokenOneOrTwoDigits = /\d\d?/, parseTokenOneToThreeDigits = /\d{1,3}/, parseTokenOneToFourDigits = /\d{1,4}/, parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, parseTokenDigits = /\d+/, parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, parseTokenT = /T/i, parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, parseTokenOrdinal = /\d{1,2}/, parseTokenOneDigit = /\d/, parseTokenTwoDigits = /\d\d/, parseTokenThreeDigits = /\d{3}/, parseTokenFourDigits = /\d{4}/, parseTokenSixDigits = /[+-]?\d{6}/, parseTokenSignedNumber = /[+-]?\d+/, isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, isoFormat = 'YYYY-MM-DDTHH:mm:ssZ', isoDates = [
          [
            'YYYYYY-MM-DD',
            /[+-]\d{6}-\d{2}-\d{2}/
          ],
          [
            'YYYY-MM-DD',
            /\d{4}-\d{2}-\d{2}/
          ],
          [
            'GGGG-[W]WW-E',
            /\d{4}-W\d{2}-\d/
          ],
          [
            'GGGG-[W]WW',
            /\d{4}-W\d{2}/
          ],
          [
            'YYYY-DDD',
            /\d{4}-\d{3}/
          ]
        ], isoTimes = [
          [
            'HH:mm:ss.SSSS',
            /(T| )\d\d:\d\d:\d\d\.\d+/
          ],
          [
            'HH:mm:ss',
            /(T| )\d\d:\d\d:\d\d/
          ],
          [
            'HH:mm',
            /(T| )\d\d:\d\d/
          ],
          [
            'HH',
            /(T| )\d\d/
          ]
        ], parseTimezoneChunker = /([\+\-]|\d\d)/gi, proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'), unitMillisecondFactors = {
          'Milliseconds': 1,
          'Seconds': 1000,
          'Minutes': 60000,
          'Hours': 3600000,
          'Days': 86400000,
          'Months': 2592000000,
          'Years': 31536000000
        }, unitAliases = {
          ms: 'millisecond',
          s: 'second',
          m: 'minute',
          h: 'hour',
          d: 'day',
          D: 'date',
          w: 'week',
          W: 'isoWeek',
          M: 'month',
          Q: 'quarter',
          y: 'year',
          DDD: 'dayOfYear',
          e: 'weekday',
          E: 'isoWeekday',
          gg: 'weekYear',
          GG: 'isoWeekYear'
        }, camelFunctions = {
          dayofyear: 'dayOfYear',
          isoweekday: 'isoWeekday',
          isoweek: 'isoWeek',
          weekyear: 'weekYear',
          isoweekyear: 'isoWeekYear'
        }, formatFunctions = {}, relativeTimeThresholds = {
          s: 45,
          m: 45,
          h: 22,
          d: 26,
          M: 11
        }, ordinalizeTokens = 'DDD w W M D d'.split(' '), paddedTokens = 'M D H h m s w W'.split(' '), formatTokenFunctions = {
          M: function () {
            return this.month() + 1;
          },
          MMM: function (format) {
            return this.localeData().monthsShort(this, format);
          },
          MMMM: function (format) {
            return this.localeData().months(this, format);
          },
          D: function () {
            return this.date();
          },
          DDD: function () {
            return this.dayOfYear();
          },
          d: function () {
            return this.day();
          },
          dd: function (format) {
            return this.localeData().weekdaysMin(this, format);
          },
          ddd: function (format) {
            return this.localeData().weekdaysShort(this, format);
          },
          dddd: function (format) {
            return this.localeData().weekdays(this, format);
          },
          w: function () {
            return this.week();
          },
          W: function () {
            return this.isoWeek();
          },
          YY: function () {
            return leftZeroFill(this.year() % 100, 2);
          },
          YYYY: function () {
            return leftZeroFill(this.year(), 4);
          },
          YYYYY: function () {
            return leftZeroFill(this.year(), 5);
          },
          YYYYYY: function () {
            var y = this.year(), sign = y >= 0 ? '+' : '-';
            return sign + leftZeroFill(Math.abs(y), 6);
          },
          gg: function () {
            return leftZeroFill(this.weekYear() % 100, 2);
          },
          gggg: function () {
            return leftZeroFill(this.weekYear(), 4);
          },
          ggggg: function () {
            return leftZeroFill(this.weekYear(), 5);
          },
          GG: function () {
            return leftZeroFill(this.isoWeekYear() % 100, 2);
          },
          GGGG: function () {
            return leftZeroFill(this.isoWeekYear(), 4);
          },
          GGGGG: function () {
            return leftZeroFill(this.isoWeekYear(), 5);
          },
          e: function () {
            return this.weekday();
          },
          E: function () {
            return this.isoWeekday();
          },
          a: function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), true);
          },
          A: function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), false);
          },
          H: function () {
            return this.hours();
          },
          h: function () {
            return this.hours() % 12 || 12;
          },
          m: function () {
            return this.minutes();
          },
          s: function () {
            return this.seconds();
          },
          S: function () {
            return toInt(this.milliseconds() / 100);
          },
          SS: function () {
            return leftZeroFill(toInt(this.milliseconds() / 10), 2);
          },
          SSS: function () {
            return leftZeroFill(this.milliseconds(), 3);
          },
          SSSS: function () {
            return leftZeroFill(this.milliseconds(), 3);
          },
          Z: function () {
            var a = -this.zone(), b = '+';
            if (a < 0) {
              a = -a;
              b = '-';
            }
            return b + leftZeroFill(toInt(a / 60), 2) + ':' + leftZeroFill(toInt(a) % 60, 2);
          },
          ZZ: function () {
            var a = -this.zone(), b = '+';
            if (a < 0) {
              a = -a;
              b = '-';
            }
            return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
          },
          z: function () {
            return this.zoneAbbr();
          },
          zz: function () {
            return this.zoneName();
          },
          X: function () {
            return this.unix();
          },
          Q: function () {
            return this.quarter();
          }
        }, deprecations = {}, lists = [
          'months',
          'monthsShort',
          'weekdays',
          'weekdaysShort',
          'weekdaysMin'
        ];
      function dfl(a, b, c) {
        switch (arguments.length) {
        case 2:
          return a != null ? a : b;
        case 3:
          return a != null ? a : b != null ? b : c;
        default:
          throw new Error('Implement me');
        }
      }
      function hasOwnProp(a, b) {
        return hasOwnProperty.call(a, b);
      }
      function defaultParsingFlags() {
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false
        };
      }
      function printMsg(msg) {
        if (moment.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
          console.warn('Deprecation warning: ' + msg);
        }
      }
      function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
          if (firstTime) {
            printMsg(msg);
            firstTime = false;
          }
          return fn.apply(this, arguments);
        }, fn);
      }
      function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
          printMsg(msg);
          deprecations[name] = true;
        }
      }
      function padToken(func, count) {
        return function (a) {
          return leftZeroFill(func.call(this, a), count);
        };
      }
      function ordinalizeToken(func, period) {
        return function (a) {
          return this.localeData().ordinal(func.call(this, a), period);
        };
      }
      while (ordinalizeTokens.length) {
        i = ordinalizeTokens.pop();
        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
      }
      while (paddedTokens.length) {
        i = paddedTokens.pop();
        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
      }
      formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);
      function Locale() {
      }
      function Moment(config, skipOverflow) {
        if (skipOverflow !== false) {
          checkOverflow(config);
        }
        copyConfig(this, config);
        this._d = new Date(+config._d);
      }
      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
        this._milliseconds = +milliseconds + seconds * 1000 + minutes * 60000 + hours * 3600000;
        this._days = +days + weeks * 7;
        this._months = +months + quarters * 3 + years * 12;
        this._data = {};
        this._locale = moment.localeData();
        this._bubble();
      }
      function extend(a, b) {
        for (var i in b) {
          if (hasOwnProp(b, i)) {
            a[i] = b[i];
          }
        }
        if (hasOwnProp(b, 'toString')) {
          a.toString = b.toString;
        }
        if (hasOwnProp(b, 'valueOf')) {
          a.valueOf = b.valueOf;
        }
        return a;
      }
      function copyConfig(to, from) {
        var i, prop, val;
        if (typeof from._isAMomentObject !== 'undefined') {
          to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
          to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
          to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
          to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
          to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
          to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
          to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
          to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
          to._pf = from._pf;
        }
        if (typeof from._locale !== 'undefined') {
          to._locale = from._locale;
        }
        if (momentProperties.length > 0) {
          for (i in momentProperties) {
            prop = momentProperties[i];
            val = from[prop];
            if (typeof val !== 'undefined') {
              to[prop] = val;
            }
          }
        }
        return to;
      }
      function absRound(number) {
        if (number < 0) {
          return Math.ceil(number);
        } else {
          return Math.floor(number);
        }
      }
      function leftZeroFill(number, targetLength, forceSign) {
        var output = '' + Math.abs(number), sign = number >= 0;
        while (output.length < targetLength) {
          output = '0' + output;
        }
        return (sign ? forceSign ? '+' : '' : '-') + output;
      }
      function positiveMomentsDifference(base, other) {
        var res = {
            milliseconds: 0,
            months: 0
          };
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
          --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, 'M');
        return res;
      }
      function momentsDifference(base, other) {
        var res;
        other = makeAs(other, base);
        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }
        return res;
      }
      function createAdder(direction, name) {
        return function (val, period) {
          var dur, tmp;
          if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
            tmp = val;
            val = period;
            period = tmp;
          }
          val = typeof val === 'string' ? +val : val;
          dur = moment.duration(val, period);
          addOrSubtractDurationFromMoment(this, dur, direction);
          return this;
        };
      }
      function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds, days = duration._days, months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;
        if (milliseconds) {
          mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
          rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);
        }
        if (months) {
          rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
          moment.updateOffset(mom, days || months);
        }
      }
      function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
      }
      function isDate(input) {
        return Object.prototype.toString.call(input) === '[object Date]' || input instanceof Date;
      }
      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for (i = 0; i < len; i++) {
          if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
            diffs++;
          }
        }
        return diffs + lengthDiff;
      }
      function normalizeUnits(units) {
        if (units) {
          var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
          units = unitAliases[units] || camelFunctions[lowered] || lowered;
        }
        return units;
      }
      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }
        return normalizedInput;
      }
      function makeList(field) {
        var count, setter;
        if (field.indexOf('week') === 0) {
          count = 7;
          setter = 'day';
        } else if (field.indexOf('month') === 0) {
          count = 12;
          setter = 'month';
        } else {
          return;
        }
        moment[field] = function (format, index) {
          var i, getter, method = moment._locale[field], results = [];
          if (typeof format === 'number') {
            index = format;
            format = undefined;
          }
          getter = function (i) {
            var m = moment().utc().set(setter, i);
            return method.call(moment._locale, m, format || '');
          };
          if (index != null) {
            return getter(index);
          } else {
            for (i = 0; i < count; i++) {
              results.push(getter(i));
            }
            return results;
          }
        };
      }
      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          if (coercedNumber >= 0) {
            value = Math.floor(coercedNumber);
          } else {
            value = Math.ceil(coercedNumber);
          }
        }
        return value;
      }
      function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
      }
      function weeksInYear(year, dow, doy) {
        return weekOfYear(moment([
          year,
          11,
          31 + dow - doy
        ]), dow, doy).week;
      }
      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
      }
      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      }
      function checkOverflow(m) {
        var overflow;
        if (m._a && m._pf.overflow === -2) {
          overflow = m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH : m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE : m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR : m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE : m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND : m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND : -1;
          if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
          }
          m._pf.overflow = overflow;
        }
      }
      function isValid(m) {
        if (m._isValid == null) {
          m._isValid = !isNaN(m._d.getTime()) && m._pf.overflow < 0 && !m._pf.empty && !m._pf.invalidMonth && !m._pf.nullInput && !m._pf.invalidFormat && !m._pf.userInvalidated;
          if (m._strict) {
            m._isValid = m._isValid && m._pf.charsLeftOver === 0 && m._pf.unusedTokens.length === 0;
          }
        }
        return m._isValid;
      }
      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
      }
      function chooseLocale(names) {
        var i = 0, j, next, locale, split;
        while (i < names.length) {
          split = normalizeLocale(names[i]).split('-');
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split('-') : null;
          while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) {
              return locale;
            }
            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
              break;
            }
            j--;
          }
          i++;
        }
        return null;
      }
      function loadLocale(name) {
        var oldLocale = null;
        if (!locales[name] && hasModule) {
          try {
            oldLocale = moment.locale();
            require('./locale/' + name);
            moment.locale(oldLocale);
          } catch (e) {
          }
        }
        return locales[name];
      }
      function makeAs(input, model) {
        return model._isUTC ? moment(input).zone(model._offset || 0) : moment(input).local();
      }
      extend(Locale.prototype, {
        set: function (config) {
          var prop, i;
          for (i in config) {
            prop = config[i];
            if (typeof prop === 'function') {
              this[i] = prop;
            } else {
              this['_' + i] = prop;
            }
          }
        },
        _months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        months: function (m) {
          return this._months[m.month()];
        },
        _monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        monthsShort: function (m) {
          return this._monthsShort[m.month()];
        },
        monthsParse: function (monthName) {
          var i, mom, regex;
          if (!this._monthsParse) {
            this._monthsParse = [];
          }
          for (i = 0; i < 12; i++) {
            if (!this._monthsParse[i]) {
              mom = moment.utc([
                2000,
                i
              ]);
              regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
              this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            if (this._monthsParse[i].test(monthName)) {
              return i;
            }
          }
        },
        _weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdays: function (m) {
          return this._weekdays[m.day()];
        },
        _weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysShort: function (m) {
          return this._weekdaysShort[m.day()];
        },
        _weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        weekdaysMin: function (m) {
          return this._weekdaysMin[m.day()];
        },
        weekdaysParse: function (weekdayName) {
          var i, mom, regex;
          if (!this._weekdaysParse) {
            this._weekdaysParse = [];
          }
          for (i = 0; i < 7; i++) {
            if (!this._weekdaysParse[i]) {
              mom = moment([
                2000,
                1
              ]).day(i);
              regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
              this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            if (this._weekdaysParse[i].test(weekdayName)) {
              return i;
            }
          }
        },
        _longDateFormat: {
          LT: 'h:mm A',
          L: 'MM/DD/YYYY',
          LL: 'MMMM D, YYYY',
          LLL: 'MMMM D, YYYY LT',
          LLLL: 'dddd, MMMM D, YYYY LT'
        },
        longDateFormat: function (key) {
          var output = this._longDateFormat[key];
          if (!output && this._longDateFormat[key.toUpperCase()]) {
            output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
              return val.slice(1);
            });
            this._longDateFormat[key] = output;
          }
          return output;
        },
        isPM: function (input) {
          return (input + '').toLowerCase().charAt(0) === 'p';
        },
        _meridiemParse: /[ap]\.?m?\.?/i,
        meridiem: function (hours, minutes, isLower) {
          if (hours > 11) {
            return isLower ? 'pm' : 'PM';
          } else {
            return isLower ? 'am' : 'AM';
          }
        },
        _calendar: {
          sameDay: '[Today at] LT',
          nextDay: '[Tomorrow at] LT',
          nextWeek: 'dddd [at] LT',
          lastDay: '[Yesterday at] LT',
          lastWeek: '[Last] dddd [at] LT',
          sameElse: 'L'
        },
        calendar: function (key, mom) {
          var output = this._calendar[key];
          return typeof output === 'function' ? output.apply(mom) : output;
        },
        _relativeTime: {
          future: 'in %s',
          past: '%s ago',
          s: 'a few seconds',
          m: 'a minute',
          mm: '%d minutes',
          h: 'an hour',
          hh: '%d hours',
          d: 'a day',
          dd: '%d days',
          M: 'a month',
          MM: '%d months',
          y: 'a year',
          yy: '%d years'
        },
        relativeTime: function (number, withoutSuffix, string, isFuture) {
          var output = this._relativeTime[string];
          return typeof output === 'function' ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
        },
        pastFuture: function (diff, output) {
          var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
          return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
        },
        ordinal: function (number) {
          return this._ordinal.replace('%d', number);
        },
        _ordinal: '%d',
        preparse: function (string) {
          return string;
        },
        postformat: function (string) {
          return string;
        },
        week: function (mom) {
          return weekOfYear(mom, this._week.dow, this._week.doy).week;
        },
        _week: {
          dow: 0,
          doy: 6
        },
        _invalidDate: 'Invalid date',
        invalidDate: function () {
          return this._invalidDate;
        }
      });
      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
      }
      function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;
        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
          } else {
            array[i] = removeFormattingTokens(array[i]);
          }
        }
        return function (mom) {
          var output = '';
          for (i = 0; i < length; i++) {
            output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
          }
          return output;
        };
      }
      function formatMoment(m, format) {
        if (!m.isValid()) {
          return m.localeData().invalidDate();
        }
        format = expandFormat(format, m.localeData());
        if (!formatFunctions[format]) {
          formatFunctions[format] = makeFormatFunction(format);
        }
        return formatFunctions[format](m);
      }
      function expandFormat(format, locale) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
          return locale.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
          format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
          localFormattingTokens.lastIndex = 0;
          i -= 1;
        }
        return format;
      }
      function getParseRegexForToken(token, config) {
        var a, strict = config._strict;
        switch (token) {
        case 'Q':
          return parseTokenOneDigit;
        case 'DDDD':
          return parseTokenThreeDigits;
        case 'YYYY':
        case 'GGGG':
        case 'gggg':
          return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;
        case 'Y':
        case 'G':
        case 'g':
          return parseTokenSignedNumber;
        case 'YYYYYY':
        case 'YYYYY':
        case 'GGGGG':
        case 'ggggg':
          return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;
        case 'S':
          if (strict) {
            return parseTokenOneDigit;
          }
        case 'SS':
          if (strict) {
            return parseTokenTwoDigits;
          }
        case 'SSS':
          if (strict) {
            return parseTokenThreeDigits;
          }
        case 'DDD':
          return parseTokenOneToThreeDigits;
        case 'MMM':
        case 'MMMM':
        case 'dd':
        case 'ddd':
        case 'dddd':
          return parseTokenWord;
        case 'a':
        case 'A':
          return config._locale._meridiemParse;
        case 'X':
          return parseTokenTimestampMs;
        case 'Z':
        case 'ZZ':
          return parseTokenTimezone;
        case 'T':
          return parseTokenT;
        case 'SSSS':
          return parseTokenDigits;
        case 'MM':
        case 'DD':
        case 'YY':
        case 'GG':
        case 'gg':
        case 'HH':
        case 'hh':
        case 'mm':
        case 'ss':
        case 'ww':
        case 'WW':
          return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;
        case 'M':
        case 'D':
        case 'd':
        case 'H':
        case 'h':
        case 'm':
        case 's':
        case 'w':
        case 'W':
        case 'e':
        case 'E':
          return parseTokenOneOrTwoDigits;
        case 'Do':
          return parseTokenOrdinal;
        default:
          a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), 'i'));
          return a;
        }
      }
      function timezoneMinutesFromString(string) {
        string = string || '';
        var possibleTzMatches = string.match(parseTokenTimezone) || [], tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [], parts = (tzChunk + '').match(parseTimezoneChunker) || [
            '-',
            0,
            0
          ], minutes = +(parts[1] * 60) + toInt(parts[2]);
        return parts[0] === '+' ? -minutes : minutes;
      }
      function addTimeToArrayFromToken(token, input, config) {
        var a, datePartArray = config._a;
        switch (token) {
        case 'Q':
          if (input != null) {
            datePartArray[MONTH] = (toInt(input) - 1) * 3;
          }
          break;
        case 'M':
        case 'MM':
          if (input != null) {
            datePartArray[MONTH] = toInt(input) - 1;
          }
          break;
        case 'MMM':
        case 'MMMM':
          a = config._locale.monthsParse(input);
          if (a != null) {
            datePartArray[MONTH] = a;
          } else {
            config._pf.invalidMonth = input;
          }
          break;
        case 'D':
        case 'DD':
          if (input != null) {
            datePartArray[DATE] = toInt(input);
          }
          break;
        case 'Do':
          if (input != null) {
            datePartArray[DATE] = toInt(parseInt(input, 10));
          }
          break;
        case 'DDD':
        case 'DDDD':
          if (input != null) {
            config._dayOfYear = toInt(input);
          }
          break;
        case 'YY':
          datePartArray[YEAR] = moment.parseTwoDigitYear(input);
          break;
        case 'YYYY':
        case 'YYYYY':
        case 'YYYYYY':
          datePartArray[YEAR] = toInt(input);
          break;
        case 'a':
        case 'A':
          config._isPm = config._locale.isPM(input);
          break;
        case 'H':
        case 'HH':
        case 'h':
        case 'hh':
          datePartArray[HOUR] = toInt(input);
          break;
        case 'm':
        case 'mm':
          datePartArray[MINUTE] = toInt(input);
          break;
        case 's':
        case 'ss':
          datePartArray[SECOND] = toInt(input);
          break;
        case 'S':
        case 'SS':
        case 'SSS':
        case 'SSSS':
          datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);
          break;
        case 'X':
          config._d = new Date(parseFloat(input) * 1000);
          break;
        case 'Z':
        case 'ZZ':
          config._useUTC = true;
          config._tzm = timezoneMinutesFromString(input);
          break;
        case 'dd':
        case 'ddd':
        case 'dddd':
          a = config._locale.weekdaysParse(input);
          if (a != null) {
            config._w = config._w || {};
            config._w['d'] = a;
          } else {
            config._pf.invalidWeekday = input;
          }
          break;
        case 'w':
        case 'ww':
        case 'W':
        case 'WW':
        case 'd':
        case 'e':
        case 'E':
          token = token.substr(0, 1);
        case 'gggg':
        case 'GGGG':
        case 'GGGGG':
          token = token.substr(0, 2);
          if (input) {
            config._w = config._w || {};
            config._w[token] = toInt(input);
          }
          break;
        case 'gg':
        case 'GG':
          config._w = config._w || {};
          config._w[token] = moment.parseTwoDigitYear(input);
        }
      }
      function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;
          weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);
          week = dfl(w.W, 1);
          weekday = dfl(w.E, 1);
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);
          week = dfl(w.w, 1);
          if (w.d != null) {
            weekday = w.d;
            if (weekday < dow) {
              ++week;
            }
          } else if (w.e != null) {
            weekday = w.e + dow;
          } else {
            weekday = dow;
          }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
      }
      function dateFromConfig(config) {
        var i, date, input = [], currentDate, yearToUse;
        if (config._d) {
          return;
        }
        currentDate = currentDateArray(config);
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
        }
        if (config._dayOfYear) {
          yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);
          if (config._dayOfYear > daysInYear(yearToUse)) {
            config._pf._overflowDayOfYear = true;
          }
          date = makeUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
        }
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
        }
        for (; i < 7; i++) {
          config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }
        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() + config._tzm);
        }
      }
      function dateFromObject(config) {
        var normalizedInput;
        if (config._d) {
          return;
        }
        normalizedInput = normalizeObjectUnits(config._i);
        config._a = [
          normalizedInput.year,
          normalizedInput.month,
          normalizedInput.day,
          normalizedInput.hour,
          normalizedInput.minute,
          normalizedInput.second,
          normalizedInput.millisecond
        ];
        dateFromConfig(config);
      }
      function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
          return [
            now.getUTCFullYear(),
            now.getUTCMonth(),
            now.getUTCDate()
          ];
        } else {
          return [
            now.getFullYear(),
            now.getMonth(),
            now.getDate()
          ];
        }
      }
      function makeDateFromStringAndFormat(config) {
        if (config._f === moment.ISO_8601) {
          parseISO(config);
          return;
        }
        config._a = [];
        config._pf.empty = true;
        var string = '' + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0;
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        for (i = 0; i < tokens.length; i++) {
          token = tokens[i];
          parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
              config._pf.unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
          }
          if (formatTokenFunctions[token]) {
            if (parsedInput) {
              config._pf.empty = false;
            } else {
              config._pf.unusedTokens.push(token);
            }
            addTimeToArrayFromToken(token, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            config._pf.unusedTokens.push(token);
          }
        }
        config._pf.charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
          config._pf.unusedInput.push(string);
        }
        if (config._isPm && config._a[HOUR] < 12) {
          config._a[HOUR] += 12;
        }
        if (config._isPm === false && config._a[HOUR] === 12) {
          config._a[HOUR] = 0;
        }
        dateFromConfig(config);
        checkOverflow(config);
      }
      function unescapeFormat(s) {
        return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
          return p1 || p2 || p3 || p4;
        });
      }
      function regexpEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
      }
      function makeDateFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore;
        if (config._f.length === 0) {
          config._pf.invalidFormat = true;
          config._d = new Date(NaN);
          return;
        }
        for (i = 0; i < config._f.length; i++) {
          currentScore = 0;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }
          tempConfig._pf = defaultParsingFlags();
          tempConfig._f = config._f[i];
          makeDateFromStringAndFormat(tempConfig);
          if (!isValid(tempConfig)) {
            continue;
          }
          currentScore += tempConfig._pf.charsLeftOver;
          currentScore += tempConfig._pf.unusedTokens.length * 10;
          tempConfig._pf.score = currentScore;
          if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
          }
        }
        extend(config, bestMoment || tempConfig);
      }
      function parseISO(config) {
        var i, l, string = config._i, match = isoRegex.exec(string);
        if (match) {
          config._pf.iso = true;
          for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(string)) {
              config._f = isoDates[i][0] + (match[6] || ' ');
              break;
            }
          }
          for (i = 0, l = isoTimes.length; i < l; i++) {
            if (isoTimes[i][1].exec(string)) {
              config._f += isoTimes[i][0];
              break;
            }
          }
          if (string.match(parseTokenTimezone)) {
            config._f += 'Z';
          }
          makeDateFromStringAndFormat(config);
        } else {
          config._isValid = false;
        }
      }
      function makeDateFromString(config) {
        parseISO(config);
        if (config._isValid === false) {
          delete config._isValid;
          moment.createFromInputFallback(config);
        }
      }
      function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
          res.push(fn(arr[i], i));
        }
        return res;
      }
      function makeDateFromInput(config) {
        var input = config._i, matched;
        if (input === undefined) {
          config._d = new Date();
        } else if (isDate(input)) {
          config._d = new Date(+input);
        } else if ((matched = aspNetJsonRegex.exec(input)) !== null) {
          config._d = new Date(+matched[1]);
        } else if (typeof input === 'string') {
          makeDateFromString(config);
        } else if (isArray(input)) {
          config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
          });
          dateFromConfig(config);
        } else if (typeof input === 'object') {
          dateFromObject(config);
        } else if (typeof input === 'number') {
          config._d = new Date(input);
        } else {
          moment.createFromInputFallback(config);
        }
      }
      function makeDate(y, m, d, h, M, s, ms) {
        var date = new Date(y, m, d, h, M, s, ms);
        if (y < 1970) {
          date.setFullYear(y);
        }
        return date;
      }
      function makeUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
          date.setUTCFullYear(y);
        }
        return date;
      }
      function parseWeekday(input, locale) {
        if (typeof input === 'string') {
          if (!isNaN(input)) {
            input = parseInt(input, 10);
          } else {
            input = locale.weekdaysParse(input);
            if (typeof input !== 'number') {
              return null;
            }
          }
        }
        return input;
      }
      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }
      function relativeTime(posNegDuration, withoutSuffix, locale) {
        var duration = moment.duration(posNegDuration).abs(), seconds = round(duration.as('s')), minutes = round(duration.as('m')), hours = round(duration.as('h')), days = round(duration.as('d')), months = round(duration.as('M')), years = round(duration.as('y')), args = seconds < relativeTimeThresholds.s && [
            's',
            seconds
          ] || minutes === 1 && ['m'] || minutes < relativeTimeThresholds.m && [
            'mm',
            minutes
          ] || hours === 1 && ['h'] || hours < relativeTimeThresholds.h && [
            'hh',
            hours
          ] || days === 1 && ['d'] || days < relativeTimeThresholds.d && [
            'dd',
            days
          ] || months === 1 && ['M'] || months < relativeTimeThresholds.M && [
            'MM',
            months
          ] || years === 1 && ['y'] || [
            'yy',
            years
          ];
        args[2] = withoutSuffix;
        args[3] = +posNegDuration > 0;
        args[4] = locale;
        return substituteTimeAgo.apply({}, args);
      }
      function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek, daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(), adjustedMoment;
        if (daysToDayOfWeek > end) {
          daysToDayOfWeek -= 7;
        }
        if (daysToDayOfWeek < end - 7) {
          daysToDayOfWeek += 7;
        }
        adjustedMoment = moment(mom).add(daysToDayOfWeek, 'd');
        return {
          week: Math.ceil(adjustedMoment.dayOfYear() / 7),
          year: adjustedMoment.year()
        };
      }
      function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;
        d = d === 0 ? 7 : d;
        weekday = weekday != null ? weekday : firstDayOfWeek;
        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;
        return {
          year: dayOfYear > 0 ? year : year - 1,
          dayOfYear: dayOfYear > 0 ? dayOfYear : daysInYear(year - 1) + dayOfYear
        };
      }
      function makeMoment(config) {
        var input = config._i, format = config._f;
        config._locale = config._locale || moment.localeData(config._l);
        if (input === null || format === undefined && input === '') {
          return moment.invalid({ nullInput: true });
        }
        if (typeof input === 'string') {
          config._i = input = config._locale.preparse(input);
        }
        if (moment.isMoment(input)) {
          return new Moment(input, true);
        } else if (format) {
          if (isArray(format)) {
            makeDateFromStringAndArray(config);
          } else {
            makeDateFromStringAndFormat(config);
          }
        } else {
          makeDateFromInput(config);
        }
        return new Moment(config);
      }
      moment = function (input, format, locale, strict) {
        var c;
        if (typeof locale === 'boolean') {
          strict = locale;
          locale = undefined;
        }
        c = {};
        c._isAMomentObject = true;
        c._i = input;
        c._f = format;
        c._l = locale;
        c._strict = strict;
        c._isUTC = false;
        c._pf = defaultParsingFlags();
        return makeMoment(c);
      };
      moment.suppressDeprecationWarnings = false;
      moment.createFromInputFallback = deprecate('moment construction falls back to js Date. This is ' + 'discouraged and will be removed in upcoming major ' + 'release. Please refer to ' + 'https://github.com/moment/moment/issues/1407 for more info.', function (config) {
        config._d = new Date(config._i);
      });
      function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
        }
        if (!moments.length) {
          return moment();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
          if (moments[i][fn](res)) {
            res = moments[i];
          }
        }
        return res;
      }
      moment.min = function () {
        var args = [].slice.call(arguments, 0);
        return pickBy('isBefore', args);
      };
      moment.max = function () {
        var args = [].slice.call(arguments, 0);
        return pickBy('isAfter', args);
      };
      moment.utc = function (input, format, locale, strict) {
        var c;
        if (typeof locale === 'boolean') {
          strict = locale;
          locale = undefined;
        }
        c = {};
        c._isAMomentObject = true;
        c._useUTC = true;
        c._isUTC = true;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        c._pf = defaultParsingFlags();
        return makeMoment(c).utc();
      };
      moment.unix = function (input) {
        return moment(input * 1000);
      };
      moment.duration = function (input, key) {
        var duration = input, match = null, sign, ret, parseIso, diffRes;
        if (moment.isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          };
        } else if (typeof input === 'number') {
          duration = {};
          if (key) {
            duration[key] = input;
          } else {
            duration.milliseconds = input;
          }
        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
          sign = match[1] === '-' ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign,
            h: toInt(match[HOUR]) * sign,
            m: toInt(match[MINUTE]) * sign,
            s: toInt(match[SECOND]) * sign,
            ms: toInt(match[MILLISECOND]) * sign
          };
        } else if (!!(match = isoDurationRegex.exec(input))) {
          sign = match[1] === '-' ? -1 : 1;
          parseIso = function (inp) {
            var res = inp && parseFloat(inp.replace(',', '.'));
            return (isNaN(res) ? 0 : res) * sign;
          };
          duration = {
            y: parseIso(match[2]),
            M: parseIso(match[3]),
            d: parseIso(match[4]),
            h: parseIso(match[5]),
            m: parseIso(match[6]),
            s: parseIso(match[7]),
            w: parseIso(match[8])
          };
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
          diffRes = momentsDifference(moment(duration.from), moment(duration.to));
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (moment.isDuration(input) && hasOwnProp(input, '_locale')) {
          ret._locale = input._locale;
        }
        return ret;
      };
      moment.version = VERSION;
      moment.defaultFormat = isoFormat;
      moment.ISO_8601 = function () {
      };
      moment.momentProperties = momentProperties;
      moment.updateOffset = function () {
      };
      moment.relativeTimeThreshold = function (threshold, limit) {
        if (relativeTimeThresholds[threshold] === undefined) {
          return false;
        }
        if (limit === undefined) {
          return relativeTimeThresholds[threshold];
        }
        relativeTimeThresholds[threshold] = limit;
        return true;
      };
      moment.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', function (key, value) {
        return moment.locale(key, value);
      });
      moment.locale = function (key, values) {
        var data;
        if (key) {
          if (typeof values !== 'undefined') {
            data = moment.defineLocale(key, values);
          } else {
            data = moment.localeData(key);
          }
          if (data) {
            moment.duration._locale = moment._locale = data;
          }
        }
        return moment._locale._abbr;
      };
      moment.defineLocale = function (name, values) {
        if (values !== null) {
          values.abbr = name;
          if (!locales[name]) {
            locales[name] = new Locale();
          }
          locales[name].set(values);
          moment.locale(name);
          return locales[name];
        } else {
          delete locales[name];
          return null;
        }
      };
      moment.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', function (key) {
        return moment.localeData(key);
      });
      moment.localeData = function (key) {
        var locale;
        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }
        if (!key) {
          return moment._locale;
        }
        if (!isArray(key)) {
          locale = loadLocale(key);
          if (locale) {
            return locale;
          }
          key = [key];
        }
        return chooseLocale(key);
      };
      moment.isMoment = function (obj) {
        return obj instanceof Moment || obj != null && hasOwnProp(obj, '_isAMomentObject');
      };
      moment.isDuration = function (obj) {
        return obj instanceof Duration;
      };
      for (i = lists.length - 1; i >= 0; --i) {
        makeList(lists[i]);
      }
      moment.normalizeUnits = function (units) {
        return normalizeUnits(units);
      };
      moment.invalid = function (flags) {
        var m = moment.utc(NaN);
        if (flags != null) {
          extend(m._pf, flags);
        } else {
          m._pf.userInvalidated = true;
        }
        return m;
      };
      moment.parseZone = function () {
        return moment.apply(null, arguments).parseZone();
      };
      moment.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
      };
      extend(moment.fn = Moment.prototype, {
        clone: function () {
          return moment(this);
        },
        valueOf: function () {
          return +this._d + (this._offset || 0) * 60000;
        },
        unix: function () {
          return Math.floor(+this / 1000);
        },
        toString: function () {
          return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
        },
        toDate: function () {
          return this._offset ? new Date(+this) : this._d;
        },
        toISOString: function () {
          var m = moment(this).utc();
          if (0 < m.year() && m.year() <= 9999) {
            return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
          } else {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
          }
        },
        toArray: function () {
          var m = this;
          return [
            m.year(),
            m.month(),
            m.date(),
            m.hours(),
            m.minutes(),
            m.seconds(),
            m.milliseconds()
          ];
        },
        isValid: function () {
          return isValid(this);
        },
        isDSTShifted: function () {
          if (this._a) {
            return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
          }
          return false;
        },
        parsingFlags: function () {
          return extend({}, this._pf);
        },
        invalidAt: function () {
          return this._pf.overflow;
        },
        utc: function (keepLocalTime) {
          return this.zone(0, keepLocalTime);
        },
        local: function (keepLocalTime) {
          if (this._isUTC) {
            this.zone(0, keepLocalTime);
            this._isUTC = false;
            if (keepLocalTime) {
              this.add(this._dateTzOffset(), 'm');
            }
          }
          return this;
        },
        format: function (inputString) {
          var output = formatMoment(this, inputString || moment.defaultFormat);
          return this.localeData().postformat(output);
        },
        add: createAdder(1, 'add'),
        subtract: createAdder(-1, 'subtract'),
        diff: function (input, units, asFloat) {
          var that = makeAs(input, this), zoneDiff = (this.zone() - that.zone()) * 60000, diff, output, daysAdjust;
          units = normalizeUnits(units);
          if (units === 'year' || units === 'month') {
            diff = (this.daysInMonth() + that.daysInMonth()) * 43200000;
            output = (this.year() - that.year()) * 12 + (this.month() - that.month());
            daysAdjust = this - moment(this).startOf('month') - (that - moment(that).startOf('month'));
            daysAdjust -= (this.zone() - moment(this).startOf('month').zone() - (that.zone() - moment(that).startOf('month').zone())) * 60000;
            output += daysAdjust / diff;
            if (units === 'year') {
              output = output / 12;
            }
          } else {
            diff = this - that;
            output = units === 'second' ? diff / 1000 : units === 'minute' ? diff / 60000 : units === 'hour' ? diff / 3600000 : units === 'day' ? (diff - zoneDiff) / 86400000 : units === 'week' ? (diff - zoneDiff) / 604800000 : diff;
          }
          return asFloat ? output : absRound(output);
        },
        from: function (time, withoutSuffix) {
          return moment.duration({
            to: this,
            from: time
          }).locale(this.locale()).humanize(!withoutSuffix);
        },
        fromNow: function (withoutSuffix) {
          return this.from(moment(), withoutSuffix);
        },
        calendar: function (time) {
          var now = time || moment(), sod = makeAs(now, this).startOf('day'), diff = this.diff(sod, 'days', true), format = diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
          return this.format(this.localeData().calendar(format, this));
        },
        isLeapYear: function () {
          return isLeapYear(this.year());
        },
        isDST: function () {
          return this.zone() < this.clone().month(0).zone() || this.zone() < this.clone().month(5).zone();
        },
        day: function (input) {
          var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
          if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
          } else {
            return day;
          }
        },
        month: makeAccessor('Month', true),
        startOf: function (units) {
          units = normalizeUnits(units);
          switch (units) {
          case 'year':
            this.month(0);
          case 'quarter':
          case 'month':
            this.date(1);
          case 'week':
          case 'isoWeek':
          case 'day':
            this.hours(0);
          case 'hour':
            this.minutes(0);
          case 'minute':
            this.seconds(0);
          case 'second':
            this.milliseconds(0);
          }
          if (units === 'week') {
            this.weekday(0);
          } else if (units === 'isoWeek') {
            this.isoWeekday(1);
          }
          if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
          }
          return this;
        },
        endOf: function (units) {
          units = normalizeUnits(units);
          return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms');
        },
        isAfter: function (input, units) {
          units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
          if (units === 'millisecond') {
            input = moment.isMoment(input) ? input : moment(input);
            return +this > +input;
          } else {
            return +this.clone().startOf(units) > +moment(input).startOf(units);
          }
        },
        isBefore: function (input, units) {
          units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
          if (units === 'millisecond') {
            input = moment.isMoment(input) ? input : moment(input);
            return +this < +input;
          } else {
            return +this.clone().startOf(units) < +moment(input).startOf(units);
          }
        },
        isSame: function (input, units) {
          units = normalizeUnits(units || 'millisecond');
          if (units === 'millisecond') {
            input = moment.isMoment(input) ? input : moment(input);
            return +this === +input;
          } else {
            return +this.clone().startOf(units) === +makeAs(input, this).startOf(units);
          }
        },
        min: deprecate('moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548', function (other) {
          other = moment.apply(null, arguments);
          return other < this ? this : other;
        }),
        max: deprecate('moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548', function (other) {
          other = moment.apply(null, arguments);
          return other > this ? this : other;
        }),
        zone: function (input, keepLocalTime) {
          var offset = this._offset || 0, localAdjust;
          if (input != null) {
            if (typeof input === 'string') {
              input = timezoneMinutesFromString(input);
            }
            if (Math.abs(input) < 16) {
              input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
              localAdjust = this._dateTzOffset();
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
              this.subtract(localAdjust, 'm');
            }
            if (offset !== input) {
              if (!keepLocalTime || this._changeInProgress) {
                addOrSubtractDurationFromMoment(this, moment.duration(offset - input, 'm'), 1, false);
              } else if (!this._changeInProgress) {
                this._changeInProgress = true;
                moment.updateOffset(this, true);
                this._changeInProgress = null;
              }
            }
          } else {
            return this._isUTC ? offset : this._dateTzOffset();
          }
          return this;
        },
        zoneAbbr: function () {
          return this._isUTC ? 'UTC' : '';
        },
        zoneName: function () {
          return this._isUTC ? 'Coordinated Universal Time' : '';
        },
        parseZone: function () {
          if (this._tzm) {
            this.zone(this._tzm);
          } else if (typeof this._i === 'string') {
            this.zone(this._i);
          }
          return this;
        },
        hasAlignedHourOffset: function (input) {
          if (!input) {
            input = 0;
          } else {
            input = moment(input).zone();
          }
          return (this.zone() - input) % 60 === 0;
        },
        daysInMonth: function () {
          return daysInMonth(this.year(), this.month());
        },
        dayOfYear: function (input) {
          var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 86400000) + 1;
          return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
        },
        quarter: function (input) {
          return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
        },
        weekYear: function (input) {
          var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
          return input == null ? year : this.add(input - year, 'y');
        },
        isoWeekYear: function (input) {
          var year = weekOfYear(this, 1, 4).year;
          return input == null ? year : this.add(input - year, 'y');
        },
        week: function (input) {
          var week = this.localeData().week(this);
          return input == null ? week : this.add((input - week) * 7, 'd');
        },
        isoWeek: function (input) {
          var week = weekOfYear(this, 1, 4).week;
          return input == null ? week : this.add((input - week) * 7, 'd');
        },
        weekday: function (input) {
          var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
          return input == null ? weekday : this.add(input - weekday, 'd');
        },
        isoWeekday: function (input) {
          return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
        },
        isoWeeksInYear: function () {
          return weeksInYear(this.year(), 1, 4);
        },
        weeksInYear: function () {
          var weekInfo = this.localeData()._week;
          return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        },
        get: function (units) {
          units = normalizeUnits(units);
          return this[units]();
        },
        set: function (units, value) {
          units = normalizeUnits(units);
          if (typeof this[units] === 'function') {
            this[units](value);
          }
          return this;
        },
        locale: function (key) {
          var newLocaleData;
          if (key === undefined) {
            return this._locale._abbr;
          } else {
            newLocaleData = moment.localeData(key);
            if (newLocaleData != null) {
              this._locale = newLocaleData;
            }
            return this;
          }
        },
        lang: deprecate('moment().lang() is deprecated. Use moment().localeData() instead.', function (key) {
          if (key === undefined) {
            return this.localeData();
          } else {
            return this.locale(key);
          }
        }),
        localeData: function () {
          return this._locale;
        },
        _dateTzOffset: function () {
          return Math.round(this._d.getTimezoneOffset() / 15) * 15;
        }
      });
      function rawMonthSetter(mom, value) {
        var dayOfMonth;
        if (typeof value === 'string') {
          value = mom.localeData().monthsParse(value);
          if (typeof value !== 'number') {
            return mom;
          }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
      }
      function rawGetter(mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
      }
      function rawSetter(mom, unit, value) {
        if (unit === 'Month') {
          return rawMonthSetter(mom, value);
        } else {
          return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
      }
      function makeAccessor(unit, keepTime) {
        return function (value) {
          if (value != null) {
            rawSetter(this, unit, value);
            moment.updateOffset(this, keepTime);
            return this;
          } else {
            return rawGetter(this, unit);
          }
        };
      }
      moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);
      moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);
      moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);
      moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);
      moment.fn.date = makeAccessor('Date', true);
      moment.fn.dates = deprecate('dates accessor is deprecated. Use date instead.', makeAccessor('Date', true));
      moment.fn.year = makeAccessor('FullYear', true);
      moment.fn.years = deprecate('years accessor is deprecated. Use year instead.', makeAccessor('FullYear', true));
      moment.fn.days = moment.fn.day;
      moment.fn.months = moment.fn.month;
      moment.fn.weeks = moment.fn.week;
      moment.fn.isoWeeks = moment.fn.isoWeek;
      moment.fn.quarters = moment.fn.quarter;
      moment.fn.toJSON = moment.fn.toISOString;
      function daysToYears(days) {
        return days * 400 / 146097;
      }
      function yearsToDays(years) {
        return years * 146097 / 400;
      }
      extend(moment.duration.fn = Duration.prototype, {
        _bubble: function () {
          var milliseconds = this._milliseconds, days = this._days, months = this._months, data = this._data, seconds, minutes, hours, years = 0;
          data.milliseconds = milliseconds % 1000;
          seconds = absRound(milliseconds / 1000);
          data.seconds = seconds % 60;
          minutes = absRound(seconds / 60);
          data.minutes = minutes % 60;
          hours = absRound(minutes / 60);
          data.hours = hours % 24;
          days += absRound(hours / 24);
          years = absRound(daysToYears(days));
          days -= absRound(yearsToDays(years));
          months += absRound(days / 30);
          days %= 30;
          years += absRound(months / 12);
          months %= 12;
          data.days = days;
          data.months = months;
          data.years = years;
        },
        abs: function () {
          this._milliseconds = Math.abs(this._milliseconds);
          this._days = Math.abs(this._days);
          this._months = Math.abs(this._months);
          this._data.milliseconds = Math.abs(this._data.milliseconds);
          this._data.seconds = Math.abs(this._data.seconds);
          this._data.minutes = Math.abs(this._data.minutes);
          this._data.hours = Math.abs(this._data.hours);
          this._data.months = Math.abs(this._data.months);
          this._data.years = Math.abs(this._data.years);
          return this;
        },
        weeks: function () {
          return absRound(this.days() / 7);
        },
        valueOf: function () {
          return this._milliseconds + this._days * 86400000 + this._months % 12 * 2592000000 + toInt(this._months / 12) * 31536000000;
        },
        humanize: function (withSuffix) {
          var output = relativeTime(this, !withSuffix, this.localeData());
          if (withSuffix) {
            output = this.localeData().pastFuture(+this, output);
          }
          return this.localeData().postformat(output);
        },
        add: function (input, val) {
          var dur = moment.duration(input, val);
          this._milliseconds += dur._milliseconds;
          this._days += dur._days;
          this._months += dur._months;
          this._bubble();
          return this;
        },
        subtract: function (input, val) {
          var dur = moment.duration(input, val);
          this._milliseconds -= dur._milliseconds;
          this._days -= dur._days;
          this._months -= dur._months;
          this._bubble();
          return this;
        },
        get: function (units) {
          units = normalizeUnits(units);
          return this[units.toLowerCase() + 's']();
        },
        as: function (units) {
          var days, months;
          units = normalizeUnits(units);
          if (units === 'month' || units === 'year') {
            days = this._days + this._milliseconds / 86400000;
            months = this._months + daysToYears(days) * 12;
            return units === 'month' ? months : months / 12;
          } else {
            days = this._days + yearsToDays(this._months / 12);
            switch (units) {
            case 'week':
              return days / 7 + this._milliseconds / 604800000;
            case 'day':
              return days + this._milliseconds / 86400000;
            case 'hour':
              return days * 24 + this._milliseconds / 3600000;
            case 'minute':
              return days * 24 * 60 + this._milliseconds / 60000;
            case 'second':
              return days * 24 * 60 * 60 + this._milliseconds / 1000;
            case 'millisecond':
              return Math.floor(days * 24 * 60 * 60 * 1000) + this._milliseconds;
            default:
              throw new Error('Unknown unit ' + units);
            }
          }
        },
        lang: moment.fn.lang,
        locale: moment.fn.locale,
        toIsoString: deprecate('toIsoString() is deprecated. Please use toISOString() instead ' + '(notice the capitals)', function () {
          return this.toISOString();
        }),
        toISOString: function () {
          var years = Math.abs(this.years()), months = Math.abs(this.months()), days = Math.abs(this.days()), hours = Math.abs(this.hours()), minutes = Math.abs(this.minutes()), seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);
          if (!this.asSeconds()) {
            return 'P0D';
          }
          return (this.asSeconds() < 0 ? '-' : '') + 'P' + (years ? years + 'Y' : '') + (months ? months + 'M' : '') + (days ? days + 'D' : '') + (hours || minutes || seconds ? 'T' : '') + (hours ? hours + 'H' : '') + (minutes ? minutes + 'M' : '') + (seconds ? seconds + 'S' : '');
        },
        localeData: function () {
          return this._locale;
        }
      });
      moment.duration.fn.toString = moment.duration.fn.toISOString;
      function makeDurationGetter(name) {
        moment.duration.fn[name] = function () {
          return this._data[name];
        };
      }
      for (i in unitMillisecondFactors) {
        if (hasOwnProp(unitMillisecondFactors, i)) {
          makeDurationGetter(i.toLowerCase());
        }
      }
      moment.duration.fn.asMilliseconds = function () {
        return this.as('ms');
      };
      moment.duration.fn.asSeconds = function () {
        return this.as('s');
      };
      moment.duration.fn.asMinutes = function () {
        return this.as('m');
      };
      moment.duration.fn.asHours = function () {
        return this.as('h');
      };
      moment.duration.fn.asDays = function () {
        return this.as('d');
      };
      moment.duration.fn.asWeeks = function () {
        return this.as('weeks');
      };
      moment.duration.fn.asMonths = function () {
        return this.as('M');
      };
      moment.duration.fn.asYears = function () {
        return this.as('y');
      };
      moment.locale('en', {
        ordinal: function (number) {
          var b = number % 10, output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
          return number + output;
        }
      });
      function makeGlobal(shouldDeprecate) {
        if (typeof ender !== 'undefined') {
          return;
        }
        oldGlobalMoment = globalScope.moment;
        if (shouldDeprecate) {
          globalScope.moment = deprecate('Accessing Moment through the global scope is ' + 'deprecated, and will be removed in an upcoming ' + 'release.', moment);
        } else {
          globalScope.moment = moment;
        }
      }
      if (hasModule) {
        module.exports = moment;
      } else if (typeof define === 'function' && define.amd) {
        define('moment', function (require, exports, module) {
          if (module.config && module.config() && module.config().noGlobal === true) {
            globalScope.moment = oldGlobalMoment;
          }
          return moment;
        });
        makeGlobal(true);
      } else {
        makeGlobal();
      }
    }.call(this));
  },
  './node_modules/spotify-locales/index.js': function (require, module, exports, global) {
    var languages = require('./node_modules/spotify-locales/languages.json');
    function lookup(language, to) {
      var lang = languages[language];
      if (lang[to]) {
        return lang[to];
      } else {
        return language;
      }
    }
    module.exports = lookup;
    module.exports.all = function () {
      return Object.keys(languages);
    };
  },
  './node_modules/spotify-cosmos-api/index.js': function (require, module, exports, global) {
    'use strict';
    var window = global.window || {};
    var process = global.process;
    var common = require('./node_modules/spotify-cosmos-api/node_modules/cosmos-common-js/index.js');
    var Resolver = require('./node_modules/spotify-cosmos-api/scripts/resolver.js').Resolver;
    var SPResolver = null;
    var spResolver = null;
    var hasNativeBridge = window._getSpotifyModule && typeof window._getSpotifyModule === 'function' && window._getSpotifyModule('bridge');
    var isNodeJs = process && process.title && /node(\.exe)*$/.test(process.argv[0]);
    if (!isNodeJs) {
      if (hasNativeBridge) {
        SPResolver = require('./node_modules/spotify-cosmos-api/env/bootstrap.native.js').NativeResolver;
        spResolver = new SPResolver(hasNativeBridge);
      } else {
        SPResolver = require('./node_modules/spotify-cosmos-api/env/bootstrap.web.js').WebResolver;
        spResolver = new SPResolver();
      }
    }
    exports.Resolver = Resolver;
    exports.Action = common.request.Action;
    exports.Request = common.request.Request;
    exports.Response = common.response.Response;
    exports.resolver = spResolver ? new Resolver(spResolver) : null;
  },
  './node_modules/spotify-live-models/client.js': function (require, module, exports, global) {
    'use strict';
    var forEach = require('./node_modules/mout/array/forEach.js');
    var live = require('./node_modules/spotify-live/index.js');
    var bridge = require('./node_modules/spotify-live-models/util/bridge.js').request;
    var liburi = require('./node_modules/spotify-liburi/src/uri.js');
    var BACKOFF = 100;
    function updateCurrentUser(model) {
      bridge('user_metadata', ['spotify:user:@'], function (error, payload) {
        if (error) {
          if (global.__spotify && global.__spotify.username) {
            var username = global.__spotify.username;
            model.update({
              currentUser: {
                uri: liburi.profileURI(username).toURI(),
                username: username
              }
            });
          }
          if (global.console)
            console.error(error);
          return;
        }
        model.update({
          currentUser: {
            uri: liburi.profileURI(payload.username).toURI(),
            name: payload.name,
            username: payload.username
          }
        });
      });
    }
    function getFeatures(callback) {
      bridge('client_features', [], function (error, payload) {
        if (error)
          return callback(error);
        callback(null, payload.features);
      });
    }
    function updateSessionData(model) {
      bridge('session_query', [], function (error, payload) {
        if (error) {
          if (global.console)
            console.error(error);
          return;
        }
        if (payload.employee === undefined) {
          if (global.__spotify && global.__spotify.product_state && global.__spotify.product_state.employee) {
            payload.employee = global.__spotify.product_state.employee === '1' ? true : false;
          } else {
            payload.employee = false;
          }
        }
        model.update({ session: payload });
        bridgeWaitSession(model);
      });
    }
    function bridgeWaitSession(model) {
      bridge('session_event_wait', [], function (error, event) {
        if (!registered)
          return;
        if (error) {
          setTimeout(function () {
            bridgeWaitSession(model);
          }, BACKOFF);
          if (global.console)
            console.error(error);
          return;
        }
        if (event.type === 'change') {
          model.get('session').update(event.data);
        }
        bridgeWaitSession(model);
      });
    }
    function showContextMenu(model, event) {
      var uris = event.uris;
      var x = event.x;
      var y = event.y;
      var context = event.context && event.context.uri || null;
      var index = event.index;
      bridge('client_show_context_ui', [
        uris,
        x,
        y,
        context,
        index
      ]);
    }
    function showContextMenuV2(model, data) {
      if (global === window && window.top && window.top.postMessage) {
        window.top.postMessage({
          type: 'client_show_context_ui',
          data: data
        }, '*');
      }
    }
    function onWait(model, properties) {
      if (properties.indexOf('currentUser') > -1) {
        updateCurrentUser(model);
      }
      if (properties.indexOf('session') > -1) {
        updateSessionData(model);
      }
    }
    var hasFeatures;
    function onFeaturesWait(featuresModel, properties) {
      if (hasFeatures) {
        var features = {};
        forEach(properties, function (prop) {
          features[prop] = false;
        });
        featuresModel.update(features);
      } else {
        hasFeatures = true;
        getFeatures(function (error, features) {
          if (error) {
            if (global.console)
              console.error(error);
            return;
          }
          featuresModel.update(features);
          var neededFeatures = [];
          forEach(properties, function (prop) {
            if (!(prop in features))
              neededFeatures.push(prop);
          });
          onFeaturesWait(featuresModel, neededFeatures);
        });
      }
    }
    function onInit(model) {
      var __spotify = global.__spotify || {};
      var containerFeatures = live(__spotify.container_features || {});
      containerFeatures.on('wait', function (properties) {
        var update = {};
        for (var i = 0, property; property = properties[i]; i++) {
          update[property] = false;
        }
        containerFeatures.update(update);
      });
      var features = live({});
      features.on('wait', function (properties) {
        onFeaturesWait(features, properties);
      });
      model.update({
        features: features,
        containerFeatures: containerFeatures
      });
      if (global.__spotify && global.__spotify.username) {
        var username = global.__spotify.username;
        model.update({
          currentUser: {
            uri: liburi.profileURI(username).toURI(),
            username: username
          }
        });
      }
      updateCurrentUser(model);
    }
    var regExp = exports.matches = /^spotify:client$/;
    var registered;
    exports.register = function () {
      if (registered)
        return;
      registered = true;
      live.subscribe(regExp, 'wait', onWait);
      live.subscribe(regExp, 'init', onInit);
      live.subscribe(regExp, 'show-context-menu', showContextMenu);
      live.subscribe(regExp, 'show-context-menu-v2', showContextMenuV2);
    };
    exports.unregister = function () {
      if (!registered)
        return;
      registered = false;
      live.unsubscribe(regExp, 'wait', onWait);
      live.unsubscribe(regExp, 'init', onInit);
      live.unsubscribe(regExp, 'show-context-menu', showContextMenu);
      live.unsubscribe(regExp, 'show-context-menu-v2', showContextMenuV2);
    };
  },
  './node_modules/spotify-live-models/application.js': function (require, module, exports, global) {
    'use strict';
    var contains = require('./node_modules/mout/array/contains.js');
    var live = require('./node_modules/spotify-live/index.js');
    var bridge = require('./node_modules/spotify-live-models/util/bridge.js').request;
    var BACKOFF = 100;
    function bridgeWait() {
      bridge('application_event_wait', [], function (error, event) {
        if (!registered)
          return;
        if (error) {
          setTimeout(function () {
            bridgeWait(model);
          }, BACKOFF);
          if (global.console)
            console.error(error);
          return;
        }
        var model = live('spotify:application');
        if (event.data && event.data.arguments) {
          model.update({ arguments: event.data.arguments.join(':') });
        }
        switch (event.type) {
        case 'activate':
          model.update({ 'active': true });
          break;
        case 'deactivate':
          model.update({ 'active': false });
          break;
        }
        bridgeWait(model);
      });
    }
    function onMessage(message) {
      var model = live('spotify:application');
      if (message.data && message.data.name === 'set_active') {
        model.update({ 'active': message.data.active });
      }
      if (message.data && message.data.name === 'set_arguments') {
        model.update({ arguments: message.data.arguments.join(':') });
      }
    }
    function onWait(model, properties) {
      if (contains(properties, 'version'))
        model.update({ version: '0.0.0' });
    }
    function onRegister(model) {
      bridge('application_query', [], function (error, payload) {
        if (error) {
          if (global.console)
            console.error(error);
          return;
        }
        var data = {};
        if (payload.uri)
          data.appURI = payload.uri;
        if (payload.arguments)
          data.arguments = payload.arguments.join(':');
        if ('active' in payload)
          data.active = payload.active;
        model.update(data);
      });
    }
    function applicationOpenUri(model, event) {
      bridge('application_open_uri', [event.uri]);
    }
    function applicationReplaceUri(model, event) {
      model.get('appURI', function (error, appUri) {
        if (error) {
          if (global.console)
            console.error(error);
          return;
        }
        bridge('application_open_uri', [
          event.uri,
          appUri
        ]);
      });
    }
    var regExp = exports.matches = /^spotify:application$/;
    var registered;
    exports.register = function () {
      if (registered)
        return;
      registered = true;
      live.subscribe(regExp, 'push-history-state', applicationOpenUri);
      live.subscribe(regExp, 'replace-history-state', applicationReplaceUri);
      live.subscribe(regExp, 'wait', onWait);
      global.addEventListener('message', onMessage);
      bridgeWait();
      onRegister(live('spotify:application'));
    };
    exports.unregister = function () {
      if (!registered)
        return;
      registered = false;
      live.unsubscribe(regExp, 'push-history-state', applicationOpenUri);
      live.unsubscribe(regExp, 'replace-history-state', applicationReplaceUri);
      live.unsubscribe(regExp, 'wait', onWait);
      global.removeEventListener('message', onMessage);
    };
  },
  './node_modules/spotify-live-models/playlist.js': function (require, module, exports, global) {
    'use strict';
    var contains = require('./node_modules/mout/array/contains.js');
    var forEach = require('./node_modules/mout/array/forEach.js');
    var mixIn = require('./node_modules/mout/object/mixIn.js');
    var intersection = require('./node_modules/mout/array/intersection.js');
    var live = require('./node_modules/spotify-live/index.js');
    var diff = require('./node_modules/spotify-live/util/diff.js');
    var util = require('./node_modules/spotify-live-models/util/common.js');
    var liburi = require('./node_modules/spotify-liburi/src/uri.js');
    var listOperations = require('./node_modules/spotify-live-list-operations/index.js');
    var LiveList = live.List;
    var cosmos = require('./node_modules/spotify-live-models/util/cosmos.js');
    var bridgeRequest = require('./node_modules/spotify-live-models/util/bridge.js').request;
    var CLIENT = 'spotify:client';
    var BACKOFF = 100;
    var DUPLICATE_ACTIONS = {
        ADD_ALL: 'add_all',
        ADD_UNIQUE: 'add_unique',
        CANCEL: 'cancel'
      };
    var OFFLINE_STATUS = {
        NO: 'no',
        WAITING: 'waiting',
        DOWNLOADING: 'downloading',
        YES: 'yes'
      };
    var endpoints = { broadcast: 'sp://messages/v1/playliststate' };
    function onBroadcast(error, response) {
      if (error) {
        if (global.console)
          console.error(error);
        return;
      }
      live(response.body.uri).update(response.body);
    }
    var offlineSubscriptions = {};
    function bridgeWaitAny(model) {
      bridgeRequest('playlist_event_wait_any', [model.uri], function (error, event) {
        var eventModel = event && event.data.uri ? live(event.data.uri) : model;
        if (error) {
          setTimeout(function () {
            bridgeWaitAny(eventModel);
          }, BACKOFF);
          if (global.console)
            console.error(error);
          return;
        }
        if (event.type === 'change') {
          event.data.isFollowing = event.data.subscribed;
          event.data.added = event.data.subscribed;
          eventModel.update(event.data);
        }
        bridgeWaitAny(eventModel);
      });
    }
    function bridgeWait(model) {
      bridgeRequest('playlist_event_wait', [model.uri], function (error, event) {
        if (error) {
          if (error.name !== 'invalid-uri') {
            setTimeout(function () {
              bridgeWait(model);
            }, BACKOFF);
          }
          if (global.console)
            console.error(error);
          return;
        }
        var isStarred = liburi.from(model.uri).type === liburi.Type.STARRED;
        if (!isStarred && event.data && event.data.name === '') {
          delete event.data.name;
        }
        switch (event.type) {
        case 'change':
          model.update(event.data);
          break;
        case 'insert':
          insertTracks(model, event.index, event.uris, event.rowData);
          break;
        case 'remove':
          removeTracks(model, event.indices);
          break;
        case 'move':
          moveTracks(model, event.indices, event.index);
          break;
        }
        bridgeWait(model);
      });
    }
    function insertTracks(model, startIndex, uris, opt_rowData) {
      var rows = model.get('rows');
      if (!rows)
        return;
      var insertedRows;
      var insertedLength = uris.length;
      if (opt_rowData) {
        insertedRows = uris.map(function (uri, i) {
          var rowData = opt_rowData[i];
          var dateAdded = rowData.dateAdded * 1000;
          var addedByUsername = rowData.addedBy;
          return {
            track: { uri: uri },
            dateAdded: dateAdded,
            addedBy: {
              uri: liburi.profileURI(addedByUsername).toURI(),
              username: addedByUsername
            },
            uri: getRowUri(uri),
            timeSinceAdded: -dateAdded
          };
        });
      } else {
        insertedRows = new Array(insertedLength);
      }
      var operations = listOperations.getInsertOperations(insertedRows, startIndex);
      rows.update(operations);
      if (!opt_rowData) {
        snapshotTracks(model, startIndex, insertedLength);
      }
    }
    function removeTracks(model, indices) {
      var rows = model.get('rows');
      if (!rows)
        return;
      var operations = listOperations.getRemoveOperations(indices);
      rows.update(operations);
    }
    function moveTracks(model, fromIndices, toIndex) {
      var rows = model.get('rows');
      if (!rows)
        return;
      var operations = listOperations.getMoveOperations(fromIndices, toIndex);
      rows.update(operations);
    }
    function updateMetadata(model, needsImage) {
      bridgeRequest('playlist_metadata', [model.uri], function (error, payload) {
        if (error) {
          if (global.console)
            console.error(error);
          return;
        }
        model.update(payload);
        if (needsImage && !payload.images) {
          updateImage(model);
        }
      });
    }
    function updateImage(model) {
      bridgeRequest('playlist_profile', [model.uri], function (error, payload) {
        if (error) {
          if (global.console)
            console.error(error);
          return;
        }
        if (!payload.image)
          payload.image = '';
        if (!payload.images)
          payload.images = [];
        model.update(payload);
      });
    }
    function updatePopularity(model) {
      bridgeRequest('playlist_popularity', [model.uri], function (error, payload) {
        if (error) {
          if (global.console)
            console.error(error);
          return;
        }
        model.update(payload);
      });
    }
    function createRowsProperty(model) {
      var descriptor = {
          uri: model.uri,
          type: 'list'
        };
      bridgeRequest('playlist_tracks_snapshot', [
        descriptor,
        0,
        0,
        false
      ], function (error, payload) {
        if (error) {
          if (global.console)
            console.error(error);
          return;
        }
        var rows = new LiveList(payload.length);
        model.update({ rows: rows });
        rows.on('wait', function (ranges) {
          onRowsWait(model, rows, ranges);
        });
        rows.on('publish', function (operations) {
          onRowsPublish(model, rows, operations);
        });
      });
    }
    function snapshotTracks(model, start, length) {
      var rowsList = model.get('rows');
      if (!rowsList)
        return;
      var descriptor = {
          uri: model.uri,
          type: 'list'
        };
      bridgeRequest('playlist_tracks_snapshot', [
        descriptor,
        start,
        length,
        false
      ], function (error, payload) {
        if (error) {
          if (global.console)
            console.error(error);
          return;
        }
        var rowsArray = getRowsFromPayload(payload);
        var rowsOperations = [
            {
              type: 'remove',
              index: start,
              length: rowsArray.length
            },
            {
              type: 'insert',
              index: start,
              values: rowsArray
            }
          ];
        rowsList.update(rowsOperations);
      });
    }
    var idCounter = 1000;
    function getRowUri(trackUri) {
      return trackUri.replace('spotify:', 'spotify:row:' + (++idCounter).toString(36) + ':');
    }
    function getRowsFromPayload(payload) {
      var rows = [];
      for (var i = 0, l = payload.array.length; i < l; i++) {
        var metadata = payload.metadata[i] || {};
        var track = mixIn({ uri: payload.array[i] }, metadata.track || metadata);
        setEmptyProperties(track);
        util.setLocalProperties(track);
        track.unavailable = !track.playable;
        delete track.images;
        if (track.album)
          delete track.album.images;
        if (track.artists) {
          for (var n = 0, len = track.artists.length; n < len; n++) {
            delete track.artists[n].images;
          }
        }
        var addedBy = track.addedBy;
        if (!addedBy || typeof addedBy === 'string') {
          addedBy = {
            name: track.addedBy || '',
            username: track.addedBy || '',
            uri: track.addedBy ? liburi.profileURI(track.addedBy).toURI() : ''
          };
        }
        var dateAdded = null;
        var timeSinceAdded = null;
        if (typeof track.dateAdded === 'number') {
          dateAdded = track.dateAdded * 1000;
          timeSinceAdded = -dateAdded;
        }
        var row = {
            uri: getRowUri(track.uri),
            track: track,
            dateAdded: dateAdded,
            timeSinceAdded: timeSinceAdded,
            addedBy: addedBy
          };
        rows.push(row);
        delete track.dateAdded;
        delete track.addedBy;
      }
      return rows;
    }
    function setEmptyProperties(track) {
      if (!('album' in track))
        track.album = {
          uri: '',
          name: '',
          local: false
        };
      if (!('artists' in track))
        track.artists = [{
            uri: '',
            name: '',
            local: false
          }];
      if (!('advertisement' in track))
        track.advertisement = false;
      if (!('availability' in track))
        track.availability = 'unavailable';
      if (!('disc' in track))
        track.disc = 0;
      if (!('duration' in track))
        track.duration = 0;
      if (!('explicit' in track))
        track.explicit = false;
      if (!('image' in track))
        track.image = '';
      if (!('local' in track))
        track.local = false;
      if (!('name' in track))
        track.name = '';
      if (!('number' in track))
        track.number = 0;
      if (!('playable' in track))
        track.playable = false;
      if (!('popularity' in track))
        track.popularity = 0;
      if (!('starred' in track))
        track.starred = false;
      if (!('unavailable' in track))
        track.unavailable = true;
    }
    function onWait(model, properties) {
      var needsShouldBeOffline = contains(properties, 'shouldBeOffline');
      var needsOfflineStatus = contains(properties, 'offlineStatus');
      var needsOfflineProgress = contains(properties, 'offlineProgress');
      var needsRows;
      var needsPopularity;
      var needsImage;
      var needsMetadata;
      var metaFields = [
          'collaborative',
          'subscribed',
          'published',
          'name',
          'owner',
          'description',
          'allows'
        ];
      forEach(properties, function (key) {
        if (key === 'rows')
          needsRows = true;
        if (key === 'popularity')
          needsPopularity = true;
        if (key === 'image' || key === 'images') {
          needsImage = true;
        }
        if (!needsMetadata && contains(metaFields, key))
          needsMetadata = true;
      });
      if (needsMetadata)
        updateMetadata(model, needsImage);
      else if (needsImage)
        updateImage(model);
      if (needsPopularity)
        updatePopularity(model);
      if (needsRows)
        createRowsProperty(model);
      if (needsShouldBeOffline || needsOfflineProgress || needsOfflineStatus)
        updateOffline(model);
    }
    function onInit(model) {
      bridgeWait(model);
      if (global._getSpotifyModule) {
        bridgeWaitAny(model);
      }
    }
    function onPublish(model, properties) {
      if (!properties.hasOwnProperty('shouldBeOffline')) {
        return;
      }
      live(CLIENT).query('session(capabilities(offlineSync))', function (error, data) {
        if (error && global.console)
          console.error(error);
        if (error || !data.session.capabilities.offlineSync) {
          sendCantOfflineMessage();
        } else {
          var shouldBeOfflineValue;
          if ('shouldBeOffline' in properties)
            shouldBeOfflineValue = !!properties.shouldBeOffline;
          if (shouldBeOfflineValue !== undefined) {
            updateModelWithOffline(model, { offline_availability: shouldBeOfflineValue ? 'yes' : 'no' });
            publishShouldBeOffline(model, shouldBeOfflineValue);
          }
        }
      }, live.ASAP);
    }
    function onUpdate(model, data) {
      if ('offlineStatus' in data) {
        var shouldBeOffline = model.get('shouldBeOffline');
        var isDownloading = data.offlineStatus === OFFLINE_STATUS.DOWNLOADING;
        var shouldSubscribe = shouldBeOffline && isDownloading;
        if (shouldSubscribe) {
          subscribeToOfflineProgress(model);
        } else {
          unsubscribeToOfflineProgress(model);
        }
      }
    }
    function updateOffline(model) {
      cosmos.subscribe({ url: 'sp://offline/v1/resources?uri=' + model.uri }, function (error, response) {
        if (!error) {
          var resource = response.body.resources;
          updateModelWithOffline(model, resource);
        } else {
          if (error.response && error.response.getStatusCode() === -104) {
            if (global._getSpotifyModule) {
              bridgeRequest('offline_query_state', [model.uri], function (error, data) {
                if (error) {
                  if (global.console)
                    console.error(error);
                  return;
                }
                updateModelWithOffline(model, { offline_availability: data.enabled ? 'yes' : 'no' });
              });
            } else {
              updateModelWithOffline(model, { offline_availability: 'no' });
            }
          } else {
            if (global.console)
              console.error(error);
            return;
          }
        }
      });
    }
    function updateModelWithOffline(model, resource) {
      var shouldBeOffline = false;
      var progress;
      switch (resource.offline_availability) {
      case OFFLINE_STATUS.WAITING:
        shouldBeOffline = true;
        progress = 0;
        break;
      case OFFLINE_STATUS.DOWNLOADING:
        shouldBeOffline = true;
        break;
      case OFFLINE_STATUS.YES:
        shouldBeOffline = true;
        progress = 1;
        break;
      case OFFLINE_STATUS.NO:
        progress = 0;
        break;
      }
      model.update({
        shouldBeOffline: shouldBeOffline,
        offlineStatus: resource.offline_availability
      });
      if (progress !== undefined) {
        model.update({ offlineProgress: progress });
      }
    }
    function subscribeToOfflineProgress(model) {
      var subscription = offlineSubscriptions[model.uri];
      if (subscription) {
        return;
      }
      offlineSubscriptions[model.uri] = cosmos.subscribe({ url: 'sp://offline/v1/progress?uri=' + model.uri }, function (error, response) {
        if (!error) {
          var progress = response.body.progress;
          model.update({ offlineProgress: progress.percent_complete / 100 || 0 });
          if (progress.percent_complete === 100) {
            unsubscribeToOfflineProgress(model);
          }
        } else {
          if (error.response && error.response.getStatusCode() === -104) {
            if (global._getSpotifyModule) {
              bridgeRequest('offline_query_state', [model.uri], function (error, data) {
                if (error) {
                  if (global.console)
                    console.error(error);
                  return;
                }
                model.update({ offlineProgress: data.enabled ? 1 : 0 });
              });
            } else {
              model.update({ offlineProgress: 0 });
            }
          } else {
            if (global.console)
              console.error(error);
            return;
          }
        }
      });
    }
    function unsubscribeToOfflineProgress(model) {
      var subscription = offlineSubscriptions[model.uri];
      if (!subscription) {
        return;
      }
      subscription.cancel();
      delete offlineSubscriptions[model.uri];
    }
    function publishShouldBeOffline(model, enabled) {
      var method = enabled ? 'post' : 'delete';
      cosmos[method]({ url: 'sp://offline/v1/resources?uri=' + model.uri }, function (error, response) {
        if (error) {
          if (error.response && error.response.getStatusCode() === -104) {
            if (global._getSpotifyModule) {
              var message = enabled ? 'offline_enable_sync' : 'offline_disable_sync';
              bridgeRequest(message, [model.uri], function (error, data) {
                if (error) {
                  updateModelWithOffline(model, { offline_availability: enabled ? 'no' : 'yes' });
                }
              });
            } else {
              updateModelWithOffline(model, { offline_availability: enabled ? 'no' : 'yes' });
            }
          } else {
            updateModelWithOffline(model, { offline_availability: enabled ? 'no' : 'yes' });
          }
        }
      });
    }
    function sendCantOfflineMessage() {
      cosmos.post({
        url: 'sp://messages/v1/container/user-message',
        body: { id: 'cant-offline-playlists' }
      });
    }
    function onRowsWait(model, list, ranges) {
      forEach(ranges, function (range) {
        snapshotTracks(model, range.start, range.length);
      });
    }
    function onRowsPublish(model, rows, operations) {
      var shadow = rows.map(function (row) {
          var track = row && row.get('track');
          return track && track.uri;
        });
      operations.forEach(function (operation) {
        switch (operation.type) {
        case 'move':
          bridgeMove(model, shadow, operation);
          break;
        case 'remove':
          bridgeRemove(model, shadow, operation);
          break;
        case 'insert':
          bridgeInsert(model, shadow, operation);
          break;
        }
      });
    }
    function bridgeRemove(model, shadow, operation) {
      var isZelda = !!global.__spotify && global.__spotify.client === 'zelda';
      var desc = {
          uri: model.uri,
          type: 'list'
        };
      var index = operation.index;
      var isStarred = liburi.from(model.uri).type === liburi.Type.STARRED;
      if (!isStarred && isZelda) {
        var args = [desc];
        for (var i = index; i < index + operation.length; i++) {
          args.push(i);
          args.push(shadow[i]);
        }
        bridgeRequest('playlist_tracks_remove', args);
      } else {
        for (var i = index + operation.length - 1; i >= index; i--) {
          var trackURI = shadow[i];
          if (isStarred) {
            bridgeRequest('library_unstar', [
              'spotify:user:@',
              trackURI
            ]);
          } else {
            bridgeRequest('playlist_tracks_remove', [
              desc,
              i,
              trackURI
            ]);
          }
        }
      }
      diff.patch(shadow, [operation]);
    }
    function bridgeInsert(model, shadow, operation) {
      var hasAvoidDuplicatesFeature = !!(global.__spotify && global.__spotify.container_features && global.__spotify.container_features.avoidDuplicates);
      var uris = operation.values = operation.values.map(function (row) {
          return row.get('track').uri;
        });
      var isStarred = liburi.from(model.uri).type === liburi.Type.STARRED;
      var insert = function (model, shadow, operation) {
        var desc = {
            uri: model.uri,
            type: 'list'
          };
        if (isStarred) {
          bridgeRequest('library_star', ['spotify:user:@'].concat(uris));
        } else {
          var index = operation.index;
          if (index >= shadow.length) {
            bridgeRequest('playlist_tracks_append', [desc].concat(uris));
          } else {
            bridgeRequest('playlist_tracks_insert', [
              desc,
              index,
              shadow[index]
            ].concat(uris));
          }
        }
        diff.patch(shadow, [operation]);
      };
      if (!hasAvoidDuplicatesFeature || isStarred) {
        insert(model, shadow, operation);
        return;
      }
      getResultingDuplicates(model, uris, function (error, duplicates) {
        if (!error && duplicates.length) {
          cosmos.post({
            url: 'sp://messages/v1/avoidduplicates',
            body: {
              action: 'confirm',
              items: uris
            }
          }, function (error, response) {
            var subscription = cosmos.subscribe({ url: 'sp://messages/v1/avoidduplicates' }, function (error, response) {
                switch (response.body.action) {
                case DUPLICATE_ACTIONS.ADD_ALL:
                  subscription.cancel();
                  insert(model, shadow, operation);
                  break;
                case DUPLICATE_ACTIONS.ADD_UNIQUE:
                  uris = operation.values = operation.values.filter(function (uri) {
                    return duplicates.indexOf(uri) == -1;
                  });
                  subscription.cancel();
                  insert(model, shadow, operation);
                  break;
                case DUPLICATE_ACTIONS.CANCEL:
                  subscription.cancel();
                  break;
                }
              });
          });
        } else {
          insert(model, shadow, operation);
        }
      });
    }
    function bridgeMove(model, shadow, operation) {
      var isZelda = !!global.__spotify && global.__spotify.client === 'zelda';
      var isDesktop = global._getSpotifyModule && !isZelda;
      if (isDesktop) {
        var removeOp = {
            type: 'remove',
            index: operation.from,
            length: operation.length
          };
        var values = shadow.slice(operation.from, operation.from + operation.length);
        values = values.map(function (value) {
          return live({ track: { uri: value } });
        });
        var insertOp = {
            type: 'insert',
            index: operation.to,
            length: operation.length,
            values: values
          };
        bridgeRemove(model, shadow, removeOp);
        bridgeInsert(model, shadow, insertOp);
      } else {
        var descriptor = {
            uri: model.uri,
            type: 'list'
          };
        if (operation.to > operation.from) {
          operation.to += operation.length;
        }
        var args = [
            descriptor,
            operation.to,
            shadow[operation.to]
          ];
        for (var i = 0, l = operation.length; i < l; i++) {
          args.push(operation.from + i);
          args.push(shadow[operation.from + i]);
        }
        bridgeRequest('playlist_tracks_move', args);
        diff.patch(shadow, [operation]);
      }
    }
    function getResultingDuplicates(model, inserted, callback) {
      getTrackUris(model, function (error, existing) {
        if (error) {
          callback(error);
          return;
        }
        var duplicates = intersection(inserted, existing);
        callback(null, duplicates);
      });
    }
    function getTrackUris(model, callback) {
      var rowsList = live(model).get('rows');
      if (rowsList && rowsList.has(0, rowsList.length)) {
        callback(null, rowsList.get(0, rowsList.length).map(function (row) {
          return row.get('track').uri;
        }));
      } else {
        var descriptor = {
            uri: model.uri,
            type: 'list'
          };
        bridgeRequest('playlist_tracks_snapshot', [
          descriptor,
          0,
          -1,
          true
        ], function (error, payload) {
          callback(error, payload && payload.array);
        });
      }
    }
    var regExp = exports.matches = /^spotify:user:(.*):playlist|^spotify:internal:temp_playlist:|^spotify:temp-playlist:|^spotify:user:[^:]+:starred$/;
    var broadcastSubscription;
    var registered;
    exports.register = function () {
      if (registered)
        return;
      registered = true;
      live.subscribe(regExp, 'wait', onWait);
      live.subscribe(regExp, 'init', onInit);
      live.subscribe(regExp, 'publish', onPublish);
      live.subscribe(regExp, 'update', onUpdate);
      broadcastSubscription = cosmos.subscribe({ url: endpoints.broadcast }, onBroadcast);
    };
    exports.unregister = function () {
      if (!registered)
        return;
      registered = false;
      live.unsubscribe(regExp, 'wait', onWait);
      live.unsubscribe(regExp, 'init', onInit);
      live.unsubscribe(regExp, 'publish', onPublish);
      live.unsubscribe(regExp, 'update', onUpdate);
      broadcastSubscription.cancel();
      broadcastSubscription = null;
    };
    exports._timeSinceAddedInterval = 30000;
  },
  './node_modules/spotify-live-models/album.js': function (require, module, exports, global) {
    'use strict';
    var live = require('./node_modules/spotify-live/index.js');
    var liburi = require('./node_modules/spotify-liburi/src/uri.js');
    var intersection = require('./node_modules/mout/array/intersection.js');
    var contains = require('./node_modules/mout/array/contains.js');
    var map = require('./node_modules/mout/array/map.js');
    var mixIn = require('./node_modules/mout/object/mixIn.js');
    var bridge = require('./node_modules/spotify-live-models/util/bridge.js').request;
    function isLocalAlbum(uri) {
      return liburi.from(uri).type === liburi.Type.LOCAL_ALBUM;
    }
    function isLocalArtist(uri) {
      return liburi.from(uri).type === liburi.Type.LOCAL_ARTIST;
    }
    function updateMetadata(model) {
      if (isLocalAlbum(model.uri)) {
        var uriObject = liburi.from(model.uri);
        if (uriObject) {
          var data = {
              local: true,
              name: uriObject.album,
              artists: [{
                  uri: 'spotify:local:',
                  name: '',
                  local: true
                }]
            };
          if (uriObject.artist) {
            data.artists[0].uri = liburi.localArtistURI(uriObject.artist).toURI();
            data.artists[0].name = uriObject.artist;
            data.artists[0].local = true;
          }
          model.update(data);
        }
      } else {
        bridge('album_metadata', [model.uri], function (error, payload) {
          if (error) {
            if (global.console)
              console.error(error);
            return;
          }
          model.update(payload);
        });
      }
    }
    function updateLocal(model) {
      model.update({ local: isLocalAlbum(model.uri) });
    }
    var idCounter = 1000;
    function getRowUri(trackUri) {
      return trackUri.replace('spotify:', 'spotify:row:' + (++idCounter).toString(36) + ':');
    }
    function updateRows(model) {
      var descriptor = {
          type: 'list',
          uri: model.uri
        };
      bridge('album_tracks_snapshot', [
        descriptor,
        0,
        0,
        false
      ], function (error, payload) {
        if (error) {
          if (global.console)
            console.error(error);
          return;
        }
        bridge('album_tracks_snapshot', [
          descriptor,
          0,
          payload.length,
          false
        ], function (error, payload) {
          if (error) {
            if (global.console)
              console.error(error);
            return;
          }
          var discs = [];
          var uriId = liburi.from(model.uri).id;
          var rows = map(payload.metadata, function (trackdata, i) {
              var track = mixIn({ uri: payload.array[i] }, trackdata);
              var discNum = track.disc ? track.disc - 1 : 0;
              track.unavailable = !track.playable;
              setLocalProperty(track);
              if (!discs[discNum]) {
                discs[discNum] = {
                  rows: [],
                  uri: uriId ? liburi.albumURI(uriId, discNum + 1).toURI() : ''
                };
              }
              var uri = getRowUri(track.uri);
              var trackObject = {
                  track: track,
                  uri: uri
                };
              discs[discNum].rows.push(trackObject);
              return trackObject;
            });
          model.update({
            rows: rows,
            discs: discs
          });
        });
      });
    }
    function setLocalProperty(track) {
      if (track.album && track.album.uri) {
        track.album.local = isLocalAlbum(track.album.uri);
      }
      if (track.artists) {
        for (var i = 0, l = track.artists.length; i < l; i++) {
          var artist = track.artists[i];
          if (artist.uri) {
            artist.local = isLocalArtist(artist.uri);
          }
        }
      }
    }
    function onWait(model, properties) {
      var hasLocal = contains(properties, 'local');
      var hasRows = contains(properties, 'rows');
      var hasDiscs = contains(properties, 'discs');
      var metaFields = [
          'artists',
          'image',
          'images',
          'name',
          'playable',
          'type',
          'availability',
          'date',
          'label',
          'copyrights'
        ];
      var hasMetadata = !!intersection(properties, metaFields).length;
      if (hasMetadata)
        updateMetadata(model);
      if (hasRows || hasDiscs)
        updateRows(model);
      if (hasLocal)
        updateLocal(model);
    }
    var regExp = exports.matches = /^spotify:album:[0-9a-zA-Z]+$|^spotify:local:[^:]*:[^:]*$/;
    var registered;
    exports.register = function () {
      if (registered)
        return;
      registered = true;
      live.subscribe(regExp, 'wait', onWait);
    };
    exports.unregister = function () {
      if (!registered)
        return;
      registered = false;
      live.unsubscribe(regExp, 'wait', onWait);
    };
  },
  './node_modules/spotify-live-models/artist.js': function (require, module, exports, global) {
    'use strict';
    var liburi = require('./node_modules/spotify-liburi/src/uri.js');
    var contains = require('./node_modules/mout/array/contains.js');
    var live = require('./node_modules/spotify-live/index.js');
    var bridge = require('./node_modules/spotify-live-models/util/bridge.js').request;
    function isLocalArtist(uri) {
      return liburi.from(uri).type === liburi.Type.LOCAL_ARTIST;
    }
    function updateMetadata(model) {
      if (isLocalArtist(model.uri)) {
        var uriObject = liburi.from(model.uri);
        if (uriObject) {
          model.update({
            local: true,
            name: uriObject.artist
          });
        }
      } else {
        bridge('artist_metadata', [model.uri], function (error, payload) {
          if (error) {
            if (global.console)
              console.error(error);
            return;
          }
          if (!payload.image && !model.get('image'))
            payload.image = '';
          if (!payload.images && !model.get('images'))
            payload.images = [];
          model.update(payload);
        });
      }
    }
    function updateLocal(model) {
      model.update({ local: isLocalArtist(model.uri) });
    }
    function onWait(model, properties) {
      var hasLocal = contains(properties, 'local');
      var hasMetadata = false;
      var metaFields = [
          'image',
          'images',
          'name',
          'popularity'
        ];
      for (var i = 0, l = properties.length; i < l; i++) {
        if (contains(metaFields, properties[i])) {
          hasMetadata = true;
          break;
        }
      }
      if (hasMetadata)
        updateMetadata(model);
      if (hasLocal)
        updateLocal(model);
    }
    var regExp = exports.matches = /^spotify:artist:|^spotify:local:[^:]*$/;
    var registered;
    exports.register = function () {
      if (registered)
        return;
      registered = true;
      live.subscribe(regExp, 'wait', onWait);
    };
    exports.unregister = function () {
      if (!registered)
        return;
      registered = false;
      live.unsubscribe(regExp, 'wait', onWait);
    };
  },
  './node_modules/spotify-live-models/track.js': function (require, module, exports, global) {
    'use strict';
    var live = require('./node_modules/spotify-live/index.js');
    var liburi = require('./node_modules/spotify-liburi/src/uri.js');
    var intersection = require('./node_modules/mout/array/intersection.js');
    var contains = require('./node_modules/mout/array/contains.js');
    var forEach = require('./node_modules/mout/array/forEach.js');
    var bridge = require('./node_modules/spotify-live-models/util/bridge.js').request;
    var cosmos = require('./node_modules/spotify-live-models/util/cosmos.js');
    var util = require('./node_modules/spotify-live-models/util/common.js');
    var BACKOFF = 100;
    var localFilesRequest = null;
    var metaFields = [
        'album',
        'artists',
        'availability',
        'disc',
        'duration',
        'explicit',
        'image',
        'local',
        'name',
        'number',
        'placeholder',
        'playable',
        'popularity',
        'linkedTrack',
        'starred'
      ];
    function onWait(model, properties) {
      if (contains(properties, 'unavailable')) {
        model.get('playable', function (error, playable) {
          if (error) {
            if (global.console)
              console.error(error);
            return;
          }
          model.update({ unavailable: !playable });
        });
      }
      var hasMetadata = !!intersection(properties, metaFields).length;
      if (hasMetadata)
        updateMetadata(model);
      var needsShouldBeOffline = contains(properties, 'shouldBeOffline');
      var needsOfflineProgress = contains(properties, 'offlineProgress');
      if (needsShouldBeOffline || needsOfflineProgress) {
        updateOffline(model);
      }
    }
    function updateMetadata(model) {
      bridge('track_metadata', [model.uri], function (error, payload) {
        if (error) {
          if (global.console)
            console.error(error);
          return;
        }
        util.setLocalProperties(payload);
        payload.image = largestImage(payload);
        if (payload.linkedTrack) {
          payload.linkedTrack = { uri: payload.linkedTrack };
        } else {
          payload.linkedTrack = null;
        }
        model.update(payload);
      });
    }
    function largestImage(trackMetadata) {
      var imageURI = trackMetadata.image;
      var largestSize;
      if (trackMetadata.images) {
        for (var i = 0; i < trackMetadata.images.length; i++) {
          var currentImage = trackMetadata.images[i];
          if (!largestSize || currentImage[0] > largestSize) {
            largestSize = currentImage[0];
            imageURI = currentImage[1];
          }
        }
      }
      return imageURI;
    }
    function updateOffline(model) {
      if (liburi.fromString(model.uri).type === liburi.Type.LOCAL) {
        model.get('playable', function (error, playable) {
          if (error) {
            if (global.console)
              console.error(error);
            return;
          }
          model.update({
            shouldBeOffline: playable,
            offlineProgress: playable ? 1 : 0
          });
        });
        return;
      }
      cosmos.subscribe({ url: 'sp://offline/v1/resources?uri=' + model.uri }, function (error, response) {
        if (!error) {
          var resource = response.body.resources;
          updateModelWithOfflineData(model, resource);
        } else {
          var statusCode = error.response && error.response.getStatusCode();
          if (statusCode === -104 || statusCode === 404) {
            updateModelWithOfflineData(model, { offline_availability: 'no' });
          } else {
            if (global.console)
              console.error(error);
            return;
          }
        }
      });
    }
    function updateModelWithOfflineData(model, resource) {
      var shouldBeOffline = false;
      var offlineProgress = 0;
      switch (resource.offline_availability) {
      case 'waiting':
        shouldBeOffline = true;
        offlineProgress = 0;
        break;
      case 'downloading':
        shouldBeOffline = true;
        offlineProgress = 0.5;
        break;
      case 'yes':
        shouldBeOffline = true;
        offlineProgress = 1;
        break;
      }
      model.update({
        shouldBeOffline: shouldBeOffline,
        offlineProgress: offlineProgress
      });
    }
    function waitForLocalFilesChange() {
      localFilesRequest = cosmos.subscribe({ url: 'sp://local-files/v1/changes' }, function (error, response) {
        if (!registered)
          return;
        if (error) {
          var statusCode = error.response && error.response.getStatusCode();
          if (statusCode === -104 || statusCode === 404) {
            return;
          }
          if (global.console)
            console.error(error);
          return;
        }
        var event = response.body;
        var data = event.data;
        var type = event.type;
        var isAdded = type === 'added';
        var isRemoved = type === 'removed';
        if (isAdded || isRemoved) {
          forEach(data.tracks, function (track) {
            live(track.uri).update({
              shouldBeOffline: isAdded,
              offlineProgress: isAdded ? 1 : 0,
              playable: isAdded
            });
          });
        }
      });
    }
    function waitForTrackChange() {
      bridge('track_event_wait_any', [], function (error, event) {
        if (!registered)
          return;
        if (error) {
          setTimeout(function () {
            waitForTrackChange();
          }, BACKOFF);
          if (global.console)
            console.error(error);
          return;
        }
        waitForTrackChange();
        if (event.type === 'change') {
          if (event.data.playable !== undefined) {
            event.data.unavailable = !event.data.playable;
          }
          live(event.data.uri).update(event.data);
        }
      });
    }
    var regExp = exports.matches = /^spotify:track:|^spotify:local:[^:]*:[^:]*:[^:]*:\d*$/;
    var registered;
    exports.register = function () {
      if (registered)
        return;
      registered = true;
      live.subscribe(regExp, 'wait', onWait);
      waitForLocalFilesChange();
      if (!!global._getSpotifyModule)
        waitForTrackChange();
    };
    exports.unregister = function () {
      if (!registered)
        return;
      registered = false;
      live.unsubscribe(regExp, 'wait', onWait);
      if (localFilesRequest) {
        localFilesRequest.cancel();
        localFilesRequest = null;
      }
    };
  },
  './node_modules/spotify-live-models/sortlist.js': function (require, module, exports, global) {
    'use strict';
    var live = require('./node_modules/spotify-live/index.js');
    var forEach = require('./node_modules/mout/array/forEach.js');
    var forIn = require('./node_modules/mout/object/forIn.js');
    var mixIn = require('./node_modules/mout/object/mixIn.js');
    var Range = require('./node_modules/spotify-range2/index.js');
    var diff = require('./node_modules/spotify-live/util/diff.js');
    var parse = require('./node_modules/spotify-live/util/parser.js');
    var sortUriUtils = require('./node_modules/spotify-live-sort-uri/index.js');
    var listOperations = require('./node_modules/spotify-live-list-operations/index.js');
    var sort = require('./node_modules/spotify-live-models/sorting/sort.js');
    var getValues = require('./node_modules/spotify-live-models/sorting/values.js');
    var idCounter = 0;
    var lastIds = {};
    function onInit(sortModel) {
      var trackingModel = getTrackingModel(sortModel.uri);
      lastIds[sortModel.uri] = (++idCounter).toString(36);
      trackingModel.on('update', function (properties) {
        var updateObject = mixIn({}, properties);
        delete updateObject.rows;
        sortModel.update(updateObject);
      });
      sortModel.on('publish', function (properties) {
        var updateObject = mixIn({}, properties);
        delete updateObject.rows;
        trackingModel.publish(updateObject);
      });
    }
    function onWait(sortModel, properties) {
      var trackingModel = getTrackingModel(sortModel.uri);
      forEach(properties, function (key) {
        if (key === 'rows') {
          setRowsProperty(sortModel, trackingModel);
        } else {
          trackingModel.get(key, function (error, value) {
            if (error) {
              if (global.console)
                console.error(error);
              return;
            }
            var obj = {};
            obj[key] = value;
            sortModel.update(obj);
          });
        }
      });
    }
    function setRowsProperty(sortModel, trackingModel) {
      var sortParams = sortUriUtils.parse(sortModel.uri);
      var direction = sortParams.direction;
      var query = sortParams.query;
      performRowSorting(trackingModel, sortModel, query, direction);
      sortModel.get('rows', function (error, sortList) {
        if (error) {
          if (global.console)
            console.error(error);
          return;
        }
        sortList.on('publish', function (operations) {
          var trackingList = trackingModel.get('rows');
          if (!trackingList)
            return;
          syncRows(trackingList, operations, 'publish');
        });
      });
      trackingModel.get('rows', function (error, trackingList) {
        if (error) {
          if (global.console)
            console.error(error);
          return;
        }
        trackingList.on('update', function (operations) {
          var sortList = sortModel.get('rows');
          if (!sortList)
            return;
          var mustSort = syncRows(sortList, operations, 'update');
          if (mustSort)
            performRowSorting(trackingModel, sortModel, query, direction);
        });
      });
    }
    function getTrackingModel(sortUri) {
      var parsed = sortUriUtils.parse(sortUri);
      var direction = parsed.direction;
      var originUri = parsed.originUri;
      var query = parsed.query;
      if (direction === 'desc') {
        return live(sortUriUtils.create(originUri, 'asc', query));
      } else {
        return live(originUri);
      }
    }
    function getSortData(rows, mask, trackingList) {
      return rows.map(function (row, i) {
        var array = getValues(mask, row);
        array.push(i);
        return {
          data: array,
          key: trackingList.keys[i]
        };
      });
    }
    function performRowSorting(trackingModel, sortModel, sortQuery, sortDirection) {
      lastIds[sortModel.uri] = (++idCounter).toString(36);
      var sortId = lastIds[sortModel.uri];
      trackingModel.get('rows', function (error, rows) {
        if (error) {
          if (global.console)
            console.error(error);
          return;
        }
        var rowsToSort = [];
        var keys = [];
        for (var i = 0, l = rows.length; i < l; i++) {
          if (rows.get(i)) {
            rowsToSort.push(rows.get(i));
            keys.push(rows.keys[i]);
          }
        }
        if (rowsToSort.length === 0) {
          var sortList = sortModel.get('rows');
          if (sortList) {
            sortList.update([{
                type: 'remove',
                index: 0,
                length: sortList.length
              }]);
          } else {
            sortModel.update({ rows: [] });
          }
          return;
        }
        var partialTrackingList = live([]);
        partialTrackingList.update([{
            type: 'insert',
            index: 0,
            values: rowsToSort,
            keys: keys
          }]);
        partialTrackingList.query(sortQuery, function (error, rows) {
          if (error) {
            if (global.console)
              console.error(error);
            return;
          }
          if (sortDirection === 'desc') {
            updateListWithReversedData(sortModel, partialTrackingList);
          } else {
            var mask = parse(sortQuery).mask;
            var sortData = getSortData(rows, mask, partialTrackingList);
            sort(sortModel.uri, sortData, function (error, sortedData) {
              if (error) {
                if (global.console)
                  console.error(error);
                return;
              }
              if (lastIds[sortModel.uri] !== sortId)
                return;
              updateListWithSortedData(sortModel, partialTrackingList, sortedData);
            });
          }
        });
      });
    }
    function updateListWithSortedData(sortModel, trackingList, sortedItems) {
      var sortList = sortModel.get('rows');
      if (!sortList) {
        sortList = new live.List();
        sortModel.update({ rows: sortList });
      }
      var length = sortedItems.length;
      var keys = new Array(length);
      var values = new Array(length);
      for (var i = 0, l = sortedItems.length; i < l; i++) {
        keys[i] = sortedItems[i].key;
        values[i] = trackingList.valueOf(keys[i]);
      }
      sortList.update([
        {
          type: 'remove',
          index: 0,
          length: sortList.length
        },
        {
          type: 'insert',
          index: 0,
          keys: keys,
          values: values
        }
      ]);
    }
    function updateListWithReversedData(sortModel, trackingList) {
      var sortList = sortModel.get('rows');
      if (!sortList) {
        sortList = new live.List();
        sortModel.update({ rows: sortList });
      }
      sortList.update([
        {
          type: 'remove',
          index: 0,
          length: sortList.length
        },
        {
          type: 'insert',
          index: 0,
          length: trackingList.length,
          values: trackingList.values.slice().reverse(),
          keys: trackingList.keys.slice().reverse()
        }
      ]);
    }
    function syncRows(rows, operations, mode) {
      var mustSort = false;
      forEach(operations, function (operation) {
        var newOperations = [];
        switch (operation.type) {
        case 'remove':
          newOperations = convertRemoveOperationForList(rows, operation);
          break;
        case 'insert':
          newOperations = [{
              type: 'insert',
              index: 0,
              values: operation.values,
              keys: operation.keys
            }];
          mustSort = true;
          break;
        case 'move':
          mustSort = true;
          break;
        }
        if (mode === 'publish') {
          rows.publish(newOperations);
        } else if (mode === 'update') {
          rows.update(newOperations);
        }
      });
      return mustSort;
    }
    function convertRemoveOperationForList(list, operation) {
      var indices = [];
      var operationKeys = operation.keys;
      list.keys.forEach(function (key, i) {
        if (operationKeys.indexOf(key) > -1)
          indices.push(i);
      });
      return listOperations.getRemoveOperations(indices);
    }
    var regExp = exports.matches = /^spotify:internal:sortlist:(asc|desc):([^:]*):(.*)$/;
    var registered = false;
    exports.register = function () {
      if (registered)
        return;
      registered = true;
      live.subscribe(regExp, 'init', onInit);
      live.subscribe(regExp, 'wait', onWait);
    };
    exports.unregister = function () {
      if (!registered)
        return;
      registered = false;
      live.unsubscribe(regExp, 'init', onInit);
      live.unsubscribe(regExp, 'wait', onWait);
    };
  },
  './node_modules/spotify-live-models/client-storage.js': function (require, module, exports, global) {
    'use strict';
    var forOwn = require('./node_modules/mout/object/forOwn.js');
    var combine = require('./node_modules/mout/array/combine.js');
    var remove = require('./node_modules/mout/array/remove.js');
    var contains = require('./node_modules/mout/array/contains.js');
    var URI = 'spotify:client-storage';
    var live = require('./node_modules/spotify-live/index.js');
    var cosmos = require('./node_modules/spotify-live-models/util/cosmos.js');
    var endpoints = { broadcast: 'sp://messages/v1/client-storage' };
    var waiting = [];
    function onInit(model) {
      model.update({ implemented: true });
    }
    function onWait(model, properties) {
      waiting = combine(waiting, properties);
      global.top.postMessage({
        type: 'client_storage',
        name: 'broadcast_client_storage',
        data: properties
      }, '*');
    }
    function onPublish(model, properties) {
      global.top.postMessage({
        type: 'client_storage',
        name: 'set_client_storage',
        data: properties
      }, '*');
      model.update(properties);
    }
    function onBroadcast(error, event) {
      var update = {};
      var model = live(URI);
      forOwn(event.body, function (value, key) {
        var isWaiting = contains(waiting, key);
        var hasKey = model.get(key) !== undefined;
        if (isWaiting || hasKey)
          update[key] = value;
        if (isWaiting)
          remove(waiting, key);
      });
      model.update(update);
    }
    var broadcastSubscription;
    var regExp = exports.matches = new RegExp('^' + URI + '$');
    var registered;
    exports.register = function () {
      if (registered)
        return;
      registered = true;
      live.subscribe(regExp, 'init', onInit);
      live.subscribe(regExp, 'wait', onWait);
      live.subscribe(regExp, 'publish', onPublish);
      broadcastSubscription = cosmos.subscribe({ url: endpoints.broadcast }, onBroadcast);
    };
    exports.unregister = function () {
      if (!registered)
        return;
      registered = false;
      live.unsubscribe(regExp, 'init', onInit);
      live.unsubscribe(regExp, 'wait', onWait);
      live.unsubscribe(regExp, 'publish', onPublish);
      if (broadcastSubscription) {
        broadcastSubscription.cancel();
        broadcastSubscription = null;
      }
      waiting.length = 0;
    };
    exports._endpoints = endpoints;
  },
  './node_modules/spotify-handlebars/index.js': function (require, module, exports, global) {
    'use strict';
    var kindOf = require('./node_modules/mout/lang/kindOf.js');
    var Handlebars = require('./node_modules/handlebars/dist/cjs/handlebars.runtime.js')['default'];
    exports.register = function (helpers) {
      if (kindOf(helpers) === 'Function') {
        var helper = helpers;
        helpers = {};
        helpers[helper.displayName] = helper;
      }
      for (var key in helpers) {
        Handlebars.registerHelper(key, helpers[key]);
      }
      return this;
    };
  },
  './node_modules/spotify-events/index.js': function (require, module, exports, global) {
    'use strict';
    var forEach = require('./node_modules/mout/array/forEach.js');
    var modules = [
        require('./node_modules/spotify-events/player.js'),
        require('./node_modules/spotify-events/dragndrop/index.js'),
        require('./node_modules/spotify-events/add.js'),
        require('./node_modules/spotify-events/selection/index.js'),
        require('./node_modules/spotify-events/contextmenu.js'),
        require('./node_modules/spotify-events/navbar.js'),
        require('./node_modules/spotify-events/offline.js'),
        require('./node_modules/spotify-events/sticky.js'),
        require('./node_modules/spotify-events/filter.js'),
        require('./node_modules/spotify-events/watch.js'),
        require('./node_modules/spotify-events/tooltip.js'),
        require('./node_modules/spotify-events/list.js'),
        require('./node_modules/spotify-events/menu.js'),
        require('./node_modules/spotify-events/scroll.js'),
        require('./node_modules/spotify-events/carousel.js'),
        require('./node_modules/spotify-events/nanoscroll.js'),
        require('./node_modules/spotify-events/slider.js'),
        require('./node_modules/spotify-events/select.js'),
        require('./node_modules/spotify-events/sort.js')
      ];
    var events = {};
    events.update = function update(node) {
      forEach(modules, function (module) {
        module.update(node);
      });
    };
    events.attach = function attach() {
      forEach(modules, function (module) {
        module.attach();
      });
    };
    events.detach = function detach() {
      forEach(modules, function (module) {
        module.detach();
      });
    };
    module.exports = events;
  },
  './node_modules/jquery/dist/jquery.js': function (require, module, exports, global) {
    (function (global, factory) {
      if (typeof module === 'object' && typeof module.exports === 'object') {
        module.exports = global.document ? factory(global, true) : function (w) {
          if (!w.document) {
            throw new Error('jQuery requires a window with a document');
          }
          return factory(w);
        };
      } else {
        factory(global);
      }
    }(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {
      var arr = [];
      var slice = arr.slice;
      var concat = arr.concat;
      var push = arr.push;
      var indexOf = arr.indexOf;
      var class2type = {};
      var toString = class2type.toString;
      var hasOwn = class2type.hasOwnProperty;
      var support = {};
      var document = window.document, version = '2.1.3', jQuery = function (selector, context) {
          return new jQuery.fn.init(selector, context);
        }, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, fcamelCase = function (all, letter) {
          return letter.toUpperCase();
        };
      jQuery.fn = jQuery.prototype = {
        jquery: version,
        constructor: jQuery,
        selector: '',
        length: 0,
        toArray: function () {
          return slice.call(this);
        },
        get: function (num) {
          return num != null ? num < 0 ? this[num + this.length] : this[num] : slice.call(this);
        },
        pushStack: function (elems) {
          var ret = jQuery.merge(this.constructor(), elems);
          ret.prevObject = this;
          ret.context = this.context;
          return ret;
        },
        each: function (callback, args) {
          return jQuery.each(this, callback, args);
        },
        map: function (callback) {
          return this.pushStack(jQuery.map(this, function (elem, i) {
            return callback.call(elem, i, elem);
          }));
        },
        slice: function () {
          return this.pushStack(slice.apply(this, arguments));
        },
        first: function () {
          return this.eq(0);
        },
        last: function () {
          return this.eq(-1);
        },
        eq: function (i) {
          var len = this.length, j = +i + (i < 0 ? len : 0);
          return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        end: function () {
          return this.prevObject || this.constructor(null);
        },
        push: push,
        sort: arr.sort,
        splice: arr.splice
      };
      jQuery.extend = jQuery.fn.extend = function () {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === 'boolean') {
          deep = target;
          target = arguments[i] || {};
          i++;
        }
        if (typeof target !== 'object' && !jQuery.isFunction(target)) {
          target = {};
        }
        if (i === length) {
          target = this;
          i--;
        }
        for (; i < length; i++) {
          if ((options = arguments[i]) != null) {
            for (name in options) {
              src = target[name];
              copy = options[name];
              if (target === copy) {
                continue;
              }
              if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && jQuery.isArray(src) ? src : [];
                } else {
                  clone = src && jQuery.isPlainObject(src) ? src : {};
                }
                target[name] = jQuery.extend(deep, clone, copy);
              } else if (copy !== undefined) {
                target[name] = copy;
              }
            }
          }
        }
        return target;
      };
      jQuery.extend({
        expando: 'jQuery' + (version + Math.random()).replace(/\D/g, ''),
        isReady: true,
        error: function (msg) {
          throw new Error(msg);
        },
        noop: function () {
        },
        isFunction: function (obj) {
          return jQuery.type(obj) === 'function';
        },
        isArray: Array.isArray,
        isWindow: function (obj) {
          return obj != null && obj === obj.window;
        },
        isNumeric: function (obj) {
          return !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;
        },
        isPlainObject: function (obj) {
          if (jQuery.type(obj) !== 'object' || obj.nodeType || jQuery.isWindow(obj)) {
            return false;
          }
          if (obj.constructor && !hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {
            return false;
          }
          return true;
        },
        isEmptyObject: function (obj) {
          var name;
          for (name in obj) {
            return false;
          }
          return true;
        },
        type: function (obj) {
          if (obj == null) {
            return obj + '';
          }
          return typeof obj === 'object' || typeof obj === 'function' ? class2type[toString.call(obj)] || 'object' : typeof obj;
        },
        globalEval: function (code) {
          var script, indirect = eval;
          code = jQuery.trim(code);
          if (code) {
            if (code.indexOf('use strict') === 1) {
              script = document.createElement('script');
              script.text = code;
              document.head.appendChild(script).parentNode.removeChild(script);
            } else {
              indirect(code);
            }
          }
        },
        camelCase: function (string) {
          return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase);
        },
        nodeName: function (elem, name) {
          return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
        each: function (obj, callback, args) {
          var value, i = 0, length = obj.length, isArray = isArraylike(obj);
          if (args) {
            if (isArray) {
              for (; i < length; i++) {
                value = callback.apply(obj[i], args);
                if (value === false) {
                  break;
                }
              }
            } else {
              for (i in obj) {
                value = callback.apply(obj[i], args);
                if (value === false) {
                  break;
                }
              }
            }
          } else {
            if (isArray) {
              for (; i < length; i++) {
                value = callback.call(obj[i], i, obj[i]);
                if (value === false) {
                  break;
                }
              }
            } else {
              for (i in obj) {
                value = callback.call(obj[i], i, obj[i]);
                if (value === false) {
                  break;
                }
              }
            }
          }
          return obj;
        },
        trim: function (text) {
          return text == null ? '' : (text + '').replace(rtrim, '');
        },
        makeArray: function (arr, results) {
          var ret = results || [];
          if (arr != null) {
            if (isArraylike(Object(arr))) {
              jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr);
            } else {
              push.call(ret, arr);
            }
          }
          return ret;
        },
        inArray: function (elem, arr, i) {
          return arr == null ? -1 : indexOf.call(arr, elem, i);
        },
        merge: function (first, second) {
          var len = +second.length, j = 0, i = first.length;
          for (; j < len; j++) {
            first[i++] = second[j];
          }
          first.length = i;
          return first;
        },
        grep: function (elems, callback, invert) {
          var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
          for (; i < length; i++) {
            callbackInverse = !callback(elems[i], i);
            if (callbackInverse !== callbackExpect) {
              matches.push(elems[i]);
            }
          }
          return matches;
        },
        map: function (elems, callback, arg) {
          var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
          if (isArray) {
            for (; i < length; i++) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret.push(value);
              }
            }
          } else {
            for (i in elems) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret.push(value);
              }
            }
          }
          return concat.apply([], ret);
        },
        guid: 1,
        proxy: function (fn, context) {
          var tmp, args, proxy;
          if (typeof context === 'string') {
            tmp = fn[context];
            context = fn;
            fn = tmp;
          }
          if (!jQuery.isFunction(fn)) {
            return undefined;
          }
          args = slice.call(arguments, 2);
          proxy = function () {
            return fn.apply(context || this, args.concat(slice.call(arguments)));
          };
          proxy.guid = fn.guid = fn.guid || jQuery.guid++;
          return proxy;
        },
        now: Date.now,
        support: support
      });
      jQuery.each('Boolean Number String Function Array Date RegExp Object Error'.split(' '), function (i, name) {
        class2type['[object ' + name + ']'] = name.toLowerCase();
      });
      function isArraylike(obj) {
        var length = obj.length, type = jQuery.type(obj);
        if (type === 'function' || jQuery.isWindow(obj)) {
          return false;
        }
        if (obj.nodeType === 1 && length) {
          return true;
        }
        return type === 'array' || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;
      }
      var Sizzle = function (window) {
          var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = 'sizzle' + 1 * new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function (a, b) {
              if (a === b) {
                hasDuplicate = true;
              }
              return 0;
            }, MAX_NEGATIVE = 1 << 31, hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = function (list, elem) {
              var i = 0, len = list.length;
              for (; i < len; i++) {
                if (list[i] === elem) {
                  return i;
                }
              }
              return -1;
            }, booleans = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped', whitespace = '[\\x20\\t\\r\\n\\f]', characterEncoding = '(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+', identifier = characterEncoding.replace('w', 'w#'), attributes = '\\[' + whitespace + '*(' + characterEncoding + ')(?:' + whitespace + '*([*^$|!~]?=)' + whitespace + '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' + identifier + '))|)' + whitespace + '*\\]', pseudos = ':(' + characterEncoding + ')(?:\\((' + '(\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|' + '((?:\\\\.|[^\\\\()[\\]]|' + attributes + ')*)|' + '.*' + ')\\)|)', rwhitespace = new RegExp(whitespace + '+', 'g'), rtrim = new RegExp('^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$', 'g'), rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'), rcombinators = new RegExp('^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*'), rattributeQuotes = new RegExp('=' + whitespace + '*([^\\]\'"]*?)' + whitespace + '*\\]', 'g'), rpseudo = new RegExp(pseudos), ridentifier = new RegExp('^' + identifier + '$'), matchExpr = {
              'ID': new RegExp('^#(' + characterEncoding + ')'),
              'CLASS': new RegExp('^\\.(' + characterEncoding + ')'),
              'TAG': new RegExp('^(' + characterEncoding.replace('w', 'w*') + ')'),
              'ATTR': new RegExp('^' + attributes),
              'PSEUDO': new RegExp('^' + pseudos),
              'CHILD': new RegExp('^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' + whitespace + '*(even|odd|(([+-]|)(\\d*)n|)' + whitespace + '*(?:([+-]|)' + whitespace + '*(\\d+)|))' + whitespace + '*\\)|)', 'i'),
              'bool': new RegExp('^(?:' + booleans + ')$', 'i'),
              'needsContext': new RegExp('^' + whitespace + '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + whitespace + '*((?:-\\d)?\\d*)' + whitespace + '*\\)|)(?=[^-]|$)', 'i')
            }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, rescape = /'|\\/g, runescape = new RegExp('\\\\([\\da-f]{1,6}' + whitespace + '?|(' + whitespace + ')|.)', 'ig'), funescape = function (_, escaped, escapedWhitespace) {
              var high = '0x' + escaped - 65536;
              return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
            }, unloadHandler = function () {
              setDocument();
            };
          try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType;
          } catch (e) {
            push = {
              apply: arr.length ? function (target, els) {
                push_native.apply(target, slice.call(els));
              } : function (target, els) {
                var j = target.length, i = 0;
                while (target[j++] = els[i++]) {
                }
                target.length = j - 1;
              }
            };
          }
          function Sizzle(selector, context, results, seed) {
            var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
            if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
              setDocument(context);
            }
            context = context || document;
            results = results || [];
            nodeType = context.nodeType;
            if (typeof selector !== 'string' || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
              return results;
            }
            if (!seed && documentIsHTML) {
              if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                if (m = match[1]) {
                  if (nodeType === 9) {
                    elem = context.getElementById(m);
                    if (elem && elem.parentNode) {
                      if (elem.id === m) {
                        results.push(elem);
                        return results;
                      }
                    } else {
                      return results;
                    }
                  } else {
                    if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                      results.push(elem);
                      return results;
                    }
                  }
                } else if (match[2]) {
                  push.apply(results, context.getElementsByTagName(selector));
                  return results;
                } else if ((m = match[3]) && support.getElementsByClassName) {
                  push.apply(results, context.getElementsByClassName(m));
                  return results;
                }
              }
              if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                nid = old = expando;
                newContext = context;
                newSelector = nodeType !== 1 && selector;
                if (nodeType === 1 && context.nodeName.toLowerCase() !== 'object') {
                  groups = tokenize(selector);
                  if (old = context.getAttribute('id')) {
                    nid = old.replace(rescape, '\\$&');
                  } else {
                    context.setAttribute('id', nid);
                  }
                  nid = '[id=\'' + nid + '\'] ';
                  i = groups.length;
                  while (i--) {
                    groups[i] = nid + toSelector(groups[i]);
                  }
                  newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                  newSelector = groups.join(',');
                }
                if (newSelector) {
                  try {
                    push.apply(results, newContext.querySelectorAll(newSelector));
                    return results;
                  } catch (qsaError) {
                  } finally {
                    if (!old) {
                      context.removeAttribute('id');
                    }
                  }
                }
              }
            }
            return select(selector.replace(rtrim, '$1'), context, results, seed);
          }
          function createCache() {
            var keys = [];
            function cache(key, value) {
              if (keys.push(key + ' ') > Expr.cacheLength) {
                delete cache[keys.shift()];
              }
              return cache[key + ' '] = value;
            }
            return cache;
          }
          function markFunction(fn) {
            fn[expando] = true;
            return fn;
          }
          function assert(fn) {
            var div = document.createElement('div');
            try {
              return !!fn(div);
            } catch (e) {
              return false;
            } finally {
              if (div.parentNode) {
                div.parentNode.removeChild(div);
              }
              div = null;
            }
          }
          function addHandle(attrs, handler) {
            var arr = attrs.split('|'), i = attrs.length;
            while (i--) {
              Expr.attrHandle[arr[i]] = handler;
            }
          }
          function siblingCheck(a, b) {
            var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
            if (diff) {
              return diff;
            }
            if (cur) {
              while (cur = cur.nextSibling) {
                if (cur === b) {
                  return -1;
                }
              }
            }
            return a ? 1 : -1;
          }
          function createInputPseudo(type) {
            return function (elem) {
              var name = elem.nodeName.toLowerCase();
              return name === 'input' && elem.type === type;
            };
          }
          function createButtonPseudo(type) {
            return function (elem) {
              var name = elem.nodeName.toLowerCase();
              return (name === 'input' || name === 'button') && elem.type === type;
            };
          }
          function createPositionalPseudo(fn) {
            return markFunction(function (argument) {
              argument = +argument;
              return markFunction(function (seed, matches) {
                var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                while (i--) {
                  if (seed[j = matchIndexes[i]]) {
                    seed[j] = !(matches[j] = seed[j]);
                  }
                }
              });
            });
          }
          function testContext(context) {
            return context && typeof context.getElementsByTagName !== 'undefined' && context;
          }
          support = Sizzle.support = {};
          isXML = Sizzle.isXML = function (elem) {
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== 'HTML' : false;
          };
          setDocument = Sizzle.setDocument = function (node) {
            var hasCompare, parent, doc = node ? node.ownerDocument || node : preferredDoc;
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
              return document;
            }
            document = doc;
            docElem = doc.documentElement;
            parent = doc.defaultView;
            if (parent && parent !== parent.top) {
              if (parent.addEventListener) {
                parent.addEventListener('unload', unloadHandler, false);
              } else if (parent.attachEvent) {
                parent.attachEvent('onunload', unloadHandler);
              }
            }
            documentIsHTML = !isXML(doc);
            support.attributes = assert(function (div) {
              div.className = 'i';
              return !div.getAttribute('className');
            });
            support.getElementsByTagName = assert(function (div) {
              div.appendChild(doc.createComment(''));
              return !div.getElementsByTagName('*').length;
            });
            support.getElementsByClassName = rnative.test(doc.getElementsByClassName);
            support.getById = assert(function (div) {
              docElem.appendChild(div).id = expando;
              return !doc.getElementsByName || !doc.getElementsByName(expando).length;
            });
            if (support.getById) {
              Expr.find['ID'] = function (id, context) {
                if (typeof context.getElementById !== 'undefined' && documentIsHTML) {
                  var m = context.getElementById(id);
                  return m && m.parentNode ? [m] : [];
                }
              };
              Expr.filter['ID'] = function (id) {
                var attrId = id.replace(runescape, funescape);
                return function (elem) {
                  return elem.getAttribute('id') === attrId;
                };
              };
            } else {
              delete Expr.find['ID'];
              Expr.filter['ID'] = function (id) {
                var attrId = id.replace(runescape, funescape);
                return function (elem) {
                  var node = typeof elem.getAttributeNode !== 'undefined' && elem.getAttributeNode('id');
                  return node && node.value === attrId;
                };
              };
            }
            Expr.find['TAG'] = support.getElementsByTagName ? function (tag, context) {
              if (typeof context.getElementsByTagName !== 'undefined') {
                return context.getElementsByTagName(tag);
              } else if (support.qsa) {
                return context.querySelectorAll(tag);
              }
            } : function (tag, context) {
              var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
              if (tag === '*') {
                while (elem = results[i++]) {
                  if (elem.nodeType === 1) {
                    tmp.push(elem);
                  }
                }
                return tmp;
              }
              return results;
            };
            Expr.find['CLASS'] = support.getElementsByClassName && function (className, context) {
              if (documentIsHTML) {
                return context.getElementsByClassName(className);
              }
            };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if (support.qsa = rnative.test(doc.querySelectorAll)) {
              assert(function (div) {
                docElem.appendChild(div).innerHTML = '<a id=\'' + expando + '\'></a>' + '<select id=\'' + expando + '-\f]\' msallowcapture=\'\'>' + '<option selected=\'\'></option></select>';
                if (div.querySelectorAll('[msallowcapture^=\'\']').length) {
                  rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\'\'|"")');
                }
                if (!div.querySelectorAll('[selected]').length) {
                  rbuggyQSA.push('\\[' + whitespace + '*(?:value|' + booleans + ')');
                }
                if (!div.querySelectorAll('[id~=' + expando + '-]').length) {
                  rbuggyQSA.push('~=');
                }
                if (!div.querySelectorAll(':checked').length) {
                  rbuggyQSA.push(':checked');
                }
                if (!div.querySelectorAll('a#' + expando + '+*').length) {
                  rbuggyQSA.push('.#.+[+~]');
                }
              });
              assert(function (div) {
                var input = doc.createElement('input');
                input.setAttribute('type', 'hidden');
                div.appendChild(input).setAttribute('name', 'D');
                if (div.querySelectorAll('[name=d]').length) {
                  rbuggyQSA.push('name' + whitespace + '*[*^$|!~]?=');
                }
                if (!div.querySelectorAll(':enabled').length) {
                  rbuggyQSA.push(':enabled', ':disabled');
                }
                div.querySelectorAll('*,:x');
                rbuggyQSA.push(',.*:');
              });
            }
            if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
              assert(function (div) {
                support.disconnectedMatch = matches.call(div, 'div');
                matches.call(div, '[s!=\'\']:x');
                rbuggyMatches.push('!=', pseudos);
              });
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join('|'));
            hasCompare = rnative.test(docElem.compareDocumentPosition);
            contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
              var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
              return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
            } : function (a, b) {
              if (b) {
                while (b = b.parentNode) {
                  if (b === a) {
                    return true;
                  }
                }
              }
              return false;
            };
            sortOrder = hasCompare ? function (a, b) {
              if (a === b) {
                hasDuplicate = true;
                return 0;
              }
              var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
              if (compare) {
                return compare;
              }
              compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
              if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                  return -1;
                }
                if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                  return 1;
                }
                return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
              }
              return compare & 4 ? -1 : 1;
            } : function (a, b) {
              if (a === b) {
                hasDuplicate = true;
                return 0;
              }
              var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
              if (!aup || !bup) {
                return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
              } else if (aup === bup) {
                return siblingCheck(a, b);
              }
              cur = a;
              while (cur = cur.parentNode) {
                ap.unshift(cur);
              }
              cur = b;
              while (cur = cur.parentNode) {
                bp.unshift(cur);
              }
              while (ap[i] === bp[i]) {
                i++;
              }
              return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            };
            return doc;
          };
          Sizzle.matches = function (expr, elements) {
            return Sizzle(expr, null, null, elements);
          };
          Sizzle.matchesSelector = function (elem, expr) {
            if ((elem.ownerDocument || elem) !== document) {
              setDocument(elem);
            }
            expr = expr.replace(rattributeQuotes, '=\'$1\']');
            if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
              try {
                var ret = matches.call(elem, expr);
                if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                  return ret;
                }
              } catch (e) {
              }
            }
            return Sizzle(expr, document, null, [elem]).length > 0;
          };
          Sizzle.contains = function (context, elem) {
            if ((context.ownerDocument || context) !== document) {
              setDocument(context);
            }
            return contains(context, elem);
          };
          Sizzle.attr = function (elem, name) {
            if ((elem.ownerDocument || elem) !== document) {
              setDocument(elem);
            }
            var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
            return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
          };
          Sizzle.error = function (msg) {
            throw new Error('Syntax error, unrecognized expression: ' + msg);
          };
          Sizzle.uniqueSort = function (results) {
            var elem, duplicates = [], j = 0, i = 0;
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
              while (elem = results[i++]) {
                if (elem === results[i]) {
                  j = duplicates.push(i);
                }
              }
              while (j--) {
                results.splice(duplicates[j], 1);
              }
            }
            sortInput = null;
            return results;
          };
          getText = Sizzle.getText = function (elem) {
            var node, ret = '', i = 0, nodeType = elem.nodeType;
            if (!nodeType) {
              while (node = elem[i++]) {
                ret += getText(node);
              }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
              if (typeof elem.textContent === 'string') {
                return elem.textContent;
              } else {
                for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                  ret += getText(elem);
                }
              }
            } else if (nodeType === 3 || nodeType === 4) {
              return elem.nodeValue;
            }
            return ret;
          };
          Expr = Sizzle.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
              '>': {
                dir: 'parentNode',
                first: true
              },
              ' ': { dir: 'parentNode' },
              '+': {
                dir: 'previousSibling',
                first: true
              },
              '~': { dir: 'previousSibling' }
            },
            preFilter: {
              'ATTR': function (match) {
                match[1] = match[1].replace(runescape, funescape);
                match[3] = (match[3] || match[4] || match[5] || '').replace(runescape, funescape);
                if (match[2] === '~=') {
                  match[3] = ' ' + match[3] + ' ';
                }
                return match.slice(0, 4);
              },
              'CHILD': function (match) {
                match[1] = match[1].toLowerCase();
                if (match[1].slice(0, 3) === 'nth') {
                  if (!match[3]) {
                    Sizzle.error(match[0]);
                  }
                  match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === 'even' || match[3] === 'odd'));
                  match[5] = +(match[7] + match[8] || match[3] === 'odd');
                } else if (match[3]) {
                  Sizzle.error(match[0]);
                }
                return match;
              },
              'PSEUDO': function (match) {
                var excess, unquoted = !match[6] && match[2];
                if (matchExpr['CHILD'].test(match[0])) {
                  return null;
                }
                if (match[3]) {
                  match[2] = match[4] || match[5] || '';
                } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(')', unquoted.length - excess) - unquoted.length)) {
                  match[0] = match[0].slice(0, excess);
                  match[2] = unquoted.slice(0, excess);
                }
                return match.slice(0, 3);
              }
            },
            filter: {
              'TAG': function (nodeNameSelector) {
                var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                return nodeNameSelector === '*' ? function () {
                  return true;
                } : function (elem) {
                  return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                };
              },
              'CLASS': function (className) {
                var pattern = classCache[className + ' '];
                return pattern || (pattern = new RegExp('(^|' + whitespace + ')' + className + '(' + whitespace + '|$)')) && classCache(className, function (elem) {
                  return pattern.test(typeof elem.className === 'string' && elem.className || typeof elem.getAttribute !== 'undefined' && elem.getAttribute('class') || '');
                });
              },
              'ATTR': function (name, operator, check) {
                return function (elem) {
                  var result = Sizzle.attr(elem, name);
                  if (result == null) {
                    return operator === '!=';
                  }
                  if (!operator) {
                    return true;
                  }
                  result += '';
                  return operator === '=' ? result === check : operator === '!=' ? result !== check : operator === '^=' ? check && result.indexOf(check) === 0 : operator === '*=' ? check && result.indexOf(check) > -1 : operator === '$=' ? check && result.slice(-check.length) === check : operator === '~=' ? (' ' + result.replace(rwhitespace, ' ') + ' ').indexOf(check) > -1 : operator === '|=' ? result === check || result.slice(0, check.length + 1) === check + '-' : false;
                };
              },
              'CHILD': function (type, what, argument, first, last) {
                var simple = type.slice(0, 3) !== 'nth', forward = type.slice(-4) !== 'last', ofType = what === 'of-type';
                return first === 1 && last === 0 ? function (elem) {
                  return !!elem.parentNode;
                } : function (elem, context, xml) {
                  var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? 'nextSibling' : 'previousSibling', parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
                  if (parent) {
                    if (simple) {
                      while (dir) {
                        node = elem;
                        while (node = node[dir]) {
                          if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                            return false;
                          }
                        }
                        start = dir = type === 'only' && !start && 'nextSibling';
                      }
                      return true;
                    }
                    start = [forward ? parent.firstChild : parent.lastChild];
                    if (forward && useCache) {
                      outerCache = parent[expando] || (parent[expando] = {});
                      cache = outerCache[type] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = cache[0] === dirruns && cache[2];
                      node = nodeIndex && parent.childNodes[nodeIndex];
                      while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                        if (node.nodeType === 1 && ++diff && node === elem) {
                          outerCache[type] = [
                            dirruns,
                            nodeIndex,
                            diff
                          ];
                          break;
                        }
                      }
                    } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                      diff = cache[1];
                    } else {
                      while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                        if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                          if (useCache) {
                            (node[expando] || (node[expando] = {}))[type] = [
                              dirruns,
                              diff
                            ];
                          }
                          if (node === elem) {
                            break;
                          }
                        }
                      }
                    }
                    diff -= last;
                    return diff === first || diff % first === 0 && diff / first >= 0;
                  }
                };
              },
              'PSEUDO': function (pseudo, argument) {
                var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error('unsupported pseudo: ' + pseudo);
                if (fn[expando]) {
                  return fn(argument);
                }
                if (fn.length > 1) {
                  args = [
                    pseudo,
                    pseudo,
                    '',
                    argument
                  ];
                  return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                    var idx, matched = fn(seed, argument), i = matched.length;
                    while (i--) {
                      idx = indexOf(seed, matched[i]);
                      seed[idx] = !(matches[idx] = matched[i]);
                    }
                  }) : function (elem) {
                    return fn(elem, 0, args);
                  };
                }
                return fn;
              }
            },
            pseudos: {
              'not': markFunction(function (selector) {
                var input = [], results = [], matcher = compile(selector.replace(rtrim, '$1'));
                return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
                  var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                  while (i--) {
                    if (elem = unmatched[i]) {
                      seed[i] = !(matches[i] = elem);
                    }
                  }
                }) : function (elem, context, xml) {
                  input[0] = elem;
                  matcher(input, null, xml, results);
                  input[0] = null;
                  return !results.pop();
                };
              }),
              'has': markFunction(function (selector) {
                return function (elem) {
                  return Sizzle(selector, elem).length > 0;
                };
              }),
              'contains': markFunction(function (text) {
                text = text.replace(runescape, funescape);
                return function (elem) {
                  return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                };
              }),
              'lang': markFunction(function (lang) {
                if (!ridentifier.test(lang || '')) {
                  Sizzle.error('unsupported lang: ' + lang);
                }
                lang = lang.replace(runescape, funescape).toLowerCase();
                return function (elem) {
                  var elemLang;
                  do {
                    if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute('xml:lang') || elem.getAttribute('lang')) {
                      elemLang = elemLang.toLowerCase();
                      return elemLang === lang || elemLang.indexOf(lang + '-') === 0;
                    }
                  } while ((elem = elem.parentNode) && elem.nodeType === 1);
                  return false;
                };
              }),
              'target': function (elem) {
                var hash = window.location && window.location.hash;
                return hash && hash.slice(1) === elem.id;
              },
              'root': function (elem) {
                return elem === docElem;
              },
              'focus': function (elem) {
                return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
              },
              'enabled': function (elem) {
                return elem.disabled === false;
              },
              'disabled': function (elem) {
                return elem.disabled === true;
              },
              'checked': function (elem) {
                var nodeName = elem.nodeName.toLowerCase();
                return nodeName === 'input' && !!elem.checked || nodeName === 'option' && !!elem.selected;
              },
              'selected': function (elem) {
                if (elem.parentNode) {
                  elem.parentNode.selectedIndex;
                }
                return elem.selected === true;
              },
              'empty': function (elem) {
                for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                  if (elem.nodeType < 6) {
                    return false;
                  }
                }
                return true;
              },
              'parent': function (elem) {
                return !Expr.pseudos['empty'](elem);
              },
              'header': function (elem) {
                return rheader.test(elem.nodeName);
              },
              'input': function (elem) {
                return rinputs.test(elem.nodeName);
              },
              'button': function (elem) {
                var name = elem.nodeName.toLowerCase();
                return name === 'input' && elem.type === 'button' || name === 'button';
              },
              'text': function (elem) {
                var attr;
                return elem.nodeName.toLowerCase() === 'input' && elem.type === 'text' && ((attr = elem.getAttribute('type')) == null || attr.toLowerCase() === 'text');
              },
              'first': createPositionalPseudo(function () {
                return [0];
              }),
              'last': createPositionalPseudo(function (matchIndexes, length) {
                return [length - 1];
              }),
              'eq': createPositionalPseudo(function (matchIndexes, length, argument) {
                return [argument < 0 ? argument + length : argument];
              }),
              'even': createPositionalPseudo(function (matchIndexes, length) {
                var i = 0;
                for (; i < length; i += 2) {
                  matchIndexes.push(i);
                }
                return matchIndexes;
              }),
              'odd': createPositionalPseudo(function (matchIndexes, length) {
                var i = 1;
                for (; i < length; i += 2) {
                  matchIndexes.push(i);
                }
                return matchIndexes;
              }),
              'lt': createPositionalPseudo(function (matchIndexes, length, argument) {
                var i = argument < 0 ? argument + length : argument;
                for (; --i >= 0;) {
                  matchIndexes.push(i);
                }
                return matchIndexes;
              }),
              'gt': createPositionalPseudo(function (matchIndexes, length, argument) {
                var i = argument < 0 ? argument + length : argument;
                for (; ++i < length;) {
                  matchIndexes.push(i);
                }
                return matchIndexes;
              })
            }
          };
          Expr.pseudos['nth'] = Expr.pseudos['eq'];
          for (i in {
              radio: true,
              checkbox: true,
              file: true,
              password: true,
              image: true
            }) {
            Expr.pseudos[i] = createInputPseudo(i);
          }
          for (i in {
              submit: true,
              reset: true
            }) {
            Expr.pseudos[i] = createButtonPseudo(i);
          }
          function setFilters() {
          }
          setFilters.prototype = Expr.filters = Expr.pseudos;
          Expr.setFilters = new setFilters();
          tokenize = Sizzle.tokenize = function (selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + ' '];
            if (cached) {
              return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
              if (!matched || (match = rcomma.exec(soFar))) {
                if (match) {
                  soFar = soFar.slice(match[0].length) || soFar;
                }
                groups.push(tokens = []);
              }
              matched = false;
              if (match = rcombinators.exec(soFar)) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  type: match[0].replace(rtrim, ' ')
                });
                soFar = soFar.slice(matched.length);
              }
              for (type in Expr.filter) {
                if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                  matched = match.shift();
                  tokens.push({
                    value: matched,
                    type: type,
                    matches: match
                  });
                  soFar = soFar.slice(matched.length);
                }
              }
              if (!matched) {
                break;
              }
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
          };
          function toSelector(tokens) {
            var i = 0, len = tokens.length, selector = '';
            for (; i < len; i++) {
              selector += tokens[i].value;
            }
            return selector;
          }
          function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, checkNonElements = base && dir === 'parentNode', doneName = done++;
            return combinator.first ? function (elem, context, xml) {
              while (elem = elem[dir]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  return matcher(elem, context, xml);
                }
              }
            } : function (elem, context, xml) {
              var oldCache, outerCache, newCache = [
                  dirruns,
                  doneName
                ];
              if (xml) {
                while (elem = elem[dir]) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    if (matcher(elem, context, xml)) {
                      return true;
                    }
                  }
                }
              } else {
                while (elem = elem[dir]) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    outerCache = elem[expando] || (elem[expando] = {});
                    if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                      return newCache[2] = oldCache[2];
                    } else {
                      outerCache[dir] = newCache;
                      if (newCache[2] = matcher(elem, context, xml)) {
                        return true;
                      }
                    }
                  }
                }
              }
            };
          }
          function elementMatcher(matchers) {
            return matchers.length > 1 ? function (elem, context, xml) {
              var i = matchers.length;
              while (i--) {
                if (!matchers[i](elem, context, xml)) {
                  return false;
                }
              }
              return true;
            } : matchers[0];
          }
          function multipleContexts(selector, contexts, results) {
            var i = 0, len = contexts.length;
            for (; i < len; i++) {
              Sizzle(selector, contexts[i], results);
            }
            return results;
          }
          function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
            for (; i < len; i++) {
              if (elem = unmatched[i]) {
                if (!filter || filter(elem, context, xml)) {
                  newUnmatched.push(elem);
                  if (mapped) {
                    map.push(i);
                  }
                }
              }
            }
            return newUnmatched;
          }
          function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
              postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
              postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function (seed, results, context, xml) {
              var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || '*', context.nodeType ? [context] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
              if (matcher) {
                matcher(matcherIn, matcherOut, context, xml);
              }
              if (postFilter) {
                temp = condense(matcherOut, postMap);
                postFilter(temp, [], context, xml);
                i = temp.length;
                while (i--) {
                  if (elem = temp[i]) {
                    matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                  }
                }
              }
              if (seed) {
                if (postFinder || preFilter) {
                  if (postFinder) {
                    temp = [];
                    i = matcherOut.length;
                    while (i--) {
                      if (elem = matcherOut[i]) {
                        temp.push(matcherIn[i] = elem);
                      }
                    }
                    postFinder(null, matcherOut = [], temp, xml);
                  }
                  i = matcherOut.length;
                  while (i--) {
                    if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                      seed[temp] = !(results[temp] = elem);
                    }
                  }
                }
              } else {
                matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                if (postFinder) {
                  postFinder(null, results, matcherOut, xml);
                } else {
                  push.apply(results, matcherOut);
                }
              }
            });
          }
          function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[' '], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function (elem) {
                return elem === checkContext;
              }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) {
                return indexOf(checkContext, elem) > -1;
              }, implicitRelative, true), matchers = [function (elem, context, xml) {
                  var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                  checkContext = null;
                  return ret;
                }];
            for (; i < len; i++) {
              if (matcher = Expr.relative[tokens[i].type]) {
                matchers = [addCombinator(elementMatcher(matchers), matcher)];
              } else {
                matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                if (matcher[expando]) {
                  j = ++i;
                  for (; j < len; j++) {
                    if (Expr.relative[tokens[j].type]) {
                      break;
                    }
                  }
                  return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === ' ' ? '*' : '' })).replace(rtrim, '$1'), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                }
                matchers.push(matcher);
              }
            }
            return elementMatcher(matchers);
          }
          function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, outermost) {
                var elem, j, matcher, matchedCount = 0, i = '0', unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find['TAG']('*', outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
                if (outermost) {
                  outermostContext = context !== document && context;
                }
                for (; i !== len && (elem = elems[i]) != null; i++) {
                  if (byElement && elem) {
                    j = 0;
                    while (matcher = elementMatchers[j++]) {
                      if (matcher(elem, context, xml)) {
                        results.push(elem);
                        break;
                      }
                    }
                    if (outermost) {
                      dirruns = dirrunsUnique;
                    }
                  }
                  if (bySet) {
                    if (elem = !matcher && elem) {
                      matchedCount--;
                    }
                    if (seed) {
                      unmatched.push(elem);
                    }
                  }
                }
                matchedCount += i;
                if (bySet && i !== matchedCount) {
                  j = 0;
                  while (matcher = setMatchers[j++]) {
                    matcher(unmatched, setMatched, context, xml);
                  }
                  if (seed) {
                    if (matchedCount > 0) {
                      while (i--) {
                        if (!(unmatched[i] || setMatched[i])) {
                          setMatched[i] = pop.call(results);
                        }
                      }
                    }
                    setMatched = condense(setMatched);
                  }
                  push.apply(results, setMatched);
                  if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                    Sizzle.uniqueSort(results);
                  }
                }
                if (outermost) {
                  dirruns = dirrunsUnique;
                  outermostContext = contextBackup;
                }
                return unmatched;
              };
            return bySet ? markFunction(superMatcher) : superMatcher;
          }
          compile = Sizzle.compile = function (selector, match) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + ' '];
            if (!cached) {
              if (!match) {
                match = tokenize(selector);
              }
              i = match.length;
              while (i--) {
                cached = matcherFromTokens(match[i]);
                if (cached[expando]) {
                  setMatchers.push(cached);
                } else {
                  elementMatchers.push(cached);
                }
              }
              cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
              cached.selector = selector;
            }
            return cached;
          };
          select = Sizzle.select = function (selector, context, results, seed) {
            var i, tokens, token, type, find, compiled = typeof selector === 'function' && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            if (match.length === 1) {
              tokens = match[0] = match[0].slice(0);
              if (tokens.length > 2 && (token = tokens[0]).type === 'ID' && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                context = (Expr.find['ID'](token.matches[0].replace(runescape, funescape), context) || [])[0];
                if (!context) {
                  return results;
                } else if (compiled) {
                  context = context.parentNode;
                }
                selector = selector.slice(tokens.shift().value.length);
              }
              i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length;
              while (i--) {
                token = tokens[i];
                if (Expr.relative[type = token.type]) {
                  break;
                }
                if (find = Expr.find[type]) {
                  if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                    tokens.splice(i, 1);
                    selector = seed.length && toSelector(tokens);
                    if (!selector) {
                      push.apply(results, seed);
                      return results;
                    }
                    break;
                  }
                }
              }
            }
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
          };
          support.sortStable = expando.split('').sort(sortOrder).join('') === expando;
          support.detectDuplicates = !!hasDuplicate;
          setDocument();
          support.sortDetached = assert(function (div1) {
            return div1.compareDocumentPosition(document.createElement('div')) & 1;
          });
          if (!assert(function (div) {
              div.innerHTML = '<a href=\'#\'></a>';
              return div.firstChild.getAttribute('href') === '#';
            })) {
            addHandle('type|href|height|width', function (elem, name, isXML) {
              if (!isXML) {
                return elem.getAttribute(name, name.toLowerCase() === 'type' ? 1 : 2);
              }
            });
          }
          if (!support.attributes || !assert(function (div) {
              div.innerHTML = '<input/>';
              div.firstChild.setAttribute('value', '');
              return div.firstChild.getAttribute('value') === '';
            })) {
            addHandle('value', function (elem, name, isXML) {
              if (!isXML && elem.nodeName.toLowerCase() === 'input') {
                return elem.defaultValue;
              }
            });
          }
          if (!assert(function (div) {
              return div.getAttribute('disabled') == null;
            })) {
            addHandle(booleans, function (elem, name, isXML) {
              var val;
              if (!isXML) {
                return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
              }
            });
          }
          return Sizzle;
        }(window);
      jQuery.find = Sizzle;
      jQuery.expr = Sizzle.selectors;
      jQuery.expr[':'] = jQuery.expr.pseudos;
      jQuery.unique = Sizzle.uniqueSort;
      jQuery.text = Sizzle.getText;
      jQuery.isXMLDoc = Sizzle.isXML;
      jQuery.contains = Sizzle.contains;
      var rneedsContext = jQuery.expr.match.needsContext;
      var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
      var risSimple = /^.[^:#\[\.,]*$/;
      function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
          return jQuery.grep(elements, function (elem, i) {
            return !!qualifier.call(elem, i, elem) !== not;
          });
        }
        if (qualifier.nodeType) {
          return jQuery.grep(elements, function (elem) {
            return elem === qualifier !== not;
          });
        }
        if (typeof qualifier === 'string') {
          if (risSimple.test(qualifier)) {
            return jQuery.filter(qualifier, elements, not);
          }
          qualifier = jQuery.filter(qualifier, elements);
        }
        return jQuery.grep(elements, function (elem) {
          return indexOf.call(qualifier, elem) >= 0 !== not;
        });
      }
      jQuery.filter = function (expr, elems, not) {
        var elem = elems[0];
        if (not) {
          expr = ':not(' + expr + ')';
        }
        return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
          return elem.nodeType === 1;
        }));
      };
      jQuery.fn.extend({
        find: function (selector) {
          var i, len = this.length, ret = [], self = this;
          if (typeof selector !== 'string') {
            return this.pushStack(jQuery(selector).filter(function () {
              for (i = 0; i < len; i++) {
                if (jQuery.contains(self[i], this)) {
                  return true;
                }
              }
            }));
          }
          for (i = 0; i < len; i++) {
            jQuery.find(selector, self[i], ret);
          }
          ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
          ret.selector = this.selector ? this.selector + ' ' + selector : selector;
          return ret;
        },
        filter: function (selector) {
          return this.pushStack(winnow(this, selector || [], false));
        },
        not: function (selector) {
          return this.pushStack(winnow(this, selector || [], true));
        },
        is: function (selector) {
          return !!winnow(this, typeof selector === 'string' && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
      });
      var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, init = jQuery.fn.init = function (selector, context) {
          var match, elem;
          if (!selector) {
            return this;
          }
          if (typeof selector === 'string') {
            if (selector[0] === '<' && selector[selector.length - 1] === '>' && selector.length >= 3) {
              match = [
                null,
                selector,
                null
              ];
            } else {
              match = rquickExpr.exec(selector);
            }
            if (match && (match[1] || !context)) {
              if (match[1]) {
                context = context instanceof jQuery ? context[0] : context;
                jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                  for (match in context) {
                    if (jQuery.isFunction(this[match])) {
                      this[match](context[match]);
                    } else {
                      this.attr(match, context[match]);
                    }
                  }
                }
                return this;
              } else {
                elem = document.getElementById(match[2]);
                if (elem && elem.parentNode) {
                  this.length = 1;
                  this[0] = elem;
                }
                this.context = document;
                this.selector = selector;
                return this;
              }
            } else if (!context || context.jquery) {
              return (context || rootjQuery).find(selector);
            } else {
              return this.constructor(context).find(selector);
            }
          } else if (selector.nodeType) {
            this.context = this[0] = selector;
            this.length = 1;
            return this;
          } else if (jQuery.isFunction(selector)) {
            return typeof rootjQuery.ready !== 'undefined' ? rootjQuery.ready(selector) : selector(jQuery);
          }
          if (selector.selector !== undefined) {
            this.selector = selector.selector;
            this.context = selector.context;
          }
          return jQuery.makeArray(selector, this);
        };
      init.prototype = jQuery.fn;
      rootjQuery = jQuery(document);
      var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
          children: true,
          contents: true,
          next: true,
          prev: true
        };
      jQuery.extend({
        dir: function (elem, dir, until) {
          var matched = [], truncate = until !== undefined;
          while ((elem = elem[dir]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
              if (truncate && jQuery(elem).is(until)) {
                break;
              }
              matched.push(elem);
            }
          }
          return matched;
        },
        sibling: function (n, elem) {
          var matched = [];
          for (; n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
              matched.push(n);
            }
          }
          return matched;
        }
      });
      jQuery.fn.extend({
        has: function (target) {
          var targets = jQuery(target, this), l = targets.length;
          return this.filter(function () {
            var i = 0;
            for (; i < l; i++) {
              if (jQuery.contains(this, targets[i])) {
                return true;
              }
            }
          });
        },
        closest: function (selectors, context) {
          var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || typeof selectors !== 'string' ? jQuery(selectors, context || this.context) : 0;
          for (; i < l; i++) {
            for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
              if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                matched.push(cur);
                break;
              }
            }
          }
          return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
        },
        index: function (elem) {
          if (!elem) {
            return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
          }
          if (typeof elem === 'string') {
            return indexOf.call(jQuery(elem), this[0]);
          }
          return indexOf.call(this, elem.jquery ? elem[0] : elem);
        },
        add: function (selector, context) {
          return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function (selector) {
          return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
      });
      function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {
        }
        return cur;
      }
      jQuery.each({
        parent: function (elem) {
          var parent = elem.parentNode;
          return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function (elem) {
          return jQuery.dir(elem, 'parentNode');
        },
        parentsUntil: function (elem, i, until) {
          return jQuery.dir(elem, 'parentNode', until);
        },
        next: function (elem) {
          return sibling(elem, 'nextSibling');
        },
        prev: function (elem) {
          return sibling(elem, 'previousSibling');
        },
        nextAll: function (elem) {
          return jQuery.dir(elem, 'nextSibling');
        },
        prevAll: function (elem) {
          return jQuery.dir(elem, 'previousSibling');
        },
        nextUntil: function (elem, i, until) {
          return jQuery.dir(elem, 'nextSibling', until);
        },
        prevUntil: function (elem, i, until) {
          return jQuery.dir(elem, 'previousSibling', until);
        },
        siblings: function (elem) {
          return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        children: function (elem) {
          return jQuery.sibling(elem.firstChild);
        },
        contents: function (elem) {
          return elem.contentDocument || jQuery.merge([], elem.childNodes);
        }
      }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
          var matched = jQuery.map(this, fn, until);
          if (name.slice(-5) !== 'Until') {
            selector = until;
          }
          if (selector && typeof selector === 'string') {
            matched = jQuery.filter(selector, matched);
          }
          if (this.length > 1) {
            if (!guaranteedUnique[name]) {
              jQuery.unique(matched);
            }
            if (rparentsprev.test(name)) {
              matched.reverse();
            }
          }
          return this.pushStack(matched);
        };
      });
      var rnotwhite = /\S+/g;
      var optionsCache = {};
      function createOptions(options) {
        var object = optionsCache[options] = {};
        jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
          object[flag] = true;
        });
        return object;
      }
      jQuery.Callbacks = function (options) {
        options = typeof options === 'string' ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
        var memory, fired, firing, firingStart, firingLength, firingIndex, list = [], stack = !options.once && [], fire = function (data) {
            memory = options.memory && data;
            fired = true;
            firingIndex = firingStart || 0;
            firingStart = 0;
            firingLength = list.length;
            firing = true;
            for (; list && firingIndex < firingLength; firingIndex++) {
              if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                memory = false;
                break;
              }
            }
            firing = false;
            if (list) {
              if (stack) {
                if (stack.length) {
                  fire(stack.shift());
                }
              } else if (memory) {
                list = [];
              } else {
                self.disable();
              }
            }
          }, self = {
            add: function () {
              if (list) {
                var start = list.length;
                (function add(args) {
                  jQuery.each(args, function (_, arg) {
                    var type = jQuery.type(arg);
                    if (type === 'function') {
                      if (!options.unique || !self.has(arg)) {
                        list.push(arg);
                      }
                    } else if (arg && arg.length && type !== 'string') {
                      add(arg);
                    }
                  });
                }(arguments));
                if (firing) {
                  firingLength = list.length;
                } else if (memory) {
                  firingStart = start;
                  fire(memory);
                }
              }
              return this;
            },
            remove: function () {
              if (list) {
                jQuery.each(arguments, function (_, arg) {
                  var index;
                  while ((index = jQuery.inArray(arg, list, index)) > -1) {
                    list.splice(index, 1);
                    if (firing) {
                      if (index <= firingLength) {
                        firingLength--;
                      }
                      if (index <= firingIndex) {
                        firingIndex--;
                      }
                    }
                  }
                });
              }
              return this;
            },
            has: function (fn) {
              return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
            },
            empty: function () {
              list = [];
              firingLength = 0;
              return this;
            },
            disable: function () {
              list = stack = memory = undefined;
              return this;
            },
            disabled: function () {
              return !list;
            },
            lock: function () {
              stack = undefined;
              if (!memory) {
                self.disable();
              }
              return this;
            },
            locked: function () {
              return !stack;
            },
            fireWith: function (context, args) {
              if (list && (!fired || stack)) {
                args = args || [];
                args = [
                  context,
                  args.slice ? args.slice() : args
                ];
                if (firing) {
                  stack.push(args);
                } else {
                  fire(args);
                }
              }
              return this;
            },
            fire: function () {
              self.fireWith(this, arguments);
              return this;
            },
            fired: function () {
              return !!fired;
            }
          };
        return self;
      };
      jQuery.extend({
        Deferred: function (func) {
          var tuples = [
              [
                'resolve',
                'done',
                jQuery.Callbacks('once memory'),
                'resolved'
              ],
              [
                'reject',
                'fail',
                jQuery.Callbacks('once memory'),
                'rejected'
              ],
              [
                'notify',
                'progress',
                jQuery.Callbacks('memory')
              ]
            ], state = 'pending', promise = {
              state: function () {
                return state;
              },
              always: function () {
                deferred.done(arguments).fail(arguments);
                return this;
              },
              then: function () {
                var fns = arguments;
                return jQuery.Deferred(function (newDefer) {
                  jQuery.each(tuples, function (i, tuple) {
                    var fn = jQuery.isFunction(fns[i]) && fns[i];
                    deferred[tuple[1]](function () {
                      var returned = fn && fn.apply(this, arguments);
                      if (returned && jQuery.isFunction(returned.promise)) {
                        returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                      } else {
                        newDefer[tuple[0] + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                      }
                    });
                  });
                  fns = null;
                }).promise();
              },
              promise: function (obj) {
                return obj != null ? jQuery.extend(obj, promise) : promise;
              }
            }, deferred = {};
          promise.pipe = promise.then;
          jQuery.each(tuples, function (i, tuple) {
            var list = tuple[2], stateString = tuple[3];
            promise[tuple[1]] = list.add;
            if (stateString) {
              list.add(function () {
                state = stateString;
              }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
            }
            deferred[tuple[0]] = function () {
              deferred[tuple[0] + 'With'](this === deferred ? promise : this, arguments);
              return this;
            };
            deferred[tuple[0] + 'With'] = list.fireWith;
          });
          promise.promise(deferred);
          if (func) {
            func.call(deferred, deferred);
          }
          return deferred;
        },
        when: function (subordinate) {
          var i = 0, resolveValues = slice.call(arguments), length = resolveValues.length, remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0, deferred = remaining === 1 ? subordinate : jQuery.Deferred(), updateFunc = function (i, contexts, values) {
              return function (value) {
                contexts[i] = this;
                values[i] = arguments.length > 1 ? slice.call(arguments) : value;
                if (values === progressValues) {
                  deferred.notifyWith(contexts, values);
                } else if (!--remaining) {
                  deferred.resolveWith(contexts, values);
                }
              };
            }, progressValues, progressContexts, resolveContexts;
          if (length > 1) {
            progressValues = new Array(length);
            progressContexts = new Array(length);
            resolveContexts = new Array(length);
            for (; i < length; i++) {
              if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
              } else {
                --remaining;
              }
            }
          }
          if (!remaining) {
            deferred.resolveWith(resolveContexts, resolveValues);
          }
          return deferred.promise();
        }
      });
      var readyList;
      jQuery.fn.ready = function (fn) {
        jQuery.ready.promise().done(fn);
        return this;
      };
      jQuery.extend({
        isReady: false,
        readyWait: 1,
        holdReady: function (hold) {
          if (hold) {
            jQuery.readyWait++;
          } else {
            jQuery.ready(true);
          }
        },
        ready: function (wait) {
          if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
            return;
          }
          jQuery.isReady = true;
          if (wait !== true && --jQuery.readyWait > 0) {
            return;
          }
          readyList.resolveWith(document, [jQuery]);
          if (jQuery.fn.triggerHandler) {
            jQuery(document).triggerHandler('ready');
            jQuery(document).off('ready');
          }
        }
      });
      function completed() {
        document.removeEventListener('DOMContentLoaded', completed, false);
        window.removeEventListener('load', completed, false);
        jQuery.ready();
      }
      jQuery.ready.promise = function (obj) {
        if (!readyList) {
          readyList = jQuery.Deferred();
          if (document.readyState === 'complete') {
            setTimeout(jQuery.ready);
          } else {
            document.addEventListener('DOMContentLoaded', completed, false);
            window.addEventListener('load', completed, false);
          }
        }
        return readyList.promise(obj);
      };
      jQuery.ready.promise();
      var access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {
          var i = 0, len = elems.length, bulk = key == null;
          if (jQuery.type(key) === 'object') {
            chainable = true;
            for (i in key) {
              jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
            }
          } else if (value !== undefined) {
            chainable = true;
            if (!jQuery.isFunction(value)) {
              raw = true;
            }
            if (bulk) {
              if (raw) {
                fn.call(elems, value);
                fn = null;
              } else {
                bulk = fn;
                fn = function (elem, key, value) {
                  return bulk.call(jQuery(elem), value);
                };
              }
            }
            if (fn) {
              for (; i < len; i++) {
                fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
              }
            }
          }
          return chainable ? elems : bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
        };
      jQuery.acceptData = function (owner) {
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
      };
      function Data() {
        Object.defineProperty(this.cache = {}, 0, {
          get: function () {
            return {};
          }
        });
        this.expando = jQuery.expando + Data.uid++;
      }
      Data.uid = 1;
      Data.accepts = jQuery.acceptData;
      Data.prototype = {
        key: function (owner) {
          if (!Data.accepts(owner)) {
            return 0;
          }
          var descriptor = {}, unlock = owner[this.expando];
          if (!unlock) {
            unlock = Data.uid++;
            try {
              descriptor[this.expando] = { value: unlock };
              Object.defineProperties(owner, descriptor);
            } catch (e) {
              descriptor[this.expando] = unlock;
              jQuery.extend(owner, descriptor);
            }
          }
          if (!this.cache[unlock]) {
            this.cache[unlock] = {};
          }
          return unlock;
        },
        set: function (owner, data, value) {
          var prop, unlock = this.key(owner), cache = this.cache[unlock];
          if (typeof data === 'string') {
            cache[data] = value;
          } else {
            if (jQuery.isEmptyObject(cache)) {
              jQuery.extend(this.cache[unlock], data);
            } else {
              for (prop in data) {
                cache[prop] = data[prop];
              }
            }
          }
          return cache;
        },
        get: function (owner, key) {
          var cache = this.cache[this.key(owner)];
          return key === undefined ? cache : cache[key];
        },
        access: function (owner, key, value) {
          var stored;
          if (key === undefined || key && typeof key === 'string' && value === undefined) {
            stored = this.get(owner, key);
            return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
          }
          this.set(owner, key, value);
          return value !== undefined ? value : key;
        },
        remove: function (owner, key) {
          var i, name, camel, unlock = this.key(owner), cache = this.cache[unlock];
          if (key === undefined) {
            this.cache[unlock] = {};
          } else {
            if (jQuery.isArray(key)) {
              name = key.concat(key.map(jQuery.camelCase));
            } else {
              camel = jQuery.camelCase(key);
              if (key in cache) {
                name = [
                  key,
                  camel
                ];
              } else {
                name = camel;
                name = name in cache ? [name] : name.match(rnotwhite) || [];
              }
            }
            i = name.length;
            while (i--) {
              delete cache[name[i]];
            }
          }
        },
        hasData: function (owner) {
          return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
        },
        discard: function (owner) {
          if (owner[this.expando]) {
            delete this.cache[owner[this.expando]];
          }
        }
      };
      var data_priv = new Data();
      var data_user = new Data();
      var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /([A-Z])/g;
      function dataAttr(elem, key, data) {
        var name;
        if (data === undefined && elem.nodeType === 1) {
          name = 'data-' + key.replace(rmultiDash, '-$1').toLowerCase();
          data = elem.getAttribute(name);
          if (typeof data === 'string') {
            try {
              data = data === 'true' ? true : data === 'false' ? false : data === 'null' ? null : +data + '' === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
            } catch (e) {
            }
            data_user.set(elem, key, data);
          } else {
            data = undefined;
          }
        }
        return data;
      }
      jQuery.extend({
        hasData: function (elem) {
          return data_user.hasData(elem) || data_priv.hasData(elem);
        },
        data: function (elem, name, data) {
          return data_user.access(elem, name, data);
        },
        removeData: function (elem, name) {
          data_user.remove(elem, name);
        },
        _data: function (elem, name, data) {
          return data_priv.access(elem, name, data);
        },
        _removeData: function (elem, name) {
          data_priv.remove(elem, name);
        }
      });
      jQuery.fn.extend({
        data: function (key, value) {
          var i, name, data, elem = this[0], attrs = elem && elem.attributes;
          if (key === undefined) {
            if (this.length) {
              data = data_user.get(elem);
              if (elem.nodeType === 1 && !data_priv.get(elem, 'hasDataAttrs')) {
                i = attrs.length;
                while (i--) {
                  if (attrs[i]) {
                    name = attrs[i].name;
                    if (name.indexOf('data-') === 0) {
                      name = jQuery.camelCase(name.slice(5));
                      dataAttr(elem, name, data[name]);
                    }
                  }
                }
                data_priv.set(elem, 'hasDataAttrs', true);
              }
            }
            return data;
          }
          if (typeof key === 'object') {
            return this.each(function () {
              data_user.set(this, key);
            });
          }
          return access(this, function (value) {
            var data, camelKey = jQuery.camelCase(key);
            if (elem && value === undefined) {
              data = data_user.get(elem, key);
              if (data !== undefined) {
                return data;
              }
              data = data_user.get(elem, camelKey);
              if (data !== undefined) {
                return data;
              }
              data = dataAttr(elem, camelKey, undefined);
              if (data !== undefined) {
                return data;
              }
              return;
            }
            this.each(function () {
              var data = data_user.get(this, camelKey);
              data_user.set(this, camelKey, value);
              if (key.indexOf('-') !== -1 && data !== undefined) {
                data_user.set(this, key, value);
              }
            });
          }, null, value, arguments.length > 1, null, true);
        },
        removeData: function (key) {
          return this.each(function () {
            data_user.remove(this, key);
          });
        }
      });
      jQuery.extend({
        queue: function (elem, type, data) {
          var queue;
          if (elem) {
            type = (type || 'fx') + 'queue';
            queue = data_priv.get(elem, type);
            if (data) {
              if (!queue || jQuery.isArray(data)) {
                queue = data_priv.access(elem, type, jQuery.makeArray(data));
              } else {
                queue.push(data);
              }
            }
            return queue || [];
          }
        },
        dequeue: function (elem, type) {
          type = type || 'fx';
          var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
              jQuery.dequeue(elem, type);
            };
          if (fn === 'inprogress') {
            fn = queue.shift();
            startLength--;
          }
          if (fn) {
            if (type === 'fx') {
              queue.unshift('inprogress');
            }
            delete hooks.stop;
            fn.call(elem, next, hooks);
          }
          if (!startLength && hooks) {
            hooks.empty.fire();
          }
        },
        _queueHooks: function (elem, type) {
          var key = type + 'queueHooks';
          return data_priv.get(elem, key) || data_priv.access(elem, key, {
            empty: jQuery.Callbacks('once memory').add(function () {
              data_priv.remove(elem, [
                type + 'queue',
                key
              ]);
            })
          });
        }
      });
      jQuery.fn.extend({
        queue: function (type, data) {
          var setter = 2;
          if (typeof type !== 'string') {
            data = type;
            type = 'fx';
            setter--;
          }
          if (arguments.length < setter) {
            return jQuery.queue(this[0], type);
          }
          return data === undefined ? this : this.each(function () {
            var queue = jQuery.queue(this, type, data);
            jQuery._queueHooks(this, type);
            if (type === 'fx' && queue[0] !== 'inprogress') {
              jQuery.dequeue(this, type);
            }
          });
        },
        dequeue: function (type) {
          return this.each(function () {
            jQuery.dequeue(this, type);
          });
        },
        clearQueue: function (type) {
          return this.queue(type || 'fx', []);
        },
        promise: function (type, obj) {
          var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
              if (!--count) {
                defer.resolveWith(elements, [elements]);
              }
            };
          if (typeof type !== 'string') {
            obj = type;
            type = undefined;
          }
          type = type || 'fx';
          while (i--) {
            tmp = data_priv.get(elements[i], type + 'queueHooks');
            if (tmp && tmp.empty) {
              count++;
              tmp.empty.add(resolve);
            }
          }
          resolve();
          return defer.promise(obj);
        }
      });
      var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
      var cssExpand = [
          'Top',
          'Right',
          'Bottom',
          'Left'
        ];
      var isHidden = function (elem, el) {
        elem = el || elem;
        return jQuery.css(elem, 'display') === 'none' || !jQuery.contains(elem.ownerDocument, elem);
      };
      var rcheckableType = /^(?:checkbox|radio)$/i;
      (function () {
        var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement('div')), input = document.createElement('input');
        input.setAttribute('type', 'radio');
        input.setAttribute('checked', 'checked');
        input.setAttribute('name', 't');
        div.appendChild(input);
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        div.innerHTML = '<textarea>x</textarea>';
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
      }());
      var strundefined = typeof undefined;
      support.focusinBubbles = 'onfocusin' in window;
      var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
      function returnTrue() {
        return true;
      }
      function returnFalse() {
        return false;
      }
      function safeActiveElement() {
        try {
          return document.activeElement;
        } catch (err) {
        }
      }
      jQuery.event = {
        global: {},
        add: function (elem, types, handler, data, selector) {
          var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.get(elem);
          if (!elemData) {
            return;
          }
          if (handler.handler) {
            handleObjIn = handler;
            handler = handleObjIn.handler;
            selector = handleObjIn.selector;
          }
          if (!handler.guid) {
            handler.guid = jQuery.guid++;
          }
          if (!(events = elemData.events)) {
            events = elemData.events = {};
          }
          if (!(eventHandle = elemData.handle)) {
            eventHandle = elemData.handle = function (e) {
              return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
            };
          }
          types = (types || '').match(rnotwhite) || [''];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || '').split('.').sort();
            if (!type) {
              continue;
            }
            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            special = jQuery.event.special[type] || {};
            handleObj = jQuery.extend({
              type: type,
              origType: origType,
              data: data,
              handler: handler,
              guid: handler.guid,
              selector: selector,
              needsContext: selector && jQuery.expr.match.needsContext.test(selector),
              namespace: namespaces.join('.')
            }, handleObjIn);
            if (!(handlers = events[type])) {
              handlers = events[type] = [];
              handlers.delegateCount = 0;
              if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                if (elem.addEventListener) {
                  elem.addEventListener(type, eventHandle, false);
                }
              }
            }
            if (special.add) {
              special.add.call(elem, handleObj);
              if (!handleObj.handler.guid) {
                handleObj.handler.guid = handler.guid;
              }
            }
            if (selector) {
              handlers.splice(handlers.delegateCount++, 0, handleObj);
            } else {
              handlers.push(handleObj);
            }
            jQuery.event.global[type] = true;
          }
        },
        remove: function (elem, types, handler, selector, mappedTypes) {
          var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.hasData(elem) && data_priv.get(elem);
          if (!elemData || !(events = elemData.events)) {
            return;
          }
          types = (types || '').match(rnotwhite) || [''];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || '').split('.').sort();
            if (!type) {
              for (type in events) {
                jQuery.event.remove(elem, type + types[t], handler, selector, true);
              }
              continue;
            }
            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            handlers = events[type] || [];
            tmp = tmp[2] && new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');
            origCount = j = handlers.length;
            while (j--) {
              handleObj = handlers[j];
              if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
                handlers.splice(j, 1);
                if (handleObj.selector) {
                  handlers.delegateCount--;
                }
                if (special.remove) {
                  special.remove.call(elem, handleObj);
                }
              }
            }
            if (origCount && !handlers.length) {
              if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                jQuery.removeEvent(elem, type, elemData.handle);
              }
              delete events[type];
            }
          }
          if (jQuery.isEmptyObject(events)) {
            delete elemData.handle;
            data_priv.remove(elem, 'events');
          }
        },
        trigger: function (event, data, elem, onlyHandlers) {
          var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document], type = hasOwn.call(event, 'type') ? event.type : event, namespaces = hasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];
          cur = tmp = elem = elem || document;
          if (elem.nodeType === 3 || elem.nodeType === 8) {
            return;
          }
          if (rfocusMorph.test(type + jQuery.event.triggered)) {
            return;
          }
          if (type.indexOf('.') >= 0) {
            namespaces = type.split('.');
            type = namespaces.shift();
            namespaces.sort();
          }
          ontype = type.indexOf(':') < 0 && 'on' + type;
          event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === 'object' && event);
          event.isTrigger = onlyHandlers ? 2 : 3;
          event.namespace = namespaces.join('.');
          event.namespace_re = event.namespace ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;
          event.result = undefined;
          if (!event.target) {
            event.target = elem;
          }
          data = data == null ? [event] : jQuery.makeArray(data, [event]);
          special = jQuery.event.special[type] || {};
          if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
            return;
          }
          if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
            bubbleType = special.delegateType || type;
            if (!rfocusMorph.test(bubbleType + type)) {
              cur = cur.parentNode;
            }
            for (; cur; cur = cur.parentNode) {
              eventPath.push(cur);
              tmp = cur;
            }
            if (tmp === (elem.ownerDocument || document)) {
              eventPath.push(tmp.defaultView || tmp.parentWindow || window);
            }
          }
          i = 0;
          while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
            event.type = i > 1 ? bubbleType : special.bindType || type;
            handle = (data_priv.get(cur, 'events') || {})[event.type] && data_priv.get(cur, 'handle');
            if (handle) {
              handle.apply(cur, data);
            }
            handle = ontype && cur[ontype];
            if (handle && handle.apply && jQuery.acceptData(cur)) {
              event.result = handle.apply(cur, data);
              if (event.result === false) {
                event.preventDefault();
              }
            }
          }
          event.type = type;
          if (!onlyHandlers && !event.isDefaultPrevented()) {
            if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
              if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
                tmp = elem[ontype];
                if (tmp) {
                  elem[ontype] = null;
                }
                jQuery.event.triggered = type;
                elem[type]();
                jQuery.event.triggered = undefined;
                if (tmp) {
                  elem[ontype] = tmp;
                }
              }
            }
          }
          return event.result;
        },
        dispatch: function (event) {
          event = jQuery.event.fix(event);
          var i, j, ret, matched, handleObj, handlerQueue = [], args = slice.call(arguments), handlers = (data_priv.get(this, 'events') || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
          args[0] = event;
          event.delegateTarget = this;
          if (special.preDispatch && special.preDispatch.call(this, event) === false) {
            return;
          }
          handlerQueue = jQuery.event.handlers.call(this, event, handlers);
          i = 0;
          while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
            event.currentTarget = matched.elem;
            j = 0;
            while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
              if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                event.handleObj = handleObj;
                event.data = handleObj.data;
                ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                if (ret !== undefined) {
                  if ((event.result = ret) === false) {
                    event.preventDefault();
                    event.stopPropagation();
                  }
                }
              }
            }
          }
          if (special.postDispatch) {
            special.postDispatch.call(this, event);
          }
          return event.result;
        },
        handlers: function (event, handlers) {
          var i, matches, sel, handleObj, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
          if (delegateCount && cur.nodeType && (!event.button || event.type !== 'click')) {
            for (; cur !== this; cur = cur.parentNode || this) {
              if (cur.disabled !== true || event.type !== 'click') {
                matches = [];
                for (i = 0; i < delegateCount; i++) {
                  handleObj = handlers[i];
                  sel = handleObj.selector + ' ';
                  if (matches[sel] === undefined) {
                    matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
                  }
                  if (matches[sel]) {
                    matches.push(handleObj);
                  }
                }
                if (matches.length) {
                  handlerQueue.push({
                    elem: cur,
                    handlers: matches
                  });
                }
              }
            }
          }
          if (delegateCount < handlers.length) {
            handlerQueue.push({
              elem: this,
              handlers: handlers.slice(delegateCount)
            });
          }
          return handlerQueue;
        },
        props: 'altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which'.split(' '),
        fixHooks: {},
        keyHooks: {
          props: 'char charCode key keyCode'.split(' '),
          filter: function (event, original) {
            if (event.which == null) {
              event.which = original.charCode != null ? original.charCode : original.keyCode;
            }
            return event;
          }
        },
        mouseHooks: {
          props: 'button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement'.split(' '),
          filter: function (event, original) {
            var eventDoc, doc, body, button = original.button;
            if (event.pageX == null && original.clientX != null) {
              eventDoc = event.target.ownerDocument || document;
              doc = eventDoc.documentElement;
              body = eventDoc.body;
              event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
              event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
            }
            if (!event.which && button !== undefined) {
              event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
            }
            return event;
          }
        },
        fix: function (event) {
          if (event[jQuery.expando]) {
            return event;
          }
          var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
          if (!fixHook) {
            this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
          }
          copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
          event = new jQuery.Event(originalEvent);
          i = copy.length;
          while (i--) {
            prop = copy[i];
            event[prop] = originalEvent[prop];
          }
          if (!event.target) {
            event.target = document;
          }
          if (event.target.nodeType === 3) {
            event.target = event.target.parentNode;
          }
          return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },
        special: {
          load: { noBubble: true },
          focus: {
            trigger: function () {
              if (this !== safeActiveElement() && this.focus) {
                this.focus();
                return false;
              }
            },
            delegateType: 'focusin'
          },
          blur: {
            trigger: function () {
              if (this === safeActiveElement() && this.blur) {
                this.blur();
                return false;
              }
            },
            delegateType: 'focusout'
          },
          click: {
            trigger: function () {
              if (this.type === 'checkbox' && this.click && jQuery.nodeName(this, 'input')) {
                this.click();
                return false;
              }
            },
            _default: function (event) {
              return jQuery.nodeName(event.target, 'a');
            }
          },
          beforeunload: {
            postDispatch: function (event) {
              if (event.result !== undefined && event.originalEvent) {
                event.originalEvent.returnValue = event.result;
              }
            }
          }
        },
        simulate: function (type, elem, event, bubble) {
          var e = jQuery.extend(new jQuery.Event(), event, {
              type: type,
              isSimulated: true,
              originalEvent: {}
            });
          if (bubble) {
            jQuery.event.trigger(e, null, elem);
          } else {
            jQuery.event.dispatch.call(elem, e);
          }
          if (e.isDefaultPrevented()) {
            event.preventDefault();
          }
        }
      };
      jQuery.removeEvent = function (elem, type, handle) {
        if (elem.removeEventListener) {
          elem.removeEventListener(type, handle, false);
        }
      };
      jQuery.Event = function (src, props) {
        if (!(this instanceof jQuery.Event)) {
          return new jQuery.Event(src, props);
        }
        if (src && src.type) {
          this.originalEvent = src;
          this.type = src.type;
          this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse;
        } else {
          this.type = src;
        }
        if (props) {
          jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || jQuery.now();
        this[jQuery.expando] = true;
      };
      jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        preventDefault: function () {
          var e = this.originalEvent;
          this.isDefaultPrevented = returnTrue;
          if (e && e.preventDefault) {
            e.preventDefault();
          }
        },
        stopPropagation: function () {
          var e = this.originalEvent;
          this.isPropagationStopped = returnTrue;
          if (e && e.stopPropagation) {
            e.stopPropagation();
          }
        },
        stopImmediatePropagation: function () {
          var e = this.originalEvent;
          this.isImmediatePropagationStopped = returnTrue;
          if (e && e.stopImmediatePropagation) {
            e.stopImmediatePropagation();
          }
          this.stopPropagation();
        }
      };
      jQuery.each({
        mouseenter: 'mouseover',
        mouseleave: 'mouseout',
        pointerenter: 'pointerover',
        pointerleave: 'pointerout'
      }, function (orig, fix) {
        jQuery.event.special[orig] = {
          delegateType: fix,
          bindType: fix,
          handle: function (event) {
            var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
            if (!related || related !== target && !jQuery.contains(target, related)) {
              event.type = handleObj.origType;
              ret = handleObj.handler.apply(this, arguments);
              event.type = fix;
            }
            return ret;
          }
        };
      });
      if (!support.focusinBubbles) {
        jQuery.each({
          focus: 'focusin',
          blur: 'focusout'
        }, function (orig, fix) {
          var handler = function (event) {
            jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
          };
          jQuery.event.special[fix] = {
            setup: function () {
              var doc = this.ownerDocument || this, attaches = data_priv.access(doc, fix);
              if (!attaches) {
                doc.addEventListener(orig, handler, true);
              }
              data_priv.access(doc, fix, (attaches || 0) + 1);
            },
            teardown: function () {
              var doc = this.ownerDocument || this, attaches = data_priv.access(doc, fix) - 1;
              if (!attaches) {
                doc.removeEventListener(orig, handler, true);
                data_priv.remove(doc, fix);
              } else {
                data_priv.access(doc, fix, attaches);
              }
            }
          };
        });
      }
      jQuery.fn.extend({
        on: function (types, selector, data, fn, one) {
          var origFn, type;
          if (typeof types === 'object') {
            if (typeof selector !== 'string') {
              data = data || selector;
              selector = undefined;
            }
            for (type in types) {
              this.on(type, selector, data, types[type], one);
            }
            return this;
          }
          if (data == null && fn == null) {
            fn = selector;
            data = selector = undefined;
          } else if (fn == null) {
            if (typeof selector === 'string') {
              fn = data;
              data = undefined;
            } else {
              fn = data;
              data = selector;
              selector = undefined;
            }
          }
          if (fn === false) {
            fn = returnFalse;
          } else if (!fn) {
            return this;
          }
          if (one === 1) {
            origFn = fn;
            fn = function (event) {
              jQuery().off(event);
              return origFn.apply(this, arguments);
            };
            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
          }
          return this.each(function () {
            jQuery.event.add(this, types, fn, data, selector);
          });
        },
        one: function (types, selector, data, fn) {
          return this.on(types, selector, data, fn, 1);
        },
        off: function (types, selector, fn) {
          var handleObj, type;
          if (types && types.preventDefault && types.handleObj) {
            handleObj = types.handleObj;
            jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
            return this;
          }
          if (typeof types === 'object') {
            for (type in types) {
              this.off(type, selector, types[type]);
            }
            return this;
          }
          if (selector === false || typeof selector === 'function') {
            fn = selector;
            selector = undefined;
          }
          if (fn === false) {
            fn = returnFalse;
          }
          return this.each(function () {
            jQuery.event.remove(this, types, fn, selector);
          });
        },
        trigger: function (type, data) {
          return this.each(function () {
            jQuery.event.trigger(type, data, this);
          });
        },
        triggerHandler: function (type, data) {
          var elem = this[0];
          if (elem) {
            return jQuery.event.trigger(type, data, elem, true);
          }
        }
      });
      var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, wrapMap = {
          option: [
            1,
            '<select multiple=\'multiple\'>',
            '</select>'
          ],
          thead: [
            1,
            '<table>',
            '</table>'
          ],
          col: [
            2,
            '<table><colgroup>',
            '</colgroup></table>'
          ],
          tr: [
            2,
            '<table><tbody>',
            '</tbody></table>'
          ],
          td: [
            3,
            '<table><tbody><tr>',
            '</tr></tbody></table>'
          ],
          _default: [
            0,
            '',
            ''
          ]
        };
      wrapMap.optgroup = wrapMap.option;
      wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
      wrapMap.th = wrapMap.td;
      function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, 'table') && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, 'tr') ? elem.getElementsByTagName('tbody')[0] || elem.appendChild(elem.ownerDocument.createElement('tbody')) : elem;
      }
      function disableScript(elem) {
        elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type;
        return elem;
      }
      function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
          elem.type = match[1];
        } else {
          elem.removeAttribute('type');
        }
        return elem;
      }
      function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for (; i < l; i++) {
          data_priv.set(elems[i], 'globalEval', !refElements || data_priv.get(refElements[i], 'globalEval'));
        }
      }
      function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
        if (dest.nodeType !== 1) {
          return;
        }
        if (data_priv.hasData(src)) {
          pdataOld = data_priv.access(src);
          pdataCur = data_priv.set(dest, pdataOld);
          events = pdataOld.events;
          if (events) {
            delete pdataCur.handle;
            pdataCur.events = {};
            for (type in events) {
              for (i = 0, l = events[type].length; i < l; i++) {
                jQuery.event.add(dest, type, events[type][i]);
              }
            }
          }
        }
        if (data_user.hasData(src)) {
          udataOld = data_user.access(src);
          udataCur = jQuery.extend({}, udataOld);
          data_user.set(dest, udataCur);
        }
      }
      function getAll(context, tag) {
        var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || '*') : context.querySelectorAll ? context.querySelectorAll(tag || '*') : [];
        return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
      }
      function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();
        if (nodeName === 'input' && rcheckableType.test(src.type)) {
          dest.checked = src.checked;
        } else if (nodeName === 'input' || nodeName === 'textarea') {
          dest.defaultValue = src.defaultValue;
        }
      }
      jQuery.extend({
        clone: function (elem, dataAndEvents, deepDataAndEvents) {
          var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);
          if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
            destElements = getAll(clone);
            srcElements = getAll(elem);
            for (i = 0, l = srcElements.length; i < l; i++) {
              fixInput(srcElements[i], destElements[i]);
            }
          }
          if (dataAndEvents) {
            if (deepDataAndEvents) {
              srcElements = srcElements || getAll(elem);
              destElements = destElements || getAll(clone);
              for (i = 0, l = srcElements.length; i < l; i++) {
                cloneCopyEvent(srcElements[i], destElements[i]);
              }
            } else {
              cloneCopyEvent(elem, clone);
            }
          }
          destElements = getAll(clone, 'script');
          if (destElements.length > 0) {
            setGlobalEval(destElements, !inPage && getAll(elem, 'script'));
          }
          return clone;
        },
        buildFragment: function (elems, context, scripts, selection) {
          var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
          for (; i < l; i++) {
            elem = elems[i];
            if (elem || elem === 0) {
              if (jQuery.type(elem) === 'object') {
                jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
              } else if (!rhtml.test(elem)) {
                nodes.push(context.createTextNode(elem));
              } else {
                tmp = tmp || fragment.appendChild(context.createElement('div'));
                tag = (rtagName.exec(elem) || [
                  '',
                  ''
                ])[1].toLowerCase();
                wrap = wrapMap[tag] || wrapMap._default;
                tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, '<$1></$2>') + wrap[2];
                j = wrap[0];
                while (j--) {
                  tmp = tmp.lastChild;
                }
                jQuery.merge(nodes, tmp.childNodes);
                tmp = fragment.firstChild;
                tmp.textContent = '';
              }
            }
          }
          fragment.textContent = '';
          i = 0;
          while (elem = nodes[i++]) {
            if (selection && jQuery.inArray(elem, selection) !== -1) {
              continue;
            }
            contains = jQuery.contains(elem.ownerDocument, elem);
            tmp = getAll(fragment.appendChild(elem), 'script');
            if (contains) {
              setGlobalEval(tmp);
            }
            if (scripts) {
              j = 0;
              while (elem = tmp[j++]) {
                if (rscriptType.test(elem.type || '')) {
                  scripts.push(elem);
                }
              }
            }
          }
          return fragment;
        },
        cleanData: function (elems) {
          var data, elem, type, key, special = jQuery.event.special, i = 0;
          for (; (elem = elems[i]) !== undefined; i++) {
            if (jQuery.acceptData(elem)) {
              key = elem[data_priv.expando];
              if (key && (data = data_priv.cache[key])) {
                if (data.events) {
                  for (type in data.events) {
                    if (special[type]) {
                      jQuery.event.remove(elem, type);
                    } else {
                      jQuery.removeEvent(elem, type, data.handle);
                    }
                  }
                }
                if (data_priv.cache[key]) {
                  delete data_priv.cache[key];
                }
              }
            }
            delete data_user.cache[elem[data_user.expando]];
          }
        }
      });
      jQuery.fn.extend({
        text: function (value) {
          return access(this, function (value) {
            return value === undefined ? jQuery.text(this) : this.empty().each(function () {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                this.textContent = value;
              }
            });
          }, null, value, arguments.length);
        },
        append: function () {
          return this.domManip(arguments, function (elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.appendChild(elem);
            }
          });
        },
        prepend: function () {
          return this.domManip(arguments, function (elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.insertBefore(elem, target.firstChild);
            }
          });
        },
        before: function () {
          return this.domManip(arguments, function (elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this);
            }
          });
        },
        after: function () {
          return this.domManip(arguments, function (elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this.nextSibling);
            }
          });
        },
        remove: function (selector, keepData) {
          var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0;
          for (; (elem = elems[i]) != null; i++) {
            if (!keepData && elem.nodeType === 1) {
              jQuery.cleanData(getAll(elem));
            }
            if (elem.parentNode) {
              if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                setGlobalEval(getAll(elem, 'script'));
              }
              elem.parentNode.removeChild(elem);
            }
          }
          return this;
        },
        empty: function () {
          var elem, i = 0;
          for (; (elem = this[i]) != null; i++) {
            if (elem.nodeType === 1) {
              jQuery.cleanData(getAll(elem, false));
              elem.textContent = '';
            }
          }
          return this;
        },
        clone: function (dataAndEvents, deepDataAndEvents) {
          dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
          deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
          return this.map(function () {
            return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
          });
        },
        html: function (value) {
          return access(this, function (value) {
            var elem = this[0] || {}, i = 0, l = this.length;
            if (value === undefined && elem.nodeType === 1) {
              return elem.innerHTML;
            }
            if (typeof value === 'string' && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
                '',
                ''
              ])[1].toLowerCase()]) {
              value = value.replace(rxhtmlTag, '<$1></$2>');
              try {
                for (; i < l; i++) {
                  elem = this[i] || {};
                  if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.innerHTML = value;
                  }
                }
                elem = 0;
              } catch (e) {
              }
            }
            if (elem) {
              this.empty().append(value);
            }
          }, null, value, arguments.length);
        },
        replaceWith: function () {
          var arg = arguments[0];
          this.domManip(arguments, function (elem) {
            arg = this.parentNode;
            jQuery.cleanData(getAll(this));
            if (arg) {
              arg.replaceChild(elem, this);
            }
          });
          return arg && (arg.length || arg.nodeType) ? this : this.remove();
        },
        detach: function (selector) {
          return this.remove(selector, true);
        },
        domManip: function (args, callback) {
          args = concat.apply([], args);
          var fragment, first, scripts, hasScripts, node, doc, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
          if (isFunction || l > 1 && typeof value === 'string' && !support.checkClone && rchecked.test(value)) {
            return this.each(function (index) {
              var self = set.eq(index);
              if (isFunction) {
                args[0] = value.call(this, index, self.html());
              }
              self.domManip(args, callback);
            });
          }
          if (l) {
            fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
            first = fragment.firstChild;
            if (fragment.childNodes.length === 1) {
              fragment = first;
            }
            if (first) {
              scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
              hasScripts = scripts.length;
              for (; i < l; i++) {
                node = fragment;
                if (i !== iNoClone) {
                  node = jQuery.clone(node, true, true);
                  if (hasScripts) {
                    jQuery.merge(scripts, getAll(node, 'script'));
                  }
                }
                callback.call(this[i], node, i);
              }
              if (hasScripts) {
                doc = scripts[scripts.length - 1].ownerDocument;
                jQuery.map(scripts, restoreScript);
                for (i = 0; i < hasScripts; i++) {
                  node = scripts[i];
                  if (rscriptType.test(node.type || '') && !data_priv.access(node, 'globalEval') && jQuery.contains(doc, node)) {
                    if (node.src) {
                      if (jQuery._evalUrl) {
                        jQuery._evalUrl(node.src);
                      }
                    } else {
                      jQuery.globalEval(node.textContent.replace(rcleanScript, ''));
                    }
                  }
                }
              }
            }
          }
          return this;
        }
      });
      jQuery.each({
        appendTo: 'append',
        prependTo: 'prepend',
        insertBefore: 'before',
        insertAfter: 'after',
        replaceAll: 'replaceWith'
      }, function (name, original) {
        jQuery.fn[name] = function (selector) {
          var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
          for (; i <= last; i++) {
            elems = i === last ? this : this.clone(true);
            jQuery(insert[i])[original](elems);
            push.apply(ret, elems.get());
          }
          return this.pushStack(ret);
        };
      });
      var iframe, elemdisplay = {};
      function actualDisplay(name, doc) {
        var style, elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? style.display : jQuery.css(elem[0], 'display');
        elem.detach();
        return display;
      }
      function defaultDisplay(nodeName) {
        var doc = document, display = elemdisplay[nodeName];
        if (!display) {
          display = actualDisplay(nodeName, doc);
          if (display === 'none' || !display) {
            iframe = (iframe || jQuery('<iframe frameborder=\'0\' width=\'0\' height=\'0\'/>')).appendTo(doc.documentElement);
            doc = iframe[0].contentDocument;
            doc.write();
            doc.close();
            display = actualDisplay(nodeName, doc);
            iframe.detach();
          }
          elemdisplay[nodeName] = display;
        }
        return display;
      }
      var rmargin = /^margin/;
      var rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i');
      var getStyles = function (elem) {
        if (elem.ownerDocument.defaultView.opener) {
          return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
        }
        return window.getComputedStyle(elem, null);
      };
      function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, style = elem.style;
        computed = computed || getStyles(elem);
        if (computed) {
          ret = computed.getPropertyValue(name) || computed[name];
        }
        if (computed) {
          if (ret === '' && !jQuery.contains(elem.ownerDocument, elem)) {
            ret = jQuery.style(elem, name);
          }
          if (rnumnonpx.test(ret) && rmargin.test(name)) {
            width = style.width;
            minWidth = style.minWidth;
            maxWidth = style.maxWidth;
            style.minWidth = style.maxWidth = style.width = ret;
            ret = computed.width;
            style.width = width;
            style.minWidth = minWidth;
            style.maxWidth = maxWidth;
          }
        }
        return ret !== undefined ? ret + '' : ret;
      }
      function addGetHookIf(conditionFn, hookFn) {
        return {
          get: function () {
            if (conditionFn()) {
              delete this.get;
              return;
            }
            return (this.get = hookFn).apply(this, arguments);
          }
        };
      }
      (function () {
        var pixelPositionVal, boxSizingReliableVal, docElem = document.documentElement, container = document.createElement('div'), div = document.createElement('div');
        if (!div.style) {
          return;
        }
        div.style.backgroundClip = 'content-box';
        div.cloneNode(true).style.backgroundClip = '';
        support.clearCloneStyle = div.style.backgroundClip === 'content-box';
        container.style.cssText = 'border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;' + 'position:absolute';
        container.appendChild(div);
        function computePixelPositionAndBoxSizingReliable() {
          div.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;' + 'box-sizing:border-box;display:block;margin-top:1%;top:1%;' + 'border:1px;padding:1px;width:4px;position:absolute';
          div.innerHTML = '';
          docElem.appendChild(container);
          var divStyle = window.getComputedStyle(div, null);
          pixelPositionVal = divStyle.top !== '1%';
          boxSizingReliableVal = divStyle.width === '4px';
          docElem.removeChild(container);
        }
        if (window.getComputedStyle) {
          jQuery.extend(support, {
            pixelPosition: function () {
              computePixelPositionAndBoxSizingReliable();
              return pixelPositionVal;
            },
            boxSizingReliable: function () {
              if (boxSizingReliableVal == null) {
                computePixelPositionAndBoxSizingReliable();
              }
              return boxSizingReliableVal;
            },
            reliableMarginRight: function () {
              var ret, marginDiv = div.appendChild(document.createElement('div'));
              marginDiv.style.cssText = div.style.cssText = '-webkit-box-sizing:content-box;-moz-box-sizing:content-box;' + 'box-sizing:content-box;display:block;margin:0;border:0;padding:0';
              marginDiv.style.marginRight = marginDiv.style.width = '0';
              div.style.width = '1px';
              docElem.appendChild(container);
              ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);
              docElem.removeChild(container);
              div.removeChild(marginDiv);
              return ret;
            }
          });
        }
      }());
      jQuery.swap = function (elem, options, callback, args) {
        var ret, name, old = {};
        for (name in options) {
          old[name] = elem.style[name];
          elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        for (name in options) {
          elem.style[name] = old[name];
        }
        return ret;
      };
      var rdisplayswap = /^(none|table(?!-c[ea]).+)/, rnumsplit = new RegExp('^(' + pnum + ')(.*)$', 'i'), rrelNum = new RegExp('^([+-])=(' + pnum + ')', 'i'), cssShow = {
          position: 'absolute',
          visibility: 'hidden',
          display: 'block'
        }, cssNormalTransform = {
          letterSpacing: '0',
          fontWeight: '400'
        }, cssPrefixes = [
          'Webkit',
          'O',
          'Moz',
          'ms'
        ];
      function vendorPropName(style, name) {
        if (name in style) {
          return name;
        }
        var capName = name[0].toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length;
        while (i--) {
          name = cssPrefixes[i] + capName;
          if (name in style) {
            return name;
          }
        }
        return origName;
      }
      function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || 'px') : value;
      }
      function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? 'border' : 'content') ? 4 : name === 'width' ? 1 : 0, val = 0;
        for (; i < 4; i += 2) {
          if (extra === 'margin') {
            val += jQuery.css(elem, extra + cssExpand[i], true, styles);
          }
          if (isBorderBox) {
            if (extra === 'content') {
              val -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
            }
            if (extra !== 'margin') {
              val -= jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
            }
          } else {
            val += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
            if (extra !== 'padding') {
              val += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
            }
          }
        }
        return val;
      }
      function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox = true, val = name === 'width' ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';
        if (val <= 0 || val == null) {
          val = curCSS(elem, name, styles);
          if (val < 0 || val == null) {
            val = elem.style[name];
          }
          if (rnumnonpx.test(val)) {
            return val;
          }
          valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
          val = parseFloat(val) || 0;
        }
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? 'border' : 'content'), valueIsBorderBox, styles) + 'px';
      }
      function showHide(elements, show) {
        var display, elem, hidden, values = [], index = 0, length = elements.length;
        for (; index < length; index++) {
          elem = elements[index];
          if (!elem.style) {
            continue;
          }
          values[index] = data_priv.get(elem, 'olddisplay');
          display = elem.style.display;
          if (show) {
            if (!values[index] && display === 'none') {
              elem.style.display = '';
            }
            if (elem.style.display === '' && isHidden(elem)) {
              values[index] = data_priv.access(elem, 'olddisplay', defaultDisplay(elem.nodeName));
            }
          } else {
            hidden = isHidden(elem);
            if (display !== 'none' || !hidden) {
              data_priv.set(elem, 'olddisplay', hidden ? display : jQuery.css(elem, 'display'));
            }
          }
        }
        for (index = 0; index < length; index++) {
          elem = elements[index];
          if (!elem.style) {
            continue;
          }
          if (!show || elem.style.display === 'none' || elem.style.display === '') {
            elem.style.display = show ? values[index] || '' : 'none';
          }
        }
        return elements;
      }
      jQuery.extend({
        cssHooks: {
          opacity: {
            get: function (elem, computed) {
              if (computed) {
                var ret = curCSS(elem, 'opacity');
                return ret === '' ? '1' : ret;
              }
            }
          }
        },
        cssNumber: {
          'columnCount': true,
          'fillOpacity': true,
          'flexGrow': true,
          'flexShrink': true,
          'fontWeight': true,
          'lineHeight': true,
          'opacity': true,
          'order': true,
          'orphans': true,
          'widows': true,
          'zIndex': true,
          'zoom': true
        },
        cssProps: { 'float': 'cssFloat' },
        style: function (elem, name, value, extra) {
          if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
            return;
          }
          var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
          name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
          if (value !== undefined) {
            type = typeof value;
            if (type === 'string' && (ret = rrelNum.exec(value))) {
              value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
              type = 'number';
            }
            if (value == null || value !== value) {
              return;
            }
            if (type === 'number' && !jQuery.cssNumber[origName]) {
              value += 'px';
            }
            if (!support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {
              style[name] = 'inherit';
            }
            if (!hooks || !('set' in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
              style[name] = value;
            }
          } else {
            if (hooks && 'get' in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
              return ret;
            }
            return style[name];
          }
        },
        css: function (elem, name, extra, styles) {
          var val, num, hooks, origName = jQuery.camelCase(name);
          name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
          if (hooks && 'get' in hooks) {
            val = hooks.get(elem, true, extra);
          }
          if (val === undefined) {
            val = curCSS(elem, name, styles);
          }
          if (val === 'normal' && name in cssNormalTransform) {
            val = cssNormalTransform[name];
          }
          if (extra === '' || extra) {
            num = parseFloat(val);
            return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
          }
          return val;
        }
      });
      jQuery.each([
        'height',
        'width'
      ], function (i, name) {
        jQuery.cssHooks[name] = {
          get: function (elem, computed, extra) {
            if (computed) {
              return rdisplayswap.test(jQuery.css(elem, 'display')) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function () {
                return getWidthOrHeight(elem, name, extra);
              }) : getWidthOrHeight(elem, name, extra);
            }
          },
          set: function (elem, value, extra) {
            var styles = extra && getStyles(elem);
            return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', styles) : 0);
          }
        };
      });
      jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
        if (computed) {
          return jQuery.swap(elem, { 'display': 'inline-block' }, curCSS, [
            elem,
            'marginRight'
          ]);
        }
      });
      jQuery.each({
        margin: '',
        padding: '',
        border: 'Width'
      }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
          expand: function (value) {
            var i = 0, expanded = {}, parts = typeof value === 'string' ? value.split(' ') : [value];
            for (; i < 4; i++) {
              expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
            }
            return expanded;
          }
        };
        if (!rmargin.test(prefix)) {
          jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
      });
      jQuery.fn.extend({
        css: function (name, value) {
          return access(this, function (elem, name, value) {
            var styles, len, map = {}, i = 0;
            if (jQuery.isArray(name)) {
              styles = getStyles(elem);
              len = name.length;
              for (; i < len; i++) {
                map[name[i]] = jQuery.css(elem, name[i], false, styles);
              }
              return map;
            }
            return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
          }, name, value, arguments.length > 1);
        },
        show: function () {
          return showHide(this, true);
        },
        hide: function () {
          return showHide(this);
        },
        toggle: function (state) {
          if (typeof state === 'boolean') {
            return state ? this.show() : this.hide();
          }
          return this.each(function () {
            if (isHidden(this)) {
              jQuery(this).show();
            } else {
              jQuery(this).hide();
            }
          });
        }
      });
      function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
      }
      jQuery.Tween = Tween;
      Tween.prototype = {
        constructor: Tween,
        init: function (elem, options, prop, end, easing, unit) {
          this.elem = elem;
          this.prop = prop;
          this.easing = easing || 'swing';
          this.options = options;
          this.start = this.now = this.cur();
          this.end = end;
          this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px');
        },
        cur: function () {
          var hooks = Tween.propHooks[this.prop];
          return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function (percent) {
          var eased, hooks = Tween.propHooks[this.prop];
          if (this.options.duration) {
            this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
          } else {
            this.pos = eased = percent;
          }
          this.now = (this.end - this.start) * eased + this.start;
          if (this.options.step) {
            this.options.step.call(this.elem, this.now, this);
          }
          if (hooks && hooks.set) {
            hooks.set(this);
          } else {
            Tween.propHooks._default.set(this);
          }
          return this;
        }
      };
      Tween.prototype.init.prototype = Tween.prototype;
      Tween.propHooks = {
        _default: {
          get: function (tween) {
            var result;
            if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
              return tween.elem[tween.prop];
            }
            result = jQuery.css(tween.elem, tween.prop, '');
            return !result || result === 'auto' ? 0 : result;
          },
          set: function (tween) {
            if (jQuery.fx.step[tween.prop]) {
              jQuery.fx.step[tween.prop](tween);
            } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
              jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
            } else {
              tween.elem[tween.prop] = tween.now;
            }
          }
        }
      };
      Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function (tween) {
          if (tween.elem.nodeType && tween.elem.parentNode) {
            tween.elem[tween.prop] = tween.now;
          }
        }
      };
      jQuery.easing = {
        linear: function (p) {
          return p;
        },
        swing: function (p) {
          return 0.5 - Math.cos(p * Math.PI) / 2;
        }
      };
      jQuery.fx = Tween.prototype.init;
      jQuery.fx.step = {};
      var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp('^(?:([+-])=|)(' + pnum + ')([a-z%]*)$', 'i'), rrun = /queueHooks$/, animationPrefilters = [defaultPrefilter], tweeners = {
          '*': [function (prop, value) {
              var tween = this.createTween(prop, value), target = tween.cur(), parts = rfxnum.exec(value), unit = parts && parts[3] || (jQuery.cssNumber[prop] ? '' : 'px'), start = (jQuery.cssNumber[prop] || unit !== 'px' && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)), scale = 1, maxIterations = 20;
              if (start && start[3] !== unit) {
                unit = unit || start[3];
                parts = parts || [];
                start = +target || 1;
                do {
                  scale = scale || '.5';
                  start = start / scale;
                  jQuery.style(tween.elem, prop, start + unit);
                } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
              }
              if (parts) {
                start = tween.start = +start || +target || 0;
                tween.unit = unit;
                tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
              }
              return tween;
            }]
        };
      function createFxNow() {
        setTimeout(function () {
          fxNow = undefined;
        });
        return fxNow = jQuery.now();
      }
      function genFx(type, includeWidth) {
        var which, i = 0, attrs = { height: type };
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
          which = cssExpand[i];
          attrs['margin' + which] = attrs['padding' + which] = type;
        }
        if (includeWidth) {
          attrs.opacity = attrs.width = type;
        }
        return attrs;
      }
      function createTween(value, prop, animation) {
        var tween, collection = (tweeners[prop] || []).concat(tweeners['*']), index = 0, length = collection.length;
        for (; index < length; index++) {
          if (tween = collection[index].call(animation, prop, value)) {
            return tween;
          }
        }
      }
      function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = data_priv.get(elem, 'fxshow');
        if (!opts.queue) {
          hooks = jQuery._queueHooks(elem, 'fx');
          if (hooks.unqueued == null) {
            hooks.unqueued = 0;
            oldfire = hooks.empty.fire;
            hooks.empty.fire = function () {
              if (!hooks.unqueued) {
                oldfire();
              }
            };
          }
          hooks.unqueued++;
          anim.always(function () {
            anim.always(function () {
              hooks.unqueued--;
              if (!jQuery.queue(elem, 'fx').length) {
                hooks.empty.fire();
              }
            });
          });
        }
        if (elem.nodeType === 1 && ('height' in props || 'width' in props)) {
          opts.overflow = [
            style.overflow,
            style.overflowX,
            style.overflowY
          ];
          display = jQuery.css(elem, 'display');
          checkDisplay = display === 'none' ? data_priv.get(elem, 'olddisplay') || defaultDisplay(elem.nodeName) : display;
          if (checkDisplay === 'inline' && jQuery.css(elem, 'float') === 'none') {
            style.display = 'inline-block';
          }
        }
        if (opts.overflow) {
          style.overflow = 'hidden';
          anim.always(function () {
            style.overflow = opts.overflow[0];
            style.overflowX = opts.overflow[1];
            style.overflowY = opts.overflow[2];
          });
        }
        for (prop in props) {
          value = props[prop];
          if (rfxtypes.exec(value)) {
            delete props[prop];
            toggle = toggle || value === 'toggle';
            if (value === (hidden ? 'hide' : 'show')) {
              if (value === 'show' && dataShow && dataShow[prop] !== undefined) {
                hidden = true;
              } else {
                continue;
              }
            }
            orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
          } else {
            display = undefined;
          }
        }
        if (!jQuery.isEmptyObject(orig)) {
          if (dataShow) {
            if ('hidden' in dataShow) {
              hidden = dataShow.hidden;
            }
          } else {
            dataShow = data_priv.access(elem, 'fxshow', {});
          }
          if (toggle) {
            dataShow.hidden = !hidden;
          }
          if (hidden) {
            jQuery(elem).show();
          } else {
            anim.done(function () {
              jQuery(elem).hide();
            });
          }
          anim.done(function () {
            var prop;
            data_priv.remove(elem, 'fxshow');
            for (prop in orig) {
              jQuery.style(elem, prop, orig[prop]);
            }
          });
          for (prop in orig) {
            tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
              dataShow[prop] = tween.start;
              if (hidden) {
                tween.end = tween.start;
                tween.start = prop === 'width' || prop === 'height' ? 1 : 0;
              }
            }
          }
        } else if ((display === 'none' ? defaultDisplay(elem.nodeName) : display) === 'inline') {
          style.display = display;
        }
      }
      function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
          name = jQuery.camelCase(index);
          easing = specialEasing[name];
          value = props[index];
          if (jQuery.isArray(value)) {
            easing = value[1];
            value = props[index] = value[0];
          }
          if (index !== name) {
            props[name] = value;
            delete props[index];
          }
          hooks = jQuery.cssHooks[name];
          if (hooks && 'expand' in hooks) {
            value = hooks.expand(value);
            delete props[name];
            for (index in value) {
              if (!(index in props)) {
                props[index] = value[index];
                specialEasing[index] = easing;
              }
            }
          } else {
            specialEasing[name] = easing;
          }
        }
      }
      function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function () {
            delete tick.elem;
          }), tick = function () {
            if (stopped) {
              return false;
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
            for (; index < length; index++) {
              animation.tweens[index].run(percent);
            }
            deferred.notifyWith(elem, [
              animation,
              percent,
              remaining
            ]);
            if (percent < 1 && length) {
              return remaining;
            } else {
              deferred.resolveWith(elem, [animation]);
              return false;
            }
          }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, { specialEasing: {} }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function (prop, end) {
              var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
              animation.tweens.push(tween);
              return tween;
            },
            stop: function (gotoEnd) {
              var index = 0, length = gotoEnd ? animation.tweens.length : 0;
              if (stopped) {
                return this;
              }
              stopped = true;
              for (; index < length; index++) {
                animation.tweens[index].run(1);
              }
              if (gotoEnd) {
                deferred.resolveWith(elem, [
                  animation,
                  gotoEnd
                ]);
              } else {
                deferred.rejectWith(elem, [
                  animation,
                  gotoEnd
                ]);
              }
              return this;
            }
          }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) {
          result = animationPrefilters[index].call(animation, elem, props, animation.opts);
          if (result) {
            return result;
          }
        }
        jQuery.map(props, createTween, animation);
        if (jQuery.isFunction(animation.opts.start)) {
          animation.opts.start.call(elem, animation);
        }
        jQuery.fx.timer(jQuery.extend(tick, {
          elem: elem,
          anim: animation,
          queue: animation.opts.queue
        }));
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
      }
      jQuery.Animation = jQuery.extend(Animation, {
        tweener: function (props, callback) {
          if (jQuery.isFunction(props)) {
            callback = props;
            props = ['*'];
          } else {
            props = props.split(' ');
          }
          var prop, index = 0, length = props.length;
          for (; index < length; index++) {
            prop = props[index];
            tweeners[prop] = tweeners[prop] || [];
            tweeners[prop].unshift(callback);
          }
        },
        prefilter: function (callback, prepend) {
          if (prepend) {
            animationPrefilters.unshift(callback);
          } else {
            animationPrefilters.push(callback);
          }
        }
      });
      jQuery.speed = function (speed, easing, fn) {
        var opt = speed && typeof speed === 'object' ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
          };
        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === 'number' ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
        if (opt.queue == null || opt.queue === true) {
          opt.queue = 'fx';
        }
        opt.old = opt.complete;
        opt.complete = function () {
          if (jQuery.isFunction(opt.old)) {
            opt.old.call(this);
          }
          if (opt.queue) {
            jQuery.dequeue(this, opt.queue);
          }
        };
        return opt;
      };
      jQuery.fn.extend({
        fadeTo: function (speed, to, easing, callback) {
          return this.filter(isHidden).css('opacity', 0).show().end().animate({ opacity: to }, speed, easing, callback);
        },
        animate: function (prop, speed, easing, callback) {
          var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () {
              var anim = Animation(this, jQuery.extend({}, prop), optall);
              if (empty || data_priv.get(this, 'finish')) {
                anim.stop(true);
              }
            };
          doAnimation.finish = doAnimation;
          return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function (type, clearQueue, gotoEnd) {
          var stopQueue = function (hooks) {
            var stop = hooks.stop;
            delete hooks.stop;
            stop(gotoEnd);
          };
          if (typeof type !== 'string') {
            gotoEnd = clearQueue;
            clearQueue = type;
            type = undefined;
          }
          if (clearQueue && type !== false) {
            this.queue(type || 'fx', []);
          }
          return this.each(function () {
            var dequeue = true, index = type != null && type + 'queueHooks', timers = jQuery.timers, data = data_priv.get(this);
            if (index) {
              if (data[index] && data[index].stop) {
                stopQueue(data[index]);
              }
            } else {
              for (index in data) {
                if (data[index] && data[index].stop && rrun.test(index)) {
                  stopQueue(data[index]);
                }
              }
            }
            for (index = timers.length; index--;) {
              if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                timers[index].anim.stop(gotoEnd);
                dequeue = false;
                timers.splice(index, 1);
              }
            }
            if (dequeue || !gotoEnd) {
              jQuery.dequeue(this, type);
            }
          });
        },
        finish: function (type) {
          if (type !== false) {
            type = type || 'fx';
          }
          return this.each(function () {
            var index, data = data_priv.get(this), queue = data[type + 'queue'], hooks = data[type + 'queueHooks'], timers = jQuery.timers, length = queue ? queue.length : 0;
            data.finish = true;
            jQuery.queue(this, type, []);
            if (hooks && hooks.stop) {
              hooks.stop.call(this, true);
            }
            for (index = timers.length; index--;) {
              if (timers[index].elem === this && timers[index].queue === type) {
                timers[index].anim.stop(true);
                timers.splice(index, 1);
              }
            }
            for (index = 0; index < length; index++) {
              if (queue[index] && queue[index].finish) {
                queue[index].finish.call(this);
              }
            }
            delete data.finish;
          });
        }
      });
      jQuery.each([
        'toggle',
        'show',
        'hide'
      ], function (i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function (speed, easing, callback) {
          return speed == null || typeof speed === 'boolean' ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
      });
      jQuery.each({
        slideDown: genFx('show'),
        slideUp: genFx('hide'),
        slideToggle: genFx('toggle'),
        fadeIn: { opacity: 'show' },
        fadeOut: { opacity: 'hide' },
        fadeToggle: { opacity: 'toggle' }
      }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
          return this.animate(props, speed, easing, callback);
        };
      });
      jQuery.timers = [];
      jQuery.fx.tick = function () {
        var timer, i = 0, timers = jQuery.timers;
        fxNow = jQuery.now();
        for (; i < timers.length; i++) {
          timer = timers[i];
          if (!timer() && timers[i] === timer) {
            timers.splice(i--, 1);
          }
        }
        if (!timers.length) {
          jQuery.fx.stop();
        }
        fxNow = undefined;
      };
      jQuery.fx.timer = function (timer) {
        jQuery.timers.push(timer);
        if (timer()) {
          jQuery.fx.start();
        } else {
          jQuery.timers.pop();
        }
      };
      jQuery.fx.interval = 13;
      jQuery.fx.start = function () {
        if (!timerId) {
          timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
        }
      };
      jQuery.fx.stop = function () {
        clearInterval(timerId);
        timerId = null;
      };
      jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
      };
      jQuery.fn.delay = function (time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || 'fx';
        return this.queue(type, function (next, hooks) {
          var timeout = setTimeout(next, time);
          hooks.stop = function () {
            clearTimeout(timeout);
          };
        });
      };
      (function () {
        var input = document.createElement('input'), select = document.createElement('select'), opt = select.appendChild(document.createElement('option'));
        input.type = 'checkbox';
        support.checkOn = input.value !== '';
        support.optSelected = opt.selected;
        select.disabled = true;
        support.optDisabled = !opt.disabled;
        input = document.createElement('input');
        input.value = 't';
        input.type = 'radio';
        support.radioValue = input.value === 't';
      }());
      var nodeHook, boolHook, attrHandle = jQuery.expr.attrHandle;
      jQuery.fn.extend({
        attr: function (name, value) {
          return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function (name) {
          return this.each(function () {
            jQuery.removeAttr(this, name);
          });
        }
      });
      jQuery.extend({
        attr: function (elem, name, value) {
          var hooks, ret, nType = elem.nodeType;
          if (!elem || nType === 3 || nType === 8 || nType === 2) {
            return;
          }
          if (typeof elem.getAttribute === strundefined) {
            return jQuery.prop(elem, name, value);
          }
          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            name = name.toLowerCase();
            hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
          }
          if (value !== undefined) {
            if (value === null) {
              jQuery.removeAttr(elem, name);
            } else if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
              return ret;
            } else {
              elem.setAttribute(name, value + '');
              return value;
            }
          } else if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret;
          } else {
            ret = jQuery.find.attr(elem, name);
            return ret == null ? undefined : ret;
          }
        },
        removeAttr: function (elem, value) {
          var name, propName, i = 0, attrNames = value && value.match(rnotwhite);
          if (attrNames && elem.nodeType === 1) {
            while (name = attrNames[i++]) {
              propName = jQuery.propFix[name] || name;
              if (jQuery.expr.match.bool.test(name)) {
                elem[propName] = false;
              }
              elem.removeAttribute(name);
            }
          }
        },
        attrHooks: {
          type: {
            set: function (elem, value) {
              if (!support.radioValue && value === 'radio' && jQuery.nodeName(elem, 'input')) {
                var val = elem.value;
                elem.setAttribute('type', value);
                if (val) {
                  elem.value = val;
                }
                return value;
              }
            }
          }
        }
      });
      boolHook = {
        set: function (elem, value, name) {
          if (value === false) {
            jQuery.removeAttr(elem, name);
          } else {
            elem.setAttribute(name, name);
          }
          return name;
        }
      };
      jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = function (elem, name, isXML) {
          var ret, handle;
          if (!isXML) {
            handle = attrHandle[name];
            attrHandle[name] = ret;
            ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
            attrHandle[name] = handle;
          }
          return ret;
        };
      });
      var rfocusable = /^(?:input|select|textarea|button)$/i;
      jQuery.fn.extend({
        prop: function (name, value) {
          return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function (name) {
          return this.each(function () {
            delete this[jQuery.propFix[name] || name];
          });
        }
      });
      jQuery.extend({
        propFix: {
          'for': 'htmlFor',
          'class': 'className'
        },
        prop: function (elem, name, value) {
          var ret, hooks, notxml, nType = elem.nodeType;
          if (!elem || nType === 3 || nType === 8 || nType === 2) {
            return;
          }
          notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
          if (notxml) {
            name = jQuery.propFix[name] || name;
            hooks = jQuery.propHooks[name];
          }
          if (value !== undefined) {
            return hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
          } else {
            return hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
          }
        },
        propHooks: {
          tabIndex: {
            get: function (elem) {
              return elem.hasAttribute('tabindex') || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;
            }
          }
        }
      });
      if (!support.optSelected) {
        jQuery.propHooks.selected = {
          get: function (elem) {
            var parent = elem.parentNode;
            if (parent && parent.parentNode) {
              parent.parentNode.selectedIndex;
            }
            return null;
          }
        };
      }
      jQuery.each([
        'tabIndex',
        'readOnly',
        'maxLength',
        'cellSpacing',
        'cellPadding',
        'rowSpan',
        'colSpan',
        'useMap',
        'frameBorder',
        'contentEditable'
      ], function () {
        jQuery.propFix[this.toLowerCase()] = this;
      });
      var rclass = /[\t\r\n\f]/g;
      jQuery.fn.extend({
        addClass: function (value) {
          var classes, elem, cur, clazz, j, finalValue, proceed = typeof value === 'string' && value, i = 0, len = this.length;
          if (jQuery.isFunction(value)) {
            return this.each(function (j) {
              jQuery(this).addClass(value.call(this, j, this.className));
            });
          }
          if (proceed) {
            classes = (value || '').match(rnotwhite) || [];
            for (; i < len; i++) {
              elem = this[i];
              cur = elem.nodeType === 1 && (elem.className ? (' ' + elem.className + ' ').replace(rclass, ' ') : ' ');
              if (cur) {
                j = 0;
                while (clazz = classes[j++]) {
                  if (cur.indexOf(' ' + clazz + ' ') < 0) {
                    cur += clazz + ' ';
                  }
                }
                finalValue = jQuery.trim(cur);
                if (elem.className !== finalValue) {
                  elem.className = finalValue;
                }
              }
            }
          }
          return this;
        },
        removeClass: function (value) {
          var classes, elem, cur, clazz, j, finalValue, proceed = arguments.length === 0 || typeof value === 'string' && value, i = 0, len = this.length;
          if (jQuery.isFunction(value)) {
            return this.each(function (j) {
              jQuery(this).removeClass(value.call(this, j, this.className));
            });
          }
          if (proceed) {
            classes = (value || '').match(rnotwhite) || [];
            for (; i < len; i++) {
              elem = this[i];
              cur = elem.nodeType === 1 && (elem.className ? (' ' + elem.className + ' ').replace(rclass, ' ') : '');
              if (cur) {
                j = 0;
                while (clazz = classes[j++]) {
                  while (cur.indexOf(' ' + clazz + ' ') >= 0) {
                    cur = cur.replace(' ' + clazz + ' ', ' ');
                  }
                }
                finalValue = value ? jQuery.trim(cur) : '';
                if (elem.className !== finalValue) {
                  elem.className = finalValue;
                }
              }
            }
          }
          return this;
        },
        toggleClass: function (value, stateVal) {
          var type = typeof value;
          if (typeof stateVal === 'boolean' && type === 'string') {
            return stateVal ? this.addClass(value) : this.removeClass(value);
          }
          if (jQuery.isFunction(value)) {
            return this.each(function (i) {
              jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
            });
          }
          return this.each(function () {
            if (type === 'string') {
              var className, i = 0, self = jQuery(this), classNames = value.match(rnotwhite) || [];
              while (className = classNames[i++]) {
                if (self.hasClass(className)) {
                  self.removeClass(className);
                } else {
                  self.addClass(className);
                }
              }
            } else if (type === strundefined || type === 'boolean') {
              if (this.className) {
                data_priv.set(this, '__className__', this.className);
              }
              this.className = this.className || value === false ? '' : data_priv.get(this, '__className__') || '';
            }
          });
        },
        hasClass: function (selector) {
          var className = ' ' + selector + ' ', i = 0, l = this.length;
          for (; i < l; i++) {
            if (this[i].nodeType === 1 && (' ' + this[i].className + ' ').replace(rclass, ' ').indexOf(className) >= 0) {
              return true;
            }
          }
          return false;
        }
      });
      var rreturn = /\r/g;
      jQuery.fn.extend({
        val: function (value) {
          var hooks, ret, isFunction, elem = this[0];
          if (!arguments.length) {
            if (elem) {
              hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
              if (hooks && 'get' in hooks && (ret = hooks.get(elem, 'value')) !== undefined) {
                return ret;
              }
              ret = elem.value;
              return typeof ret === 'string' ? ret.replace(rreturn, '') : ret == null ? '' : ret;
            }
            return;
          }
          isFunction = jQuery.isFunction(value);
          return this.each(function (i) {
            var val;
            if (this.nodeType !== 1) {
              return;
            }
            if (isFunction) {
              val = value.call(this, i, jQuery(this).val());
            } else {
              val = value;
            }
            if (val == null) {
              val = '';
            } else if (typeof val === 'number') {
              val += '';
            } else if (jQuery.isArray(val)) {
              val = jQuery.map(val, function (value) {
                return value == null ? '' : value + '';
              });
            }
            hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
            if (!hooks || !('set' in hooks) || hooks.set(this, val, 'value') === undefined) {
              this.value = val;
            }
          });
        }
      });
      jQuery.extend({
        valHooks: {
          option: {
            get: function (elem) {
              var val = jQuery.find.attr(elem, 'value');
              return val != null ? val : jQuery.trim(jQuery.text(elem));
            }
          },
          select: {
            get: function (elem) {
              var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === 'select-one' || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
              for (; i < max; i++) {
                option = options[i];
                if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute('disabled') === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, 'optgroup'))) {
                  value = jQuery(option).val();
                  if (one) {
                    return value;
                  }
                  values.push(value);
                }
              }
              return values;
            },
            set: function (elem, value) {
              var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
              while (i--) {
                option = options[i];
                if (option.selected = jQuery.inArray(option.value, values) >= 0) {
                  optionSet = true;
                }
              }
              if (!optionSet) {
                elem.selectedIndex = -1;
              }
              return values;
            }
          }
        }
      });
      jQuery.each([
        'radio',
        'checkbox'
      ], function () {
        jQuery.valHooks[this] = {
          set: function (elem, value) {
            if (jQuery.isArray(value)) {
              return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
            }
          }
        };
        if (!support.checkOn) {
          jQuery.valHooks[this].get = function (elem) {
            return elem.getAttribute('value') === null ? 'on' : elem.value;
          };
        }
      });
      jQuery.each(('blur focus focusin focusout load resize scroll unload click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select submit keydown keypress keyup error contextmenu').split(' '), function (i, name) {
        jQuery.fn[name] = function (data, fn) {
          return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
      });
      jQuery.fn.extend({
        hover: function (fnOver, fnOut) {
          return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        },
        bind: function (types, data, fn) {
          return this.on(types, null, data, fn);
        },
        unbind: function (types, fn) {
          return this.off(types, null, fn);
        },
        delegate: function (selector, types, data, fn) {
          return this.on(types, selector, data, fn);
        },
        undelegate: function (selector, types, fn) {
          return arguments.length === 1 ? this.off(selector, '**') : this.off(types, selector || '**', fn);
        }
      });
      var nonce = jQuery.now();
      var rquery = /\?/;
      jQuery.parseJSON = function (data) {
        return JSON.parse(data + '');
      };
      jQuery.parseXML = function (data) {
        var xml, tmp;
        if (!data || typeof data !== 'string') {
          return null;
        }
        try {
          tmp = new DOMParser();
          xml = tmp.parseFromString(data, 'text/xml');
        } catch (e) {
          xml = undefined;
        }
        if (!xml || xml.getElementsByTagName('parsererror').length) {
          jQuery.error('Invalid XML: ' + data);
        }
        return xml;
      };
      var rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, prefilters = {}, transports = {}, allTypes = '*/'.concat('*'), ajaxLocation = window.location.href, ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
      function addToPrefiltersOrTransports(structure) {
        return function (dataTypeExpression, func) {
          if (typeof dataTypeExpression !== 'string') {
            func = dataTypeExpression;
            dataTypeExpression = '*';
          }
          var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
          if (jQuery.isFunction(func)) {
            while (dataType = dataTypes[i++]) {
              if (dataType[0] === '+') {
                dataType = dataType.slice(1) || '*';
                (structure[dataType] = structure[dataType] || []).unshift(func);
              } else {
                (structure[dataType] = structure[dataType] || []).push(func);
              }
            }
          }
        };
      }
      function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
          var selected;
          inspected[dataType] = true;
          jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
            var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
            if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {
              options.dataTypes.unshift(dataTypeOrTransport);
              inspect(dataTypeOrTransport);
              return false;
            } else if (seekingTransport) {
              return !(selected = dataTypeOrTransport);
            }
          });
          return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected['*'] && inspect('*');
      }
      function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
          if (src[key] !== undefined) {
            (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
          }
        }
        if (deep) {
          jQuery.extend(true, target, deep);
        }
        return target;
      }
      function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        while (dataTypes[0] === '*') {
          dataTypes.shift();
          if (ct === undefined) {
            ct = s.mimeType || jqXHR.getResponseHeader('Content-Type');
          }
        }
        if (ct) {
          for (type in contents) {
            if (contents[type] && contents[type].test(ct)) {
              dataTypes.unshift(type);
              break;
            }
          }
        }
        if (dataTypes[0] in responses) {
          finalDataType = dataTypes[0];
        } else {
          for (type in responses) {
            if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
              finalDataType = type;
              break;
            }
            if (!firstDataType) {
              firstDataType = type;
            }
          }
          finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
          if (finalDataType !== dataTypes[0]) {
            dataTypes.unshift(finalDataType);
          }
          return responses[finalDataType];
        }
      }
      function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
          for (conv in s.converters) {
            converters[conv.toLowerCase()] = s.converters[conv];
          }
        }
        current = dataTypes.shift();
        while (current) {
          if (s.responseFields[current]) {
            jqXHR[s.responseFields[current]] = response;
          }
          if (!prev && isSuccess && s.dataFilter) {
            response = s.dataFilter(response, s.dataType);
          }
          prev = current;
          current = dataTypes.shift();
          if (current) {
            if (current === '*') {
              current = prev;
            } else if (prev !== '*' && prev !== current) {
              conv = converters[prev + ' ' + current] || converters['* ' + current];
              if (!conv) {
                for (conv2 in converters) {
                  tmp = conv2.split(' ');
                  if (tmp[1] === current) {
                    conv = converters[prev + ' ' + tmp[0]] || converters['* ' + tmp[0]];
                    if (conv) {
                      if (conv === true) {
                        conv = converters[conv2];
                      } else if (converters[conv2] !== true) {
                        current = tmp[0];
                        dataTypes.unshift(tmp[1]);
                      }
                      break;
                    }
                  }
                }
              }
              if (conv !== true) {
                if (conv && s['throws']) {
                  response = conv(response);
                } else {
                  try {
                    response = conv(response);
                  } catch (e) {
                    return {
                      state: 'parsererror',
                      error: conv ? e : 'No conversion from ' + prev + ' to ' + current
                    };
                  }
                }
              }
            }
          }
        }
        return {
          state: 'success',
          data: response
        };
      }
      jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
          url: ajaxLocation,
          type: 'GET',
          isLocal: rlocalProtocol.test(ajaxLocParts[1]),
          global: true,
          processData: true,
          async: true,
          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
          accepts: {
            '*': allTypes,
            text: 'text/plain',
            html: 'text/html',
            xml: 'application/xml, text/xml',
            json: 'application/json, text/javascript'
          },
          contents: {
            xml: /xml/,
            html: /html/,
            json: /json/
          },
          responseFields: {
            xml: 'responseXML',
            text: 'responseText',
            json: 'responseJSON'
          },
          converters: {
            '* text': String,
            'text html': true,
            'text json': jQuery.parseJSON,
            'text xml': jQuery.parseXML
          },
          flatOptions: {
            url: true,
            context: true
          }
        },
        ajaxSetup: function (target, settings) {
          return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function (url, options) {
          if (typeof url === 'object') {
            options = url;
            url = undefined;
          }
          options = options || {};
          var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, parts, fireGlobals, i, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks('once memory'), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0, strAbort = 'canceled', jqXHR = {
              readyState: 0,
              getResponseHeader: function (key) {
                var match;
                if (state === 2) {
                  if (!responseHeaders) {
                    responseHeaders = {};
                    while (match = rheaders.exec(responseHeadersString)) {
                      responseHeaders[match[1].toLowerCase()] = match[2];
                    }
                  }
                  match = responseHeaders[key.toLowerCase()];
                }
                return match == null ? null : match;
              },
              getAllResponseHeaders: function () {
                return state === 2 ? responseHeadersString : null;
              },
              setRequestHeader: function (name, value) {
                var lname = name.toLowerCase();
                if (!state) {
                  name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                  requestHeaders[name] = value;
                }
                return this;
              },
              overrideMimeType: function (type) {
                if (!state) {
                  s.mimeType = type;
                }
                return this;
              },
              statusCode: function (map) {
                var code;
                if (map) {
                  if (state < 2) {
                    for (code in map) {
                      statusCode[code] = [
                        statusCode[code],
                        map[code]
                      ];
                    }
                  } else {
                    jqXHR.always(map[jqXHR.status]);
                  }
                }
                return this;
              },
              abort: function (statusText) {
                var finalText = statusText || strAbort;
                if (transport) {
                  transport.abort(finalText);
                }
                done(0, finalText);
                return this;
              }
            };
          deferred.promise(jqXHR).complete = completeDeferred.add;
          jqXHR.success = jqXHR.done;
          jqXHR.error = jqXHR.fail;
          s.url = ((url || s.url || ajaxLocation) + '').replace(rhash, '').replace(rprotocol, ajaxLocParts[1] + '//');
          s.type = options.method || options.type || s.method || s.type;
          s.dataTypes = jQuery.trim(s.dataType || '*').toLowerCase().match(rnotwhite) || [''];
          if (s.crossDomain == null) {
            parts = rurl.exec(s.url.toLowerCase());
            s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === 'http:' ? '80' : '443')) !== (ajaxLocParts[3] || (ajaxLocParts[1] === 'http:' ? '80' : '443'))));
          }
          if (s.data && s.processData && typeof s.data !== 'string') {
            s.data = jQuery.param(s.data, s.traditional);
          }
          inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
          if (state === 2) {
            return jqXHR;
          }
          fireGlobals = jQuery.event && s.global;
          if (fireGlobals && jQuery.active++ === 0) {
            jQuery.event.trigger('ajaxStart');
          }
          s.type = s.type.toUpperCase();
          s.hasContent = !rnoContent.test(s.type);
          cacheURL = s.url;
          if (!s.hasContent) {
            if (s.data) {
              cacheURL = s.url += (rquery.test(cacheURL) ? '&' : '?') + s.data;
              delete s.data;
            }
            if (s.cache === false) {
              s.url = rts.test(cacheURL) ? cacheURL.replace(rts, '$1_=' + nonce++) : cacheURL + (rquery.test(cacheURL) ? '&' : '?') + '_=' + nonce++;
            }
          }
          if (s.ifModified) {
            if (jQuery.lastModified[cacheURL]) {
              jqXHR.setRequestHeader('If-Modified-Since', jQuery.lastModified[cacheURL]);
            }
            if (jQuery.etag[cacheURL]) {
              jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL]);
            }
          }
          if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
            jqXHR.setRequestHeader('Content-Type', s.contentType);
          }
          jqXHR.setRequestHeader('Accept', s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '') : s.accepts['*']);
          for (i in s.headers) {
            jqXHR.setRequestHeader(i, s.headers[i]);
          }
          if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
            return jqXHR.abort();
          }
          strAbort = 'abort';
          for (i in {
              success: 1,
              error: 1,
              complete: 1
            }) {
            jqXHR[i](s[i]);
          }
          transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
          if (!transport) {
            done(-1, 'No Transport');
          } else {
            jqXHR.readyState = 1;
            if (fireGlobals) {
              globalEventContext.trigger('ajaxSend', [
                jqXHR,
                s
              ]);
            }
            if (s.async && s.timeout > 0) {
              timeoutTimer = setTimeout(function () {
                jqXHR.abort('timeout');
              }, s.timeout);
            }
            try {
              state = 1;
              transport.send(requestHeaders, done);
            } catch (e) {
              if (state < 2) {
                done(-1, e);
              } else {
                throw e;
              }
            }
          }
          function done(status, nativeStatusText, responses, headers) {
            var isSuccess, success, error, response, modified, statusText = nativeStatusText;
            if (state === 2) {
              return;
            }
            state = 2;
            if (timeoutTimer) {
              clearTimeout(timeoutTimer);
            }
            transport = undefined;
            responseHeadersString = headers || '';
            jqXHR.readyState = status > 0 ? 4 : 0;
            isSuccess = status >= 200 && status < 300 || status === 304;
            if (responses) {
              response = ajaxHandleResponses(s, jqXHR, responses);
            }
            response = ajaxConvert(s, response, jqXHR, isSuccess);
            if (isSuccess) {
              if (s.ifModified) {
                modified = jqXHR.getResponseHeader('Last-Modified');
                if (modified) {
                  jQuery.lastModified[cacheURL] = modified;
                }
                modified = jqXHR.getResponseHeader('etag');
                if (modified) {
                  jQuery.etag[cacheURL] = modified;
                }
              }
              if (status === 204 || s.type === 'HEAD') {
                statusText = 'nocontent';
              } else if (status === 304) {
                statusText = 'notmodified';
              } else {
                statusText = response.state;
                success = response.data;
                error = response.error;
                isSuccess = !error;
              }
            } else {
              error = statusText;
              if (status || !statusText) {
                statusText = 'error';
                if (status < 0) {
                  status = 0;
                }
              }
            }
            jqXHR.status = status;
            jqXHR.statusText = (nativeStatusText || statusText) + '';
            if (isSuccess) {
              deferred.resolveWith(callbackContext, [
                success,
                statusText,
                jqXHR
              ]);
            } else {
              deferred.rejectWith(callbackContext, [
                jqXHR,
                statusText,
                error
              ]);
            }
            jqXHR.statusCode(statusCode);
            statusCode = undefined;
            if (fireGlobals) {
              globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError', [
                jqXHR,
                s,
                isSuccess ? success : error
              ]);
            }
            completeDeferred.fireWith(callbackContext, [
              jqXHR,
              statusText
            ]);
            if (fireGlobals) {
              globalEventContext.trigger('ajaxComplete', [
                jqXHR,
                s
              ]);
              if (!--jQuery.active) {
                jQuery.event.trigger('ajaxStop');
              }
            }
          }
          return jqXHR;
        },
        getJSON: function (url, data, callback) {
          return jQuery.get(url, data, callback, 'json');
        },
        getScript: function (url, callback) {
          return jQuery.get(url, undefined, callback, 'script');
        }
      });
      jQuery.each([
        'get',
        'post'
      ], function (i, method) {
        jQuery[method] = function (url, data, callback, type) {
          if (jQuery.isFunction(data)) {
            type = type || callback;
            callback = data;
            data = undefined;
          }
          return jQuery.ajax({
            url: url,
            type: method,
            dataType: type,
            data: data,
            success: callback
          });
        };
      });
      jQuery._evalUrl = function (url) {
        return jQuery.ajax({
          url: url,
          type: 'GET',
          dataType: 'script',
          async: false,
          global: false,
          'throws': true
        });
      };
      jQuery.fn.extend({
        wrapAll: function (html) {
          var wrap;
          if (jQuery.isFunction(html)) {
            return this.each(function (i) {
              jQuery(this).wrapAll(html.call(this, i));
            });
          }
          if (this[0]) {
            wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
            if (this[0].parentNode) {
              wrap.insertBefore(this[0]);
            }
            wrap.map(function () {
              var elem = this;
              while (elem.firstElementChild) {
                elem = elem.firstElementChild;
              }
              return elem;
            }).append(this);
          }
          return this;
        },
        wrapInner: function (html) {
          if (jQuery.isFunction(html)) {
            return this.each(function (i) {
              jQuery(this).wrapInner(html.call(this, i));
            });
          }
          return this.each(function () {
            var self = jQuery(this), contents = self.contents();
            if (contents.length) {
              contents.wrapAll(html);
            } else {
              self.append(html);
            }
          });
        },
        wrap: function (html) {
          var isFunction = jQuery.isFunction(html);
          return this.each(function (i) {
            jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
          });
        },
        unwrap: function () {
          return this.parent().each(function () {
            if (!jQuery.nodeName(this, 'body')) {
              jQuery(this).replaceWith(this.childNodes);
            }
          }).end();
        }
      });
      jQuery.expr.filters.hidden = function (elem) {
        return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
      };
      jQuery.expr.filters.visible = function (elem) {
        return !jQuery.expr.filters.hidden(elem);
      };
      var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
      function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) {
          jQuery.each(obj, function (i, v) {
            if (traditional || rbracket.test(prefix)) {
              add(prefix, v);
            } else {
              buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add);
            }
          });
        } else if (!traditional && jQuery.type(obj) === 'object') {
          for (name in obj) {
            buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
          }
        } else {
          add(prefix, obj);
        }
      }
      jQuery.param = function (a, traditional) {
        var prefix, s = [], add = function (key, value) {
            value = jQuery.isFunction(value) ? value() : value == null ? '' : value;
            s[s.length] = encodeURIComponent(key) + '=' + encodeURIComponent(value);
          };
        if (traditional === undefined) {
          traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }
        if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
          jQuery.each(a, function () {
            add(this.name, this.value);
          });
        } else {
          for (prefix in a) {
            buildParams(prefix, a[prefix], traditional, add);
          }
        }
        return s.join('&').replace(r20, '+');
      };
      jQuery.fn.extend({
        serialize: function () {
          return jQuery.param(this.serializeArray());
        },
        serializeArray: function () {
          return this.map(function () {
            var elements = jQuery.prop(this, 'elements');
            return elements ? jQuery.makeArray(elements) : this;
          }).filter(function () {
            var type = this.type;
            return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
          }).map(function (i, elem) {
            var val = jQuery(this).val();
            return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
              return {
                name: elem.name,
                value: val.replace(rCRLF, '\r\n')
              };
            }) : {
              name: elem.name,
              value: val.replace(rCRLF, '\r\n')
            };
          }).get();
        }
      });
      jQuery.ajaxSettings.xhr = function () {
        try {
          return new XMLHttpRequest();
        } catch (e) {
        }
      };
      var xhrId = 0, xhrCallbacks = {}, xhrSuccessStatus = {
          0: 200,
          1223: 204
        }, xhrSupported = jQuery.ajaxSettings.xhr();
      if (window.attachEvent) {
        window.attachEvent('onunload', function () {
          for (var key in xhrCallbacks) {
            xhrCallbacks[key]();
          }
        });
      }
      support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
      support.ajax = xhrSupported = !!xhrSupported;
      jQuery.ajaxTransport(function (options) {
        var callback;
        if (support.cors || xhrSupported && !options.crossDomain) {
          return {
            send: function (headers, complete) {
              var i, xhr = options.xhr(), id = ++xhrId;
              xhr.open(options.type, options.url, options.async, options.username, options.password);
              if (options.xhrFields) {
                for (i in options.xhrFields) {
                  xhr[i] = options.xhrFields[i];
                }
              }
              if (options.mimeType && xhr.overrideMimeType) {
                xhr.overrideMimeType(options.mimeType);
              }
              if (!options.crossDomain && !headers['X-Requested-With']) {
                headers['X-Requested-With'] = 'XMLHttpRequest';
              }
              for (i in headers) {
                xhr.setRequestHeader(i, headers[i]);
              }
              callback = function (type) {
                return function () {
                  if (callback) {
                    delete xhrCallbacks[id];
                    callback = xhr.onload = xhr.onerror = null;
                    if (type === 'abort') {
                      xhr.abort();
                    } else if (type === 'error') {
                      complete(xhr.status, xhr.statusText);
                    } else {
                      complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, typeof xhr.responseText === 'string' ? { text: xhr.responseText } : undefined, xhr.getAllResponseHeaders());
                    }
                  }
                };
              };
              xhr.onload = callback();
              xhr.onerror = callback('error');
              callback = xhrCallbacks[id] = callback('abort');
              try {
                xhr.send(options.hasContent && options.data || null);
              } catch (e) {
                if (callback) {
                  throw e;
                }
              }
            },
            abort: function () {
              if (callback) {
                callback();
              }
            }
          };
        }
      });
      jQuery.ajaxSetup({
        accepts: { script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript' },
        contents: { script: /(?:java|ecma)script/ },
        converters: {
          'text script': function (text) {
            jQuery.globalEval(text);
            return text;
          }
        }
      });
      jQuery.ajaxPrefilter('script', function (s) {
        if (s.cache === undefined) {
          s.cache = false;
        }
        if (s.crossDomain) {
          s.type = 'GET';
        }
      });
      jQuery.ajaxTransport('script', function (s) {
        if (s.crossDomain) {
          var script, callback;
          return {
            send: function (_, complete) {
              script = jQuery('<script>').prop({
                async: true,
                charset: s.scriptCharset,
                src: s.url
              }).on('load error', callback = function (evt) {
                script.remove();
                callback = null;
                if (evt) {
                  complete(evt.type === 'error' ? 404 : 200, evt.type);
                }
              });
              document.head.appendChild(script[0]);
            },
            abort: function () {
              if (callback) {
                callback();
              }
            }
          };
        }
      });
      var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
      jQuery.ajaxSetup({
        jsonp: 'callback',
        jsonpCallback: function () {
          var callback = oldCallbacks.pop() || jQuery.expando + '_' + nonce++;
          this[callback] = true;
          return callback;
        }
      });
      jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? 'url' : typeof s.data === 'string' && !(s.contentType || '').indexOf('application/x-www-form-urlencoded') && rjsonp.test(s.data) && 'data');
        if (jsonProp || s.dataTypes[0] === 'jsonp') {
          callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
          if (jsonProp) {
            s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName);
          } else if (s.jsonp !== false) {
            s.url += (rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName;
          }
          s.converters['script json'] = function () {
            if (!responseContainer) {
              jQuery.error(callbackName + ' was not called');
            }
            return responseContainer[0];
          };
          s.dataTypes[0] = 'json';
          overwritten = window[callbackName];
          window[callbackName] = function () {
            responseContainer = arguments;
          };
          jqXHR.always(function () {
            window[callbackName] = overwritten;
            if (s[callbackName]) {
              s.jsonpCallback = originalSettings.jsonpCallback;
              oldCallbacks.push(callbackName);
            }
            if (responseContainer && jQuery.isFunction(overwritten)) {
              overwritten(responseContainer[0]);
            }
            responseContainer = overwritten = undefined;
          });
          return 'script';
        }
      });
      jQuery.parseHTML = function (data, context, keepScripts) {
        if (!data || typeof data !== 'string') {
          return null;
        }
        if (typeof context === 'boolean') {
          keepScripts = context;
          context = false;
        }
        context = context || document;
        var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
        if (parsed) {
          return [context.createElement(parsed[1])];
        }
        parsed = jQuery.buildFragment([data], context, scripts);
        if (scripts && scripts.length) {
          jQuery(scripts).remove();
        }
        return jQuery.merge([], parsed.childNodes);
      };
      var _load = jQuery.fn.load;
      jQuery.fn.load = function (url, params, callback) {
        if (typeof url !== 'string' && _load) {
          return _load.apply(this, arguments);
        }
        var selector, type, response, self = this, off = url.indexOf(' ');
        if (off >= 0) {
          selector = jQuery.trim(url.slice(off));
          url = url.slice(0, off);
        }
        if (jQuery.isFunction(params)) {
          callback = params;
          params = undefined;
        } else if (params && typeof params === 'object') {
          type = 'POST';
        }
        if (self.length > 0) {
          jQuery.ajax({
            url: url,
            type: type,
            dataType: 'html',
            data: params
          }).done(function (responseText) {
            response = arguments;
            self.html(selector ? jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : responseText);
          }).complete(callback && function (jqXHR, status) {
            self.each(callback, response || [
              jqXHR.responseText,
              status,
              jqXHR
            ]);
          });
        }
        return this;
      };
      jQuery.each([
        'ajaxStart',
        'ajaxStop',
        'ajaxComplete',
        'ajaxError',
        'ajaxSuccess',
        'ajaxSend'
      ], function (i, type) {
        jQuery.fn[type] = function (fn) {
          return this.on(type, fn);
        };
      });
      jQuery.expr.filters.animated = function (elem) {
        return jQuery.grep(jQuery.timers, function (fn) {
          return elem === fn.elem;
        }).length;
      };
      var docElem = window.document.documentElement;
      function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
      }
      jQuery.offset = {
        setOffset: function (elem, options, i) {
          var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, 'position'), curElem = jQuery(elem), props = {};
          if (position === 'static') {
            elem.style.position = 'relative';
          }
          curOffset = curElem.offset();
          curCSSTop = jQuery.css(elem, 'top');
          curCSSLeft = jQuery.css(elem, 'left');
          calculatePosition = (position === 'absolute' || position === 'fixed') && (curCSSTop + curCSSLeft).indexOf('auto') > -1;
          if (calculatePosition) {
            curPosition = curElem.position();
            curTop = curPosition.top;
            curLeft = curPosition.left;
          } else {
            curTop = parseFloat(curCSSTop) || 0;
            curLeft = parseFloat(curCSSLeft) || 0;
          }
          if (jQuery.isFunction(options)) {
            options = options.call(elem, i, curOffset);
          }
          if (options.top != null) {
            props.top = options.top - curOffset.top + curTop;
          }
          if (options.left != null) {
            props.left = options.left - curOffset.left + curLeft;
          }
          if ('using' in options) {
            options.using.call(elem, props);
          } else {
            curElem.css(props);
          }
        }
      };
      jQuery.fn.extend({
        offset: function (options) {
          if (arguments.length) {
            return options === undefined ? this : this.each(function (i) {
              jQuery.offset.setOffset(this, options, i);
            });
          }
          var docElem, win, elem = this[0], box = {
              top: 0,
              left: 0
            }, doc = elem && elem.ownerDocument;
          if (!doc) {
            return;
          }
          docElem = doc.documentElement;
          if (!jQuery.contains(docElem, elem)) {
            return box;
          }
          if (typeof elem.getBoundingClientRect !== strundefined) {
            box = elem.getBoundingClientRect();
          }
          win = getWindow(doc);
          return {
            top: box.top + win.pageYOffset - docElem.clientTop,
            left: box.left + win.pageXOffset - docElem.clientLeft
          };
        },
        position: function () {
          if (!this[0]) {
            return;
          }
          var offsetParent, offset, elem = this[0], parentOffset = {
              top: 0,
              left: 0
            };
          if (jQuery.css(elem, 'position') === 'fixed') {
            offset = elem.getBoundingClientRect();
          } else {
            offsetParent = this.offsetParent();
            offset = this.offset();
            if (!jQuery.nodeName(offsetParent[0], 'html')) {
              parentOffset = offsetParent.offset();
            }
            parentOffset.top += jQuery.css(offsetParent[0], 'borderTopWidth', true);
            parentOffset.left += jQuery.css(offsetParent[0], 'borderLeftWidth', true);
          }
          return {
            top: offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),
            left: offset.left - parentOffset.left - jQuery.css(elem, 'marginLeft', true)
          };
        },
        offsetParent: function () {
          return this.map(function () {
            var offsetParent = this.offsetParent || docElem;
            while (offsetParent && (!jQuery.nodeName(offsetParent, 'html') && jQuery.css(offsetParent, 'position') === 'static')) {
              offsetParent = offsetParent.offsetParent;
            }
            return offsetParent || docElem;
          });
        }
      });
      jQuery.each({
        scrollLeft: 'pageXOffset',
        scrollTop: 'pageYOffset'
      }, function (method, prop) {
        var top = 'pageYOffset' === prop;
        jQuery.fn[method] = function (val) {
          return access(this, function (elem, method, val) {
            var win = getWindow(elem);
            if (val === undefined) {
              return win ? win[prop] : elem[method];
            }
            if (win) {
              win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);
            } else {
              elem[method] = val;
            }
          }, method, val, arguments.length, null);
        };
      });
      jQuery.each([
        'top',
        'left'
      ], function (i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
          if (computed) {
            computed = curCSS(elem, prop);
            return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed;
          }
        });
      });
      jQuery.each({
        Height: 'height',
        Width: 'width'
      }, function (name, type) {
        jQuery.each({
          padding: 'inner' + name,
          content: type,
          '': 'outer' + name
        }, function (defaultExtra, funcName) {
          jQuery.fn[funcName] = function (margin, value) {
            var chainable = arguments.length && (defaultExtra || typeof margin !== 'boolean'), extra = defaultExtra || (margin === true || value === true ? 'margin' : 'border');
            return access(this, function (elem, type, value) {
              var doc;
              if (jQuery.isWindow(elem)) {
                return elem.document.documentElement['client' + name];
              }
              if (elem.nodeType === 9) {
                doc = elem.documentElement;
                return Math.max(elem.body['scroll' + name], doc['scroll' + name], elem.body['offset' + name], doc['offset' + name], doc['client' + name]);
              }
              return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
            }, type, chainable ? margin : undefined, chainable, null);
          };
        });
      });
      jQuery.fn.size = function () {
        return this.length;
      };
      jQuery.fn.andSelf = jQuery.fn.addBack;
      if (typeof define === 'function' && define.amd) {
        define('jquery', [], function () {
          return jQuery;
        });
      }
      var _jQuery = window.jQuery, _$ = window.$;
      jQuery.noConflict = function (deep) {
        if (window.$ === jQuery) {
          window.$ = _$;
        }
        if (deep && window.jQuery === jQuery) {
          window.jQuery = _jQuery;
        }
        return jQuery;
      };
      if (typeof noGlobal === strundefined) {
        window.jQuery = window.$ = jQuery;
      }
      return jQuery;
    }));
  },
  './node_modules/moment/min/locales.js': function (require, module, exports, global) {
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('af', {
        months: 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
        weekdaysShort: 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
        weekdaysMin: 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
        meridiem: function (hours, minutes, isLower) {
          if (hours < 12) {
            return isLower ? 'vm' : 'VM';
          } else {
            return isLower ? 'nm' : 'NM';
          }
        },
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[Vandag om] LT',
          nextDay: '[M\xF4re om] LT',
          nextWeek: 'dddd [om] LT',
          lastDay: '[Gister om] LT',
          lastWeek: '[Laas] dddd [om] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'oor %s',
          past: '%s gelede',
          s: '\'n paar sekondes',
          m: '\'n minuut',
          mm: '%d minute',
          h: '\'n uur',
          hh: '%d ure',
          d: '\'n dag',
          dd: '%d dae',
          M: '\'n maand',
          MM: '%d maande',
          y: '\'n jaar',
          yy: '%d jaar'
        },
        ordinal: function (number) {
          return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de');
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('ar-ma', {
        months: '\u064A\u0646\u0627\u064A\u0631_\u0641\u0628\u0631\u0627\u064A\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064A\u0644_\u0645\u0627\u064A_\u064A\u0648\u0646\u064A\u0648_\u064A\u0648\u0644\u064A\u0648\u0632_\u063A\u0634\u062A_\u0634\u062A\u0646\u0628\u0631_\u0623\u0643\u062A\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062F\u062C\u0646\u0628\u0631'.split('_'),
        monthsShort: '\u064A\u0646\u0627\u064A\u0631_\u0641\u0628\u0631\u0627\u064A\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064A\u0644_\u0645\u0627\u064A_\u064A\u0648\u0646\u064A\u0648_\u064A\u0648\u0644\u064A\u0648\u0632_\u063A\u0634\u062A_\u0634\u062A\u0646\u0628\u0631_\u0623\u0643\u062A\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062F\u062C\u0646\u0628\u0631'.split('_'),
        weekdays: '\u0627\u0644\u0623\u062D\u062F_\u0627\u0644\u0625\u062A\u0646\u064A\u0646_\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062E\u0645\u064A\u0633_\u0627\u0644\u062C\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062A'.split('_'),
        weekdaysShort: '\u0627\u062D\u062F_\u0627\u062A\u0646\u064A\u0646_\u062B\u0644\u0627\u062B\u0627\u0621_\u0627\u0631\u0628\u0639\u0627\u0621_\u062E\u0645\u064A\u0633_\u062C\u0645\u0639\u0629_\u0633\u0628\u062A'.split('_'),
        weekdaysMin: '\u062D_\u0646_\u062B_\u0631_\u062E_\u062C_\u0633'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[\u0627\u0644\u064A\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
          nextDay: '[\u063A\u062F\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
          nextWeek: 'dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
          lastDay: '[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
          lastWeek: 'dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '\u0641\u064A %s',
          past: '\u0645\u0646\u0630 %s',
          s: '\u062B\u0648\u0627\u0646',
          m: '\u062F\u0642\u064A\u0642\u0629',
          mm: '%d \u062F\u0642\u0627\u0626\u0642',
          h: '\u0633\u0627\u0639\u0629',
          hh: '%d \u0633\u0627\u0639\u0627\u062A',
          d: '\u064A\u0648\u0645',
          dd: '%d \u0623\u064A\u0627\u0645',
          M: '\u0634\u0647\u0631',
          MM: '%d \u0623\u0634\u0647\u0631',
          y: '\u0633\u0646\u0629',
          yy: '%d \u0633\u0646\u0648\u0627\u062A'
        },
        week: {
          dow: 6,
          doy: 12
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var symbolMap = {
          '1': '\u0661',
          '2': '\u0662',
          '3': '\u0663',
          '4': '\u0664',
          '5': '\u0665',
          '6': '\u0666',
          '7': '\u0667',
          '8': '\u0668',
          '9': '\u0669',
          '0': '\u0660'
        }, numberMap = {
          '\u0661': '1',
          '\u0662': '2',
          '\u0663': '3',
          '\u0664': '4',
          '\u0665': '5',
          '\u0666': '6',
          '\u0667': '7',
          '\u0668': '8',
          '\u0669': '9',
          '\u0660': '0'
        };
      return moment.defineLocale('ar-sa', {
        months: '\u064A\u0646\u0627\u064A\u0631_\u0641\u0628\u0631\u0627\u064A\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064A\u0644_\u0645\u0627\u064A\u0648_\u064A\u0648\u0646\u064A\u0648_\u064A\u0648\u0644\u064A\u0648_\u0623\u063A\u0633\u0637\u0633_\u0633\u0628\u062A\u0645\u0628\u0631_\u0623\u0643\u062A\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062F\u064A\u0633\u0645\u0628\u0631'.split('_'),
        monthsShort: '\u064A\u0646\u0627\u064A\u0631_\u0641\u0628\u0631\u0627\u064A\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064A\u0644_\u0645\u0627\u064A\u0648_\u064A\u0648\u0646\u064A\u0648_\u064A\u0648\u0644\u064A\u0648_\u0623\u063A\u0633\u0637\u0633_\u0633\u0628\u062A\u0645\u0628\u0631_\u0623\u0643\u062A\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062F\u064A\u0633\u0645\u0628\u0631'.split('_'),
        weekdays: '\u0627\u0644\u0623\u062D\u062F_\u0627\u0644\u0625\u062B\u0646\u064A\u0646_\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062E\u0645\u064A\u0633_\u0627\u0644\u062C\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062A'.split('_'),
        weekdaysShort: '\u0623\u062D\u062F_\u0625\u062B\u0646\u064A\u0646_\u062B\u0644\u0627\u062B\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062E\u0645\u064A\u0633_\u062C\u0645\u0639\u0629_\u0633\u0628\u062A'.split('_'),
        weekdaysMin: '\u062D_\u0646_\u062B_\u0631_\u062E_\u062C_\u0633'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT'
        },
        meridiem: function (hour, minute, isLower) {
          if (hour < 12) {
            return '\u0635';
          } else {
            return '\u0645';
          }
        },
        calendar: {
          sameDay: '[\u0627\u0644\u064A\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
          nextDay: '[\u063A\u062F\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
          nextWeek: 'dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
          lastDay: '[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
          lastWeek: 'dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '\u0641\u064A %s',
          past: '\u0645\u0646\u0630 %s',
          s: '\u062B\u0648\u0627\u0646',
          m: '\u062F\u0642\u064A\u0642\u0629',
          mm: '%d \u062F\u0642\u0627\u0626\u0642',
          h: '\u0633\u0627\u0639\u0629',
          hh: '%d \u0633\u0627\u0639\u0627\u062A',
          d: '\u064A\u0648\u0645',
          dd: '%d \u0623\u064A\u0627\u0645',
          M: '\u0634\u0647\u0631',
          MM: '%d \u0623\u0634\u0647\u0631',
          y: '\u0633\u0646\u0629',
          yy: '%d \u0633\u0646\u0648\u0627\u062A'
        },
        preparse: function (string) {
          return string.replace(/[۰-۹]/g, function (match) {
            return numberMap[match];
          }).replace(/،/g, ',');
        },
        postformat: function (string) {
          return string.replace(/\d/g, function (match) {
            return symbolMap[match];
          }).replace(/,/g, '\u060C');
        },
        week: {
          dow: 6,
          doy: 12
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var symbolMap = {
          '1': '\u0661',
          '2': '\u0662',
          '3': '\u0663',
          '4': '\u0664',
          '5': '\u0665',
          '6': '\u0666',
          '7': '\u0667',
          '8': '\u0668',
          '9': '\u0669',
          '0': '\u0660'
        }, numberMap = {
          '\u0661': '1',
          '\u0662': '2',
          '\u0663': '3',
          '\u0664': '4',
          '\u0665': '5',
          '\u0666': '6',
          '\u0667': '7',
          '\u0668': '8',
          '\u0669': '9',
          '\u0660': '0'
        }, pluralForm = function (n) {
          return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
        }, plurals = {
          s: [
            '\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u064A\u0629',
            '\u062B\u0627\u0646\u064A\u0629 \u0648\u0627\u062D\u062F\u0629',
            [
              '\u062B\u0627\u0646\u064A\u062A\u0627\u0646',
              '\u062B\u0627\u0646\u064A\u062A\u064A\u0646'
            ],
            '%d \u062B\u0648\u0627\u0646',
            '%d \u062B\u0627\u0646\u064A\u0629',
            '%d \u062B\u0627\u0646\u064A\u0629'
          ],
          m: [
            '\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u0629',
            '\u062F\u0642\u064A\u0642\u0629 \u0648\u0627\u062D\u062F\u0629',
            [
              '\u062F\u0642\u064A\u0642\u062A\u0627\u0646',
              '\u062F\u0642\u064A\u0642\u062A\u064A\u0646'
            ],
            '%d \u062F\u0642\u0627\u0626\u0642',
            '%d \u062F\u0642\u064A\u0642\u0629',
            '%d \u062F\u0642\u064A\u0642\u0629'
          ],
          h: [
            '\u0623\u0642\u0644 \u0645\u0646 \u0633\u0627\u0639\u0629',
            '\u0633\u0627\u0639\u0629 \u0648\u0627\u062D\u062F\u0629',
            [
              '\u0633\u0627\u0639\u062A\u0627\u0646',
              '\u0633\u0627\u0639\u062A\u064A\u0646'
            ],
            '%d \u0633\u0627\u0639\u0627\u062A',
            '%d \u0633\u0627\u0639\u0629',
            '%d \u0633\u0627\u0639\u0629'
          ],
          d: [
            '\u0623\u0642\u0644 \u0645\u0646 \u064A\u0648\u0645',
            '\u064A\u0648\u0645 \u0648\u0627\u062D\u062F',
            [
              '\u064A\u0648\u0645\u0627\u0646',
              '\u064A\u0648\u0645\u064A\u0646'
            ],
            '%d \u0623\u064A\u0627\u0645',
            '%d \u064A\u0648\u0645\u064B\u0627',
            '%d \u064A\u0648\u0645'
          ],
          M: [
            '\u0623\u0642\u0644 \u0645\u0646 \u0634\u0647\u0631',
            '\u0634\u0647\u0631 \u0648\u0627\u062D\u062F',
            [
              '\u0634\u0647\u0631\u0627\u0646',
              '\u0634\u0647\u0631\u064A\u0646'
            ],
            '%d \u0623\u0634\u0647\u0631',
            '%d \u0634\u0647\u0631\u0627',
            '%d \u0634\u0647\u0631'
          ],
          y: [
            '\u0623\u0642\u0644 \u0645\u0646 \u0639\u0627\u0645',
            '\u0639\u0627\u0645 \u0648\u0627\u062D\u062F',
            [
              '\u0639\u0627\u0645\u0627\u0646',
              '\u0639\u0627\u0645\u064A\u0646'
            ],
            '%d \u0623\u0639\u0648\u0627\u0645',
            '%d \u0639\u0627\u0645\u064B\u0627',
            '%d \u0639\u0627\u0645'
          ]
        }, pluralize = function (u) {
          return function (number, withoutSuffix, string, isFuture) {
            var f = pluralForm(number), str = plurals[u][pluralForm(number)];
            if (f === 2) {
              str = str[withoutSuffix ? 0 : 1];
            }
            return str.replace(/%d/i, number);
          };
        }, months = [
          '\u0643\u0627\u0646\u0648\u0646 \u0627\u0644\u062B\u0627\u0646\u064A \u064A\u0646\u0627\u064A\u0631',
          '\u0634\u0628\u0627\u0637 \u0641\u0628\u0631\u0627\u064A\u0631',
          '\u0622\u0630\u0627\u0631 \u0645\u0627\u0631\u0633',
          '\u0646\u064A\u0633\u0627\u0646 \u0623\u0628\u0631\u064A\u0644',
          '\u0623\u064A\u0627\u0631 \u0645\u0627\u064A\u0648',
          '\u062D\u0632\u064A\u0631\u0627\u0646 \u064A\u0648\u0646\u064A\u0648',
          '\u062A\u0645\u0648\u0632 \u064A\u0648\u0644\u064A\u0648',
          '\u0622\u0628 \u0623\u063A\u0633\u0637\u0633',
          '\u0623\u064A\u0644\u0648\u0644 \u0633\u0628\u062A\u0645\u0628\u0631',
          '\u062A\u0634\u0631\u064A\u0646 \u0627\u0644\u0623\u0648\u0644 \u0623\u0643\u062A\u0648\u0628\u0631',
          '\u062A\u0634\u0631\u064A\u0646 \u0627\u0644\u062B\u0627\u0646\u064A \u0646\u0648\u0641\u0645\u0628\u0631',
          '\u0643\u0627\u0646\u0648\u0646 \u0627\u0644\u0623\u0648\u0644 \u062F\u064A\u0633\u0645\u0628\u0631'
        ];
      return moment.defineLocale('ar', {
        months: months,
        monthsShort: months,
        weekdays: '\u0627\u0644\u0623\u062D\u062F_\u0627\u0644\u0625\u062B\u0646\u064A\u0646_\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062E\u0645\u064A\u0633_\u0627\u0644\u062C\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062A'.split('_'),
        weekdaysShort: '\u0623\u062D\u062F_\u0625\u062B\u0646\u064A\u0646_\u062B\u0644\u0627\u062B\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062E\u0645\u064A\u0633_\u062C\u0645\u0639\u0629_\u0633\u0628\u062A'.split('_'),
        weekdaysMin: '\u062D_\u0646_\u062B_\u0631_\u062E_\u062C_\u0633'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT'
        },
        meridiem: function (hour, minute, isLower) {
          if (hour < 12) {
            return '\u0635';
          } else {
            return '\u0645';
          }
        },
        calendar: {
          sameDay: '[\u0627\u0644\u064A\u0648\u0645 \u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629] LT',
          nextDay: '[\u063A\u062F\u064B\u0627 \u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629] LT',
          nextWeek: 'dddd [\u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629] LT',
          lastDay: '[\u0623\u0645\u0633 \u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629] LT',
          lastWeek: 'dddd [\u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '\u0628\u0639\u062F %s',
          past: '\u0645\u0646\u0630 %s',
          s: pluralize('s'),
          m: pluralize('m'),
          mm: pluralize('m'),
          h: pluralize('h'),
          hh: pluralize('h'),
          d: pluralize('d'),
          dd: pluralize('d'),
          M: pluralize('M'),
          MM: pluralize('M'),
          y: pluralize('y'),
          yy: pluralize('y')
        },
        preparse: function (string) {
          return string.replace(/[۰-۹]/g, function (match) {
            return numberMap[match];
          }).replace(/،/g, ',');
        },
        postformat: function (string) {
          return string.replace(/\d/g, function (match) {
            return symbolMap[match];
          }).replace(/,/g, '\u060C');
        },
        week: {
          dow: 6,
          doy: 12
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var suffixes = {
          1: '-inci',
          5: '-inci',
          8: '-inci',
          70: '-inci',
          80: '-inci',
          2: '-nci',
          7: '-nci',
          20: '-nci',
          50: '-nci',
          3: '-\xFCnc\xFC',
          4: '-\xFCnc\xFC',
          100: '-\xFCnc\xFC',
          6: '-nc\u0131',
          9: '-uncu',
          10: '-uncu',
          30: '-uncu',
          60: '-\u0131nc\u0131',
          90: '-\u0131nc\u0131'
        };
      return moment.defineLocale('az', {
        months: 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
        monthsShort: 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
        weekdays: 'Bazar_Bazar ert\u0259si_\xC7\u0259r\u015F\u0259nb\u0259 ax\u015Fam\u0131_\xC7\u0259r\u015F\u0259nb\u0259_C\xFCm\u0259 ax\u015Fam\u0131_C\xFCm\u0259_\u015E\u0259nb\u0259'.split('_'),
        weekdaysShort: 'Baz_BzE_\xC7Ax_\xC7\u0259r_CAx_C\xFCm_\u015E\u0259n'.split('_'),
        weekdaysMin: 'Bz_BE_\xC7A_\xC7\u0259_CA_C\xFC_\u015E\u0259'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD.MM.YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[bug\xFCn saat] LT',
          nextDay: '[sabah saat] LT',
          nextWeek: '[g\u0259l\u0259n h\u0259ft\u0259] dddd [saat] LT',
          lastDay: '[d\xFCn\u0259n] LT',
          lastWeek: '[ke\xE7\u0259n h\u0259ft\u0259] dddd [saat] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '%s sonra',
          past: '%s \u0259vv\u0259l',
          s: 'birne\xE7\u0259 saniyy\u0259',
          m: 'bir d\u0259qiq\u0259',
          mm: '%d d\u0259qiq\u0259',
          h: 'bir saat',
          hh: '%d saat',
          d: 'bir g\xFCn',
          dd: '%d g\xFCn',
          M: 'bir ay',
          MM: '%d ay',
          y: 'bir il',
          yy: '%d il'
        },
        meridiem: function (hour, minute, isLower) {
          if (hour < 4) {
            return 'gec\u0259';
          } else if (hour < 12) {
            return 's\u0259h\u0259r';
          } else if (hour < 17) {
            return 'g\xFCnd\xFCz';
          } else {
            return 'ax\u015Fam';
          }
        },
        ordinal: function (number) {
          if (number === 0) {
            return number + '-\u0131nc\u0131';
          }
          var a = number % 10, b = number % 100 - a, c = number >= 100 ? 100 : null;
          return number + (suffixes[a] || suffixes[b] || suffixes[c]);
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
      }
      function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': withoutSuffix ? '\u0445\u0432\u0456\u043B\u0456\u043D\u0430_\u0445\u0432\u0456\u043B\u0456\u043D\u044B_\u0445\u0432\u0456\u043B\u0456\u043D' : '\u0445\u0432\u0456\u043B\u0456\u043D\u0443_\u0445\u0432\u0456\u043B\u0456\u043D\u044B_\u0445\u0432\u0456\u043B\u0456\u043D',
            'hh': withoutSuffix ? '\u0433\u0430\u0434\u0437\u0456\u043D\u0430_\u0433\u0430\u0434\u0437\u0456\u043D\u044B_\u0433\u0430\u0434\u0437\u0456\u043D' : '\u0433\u0430\u0434\u0437\u0456\u043D\u0443_\u0433\u0430\u0434\u0437\u0456\u043D\u044B_\u0433\u0430\u0434\u0437\u0456\u043D',
            'dd': '\u0434\u0437\u0435\u043D\u044C_\u0434\u043D\u0456_\u0434\u0437\u0451\u043D',
            'MM': '\u043C\u0435\u0441\u044F\u0446_\u043C\u0435\u0441\u044F\u0446\u044B_\u043C\u0435\u0441\u044F\u0446\u0430\u045E',
            'yy': '\u0433\u043E\u0434_\u0433\u0430\u0434\u044B_\u0433\u0430\u0434\u043E\u045E'
          };
        if (key === 'm') {
          return withoutSuffix ? '\u0445\u0432\u0456\u043B\u0456\u043D\u0430' : '\u0445\u0432\u0456\u043B\u0456\u043D\u0443';
        } else if (key === 'h') {
          return withoutSuffix ? '\u0433\u0430\u0434\u0437\u0456\u043D\u0430' : '\u0433\u0430\u0434\u0437\u0456\u043D\u0443';
        } else {
          return number + ' ' + plural(format[key], +number);
        }
      }
      function monthsCaseReplace(m, format) {
        var months = {
            'nominative': '\u0441\u0442\u0443\u0434\u0437\u0435\u043D\u044C_\u043B\u044E\u0442\u044B_\u0441\u0430\u043A\u0430\u0432\u0456\u043A_\u043A\u0440\u0430\u0441\u0430\u0432\u0456\u043A_\u0442\u0440\u0430\u0432\u0435\u043D\u044C_\u0447\u044D\u0440\u0432\u0435\u043D\u044C_\u043B\u0456\u043F\u0435\u043D\u044C_\u0436\u043D\u0456\u0432\u0435\u043D\u044C_\u0432\u0435\u0440\u0430\u0441\u0435\u043D\u044C_\u043A\u0430\u0441\u0442\u0440\u044B\u0447\u043D\u0456\u043A_\u043B\u0456\u0441\u0442\u0430\u043F\u0430\u0434_\u0441\u043D\u0435\u0436\u0430\u043D\u044C'.split('_'),
            'accusative': '\u0441\u0442\u0443\u0434\u0437\u0435\u043D\u044F_\u043B\u044E\u0442\u0430\u0433\u0430_\u0441\u0430\u043A\u0430\u0432\u0456\u043A\u0430_\u043A\u0440\u0430\u0441\u0430\u0432\u0456\u043A\u0430_\u0442\u0440\u0430\u045E\u043D\u044F_\u0447\u044D\u0440\u0432\u0435\u043D\u044F_\u043B\u0456\u043F\u0435\u043D\u044F_\u0436\u043D\u0456\u045E\u043D\u044F_\u0432\u0435\u0440\u0430\u0441\u043D\u044F_\u043A\u0430\u0441\u0442\u0440\u044B\u0447\u043D\u0456\u043A\u0430_\u043B\u0456\u0441\u0442\u0430\u043F\u0430\u0434\u0430_\u0441\u043D\u0435\u0436\u043D\u044F'.split('_')
          }, nounCase = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(format) ? 'accusative' : 'nominative';
        return months[nounCase][m.month()];
      }
      function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': '\u043D\u044F\u0434\u0437\u0435\u043B\u044F_\u043F\u0430\u043D\u044F\u0434\u0437\u0435\u043B\u0430\u043A_\u0430\u045E\u0442\u043E\u0440\u0430\u043A_\u0441\u0435\u0440\u0430\u0434\u0430_\u0447\u0430\u0446\u0432\u0435\u0440_\u043F\u044F\u0442\u043D\u0456\u0446\u0430_\u0441\u0443\u0431\u043E\u0442\u0430'.split('_'),
            'accusative': '\u043D\u044F\u0434\u0437\u0435\u043B\u044E_\u043F\u0430\u043D\u044F\u0434\u0437\u0435\u043B\u0430\u043A_\u0430\u045E\u0442\u043E\u0440\u0430\u043A_\u0441\u0435\u0440\u0430\u0434\u0443_\u0447\u0430\u0446\u0432\u0435\u0440_\u043F\u044F\u0442\u043D\u0456\u0446\u0443_\u0441\u0443\u0431\u043E\u0442\u0443'.split('_')
          }, nounCase = /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/.test(format) ? 'accusative' : 'nominative';
        return weekdays[nounCase][m.day()];
      }
      return moment.defineLocale('be', {
        months: monthsCaseReplace,
        monthsShort: '\u0441\u0442\u0443\u0434_\u043B\u044E\u0442_\u0441\u0430\u043A_\u043A\u0440\u0430\u0441_\u0442\u0440\u0430\u0432_\u0447\u044D\u0440\u0432_\u043B\u0456\u043F_\u0436\u043D\u0456\u0432_\u0432\u0435\u0440_\u043A\u0430\u0441\u0442_\u043B\u0456\u0441\u0442_\u0441\u043D\u0435\u0436'.split('_'),
        weekdays: weekdaysCaseReplace,
        weekdaysShort: '\u043D\u0434_\u043F\u043D_\u0430\u0442_\u0441\u0440_\u0447\u0446_\u043F\u0442_\u0441\u0431'.split('_'),
        weekdaysMin: '\u043D\u0434_\u043F\u043D_\u0430\u0442_\u0441\u0440_\u0447\u0446_\u043F\u0442_\u0441\u0431'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD.MM.YYYY',
          LL: 'D MMMM YYYY \u0433.',
          LLL: 'D MMMM YYYY \u0433., LT',
          LLLL: 'dddd, D MMMM YYYY \u0433., LT'
        },
        calendar: {
          sameDay: '[\u0421\u0451\u043D\u043D\u044F \u045E] LT',
          nextDay: '[\u0417\u0430\u045E\u0442\u0440\u0430 \u045E] LT',
          lastDay: '[\u0423\u0447\u043E\u0440\u0430 \u045E] LT',
          nextWeek: function () {
            return '[\u0423] dddd [\u045E] LT';
          },
          lastWeek: function () {
            switch (this.day()) {
            case 0:
            case 3:
            case 5:
            case 6:
              return '[\u0423 \u043C\u0456\u043D\u0443\u043B\u0443\u044E] dddd [\u045E] LT';
            case 1:
            case 2:
            case 4:
              return '[\u0423 \u043C\u0456\u043D\u0443\u043B\u044B] dddd [\u045E] LT';
            }
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: '\u043F\u0440\u0430\u0437 %s',
          past: '%s \u0442\u0430\u043C\u0443',
          s: '\u043D\u0435\u043A\u0430\u043B\u044C\u043A\u0456 \u0441\u0435\u043A\u0443\u043D\u0434',
          m: relativeTimeWithPlural,
          mm: relativeTimeWithPlural,
          h: relativeTimeWithPlural,
          hh: relativeTimeWithPlural,
          d: '\u0434\u0437\u0435\u043D\u044C',
          dd: relativeTimeWithPlural,
          M: '\u043C\u0435\u0441\u044F\u0446',
          MM: relativeTimeWithPlural,
          y: '\u0433\u043E\u0434',
          yy: relativeTimeWithPlural
        },
        meridiem: function (hour, minute, isLower) {
          if (hour < 4) {
            return '\u043D\u043E\u0447\u044B';
          } else if (hour < 12) {
            return '\u0440\u0430\u043D\u0456\u0446\u044B';
          } else if (hour < 17) {
            return '\u0434\u043D\u044F';
          } else {
            return '\u0432\u0435\u0447\u0430\u0440\u0430';
          }
        },
        ordinal: function (number, period) {
          switch (period) {
          case 'M':
          case 'd':
          case 'DDD':
          case 'w':
          case 'W':
            return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-\u0456' : number + '-\u044B';
          case 'D':
            return number + '-\u0433\u0430';
          default:
            return number;
          }
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('bg', {
        months: '\u044F\u043D\u0443\u0430\u0440\u0438_\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438_\u043C\u0430\u0440\u0442_\u0430\u043F\u0440\u0438\u043B_\u043C\u0430\u0439_\u044E\u043D\u0438_\u044E\u043B\u0438_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043F\u0442\u0435\u043C\u0432\u0440\u0438_\u043E\u043A\u0442\u043E\u043C\u0432\u0440\u0438_\u043D\u043E\u0435\u043C\u0432\u0440\u0438_\u0434\u0435\u043A\u0435\u043C\u0432\u0440\u0438'.split('_'),
        monthsShort: '\u044F\u043D\u0440_\u0444\u0435\u0432_\u043C\u0430\u0440_\u0430\u043F\u0440_\u043C\u0430\u0439_\u044E\u043D\u0438_\u044E\u043B\u0438_\u0430\u0432\u0433_\u0441\u0435\u043F_\u043E\u043A\u0442_\u043D\u043E\u0435_\u0434\u0435\u043A'.split('_'),
        weekdays: '\u043D\u0435\u0434\u0435\u043B\u044F_\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u043D\u0438\u043A_\u0432\u0442\u043E\u0440\u043D\u0438\u043A_\u0441\u0440\u044F\u0434\u0430_\u0447\u0435\u0442\u0432\u044A\u0440\u0442\u044A\u043A_\u043F\u0435\u0442\u044A\u043A_\u0441\u044A\u0431\u043E\u0442\u0430'.split('_'),
        weekdaysShort: '\u043D\u0435\u0434_\u043F\u043E\u043D_\u0432\u0442\u043E_\u0441\u0440\u044F_\u0447\u0435\u0442_\u043F\u0435\u0442_\u0441\u044A\u0431'.split('_'),
        weekdaysMin: '\u043D\u0434_\u043F\u043D_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043F\u0442_\u0441\u0431'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          L: 'D.MM.YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[\u0414\u043D\u0435\u0441 \u0432] LT',
          nextDay: '[\u0423\u0442\u0440\u0435 \u0432] LT',
          nextWeek: 'dddd [\u0432] LT',
          lastDay: '[\u0412\u0447\u0435\u0440\u0430 \u0432] LT',
          lastWeek: function () {
            switch (this.day()) {
            case 0:
            case 3:
            case 6:
              return '[\u0412 \u0438\u0437\u043C\u0438\u043D\u0430\u043B\u0430\u0442\u0430] dddd [\u0432] LT';
            case 1:
            case 2:
            case 4:
            case 5:
              return '[\u0412 \u0438\u0437\u043C\u0438\u043D\u0430\u043B\u0438\u044F] dddd [\u0432] LT';
            }
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: '\u0441\u043B\u0435\u0434 %s',
          past: '\u043F\u0440\u0435\u0434\u0438 %s',
          s: '\u043D\u044F\u043A\u043E\u043B\u043A\u043E \u0441\u0435\u043A\u0443\u043D\u0434\u0438',
          m: '\u043C\u0438\u043D\u0443\u0442\u0430',
          mm: '%d \u043C\u0438\u043D\u0443\u0442\u0438',
          h: '\u0447\u0430\u0441',
          hh: '%d \u0447\u0430\u0441\u0430',
          d: '\u0434\u0435\u043D',
          dd: '%d \u0434\u043D\u0438',
          M: '\u043C\u0435\u0441\u0435\u0446',
          MM: '%d \u043C\u0435\u0441\u0435\u0446\u0430',
          y: '\u0433\u043E\u0434\u0438\u043D\u0430',
          yy: '%d \u0433\u043E\u0434\u0438\u043D\u0438'
        },
        ordinal: function (number) {
          var lastDigit = number % 10, last2Digits = number % 100;
          if (number === 0) {
            return number + '-\u0435\u0432';
          } else if (last2Digits === 0) {
            return number + '-\u0435\u043D';
          } else if (last2Digits > 10 && last2Digits < 20) {
            return number + '-\u0442\u0438';
          } else if (lastDigit === 1) {
            return number + '-\u0432\u0438';
          } else if (lastDigit === 2) {
            return number + '-\u0440\u0438';
          } else if (lastDigit === 7 || lastDigit === 8) {
            return number + '-\u043C\u0438';
          } else {
            return number + '-\u0442\u0438';
          }
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var symbolMap = {
          '1': '\u09E7',
          '2': '\u09E8',
          '3': '\u09E9',
          '4': '\u09EA',
          '5': '\u09EB',
          '6': '\u09EC',
          '7': '\u09ED',
          '8': '\u09EE',
          '9': '\u09EF',
          '0': '\u09E6'
        }, numberMap = {
          '\u09E7': '1',
          '\u09E8': '2',
          '\u09E9': '3',
          '\u09EA': '4',
          '\u09EB': '5',
          '\u09EC': '6',
          '\u09ED': '7',
          '\u09EE': '8',
          '\u09EF': '9',
          '\u09E6': '0'
        };
      return moment.defineLocale('bn', {
        months: '\u099C\u09BE\u09A8\u09C1\u09DF\u09BE\u09B0\u09C0_\u09AB\u09C7\u09AC\u09C1\u09DF\u09BE\u09B0\u09C0_\u09AE\u09BE\u09B0\u09CD\u099A_\u098F\u09AA\u09CD\u09B0\u09BF\u09B2_\u09AE\u09C7_\u099C\u09C1\u09A8_\u099C\u09C1\u09B2\u09BE\u0987_\u0985\u0997\u09BE\u09B8\u09CD\u099F_\u09B8\u09C7\u09AA\u09CD\u099F\u09C7\u09AE\u09CD\u09AC\u09B0_\u0985\u0995\u09CD\u099F\u09CB\u09AC\u09B0_\u09A8\u09AD\u09C7\u09AE\u09CD\u09AC\u09B0_\u09A1\u09BF\u09B8\u09C7\u09AE\u09CD\u09AC\u09B0'.split('_'),
        monthsShort: '\u099C\u09BE\u09A8\u09C1_\u09AB\u09C7\u09AC_\u09AE\u09BE\u09B0\u09CD\u099A_\u098F\u09AA\u09B0_\u09AE\u09C7_\u099C\u09C1\u09A8_\u099C\u09C1\u09B2_\u0985\u0997_\u09B8\u09C7\u09AA\u09CD\u099F_\u0985\u0995\u09CD\u099F\u09CB_\u09A8\u09AD_\u09A1\u09BF\u09B8\u09C7\u09AE\u09CD'.split('_'),
        weekdays: '\u09B0\u09AC\u09BF\u09AC\u09BE\u09B0_\u09B8\u09CB\u09AE\u09AC\u09BE\u09B0_\u09AE\u0999\u09CD\u0997\u09B2\u09AC\u09BE\u09B0_\u09AC\u09C1\u09A7\u09AC\u09BE\u09B0_\u09AC\u09C3\u09B9\u09B8\u09CD\u09AA\u09A4\u09CD\u09A4\u09BF\u09AC\u09BE\u09B0_\u09B6\u09C1\u0995\u09CD\u09B0\u09C1\u09AC\u09BE\u09B0_\u09B6\u09A8\u09BF\u09AC\u09BE\u09B0'.split('_'),
        weekdaysShort: '\u09B0\u09AC\u09BF_\u09B8\u09CB\u09AE_\u09AE\u0999\u09CD\u0997\u09B2_\u09AC\u09C1\u09A7_\u09AC\u09C3\u09B9\u09B8\u09CD\u09AA\u09A4\u09CD\u09A4\u09BF_\u09B6\u09C1\u0995\u09CD\u09B0\u09C1_\u09B6\u09A8\u09BF'.split('_'),
        weekdaysMin: '\u09B0\u09AC_\u09B8\u09AE_\u09AE\u0999\u09CD\u0997_\u09AC\u09C1_\u09AC\u09CD\u09B0\u09BF\u09B9_\u09B6\u09C1_\u09B6\u09A8\u09BF'.split('_'),
        longDateFormat: {
          LT: 'A h:mm \u09B8\u09AE\u09DF',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY, LT',
          LLLL: 'dddd, D MMMM YYYY, LT'
        },
        calendar: {
          sameDay: '[\u0986\u099C] LT',
          nextDay: '[\u0986\u0997\u09BE\u09AE\u09C0\u0995\u09BE\u09B2] LT',
          nextWeek: 'dddd, LT',
          lastDay: '[\u0997\u09A4\u0995\u09BE\u09B2] LT',
          lastWeek: '[\u0997\u09A4] dddd, LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '%s \u09AA\u09B0\u09C7',
          past: '%s \u0986\u0997\u09C7',
          s: '\u0995\u098F\u0995 \u09B8\u09C7\u0995\u09C7\u09A8\u09CD\u09A1',
          m: '\u098F\u0995 \u09AE\u09BF\u09A8\u09BF\u099F',
          mm: '%d \u09AE\u09BF\u09A8\u09BF\u099F',
          h: '\u098F\u0995 \u0998\u09A8\u09CD\u099F\u09BE',
          hh: '%d \u0998\u09A8\u09CD\u099F\u09BE',
          d: '\u098F\u0995 \u09A6\u09BF\u09A8',
          dd: '%d \u09A6\u09BF\u09A8',
          M: '\u098F\u0995 \u09AE\u09BE\u09B8',
          MM: '%d \u09AE\u09BE\u09B8',
          y: '\u098F\u0995 \u09AC\u099B\u09B0',
          yy: '%d \u09AC\u099B\u09B0'
        },
        preparse: function (string) {
          return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
            return numberMap[match];
          });
        },
        postformat: function (string) {
          return string.replace(/\d/g, function (match) {
            return symbolMap[match];
          });
        },
        meridiem: function (hour, minute, isLower) {
          if (hour < 4) {
            return '\u09B0\u09BE\u09A4';
          } else if (hour < 10) {
            return '\u09B6\u0995\u09BE\u09B2';
          } else if (hour < 17) {
            return '\u09A6\u09C1\u09AA\u09C1\u09B0';
          } else if (hour < 20) {
            return '\u09AC\u09BF\u0995\u09C7\u09B2';
          } else {
            return '\u09B0\u09BE\u09A4';
          }
        },
        week: {
          dow: 0,
          doy: 6
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var symbolMap = {
          '1': '\u0F21',
          '2': '\u0F22',
          '3': '\u0F23',
          '4': '\u0F24',
          '5': '\u0F25',
          '6': '\u0F26',
          '7': '\u0F27',
          '8': '\u0F28',
          '9': '\u0F29',
          '0': '\u0F20'
        }, numberMap = {
          '\u0F21': '1',
          '\u0F22': '2',
          '\u0F23': '3',
          '\u0F24': '4',
          '\u0F25': '5',
          '\u0F26': '6',
          '\u0F27': '7',
          '\u0F28': '8',
          '\u0F29': '9',
          '\u0F20': '0'
        };
      return moment.defineLocale('bo', {
        months: '\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F51\u0F44\u0F0B\u0F54\u0F7C_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F42\u0F49\u0F72\u0F66\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F42\u0F66\u0F74\u0F58\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F5E\u0F72\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F63\u0F94\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F51\u0FB2\u0F74\u0F42\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F51\u0F74\u0F53\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F62\u0F92\u0FB1\u0F51\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F51\u0F42\u0F74\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F45\u0F74\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F45\u0F74\u0F0B\u0F42\u0F45\u0F72\u0F42\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F45\u0F74\u0F0B\u0F42\u0F49\u0F72\u0F66\u0F0B\u0F54'.split('_'),
        monthsShort: '\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F51\u0F44\u0F0B\u0F54\u0F7C_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F42\u0F49\u0F72\u0F66\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F42\u0F66\u0F74\u0F58\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F5E\u0F72\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F63\u0F94\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F51\u0FB2\u0F74\u0F42\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F51\u0F74\u0F53\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F62\u0F92\u0FB1\u0F51\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F51\u0F42\u0F74\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F45\u0F74\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F45\u0F74\u0F0B\u0F42\u0F45\u0F72\u0F42\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F45\u0F74\u0F0B\u0F42\u0F49\u0F72\u0F66\u0F0B\u0F54'.split('_'),
        weekdays: '\u0F42\u0F5F\u0F60\u0F0B\u0F49\u0F72\u0F0B\u0F58\u0F0B_\u0F42\u0F5F\u0F60\u0F0B\u0F5F\u0FB3\u0F0B\u0F56\u0F0B_\u0F42\u0F5F\u0F60\u0F0B\u0F58\u0F72\u0F42\u0F0B\u0F51\u0F58\u0F62\u0F0B_\u0F42\u0F5F\u0F60\u0F0B\u0F63\u0FB7\u0F42\u0F0B\u0F54\u0F0B_\u0F42\u0F5F\u0F60\u0F0B\u0F55\u0F74\u0F62\u0F0B\u0F56\u0F74_\u0F42\u0F5F\u0F60\u0F0B\u0F54\u0F0B\u0F66\u0F44\u0F66\u0F0B_\u0F42\u0F5F\u0F60\u0F0B\u0F66\u0FA4\u0F7A\u0F53\u0F0B\u0F54\u0F0B'.split('_'),
        weekdaysShort: '\u0F49\u0F72\u0F0B\u0F58\u0F0B_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B_\u0F58\u0F72\u0F42\u0F0B\u0F51\u0F58\u0F62\u0F0B_\u0F63\u0FB7\u0F42\u0F0B\u0F54\u0F0B_\u0F55\u0F74\u0F62\u0F0B\u0F56\u0F74_\u0F54\u0F0B\u0F66\u0F44\u0F66\u0F0B_\u0F66\u0FA4\u0F7A\u0F53\u0F0B\u0F54\u0F0B'.split('_'),
        weekdaysMin: '\u0F49\u0F72\u0F0B\u0F58\u0F0B_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B_\u0F58\u0F72\u0F42\u0F0B\u0F51\u0F58\u0F62\u0F0B_\u0F63\u0FB7\u0F42\u0F0B\u0F54\u0F0B_\u0F55\u0F74\u0F62\u0F0B\u0F56\u0F74_\u0F54\u0F0B\u0F66\u0F44\u0F66\u0F0B_\u0F66\u0FA4\u0F7A\u0F53\u0F0B\u0F54\u0F0B'.split('_'),
        longDateFormat: {
          LT: 'A h:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY, LT',
          LLLL: 'dddd, D MMMM YYYY, LT'
        },
        calendar: {
          sameDay: '[\u0F51\u0F72\u0F0B\u0F62\u0F72\u0F44] LT',
          nextDay: '[\u0F66\u0F44\u0F0B\u0F49\u0F72\u0F53] LT',
          nextWeek: '[\u0F56\u0F51\u0F74\u0F53\u0F0B\u0F55\u0FB2\u0F42\u0F0B\u0F62\u0F97\u0F7A\u0F66\u0F0B\u0F58], LT',
          lastDay: '[\u0F41\u0F0B\u0F66\u0F44] LT',
          lastWeek: '[\u0F56\u0F51\u0F74\u0F53\u0F0B\u0F55\u0FB2\u0F42\u0F0B\u0F58\u0F50\u0F60\u0F0B\u0F58] dddd, LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '%s \u0F63\u0F0B',
          past: '%s \u0F66\u0F94\u0F53\u0F0B\u0F63',
          s: '\u0F63\u0F58\u0F0B\u0F66\u0F44',
          m: '\u0F66\u0F90\u0F62\u0F0B\u0F58\u0F0B\u0F42\u0F45\u0F72\u0F42',
          mm: '%d \u0F66\u0F90\u0F62\u0F0B\u0F58',
          h: '\u0F46\u0F74\u0F0B\u0F5A\u0F7C\u0F51\u0F0B\u0F42\u0F45\u0F72\u0F42',
          hh: '%d \u0F46\u0F74\u0F0B\u0F5A\u0F7C\u0F51',
          d: '\u0F49\u0F72\u0F53\u0F0B\u0F42\u0F45\u0F72\u0F42',
          dd: '%d \u0F49\u0F72\u0F53\u0F0B',
          M: '\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F42\u0F45\u0F72\u0F42',
          MM: '%d \u0F5F\u0FB3\u0F0B\u0F56',
          y: '\u0F63\u0F7C\u0F0B\u0F42\u0F45\u0F72\u0F42',
          yy: '%d \u0F63\u0F7C'
        },
        preparse: function (string) {
          return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
            return numberMap[match];
          });
        },
        postformat: function (string) {
          return string.replace(/\d/g, function (match) {
            return symbolMap[match];
          });
        },
        meridiem: function (hour, minute, isLower) {
          if (hour < 4) {
            return '\u0F58\u0F5A\u0F53\u0F0B\u0F58\u0F7C';
          } else if (hour < 10) {
            return '\u0F5E\u0F7C\u0F42\u0F66\u0F0B\u0F40\u0F66';
          } else if (hour < 17) {
            return '\u0F49\u0F72\u0F53\u0F0B\u0F42\u0F74\u0F44';
          } else if (hour < 20) {
            return '\u0F51\u0F42\u0F7C\u0F44\u0F0B\u0F51\u0F42';
          } else {
            return '\u0F58\u0F5A\u0F53\u0F0B\u0F58\u0F7C';
          }
        },
        week: {
          dow: 0,
          doy: 6
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      function relativeTimeWithMutation(number, withoutSuffix, key) {
        var format = {
            'mm': 'munutenn',
            'MM': 'miz',
            'dd': 'devezh'
          };
        return number + ' ' + mutation(format[key], number);
      }
      function specialMutationForYears(number) {
        switch (lastNumber(number)) {
        case 1:
        case 3:
        case 4:
        case 5:
        case 9:
          return number + ' bloaz';
        default:
          return number + ' vloaz';
        }
      }
      function lastNumber(number) {
        if (number > 9) {
          return lastNumber(number % 10);
        }
        return number;
      }
      function mutation(text, number) {
        if (number === 2) {
          return softMutation(text);
        }
        return text;
      }
      function softMutation(text) {
        var mutationTable = {
            'm': 'v',
            'b': 'v',
            'd': 'z'
          };
        if (mutationTable[text.charAt(0)] === undefined) {
          return text;
        }
        return mutationTable[text.charAt(0)] + text.substring(1);
      }
      return moment.defineLocale('br', {
        months: 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
        monthsShort: 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
        weekdays: 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
        weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
        longDateFormat: {
          LT: 'h[e]mm A',
          L: 'DD/MM/YYYY',
          LL: 'D [a viz] MMMM YYYY',
          LLL: 'D [a viz] MMMM YYYY LT',
          LLLL: 'dddd, D [a viz] MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[Hiziv da] LT',
          nextDay: '[Warc\'hoazh da] LT',
          nextWeek: 'dddd [da] LT',
          lastDay: '[Dec\'h da] LT',
          lastWeek: 'dddd [paset da] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'a-benn %s',
          past: '%s \'zo',
          s: 'un nebeud segondenno\xF9',
          m: 'ur vunutenn',
          mm: relativeTimeWithMutation,
          h: 'un eur',
          hh: '%d eur',
          d: 'un devezh',
          dd: relativeTimeWithMutation,
          M: 'ur miz',
          MM: relativeTimeWithMutation,
          y: 'ur bloaz',
          yy: specialMutationForYears
        },
        ordinal: function (number) {
          var output = number === 1 ? 'a\xF1' : 'vet';
          return number + output;
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
        case 'm':
          return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
          if (number === 1) {
            result += 'minuta';
          } else if (number === 2 || number === 3 || number === 4) {
            result += 'minute';
          } else {
            result += 'minuta';
          }
          return result;
        case 'h':
          return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
          if (number === 1) {
            result += 'sat';
          } else if (number === 2 || number === 3 || number === 4) {
            result += 'sata';
          } else {
            result += 'sati';
          }
          return result;
        case 'dd':
          if (number === 1) {
            result += 'dan';
          } else {
            result += 'dana';
          }
          return result;
        case 'MM':
          if (number === 1) {
            result += 'mjesec';
          } else if (number === 2 || number === 3 || number === 4) {
            result += 'mjeseca';
          } else {
            result += 'mjeseci';
          }
          return result;
        case 'yy':
          if (number === 1) {
            result += 'godina';
          } else if (number === 2 || number === 3 || number === 4) {
            result += 'godine';
          } else {
            result += 'godina';
          }
          return result;
        }
      }
      return moment.defineLocale('bs', {
        months: 'januar_februar_mart_april_maj_juni_juli_avgust_septembar_oktobar_novembar_decembar'.split('_'),
        monthsShort: 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_\u010Detvrtak_petak_subota'.split('_'),
        weekdaysShort: 'ned._pon._uto._sri._\u010Det._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_\u010De_pe_su'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          L: 'DD. MM. YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd, D. MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[danas u] LT',
          nextDay: '[sutra u] LT',
          nextWeek: function () {
            switch (this.day()) {
            case 0:
              return '[u] [nedjelju] [u] LT';
            case 3:
              return '[u] [srijedu] [u] LT';
            case 6:
              return '[u] [subotu] [u] LT';
            case 1:
            case 2:
            case 4:
            case 5:
              return '[u] dddd [u] LT';
            }
          },
          lastDay: '[ju\u010Der u] LT',
          lastWeek: function () {
            switch (this.day()) {
            case 0:
            case 3:
              return '[pro\u0161lu] dddd [u] LT';
            case 6:
              return '[pro\u0161le] [subote] [u] LT';
            case 1:
            case 2:
            case 4:
            case 5:
              return '[pro\u0161li] dddd [u] LT';
            }
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: 'za %s',
          past: 'prije %s',
          s: 'par sekundi',
          m: translate,
          mm: translate,
          h: translate,
          hh: translate,
          d: 'dan',
          dd: translate,
          M: 'mjesec',
          MM: translate,
          y: 'godinu',
          yy: translate
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('ca', {
        months: 'gener_febrer_mar\xE7_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
        monthsShort: 'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split('_'),
        weekdays: 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
        weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
        weekdaysMin: 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
          sameDay: function () {
            return '[avui a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
          },
          nextDay: function () {
            return '[dem\xE0 a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
          },
          nextWeek: function () {
            return 'dddd [a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
          },
          lastDay: function () {
            return '[ahir a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
          },
          lastWeek: function () {
            return '[el] dddd [passat a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: 'en %s',
          past: 'fa %s',
          s: 'uns segons',
          m: 'un minut',
          mm: '%d minuts',
          h: 'una hora',
          hh: '%d hores',
          d: 'un dia',
          dd: '%d dies',
          M: 'un mes',
          MM: '%d mesos',
          y: 'un any',
          yy: '%d anys'
        },
        ordinal: '%d\xBA',
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var months = 'leden_\xFAnor_b\u0159ezen_duben_kv\u011Bten_\u010Derven_\u010Dervenec_srpen_z\xE1\u0159\xED_\u0159\xEDjen_listopad_prosinec'.split('_'), monthsShort = 'led_\xFAno_b\u0159e_dub_kv\u011B_\u010Dvn_\u010Dvc_srp_z\xE1\u0159_\u0159\xEDj_lis_pro'.split('_');
      function plural(n) {
        return n > 1 && n < 5 && ~~(n / 10) !== 1;
      }
      function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
        case 's':
          return withoutSuffix || isFuture ? 'p\xE1r sekund' : 'p\xE1r sekundami';
        case 'm':
          return withoutSuffix ? 'minuta' : isFuture ? 'minutu' : 'minutou';
        case 'mm':
          if (withoutSuffix || isFuture) {
            return result + (plural(number) ? 'minuty' : 'minut');
          } else {
            return result + 'minutami';
          }
          break;
        case 'h':
          return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
        case 'hh':
          if (withoutSuffix || isFuture) {
            return result + (plural(number) ? 'hodiny' : 'hodin');
          } else {
            return result + 'hodinami';
          }
          break;
        case 'd':
          return withoutSuffix || isFuture ? 'den' : 'dnem';
        case 'dd':
          if (withoutSuffix || isFuture) {
            return result + (plural(number) ? 'dny' : 'dn\xED');
          } else {
            return result + 'dny';
          }
          break;
        case 'M':
          return withoutSuffix || isFuture ? 'm\u011Bs\xEDc' : 'm\u011Bs\xEDcem';
        case 'MM':
          if (withoutSuffix || isFuture) {
            return result + (plural(number) ? 'm\u011Bs\xEDce' : 'm\u011Bs\xEDc\u016F');
          } else {
            return result + 'm\u011Bs\xEDci';
          }
          break;
        case 'y':
          return withoutSuffix || isFuture ? 'rok' : 'rokem';
        case 'yy':
          if (withoutSuffix || isFuture) {
            return result + (plural(number) ? 'roky' : 'let');
          } else {
            return result + 'lety';
          }
          break;
        }
      }
      return moment.defineLocale('cs', {
        months: months,
        monthsShort: monthsShort,
        monthsParse: function (months, monthsShort) {
          var i, _monthsParse = [];
          for (i = 0; i < 12; i++) {
            _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
          }
          return _monthsParse;
        }(months, monthsShort),
        weekdays: 'ned\u011Ble_pond\u011Bl\xED_\xFAter\xFD_st\u0159eda_\u010Dtvrtek_p\xE1tek_sobota'.split('_'),
        weekdaysShort: 'ne_po_\xFAt_st_\u010Dt_p\xE1_so'.split('_'),
        weekdaysMin: 'ne_po_\xFAt_st_\u010Dt_p\xE1_so'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          L: 'DD.\xA0MM.\xA0YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd D. MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[dnes v] LT',
          nextDay: '[z\xEDtra v] LT',
          nextWeek: function () {
            switch (this.day()) {
            case 0:
              return '[v ned\u011Bli v] LT';
            case 1:
            case 2:
              return '[v] dddd [v] LT';
            case 3:
              return '[ve st\u0159edu v] LT';
            case 4:
              return '[ve \u010Dtvrtek v] LT';
            case 5:
              return '[v p\xE1tek v] LT';
            case 6:
              return '[v sobotu v] LT';
            }
          },
          lastDay: '[v\u010Dera v] LT',
          lastWeek: function () {
            switch (this.day()) {
            case 0:
              return '[minulou ned\u011Bli v] LT';
            case 1:
            case 2:
              return '[minul\xE9] dddd [v] LT';
            case 3:
              return '[minulou st\u0159edu v] LT';
            case 4:
            case 5:
              return '[minul\xFD] dddd [v] LT';
            case 6:
              return '[minulou sobotu v] LT';
            }
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: 'za %s',
          past: 'p\u0159ed %s',
          s: translate,
          m: translate,
          mm: translate,
          h: translate,
          hh: translate,
          d: translate,
          dd: translate,
          M: translate,
          MM: translate,
          y: translate,
          yy: translate
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('cv', {
        months: '\u043A\u0103\u0440\u043B\u0430\u0447_\u043D\u0430\u0440\u0103\u0441_\u043F\u0443\u0448_\u0430\u043A\u0430_\u043C\u0430\u0439_\xE7\u0115\u0440\u0442\u043C\u0435_\u0443\u0442\u0103_\xE7\u0443\u0440\u043B\u0430_\u0430\u0432\u0103\u043D_\u044E\u043F\u0430_\u0447\u04F3\u043A_\u0440\u0430\u0448\u0442\u0430\u0432'.split('_'),
        monthsShort: '\u043A\u0103\u0440_\u043D\u0430\u0440_\u043F\u0443\u0448_\u0430\u043A\u0430_\u043C\u0430\u0439_\xE7\u0115\u0440_\u0443\u0442\u0103_\xE7\u0443\u0440_\u0430\u0432_\u044E\u043F\u0430_\u0447\u04F3\u043A_\u0440\u0430\u0448'.split('_'),
        weekdays: '\u0432\u044B\u0440\u0441\u0430\u0440\u043D\u0438\u043A\u0443\u043D_\u0442\u0443\u043D\u0442\u0438\u043A\u0443\u043D_\u044B\u0442\u043B\u0430\u0440\u0438\u043A\u0443\u043D_\u044E\u043D\u043A\u0443\u043D_\u043A\u0115\xE7\u043D\u0435\u0440\u043D\u0438\u043A\u0443\u043D_\u044D\u0440\u043D\u0435\u043A\u0443\u043D_\u0448\u0103\u043C\u0430\u0442\u043A\u0443\u043D'.split('_'),
        weekdaysShort: '\u0432\u044B\u0440_\u0442\u0443\u043D_\u044B\u0442\u043B_\u044E\u043D_\u043A\u0115\xE7_\u044D\u0440\u043D_\u0448\u0103\u043C'.split('_'),
        weekdaysMin: '\u0432\u0440_\u0442\u043D_\u044B\u0442_\u044E\u043D_\u043A\xE7_\u044D\u0440_\u0448\u043C'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD-MM-YYYY',
          LL: 'YYYY [\xE7\u0443\u043B\u0445\u0438] MMMM [\u0443\u0439\u0103\u0445\u0115\u043D] D[-\u043C\u0115\u0448\u0115]',
          LLL: 'YYYY [\xE7\u0443\u043B\u0445\u0438] MMMM [\u0443\u0439\u0103\u0445\u0115\u043D] D[-\u043C\u0115\u0448\u0115], LT',
          LLLL: 'dddd, YYYY [\xE7\u0443\u043B\u0445\u0438] MMMM [\u0443\u0439\u0103\u0445\u0115\u043D] D[-\u043C\u0115\u0448\u0115], LT'
        },
        calendar: {
          sameDay: '[\u041F\u0430\u044F\u043D] LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]',
          nextDay: '[\u042B\u0440\u0430\u043D] LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]',
          lastDay: '[\u0114\u043D\u0435\u0440] LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]',
          nextWeek: '[\xC7\u0438\u0442\u0435\u0441] dddd LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]',
          lastWeek: '[\u0418\u0440\u0442\u043D\u0115] dddd LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]',
          sameElse: 'L'
        },
        relativeTime: {
          future: function (output) {
            var affix = /сехет$/i.exec(output) ? '\u0440\u0435\u043D' : /çул$/i.exec(output) ? '\u0442\u0430\u043D' : '\u0440\u0430\u043D';
            return output + affix;
          },
          past: '%s \u043A\u0430\u044F\u043B\u043B\u0430',
          s: '\u043F\u0115\u0440-\u0438\u043A \xE7\u0435\u043A\u043A\u0443\u043D\u0442',
          m: '\u043F\u0115\u0440 \u043C\u0438\u043D\u0443\u0442',
          mm: '%d \u043C\u0438\u043D\u0443\u0442',
          h: '\u043F\u0115\u0440 \u0441\u0435\u0445\u0435\u0442',
          hh: '%d \u0441\u0435\u0445\u0435\u0442',
          d: '\u043F\u0115\u0440 \u043A\u0443\u043D',
          dd: '%d \u043A\u0443\u043D',
          M: '\u043F\u0115\u0440 \u0443\u0439\u0103\u0445',
          MM: '%d \u0443\u0439\u0103\u0445',
          y: '\u043F\u0115\u0440 \xE7\u0443\u043B',
          yy: '%d \xE7\u0443\u043B'
        },
        ordinal: '%d-\u043C\u0115\u0448',
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('cy', {
        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
        weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[Heddiw am] LT',
          nextDay: '[Yfory am] LT',
          nextWeek: 'dddd [am] LT',
          lastDay: '[Ddoe am] LT',
          lastWeek: 'dddd [diwethaf am] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'mewn %s',
          past: '%s yn \xF4l',
          s: 'ychydig eiliadau',
          m: 'munud',
          mm: '%d munud',
          h: 'awr',
          hh: '%d awr',
          d: 'diwrnod',
          dd: '%d diwrnod',
          M: 'mis',
          MM: '%d mis',
          y: 'blwyddyn',
          yy: '%d flynedd'
        },
        ordinal: function (number) {
          var b = number, output = '', lookup = [
              '',
              'af',
              'il',
              'ydd',
              'ydd',
              'ed',
              'ed',
              'ed',
              'fed',
              'fed',
              'fed',
              'eg',
              'fed',
              'eg',
              'eg',
              'fed',
              'eg',
              'eg',
              'fed',
              'eg',
              'fed'
            ];
          if (b > 20) {
            if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
              output = 'fed';
            } else {
              output = 'ain';
            }
          } else if (b > 0) {
            output = lookup[b];
          }
          return number + output;
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('da', {
        months: 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 's\xF8ndag_mandag_tirsdag_onsdag_torsdag_fredag_l\xF8rdag'.split('_'),
        weekdaysShort: 's\xF8n_man_tir_ons_tor_fre_l\xF8r'.split('_'),
        weekdaysMin: 's\xF8_ma_ti_on_to_fr_l\xF8'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd [d.] D. MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[I dag kl.] LT',
          nextDay: '[I morgen kl.] LT',
          nextWeek: 'dddd [kl.] LT',
          lastDay: '[I g\xE5r kl.] LT',
          lastWeek: '[sidste] dddd [kl] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'om %s',
          past: '%s siden',
          s: 'f\xE5 sekunder',
          m: 'et minut',
          mm: '%d minutter',
          h: 'en time',
          hh: '%d timer',
          d: 'en dag',
          dd: '%d dage',
          M: 'en m\xE5ned',
          MM: '%d m\xE5neder',
          y: 'et \xE5r',
          yy: '%d \xE5r'
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': [
              'eine Minute',
              'einer Minute'
            ],
            'h': [
              'eine Stunde',
              'einer Stunde'
            ],
            'd': [
              'ein Tag',
              'einem Tag'
            ],
            'dd': [
              number + ' Tage',
              number + ' Tagen'
            ],
            'M': [
              'ein Monat',
              'einem Monat'
            ],
            'MM': [
              number + ' Monate',
              number + ' Monaten'
            ],
            'y': [
              'ein Jahr',
              'einem Jahr'
            ],
            'yy': [
              number + ' Jahre',
              number + ' Jahren'
            ]
          };
        return withoutSuffix ? format[key][0] : format[key][1];
      }
      return moment.defineLocale('de-at', {
        months: 'J\xE4nner_Februar_M\xE4rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'J\xE4n._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
        weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        longDateFormat: {
          LT: 'HH:mm [Uhr]',
          L: 'DD.MM.YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd, D. MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[Heute um] LT',
          sameElse: 'L',
          nextDay: '[Morgen um] LT',
          nextWeek: 'dddd [um] LT',
          lastDay: '[Gestern um] LT',
          lastWeek: '[letzten] dddd [um] LT'
        },
        relativeTime: {
          future: 'in %s',
          past: 'vor %s',
          s: 'ein paar Sekunden',
          m: processRelativeTime,
          mm: '%d Minuten',
          h: processRelativeTime,
          hh: '%d Stunden',
          d: processRelativeTime,
          dd: processRelativeTime,
          M: processRelativeTime,
          MM: processRelativeTime,
          y: processRelativeTime,
          yy: processRelativeTime
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': [
              'eine Minute',
              'einer Minute'
            ],
            'h': [
              'eine Stunde',
              'einer Stunde'
            ],
            'd': [
              'ein Tag',
              'einem Tag'
            ],
            'dd': [
              number + ' Tage',
              number + ' Tagen'
            ],
            'M': [
              'ein Monat',
              'einem Monat'
            ],
            'MM': [
              number + ' Monate',
              number + ' Monaten'
            ],
            'y': [
              'ein Jahr',
              'einem Jahr'
            ],
            'yy': [
              number + ' Jahre',
              number + ' Jahren'
            ]
          };
        return withoutSuffix ? format[key][0] : format[key][1];
      }
      return moment.defineLocale('de', {
        months: 'Januar_Februar_M\xE4rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
        weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        longDateFormat: {
          LT: 'HH:mm [Uhr]',
          L: 'DD.MM.YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd, D. MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[Heute um] LT',
          sameElse: 'L',
          nextDay: '[Morgen um] LT',
          nextWeek: 'dddd [um] LT',
          lastDay: '[Gestern um] LT',
          lastWeek: '[letzten] dddd [um] LT'
        },
        relativeTime: {
          future: 'in %s',
          past: 'vor %s',
          s: 'ein paar Sekunden',
          m: processRelativeTime,
          mm: '%d Minuten',
          h: processRelativeTime,
          hh: '%d Stunden',
          d: processRelativeTime,
          dd: processRelativeTime,
          M: processRelativeTime,
          MM: processRelativeTime,
          y: processRelativeTime,
          yy: processRelativeTime
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('el', {
        monthsNominativeEl: '\u0399\u03B1\u03BD\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2_\u03A6\u03B5\u03B2\u03C1\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2_\u039C\u03AC\u03C1\u03C4\u03B9\u03BF\u03C2_\u0391\u03C0\u03C1\u03AF\u03BB\u03B9\u03BF\u03C2_\u039C\u03AC\u03B9\u03BF\u03C2_\u0399\u03BF\u03CD\u03BD\u03B9\u03BF\u03C2_\u0399\u03BF\u03CD\u03BB\u03B9\u03BF\u03C2_\u0391\u03CD\u03B3\u03BF\u03C5\u03C3\u03C4\u03BF\u03C2_\u03A3\u03B5\u03C0\u03C4\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2_\u039F\u03BA\u03C4\u03CE\u03B2\u03C1\u03B9\u03BF\u03C2_\u039D\u03BF\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2_\u0394\u03B5\u03BA\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2'.split('_'),
        monthsGenitiveEl: '\u0399\u03B1\u03BD\u03BF\u03C5\u03B1\u03C1\u03AF\u03BF\u03C5_\u03A6\u03B5\u03B2\u03C1\u03BF\u03C5\u03B1\u03C1\u03AF\u03BF\u03C5_\u039C\u03B1\u03C1\u03C4\u03AF\u03BF\u03C5_\u0391\u03C0\u03C1\u03B9\u03BB\u03AF\u03BF\u03C5_\u039C\u03B1\u0390\u03BF\u03C5_\u0399\u03BF\u03C5\u03BD\u03AF\u03BF\u03C5_\u0399\u03BF\u03C5\u03BB\u03AF\u03BF\u03C5_\u0391\u03C5\u03B3\u03BF\u03CD\u03C3\u03C4\u03BF\u03C5_\u03A3\u03B5\u03C0\u03C4\u03B5\u03BC\u03B2\u03C1\u03AF\u03BF\u03C5_\u039F\u03BA\u03C4\u03C9\u03B2\u03C1\u03AF\u03BF\u03C5_\u039D\u03BF\u03B5\u03BC\u03B2\u03C1\u03AF\u03BF\u03C5_\u0394\u03B5\u03BA\u03B5\u03BC\u03B2\u03C1\u03AF\u03BF\u03C5'.split('_'),
        months: function (momentToFormat, format) {
          if (/D/.test(format.substring(0, format.indexOf('MMMM')))) {
            return this._monthsGenitiveEl[momentToFormat.month()];
          } else {
            return this._monthsNominativeEl[momentToFormat.month()];
          }
        },
        monthsShort: '\u0399\u03B1\u03BD_\u03A6\u03B5\u03B2_\u039C\u03B1\u03C1_\u0391\u03C0\u03C1_\u039C\u03B1\u03CA_\u0399\u03BF\u03C5\u03BD_\u0399\u03BF\u03C5\u03BB_\u0391\u03C5\u03B3_\u03A3\u03B5\u03C0_\u039F\u03BA\u03C4_\u039D\u03BF\u03B5_\u0394\u03B5\u03BA'.split('_'),
        weekdays: '\u039A\u03C5\u03C1\u03B9\u03B1\u03BA\u03AE_\u0394\u03B5\u03C5\u03C4\u03AD\u03C1\u03B1_\u03A4\u03C1\u03AF\u03C4\u03B7_\u03A4\u03B5\u03C4\u03AC\u03C1\u03C4\u03B7_\u03A0\u03AD\u03BC\u03C0\u03C4\u03B7_\u03A0\u03B1\u03C1\u03B1\u03C3\u03BA\u03B5\u03C5\u03AE_\u03A3\u03AC\u03B2\u03B2\u03B1\u03C4\u03BF'.split('_'),
        weekdaysShort: '\u039A\u03C5\u03C1_\u0394\u03B5\u03C5_\u03A4\u03C1\u03B9_\u03A4\u03B5\u03C4_\u03A0\u03B5\u03BC_\u03A0\u03B1\u03C1_\u03A3\u03B1\u03B2'.split('_'),
        weekdaysMin: '\u039A\u03C5_\u0394\u03B5_\u03A4\u03C1_\u03A4\u03B5_\u03A0\u03B5_\u03A0\u03B1_\u03A3\u03B1'.split('_'),
        meridiem: function (hours, minutes, isLower) {
          if (hours > 11) {
            return isLower ? '\u03BC\u03BC' : '\u039C\u039C';
          } else {
            return isLower ? '\u03C0\u03BC' : '\u03A0\u039C';
          }
        },
        isPM: function (input) {
          return (input + '').toLowerCase()[0] === '\u03BC';
        },
        meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
        longDateFormat: {
          LT: 'h:mm A',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendarEl: {
          sameDay: '[\u03A3\u03AE\u03BC\u03B5\u03C1\u03B1 {}] LT',
          nextDay: '[\u0391\u03CD\u03C1\u03B9\u03BF {}] LT',
          nextWeek: 'dddd [{}] LT',
          lastDay: '[\u03A7\u03B8\u03B5\u03C2 {}] LT',
          lastWeek: function () {
            switch (this.day()) {
            case 6:
              return '[\u03C4\u03BF \u03C0\u03C1\u03BF\u03B7\u03B3\u03BF\u03CD\u03BC\u03B5\u03BD\u03BF] dddd [{}] LT';
            default:
              return '[\u03C4\u03B7\u03BD \u03C0\u03C1\u03BF\u03B7\u03B3\u03BF\u03CD\u03BC\u03B5\u03BD\u03B7] dddd [{}] LT';
            }
          },
          sameElse: 'L'
        },
        calendar: function (key, mom) {
          var output = this._calendarEl[key], hours = mom && mom.hours();
          if (typeof output === 'function') {
            output = output.apply(mom);
          }
          return output.replace('{}', hours % 12 === 1 ? '\u03C3\u03C4\u03B7' : '\u03C3\u03C4\u03B9\u03C2');
        },
        relativeTime: {
          future: '\u03C3\u03B5 %s',
          past: '%s \u03C0\u03C1\u03B9\u03BD',
          s: '\u03B4\u03B5\u03C5\u03C4\u03B5\u03C1\u03CC\u03BB\u03B5\u03C0\u03C4\u03B1',
          m: '\u03AD\u03BD\u03B1 \u03BB\u03B5\u03C0\u03C4\u03CC',
          mm: '%d \u03BB\u03B5\u03C0\u03C4\u03AC',
          h: '\u03BC\u03AF\u03B1 \u03CE\u03C1\u03B1',
          hh: '%d \u03CE\u03C1\u03B5\u03C2',
          d: '\u03BC\u03AF\u03B1 \u03BC\u03AD\u03C1\u03B1',
          dd: '%d \u03BC\u03AD\u03C1\u03B5\u03C2',
          M: '\u03AD\u03BD\u03B1\u03C2 \u03BC\u03AE\u03BD\u03B1\u03C2',
          MM: '%d \u03BC\u03AE\u03BD\u03B5\u03C2',
          y: '\u03AD\u03BD\u03B1\u03C2 \u03C7\u03C1\u03CC\u03BD\u03BF\u03C2',
          yy: '%d \u03C7\u03C1\u03CC\u03BD\u03B9\u03B1'
        },
        ordinal: function (number) {
          return number + '\u03B7';
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('en-au', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
          LT: 'h:mm A',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[Today at] LT',
          nextDay: '[Tomorrow at] LT',
          nextWeek: 'dddd [at] LT',
          lastDay: '[Yesterday at] LT',
          lastWeek: '[Last] dddd [at] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'in %s',
          past: '%s ago',
          s: 'a few seconds',
          m: 'a minute',
          mm: '%d minutes',
          h: 'an hour',
          hh: '%d hours',
          d: 'a day',
          dd: '%d days',
          M: 'a month',
          MM: '%d months',
          y: 'a year',
          yy: '%d years'
        },
        ordinal: function (number) {
          var b = number % 10, output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
          return number + output;
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('en-ca', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
          LT: 'h:mm A',
          L: 'YYYY-MM-DD',
          LL: 'D MMMM, YYYY',
          LLL: 'D MMMM, YYYY LT',
          LLLL: 'dddd, D MMMM, YYYY LT'
        },
        calendar: {
          sameDay: '[Today at] LT',
          nextDay: '[Tomorrow at] LT',
          nextWeek: 'dddd [at] LT',
          lastDay: '[Yesterday at] LT',
          lastWeek: '[Last] dddd [at] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'in %s',
          past: '%s ago',
          s: 'a few seconds',
          m: 'a minute',
          mm: '%d minutes',
          h: 'an hour',
          hh: '%d hours',
          d: 'a day',
          dd: '%d days',
          M: 'a month',
          MM: '%d months',
          y: 'a year',
          yy: '%d years'
        },
        ordinal: function (number) {
          var b = number % 10, output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
          return number + output;
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('en-gb', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[Today at] LT',
          nextDay: '[Tomorrow at] LT',
          nextWeek: 'dddd [at] LT',
          lastDay: '[Yesterday at] LT',
          lastWeek: '[Last] dddd [at] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'in %s',
          past: '%s ago',
          s: 'a few seconds',
          m: 'a minute',
          mm: '%d minutes',
          h: 'an hour',
          hh: '%d hours',
          d: 'a day',
          dd: '%d days',
          M: 'a month',
          MM: '%d months',
          y: 'a year',
          yy: '%d years'
        },
        ordinal: function (number) {
          var b = number % 10, output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
          return number + output;
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('eo', {
        months: 'januaro_februaro_marto_aprilo_majo_junio_julio_a\u016Dgusto_septembro_oktobro_novembro_decembro'.split('_'),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_a\u016Dg_sep_okt_nov_dec'.split('_'),
        weekdays: 'Diman\u0109o_Lundo_Mardo_Merkredo_\u0134a\u016Ddo_Vendredo_Sabato'.split('_'),
        weekdaysShort: 'Dim_Lun_Mard_Merk_\u0134a\u016D_Ven_Sab'.split('_'),
        weekdaysMin: 'Di_Lu_Ma_Me_\u0134a_Ve_Sa'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'YYYY-MM-DD',
          LL: 'D[-an de] MMMM, YYYY',
          LLL: 'D[-an de] MMMM, YYYY LT',
          LLLL: 'dddd, [la] D[-an de] MMMM, YYYY LT'
        },
        meridiem: function (hours, minutes, isLower) {
          if (hours > 11) {
            return isLower ? 'p.t.m.' : 'P.T.M.';
          } else {
            return isLower ? 'a.t.m.' : 'A.T.M.';
          }
        },
        calendar: {
          sameDay: '[Hodia\u016D je] LT',
          nextDay: '[Morga\u016D je] LT',
          nextWeek: 'dddd [je] LT',
          lastDay: '[Hiera\u016D je] LT',
          lastWeek: '[pasinta] dddd [je] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'je %s',
          past: 'anta\u016D %s',
          s: 'sekundoj',
          m: 'minuto',
          mm: '%d minutoj',
          h: 'horo',
          hh: '%d horoj',
          d: 'tago',
          dd: '%d tagoj',
          M: 'monato',
          MM: '%d monatoj',
          y: 'jaro',
          yy: '%d jaroj'
        },
        ordinal: '%da',
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'), monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');
      return moment.defineLocale('es', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
        monthsShort: function (m, format) {
          if (/-MMM-/.test(format)) {
            return monthsShort[m.month()];
          } else {
            return monthsShortDot[m.month()];
          }
        },
        weekdays: 'domingo_lunes_martes_mi\xE9rcoles_jueves_viernes_s\xE1bado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mi\xE9._jue._vie._s\xE1b.'.split('_'),
        weekdaysMin: 'Do_Lu_Ma_Mi_Ju_Vi_S\xE1'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          L: 'DD/MM/YYYY',
          LL: 'D [de] MMMM [de] YYYY',
          LLL: 'D [de] MMMM [de] YYYY LT',
          LLLL: 'dddd, D [de] MMMM [de] YYYY LT'
        },
        calendar: {
          sameDay: function () {
            return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
          },
          nextDay: function () {
            return '[ma\xF1ana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
          },
          nextWeek: function () {
            return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
          },
          lastDay: function () {
            return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
          },
          lastWeek: function () {
            return '[el] dddd [pasado a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: 'en %s',
          past: 'hace %s',
          s: 'unos segundos',
          m: 'un minuto',
          mm: '%d minutos',
          h: 'una hora',
          hh: '%d horas',
          d: 'un d\xEDa',
          dd: '%d d\xEDas',
          M: 'un mes',
          MM: '%d meses',
          y: 'un a\xF1o',
          yy: '%d a\xF1os'
        },
        ordinal: '%d\xBA',
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's': [
              'm\xF5ne sekundi',
              'm\xF5ni sekund',
              'paar sekundit'
            ],
            'm': [
              '\xFChe minuti',
              '\xFCks minut'
            ],
            'mm': [
              number + ' minuti',
              number + ' minutit'
            ],
            'h': [
              '\xFChe tunni',
              'tund aega',
              '\xFCks tund'
            ],
            'hh': [
              number + ' tunni',
              number + ' tundi'
            ],
            'd': [
              '\xFChe p\xE4eva',
              '\xFCks p\xE4ev'
            ],
            'M': [
              'kuu aja',
              'kuu aega',
              '\xFCks kuu'
            ],
            'MM': [
              number + ' kuu',
              number + ' kuud'
            ],
            'y': [
              '\xFChe aasta',
              'aasta',
              '\xFCks aasta'
            ],
            'yy': [
              number + ' aasta',
              number + ' aastat'
            ]
          };
        if (withoutSuffix) {
          return format[key][2] ? format[key][2] : format[key][1];
        }
        return isFuture ? format[key][0] : format[key][1];
      }
      return moment.defineLocale('et', {
        months: 'jaanuar_veebruar_m\xE4rts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
        monthsShort: 'jaan_veebr_m\xE4rts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
        weekdays: 'p\xFChap\xE4ev_esmasp\xE4ev_teisip\xE4ev_kolmap\xE4ev_neljap\xE4ev_reede_laup\xE4ev'.split('_'),
        weekdaysShort: 'P_E_T_K_N_R_L'.split('_'),
        weekdaysMin: 'P_E_T_K_N_R_L'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          L: 'DD.MM.YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd, D. MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[T\xE4na,] LT',
          nextDay: '[Homme,] LT',
          nextWeek: '[J\xE4rgmine] dddd LT',
          lastDay: '[Eile,] LT',
          lastWeek: '[Eelmine] dddd LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '%s p\xE4rast',
          past: '%s tagasi',
          s: processRelativeTime,
          m: processRelativeTime,
          mm: processRelativeTime,
          h: processRelativeTime,
          hh: processRelativeTime,
          d: processRelativeTime,
          dd: '%d p\xE4eva',
          M: processRelativeTime,
          MM: processRelativeTime,
          y: processRelativeTime,
          yy: processRelativeTime
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('eu', {
        months: 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
        monthsShort: 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
        weekdays: 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
        weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),
        weekdaysMin: 'ig_al_ar_az_og_ol_lr'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'YYYY-MM-DD',
          LL: 'YYYY[ko] MMMM[ren] D[a]',
          LLL: 'YYYY[ko] MMMM[ren] D[a] LT',
          LLLL: 'dddd, YYYY[ko] MMMM[ren] D[a] LT',
          l: 'YYYY-M-D',
          ll: 'YYYY[ko] MMM D[a]',
          lll: 'YYYY[ko] MMM D[a] LT',
          llll: 'ddd, YYYY[ko] MMM D[a] LT'
        },
        calendar: {
          sameDay: '[gaur] LT[etan]',
          nextDay: '[bihar] LT[etan]',
          nextWeek: 'dddd LT[etan]',
          lastDay: '[atzo] LT[etan]',
          lastWeek: '[aurreko] dddd LT[etan]',
          sameElse: 'L'
        },
        relativeTime: {
          future: '%s barru',
          past: 'duela %s',
          s: 'segundo batzuk',
          m: 'minutu bat',
          mm: '%d minutu',
          h: 'ordu bat',
          hh: '%d ordu',
          d: 'egun bat',
          dd: '%d egun',
          M: 'hilabete bat',
          MM: '%d hilabete',
          y: 'urte bat',
          yy: '%d urte'
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var symbolMap = {
          '1': '\u06F1',
          '2': '\u06F2',
          '3': '\u06F3',
          '4': '\u06F4',
          '5': '\u06F5',
          '6': '\u06F6',
          '7': '\u06F7',
          '8': '\u06F8',
          '9': '\u06F9',
          '0': '\u06F0'
        }, numberMap = {
          '\u06F1': '1',
          '\u06F2': '2',
          '\u06F3': '3',
          '\u06F4': '4',
          '\u06F5': '5',
          '\u06F6': '6',
          '\u06F7': '7',
          '\u06F8': '8',
          '\u06F9': '9',
          '\u06F0': '0'
        };
      return moment.defineLocale('fa', {
        months: '\u0698\u0627\u0646\u0648\u06CC\u0647_\u0641\u0648\u0631\u06CC\u0647_\u0645\u0627\u0631\u0633_\u0622\u0648\u0631\u06CC\u0644_\u0645\u0647_\u0698\u0648\u0626\u0646_\u0698\u0648\u0626\u06CC\u0647_\u0627\u0648\u062A_\u0633\u067E\u062A\u0627\u0645\u0628\u0631_\u0627\u06A9\u062A\u0628\u0631_\u0646\u0648\u0627\u0645\u0628\u0631_\u062F\u0633\u0627\u0645\u0628\u0631'.split('_'),
        monthsShort: '\u0698\u0627\u0646\u0648\u06CC\u0647_\u0641\u0648\u0631\u06CC\u0647_\u0645\u0627\u0631\u0633_\u0622\u0648\u0631\u06CC\u0644_\u0645\u0647_\u0698\u0648\u0626\u0646_\u0698\u0648\u0626\u06CC\u0647_\u0627\u0648\u062A_\u0633\u067E\u062A\u0627\u0645\u0628\u0631_\u0627\u06A9\u062A\u0628\u0631_\u0646\u0648\u0627\u0645\u0628\u0631_\u062F\u0633\u0627\u0645\u0628\u0631'.split('_'),
        weekdays: '\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647'.split('_'),
        weekdaysShort: '\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647'.split('_'),
        weekdaysMin: '\u06CC_\u062F_\u0633_\u0686_\u067E_\u062C_\u0634'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT'
        },
        meridiem: function (hour, minute, isLower) {
          if (hour < 12) {
            return '\u0642\u0628\u0644 \u0627\u0632 \u0638\u0647\u0631';
          } else {
            return '\u0628\u0639\u062F \u0627\u0632 \u0638\u0647\u0631';
          }
        },
        calendar: {
          sameDay: '[\u0627\u0645\u0631\u0648\u0632 \u0633\u0627\u0639\u062A] LT',
          nextDay: '[\u0641\u0631\u062F\u0627 \u0633\u0627\u0639\u062A] LT',
          nextWeek: 'dddd [\u0633\u0627\u0639\u062A] LT',
          lastDay: '[\u062F\u06CC\u0631\u0648\u0632 \u0633\u0627\u0639\u062A] LT',
          lastWeek: 'dddd [\u067E\u06CC\u0634] [\u0633\u0627\u0639\u062A] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '\u062F\u0631 %s',
          past: '%s \u067E\u06CC\u0634',
          s: '\u0686\u0646\u062F\u06CC\u0646 \u062B\u0627\u0646\u06CC\u0647',
          m: '\u06CC\u06A9 \u062F\u0642\u06CC\u0642\u0647',
          mm: '%d \u062F\u0642\u06CC\u0642\u0647',
          h: '\u06CC\u06A9 \u0633\u0627\u0639\u062A',
          hh: '%d \u0633\u0627\u0639\u062A',
          d: '\u06CC\u06A9 \u0631\u0648\u0632',
          dd: '%d \u0631\u0648\u0632',
          M: '\u06CC\u06A9 \u0645\u0627\u0647',
          MM: '%d \u0645\u0627\u0647',
          y: '\u06CC\u06A9 \u0633\u0627\u0644',
          yy: '%d \u0633\u0627\u0644'
        },
        preparse: function (string) {
          return string.replace(/[۰-۹]/g, function (match) {
            return numberMap[match];
          }).replace(/،/g, ',');
        },
        postformat: function (string) {
          return string.replace(/\d/g, function (match) {
            return symbolMap[match];
          }).replace(/,/g, '\u060C');
        },
        ordinal: '%d\u0645',
        week: {
          dow: 6,
          doy: 12
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var numbersPast = 'nolla yksi kaksi kolme nelj\xE4 viisi kuusi seitsem\xE4n kahdeksan yhdeks\xE4n'.split(' '), numbersFuture = [
          'nolla',
          'yhden',
          'kahden',
          'kolmen',
          'nelj\xE4n',
          'viiden',
          'kuuden',
          numbersPast[7],
          numbersPast[8],
          numbersPast[9]
        ];
      function translate(number, withoutSuffix, key, isFuture) {
        var result = '';
        switch (key) {
        case 's':
          return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
        case 'm':
          return isFuture ? 'minuutin' : 'minuutti';
        case 'mm':
          result = isFuture ? 'minuutin' : 'minuuttia';
          break;
        case 'h':
          return isFuture ? 'tunnin' : 'tunti';
        case 'hh':
          result = isFuture ? 'tunnin' : 'tuntia';
          break;
        case 'd':
          return isFuture ? 'p\xE4iv\xE4n' : 'p\xE4iv\xE4';
        case 'dd':
          result = isFuture ? 'p\xE4iv\xE4n' : 'p\xE4iv\xE4\xE4';
          break;
        case 'M':
          return isFuture ? 'kuukauden' : 'kuukausi';
        case 'MM':
          result = isFuture ? 'kuukauden' : 'kuukautta';
          break;
        case 'y':
          return isFuture ? 'vuoden' : 'vuosi';
        case 'yy':
          result = isFuture ? 'vuoden' : 'vuotta';
          break;
        }
        result = verbalNumber(number, isFuture) + ' ' + result;
        return result;
      }
      function verbalNumber(number, isFuture) {
        return number < 10 ? isFuture ? numbersFuture[number] : numbersPast[number] : number;
      }
      return moment.defineLocale('fi', {
        months: 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kes\xE4kuu_hein\xE4kuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
        monthsShort: 'tammi_helmi_maalis_huhti_touko_kes\xE4_hein\xE4_elo_syys_loka_marras_joulu'.split('_'),
        weekdays: 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
        weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),
        weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),
        longDateFormat: {
          LT: 'HH.mm',
          L: 'DD.MM.YYYY',
          LL: 'Do MMMM[ta] YYYY',
          LLL: 'Do MMMM[ta] YYYY, [klo] LT',
          LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] LT',
          l: 'D.M.YYYY',
          ll: 'Do MMM YYYY',
          lll: 'Do MMM YYYY, [klo] LT',
          llll: 'ddd, Do MMM YYYY, [klo] LT'
        },
        calendar: {
          sameDay: '[t\xE4n\xE4\xE4n] [klo] LT',
          nextDay: '[huomenna] [klo] LT',
          nextWeek: 'dddd [klo] LT',
          lastDay: '[eilen] [klo] LT',
          lastWeek: '[viime] dddd[na] [klo] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '%s p\xE4\xE4st\xE4',
          past: '%s sitten',
          s: translate,
          m: translate,
          mm: translate,
          h: translate,
          hh: translate,
          d: translate,
          dd: translate,
          M: translate,
          MM: translate,
          y: translate,
          yy: translate
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('fo', {
        months: 'januar_februar_mars_apr\xEDl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays: 'sunnudagur_m\xE1nadagur_t\xFDsdagur_mikudagur_h\xF3sdagur_fr\xEDggjadagur_leygardagur'.split('_'),
        weekdaysShort: 'sun_m\xE1n_t\xFDs_mik_h\xF3s_fr\xED_ley'.split('_'),
        weekdaysMin: 'su_m\xE1_t\xFD_mi_h\xF3_fr_le'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D. MMMM, YYYY LT'
        },
        calendar: {
          sameDay: '[\xCD dag kl.] LT',
          nextDay: '[\xCD morgin kl.] LT',
          nextWeek: 'dddd [kl.] LT',
          lastDay: '[\xCD gj\xE1r kl.] LT',
          lastWeek: '[s\xED\xF0stu] dddd [kl] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'um %s',
          past: '%s s\xED\xF0ani',
          s: 'f\xE1 sekund',
          m: 'ein minutt',
          mm: '%d minuttir',
          h: 'ein t\xEDmi',
          hh: '%d t\xEDmar',
          d: 'ein dagur',
          dd: '%d dagar',
          M: 'ein m\xE1na\xF0i',
          MM: '%d m\xE1na\xF0ir',
          y: 'eitt \xE1r',
          yy: '%d \xE1r'
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('fr-ca', {
        months: 'janvier_f\xE9vrier_mars_avril_mai_juin_juillet_ao\xFBt_septembre_octobre_novembre_d\xE9cembre'.split('_'),
        monthsShort: 'janv._f\xE9vr._mars_avr._mai_juin_juil._ao\xFBt_sept._oct._nov._d\xE9c.'.split('_'),
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'YYYY-MM-DD',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[Aujourd\'hui \xE0] LT',
          nextDay: '[Demain \xE0] LT',
          nextWeek: 'dddd [\xE0] LT',
          lastDay: '[Hier \xE0] LT',
          lastWeek: 'dddd [dernier \xE0] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'dans %s',
          past: 'il y a %s',
          s: 'quelques secondes',
          m: 'une minute',
          mm: '%d minutes',
          h: 'une heure',
          hh: '%d heures',
          d: 'un jour',
          dd: '%d jours',
          M: 'un mois',
          MM: '%d mois',
          y: 'un an',
          yy: '%d ans'
        },
        ordinal: function (number) {
          return number + (number === 1 ? 'er' : '');
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('fr', {
        months: 'janvier_f\xE9vrier_mars_avril_mai_juin_juillet_ao\xFBt_septembre_octobre_novembre_d\xE9cembre'.split('_'),
        monthsShort: 'janv._f\xE9vr._mars_avr._mai_juin_juil._ao\xFBt_sept._oct._nov._d\xE9c.'.split('_'),
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[Aujourd\'hui \xE0] LT',
          nextDay: '[Demain \xE0] LT',
          nextWeek: 'dddd [\xE0] LT',
          lastDay: '[Hier \xE0] LT',
          lastWeek: 'dddd [dernier \xE0] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'dans %s',
          past: 'il y a %s',
          s: 'quelques secondes',
          m: 'une minute',
          mm: '%d minutes',
          h: 'une heure',
          hh: '%d heures',
          d: 'un jour',
          dd: '%d jours',
          M: 'un mois',
          MM: '%d mois',
          y: 'un an',
          yy: '%d ans'
        },
        ordinal: function (number) {
          return number + (number === 1 ? 'er' : '');
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('gl', {
        months: 'Xaneiro_Febreiro_Marzo_Abril_Maio_Xu\xF1o_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro'.split('_'),
        monthsShort: 'Xan._Feb._Mar._Abr._Mai._Xu\xF1._Xul._Ago._Set._Out._Nov._Dec.'.split('_'),
        weekdays: 'Domingo_Luns_Martes_M\xE9rcores_Xoves_Venres_S\xE1bado'.split('_'),
        weekdaysShort: 'Dom._Lun._Mar._M\xE9r._Xov._Ven._S\xE1b.'.split('_'),
        weekdaysMin: 'Do_Lu_Ma_M\xE9_Xo_Ve_S\xE1'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
          sameDay: function () {
            return '[hoxe ' + (this.hours() !== 1 ? '\xE1s' : '\xE1') + '] LT';
          },
          nextDay: function () {
            return '[ma\xF1\xE1 ' + (this.hours() !== 1 ? '\xE1s' : '\xE1') + '] LT';
          },
          nextWeek: function () {
            return 'dddd [' + (this.hours() !== 1 ? '\xE1s' : 'a') + '] LT';
          },
          lastDay: function () {
            return '[onte ' + (this.hours() !== 1 ? '\xE1' : 'a') + '] LT';
          },
          lastWeek: function () {
            return '[o] dddd [pasado ' + (this.hours() !== 1 ? '\xE1s' : 'a') + '] LT';
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: function (str) {
            if (str === 'uns segundos') {
              return 'nuns segundos';
            }
            return 'en ' + str;
          },
          past: 'hai %s',
          s: 'uns segundos',
          m: 'un minuto',
          mm: '%d minutos',
          h: 'unha hora',
          hh: '%d horas',
          d: 'un d\xEDa',
          dd: '%d d\xEDas',
          M: 'un mes',
          MM: '%d meses',
          y: 'un ano',
          yy: '%d anos'
        },
        ordinal: '%d\xBA',
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('he', {
        months: '\u05D9\u05E0\u05D5\u05D0\u05E8_\u05E4\u05D1\u05E8\u05D5\u05D0\u05E8_\u05DE\u05E8\u05E5_\u05D0\u05E4\u05E8\u05D9\u05DC_\u05DE\u05D0\u05D9_\u05D9\u05D5\u05E0\u05D9_\u05D9\u05D5\u05DC\u05D9_\u05D0\u05D5\u05D2\u05D5\u05E1\u05D8_\u05E1\u05E4\u05D8\u05DE\u05D1\u05E8_\u05D0\u05D5\u05E7\u05D8\u05D5\u05D1\u05E8_\u05E0\u05D5\u05D1\u05DE\u05D1\u05E8_\u05D3\u05E6\u05DE\u05D1\u05E8'.split('_'),
        monthsShort: '\u05D9\u05E0\u05D5\u05F3_\u05E4\u05D1\u05E8\u05F3_\u05DE\u05E8\u05E5_\u05D0\u05E4\u05E8\u05F3_\u05DE\u05D0\u05D9_\u05D9\u05D5\u05E0\u05D9_\u05D9\u05D5\u05DC\u05D9_\u05D0\u05D5\u05D2\u05F3_\u05E1\u05E4\u05D8\u05F3_\u05D0\u05D5\u05E7\u05F3_\u05E0\u05D5\u05D1\u05F3_\u05D3\u05E6\u05DE\u05F3'.split('_'),
        weekdays: '\u05E8\u05D0\u05E9\u05D5\u05DF_\u05E9\u05E0\u05D9_\u05E9\u05DC\u05D9\u05E9\u05D9_\u05E8\u05D1\u05D9\u05E2\u05D9_\u05D7\u05DE\u05D9\u05E9\u05D9_\u05E9\u05D9\u05E9\u05D9_\u05E9\u05D1\u05EA'.split('_'),
        weekdaysShort: '\u05D0\u05F3_\u05D1\u05F3_\u05D2\u05F3_\u05D3\u05F3_\u05D4\u05F3_\u05D5\u05F3_\u05E9\u05F3'.split('_'),
        weekdaysMin: '\u05D0_\u05D1_\u05D2_\u05D3_\u05D4_\u05D5_\u05E9'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D [\u05D1]MMMM YYYY',
          LLL: 'D [\u05D1]MMMM YYYY LT',
          LLLL: 'dddd, D [\u05D1]MMMM YYYY LT',
          l: 'D/M/YYYY',
          ll: 'D MMM YYYY',
          lll: 'D MMM YYYY LT',
          llll: 'ddd, D MMM YYYY LT'
        },
        calendar: {
          sameDay: '[\u05D4\u05D9\u05D5\u05DD \u05D1\u05BE]LT',
          nextDay: '[\u05DE\u05D7\u05E8 \u05D1\u05BE]LT',
          nextWeek: 'dddd [\u05D1\u05E9\u05E2\u05D4] LT',
          lastDay: '[\u05D0\u05EA\u05DE\u05D5\u05DC \u05D1\u05BE]LT',
          lastWeek: '[\u05D1\u05D9\u05D5\u05DD] dddd [\u05D4\u05D0\u05D7\u05E8\u05D5\u05DF \u05D1\u05E9\u05E2\u05D4] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '\u05D1\u05E2\u05D5\u05D3 %s',
          past: '\u05DC\u05E4\u05E0\u05D9 %s',
          s: '\u05DE\u05E1\u05E4\u05E8 \u05E9\u05E0\u05D9\u05D5\u05EA',
          m: '\u05D3\u05E7\u05D4',
          mm: '%d \u05D3\u05E7\u05D5\u05EA',
          h: '\u05E9\u05E2\u05D4',
          hh: function (number) {
            if (number === 2) {
              return '\u05E9\u05E2\u05EA\u05D9\u05D9\u05DD';
            }
            return number + ' \u05E9\u05E2\u05D5\u05EA';
          },
          d: '\u05D9\u05D5\u05DD',
          dd: function (number) {
            if (number === 2) {
              return '\u05D9\u05D5\u05DE\u05D9\u05D9\u05DD';
            }
            return number + ' \u05D9\u05DE\u05D9\u05DD';
          },
          M: '\u05D7\u05D5\u05D3\u05E9',
          MM: function (number) {
            if (number === 2) {
              return '\u05D7\u05D5\u05D3\u05E9\u05D9\u05D9\u05DD';
            }
            return number + ' \u05D7\u05D5\u05D3\u05E9\u05D9\u05DD';
          },
          y: '\u05E9\u05E0\u05D4',
          yy: function (number) {
            if (number === 2) {
              return '\u05E9\u05E0\u05EA\u05D9\u05D9\u05DD';
            }
            return number + ' \u05E9\u05E0\u05D9\u05DD';
          }
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var symbolMap = {
          '1': '\u0967',
          '2': '\u0968',
          '3': '\u0969',
          '4': '\u096A',
          '5': '\u096B',
          '6': '\u096C',
          '7': '\u096D',
          '8': '\u096E',
          '9': '\u096F',
          '0': '\u0966'
        }, numberMap = {
          '\u0967': '1',
          '\u0968': '2',
          '\u0969': '3',
          '\u096A': '4',
          '\u096B': '5',
          '\u096C': '6',
          '\u096D': '7',
          '\u096E': '8',
          '\u096F': '9',
          '\u0966': '0'
        };
      return moment.defineLocale('hi', {
        months: '\u091C\u0928\u0935\u0930\u0940_\u092B\u093C\u0930\u0935\u0930\u0940_\u092E\u093E\u0930\u094D\u091A_\u0905\u092A\u094D\u0930\u0948\u0932_\u092E\u0908_\u091C\u0942\u0928_\u091C\u0941\u0932\u093E\u0908_\u0905\u0917\u0938\u094D\u0924_\u0938\u093F\u0924\u092E\u094D\u092C\u0930_\u0905\u0915\u094D\u091F\u0942\u092C\u0930_\u0928\u0935\u092E\u094D\u092C\u0930_\u0926\u093F\u0938\u092E\u094D\u092C\u0930'.split('_'),
        monthsShort: '\u091C\u0928._\u092B\u093C\u0930._\u092E\u093E\u0930\u094D\u091A_\u0905\u092A\u094D\u0930\u0948._\u092E\u0908_\u091C\u0942\u0928_\u091C\u0941\u0932._\u0905\u0917._\u0938\u093F\u0924._\u0905\u0915\u094D\u091F\u0942._\u0928\u0935._\u0926\u093F\u0938.'.split('_'),
        weekdays: '\u0930\u0935\u093F\u0935\u093E\u0930_\u0938\u094B\u092E\u0935\u093E\u0930_\u092E\u0902\u0917\u0932\u0935\u093E\u0930_\u092C\u0941\u0927\u0935\u093E\u0930_\u0917\u0941\u0930\u0942\u0935\u093E\u0930_\u0936\u0941\u0915\u094D\u0930\u0935\u093E\u0930_\u0936\u0928\u093F\u0935\u093E\u0930'.split('_'),
        weekdaysShort: '\u0930\u0935\u093F_\u0938\u094B\u092E_\u092E\u0902\u0917\u0932_\u092C\u0941\u0927_\u0917\u0941\u0930\u0942_\u0936\u0941\u0915\u094D\u0930_\u0936\u0928\u093F'.split('_'),
        weekdaysMin: '\u0930_\u0938\u094B_\u092E\u0902_\u092C\u0941_\u0917\u0941_\u0936\u0941_\u0936'.split('_'),
        longDateFormat: {
          LT: 'A h:mm \u092C\u091C\u0947',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY, LT',
          LLLL: 'dddd, D MMMM YYYY, LT'
        },
        calendar: {
          sameDay: '[\u0906\u091C] LT',
          nextDay: '[\u0915\u0932] LT',
          nextWeek: 'dddd, LT',
          lastDay: '[\u0915\u0932] LT',
          lastWeek: '[\u092A\u093F\u091B\u0932\u0947] dddd, LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '%s \u092E\u0947\u0902',
          past: '%s \u092A\u0939\u0932\u0947',
          s: '\u0915\u0941\u091B \u0939\u0940 \u0915\u094D\u0937\u0923',
          m: '\u090F\u0915 \u092E\u093F\u0928\u091F',
          mm: '%d \u092E\u093F\u0928\u091F',
          h: '\u090F\u0915 \u0918\u0902\u091F\u093E',
          hh: '%d \u0918\u0902\u091F\u0947',
          d: '\u090F\u0915 \u0926\u093F\u0928',
          dd: '%d \u0926\u093F\u0928',
          M: '\u090F\u0915 \u092E\u0939\u0940\u0928\u0947',
          MM: '%d \u092E\u0939\u0940\u0928\u0947',
          y: '\u090F\u0915 \u0935\u0930\u094D\u0937',
          yy: '%d \u0935\u0930\u094D\u0937'
        },
        preparse: function (string) {
          return string.replace(/[१२३४५६७८९०]/g, function (match) {
            return numberMap[match];
          });
        },
        postformat: function (string) {
          return string.replace(/\d/g, function (match) {
            return symbolMap[match];
          });
        },
        meridiem: function (hour, minute, isLower) {
          if (hour < 4) {
            return '\u0930\u093E\u0924';
          } else if (hour < 10) {
            return '\u0938\u0941\u092C\u0939';
          } else if (hour < 17) {
            return '\u0926\u094B\u092A\u0939\u0930';
          } else if (hour < 20) {
            return '\u0936\u093E\u092E';
          } else {
            return '\u0930\u093E\u0924';
          }
        },
        week: {
          dow: 0,
          doy: 6
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
        case 'm':
          return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
          if (number === 1) {
            result += 'minuta';
          } else if (number === 2 || number === 3 || number === 4) {
            result += 'minute';
          } else {
            result += 'minuta';
          }
          return result;
        case 'h':
          return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
          if (number === 1) {
            result += 'sat';
          } else if (number === 2 || number === 3 || number === 4) {
            result += 'sata';
          } else {
            result += 'sati';
          }
          return result;
        case 'dd':
          if (number === 1) {
            result += 'dan';
          } else {
            result += 'dana';
          }
          return result;
        case 'MM':
          if (number === 1) {
            result += 'mjesec';
          } else if (number === 2 || number === 3 || number === 4) {
            result += 'mjeseca';
          } else {
            result += 'mjeseci';
          }
          return result;
        case 'yy':
          if (number === 1) {
            result += 'godina';
          } else if (number === 2 || number === 3 || number === 4) {
            result += 'godine';
          } else {
            result += 'godina';
          }
          return result;
        }
      }
      return moment.defineLocale('hr', {
        months: 'sje\u010Danj_velja\u010Da_o\u017Eujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_'),
        monthsShort: 'sje._vel._o\u017Eu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_\u010Detvrtak_petak_subota'.split('_'),
        weekdaysShort: 'ned._pon._uto._sri._\u010Det._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_\u010De_pe_su'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          L: 'DD. MM. YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd, D. MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[danas u] LT',
          nextDay: '[sutra u] LT',
          nextWeek: function () {
            switch (this.day()) {
            case 0:
              return '[u] [nedjelju] [u] LT';
            case 3:
              return '[u] [srijedu] [u] LT';
            case 6:
              return '[u] [subotu] [u] LT';
            case 1:
            case 2:
            case 4:
            case 5:
              return '[u] dddd [u] LT';
            }
          },
          lastDay: '[ju\u010Der u] LT',
          lastWeek: function () {
            switch (this.day()) {
            case 0:
            case 3:
              return '[pro\u0161lu] dddd [u] LT';
            case 6:
              return '[pro\u0161le] [subote] [u] LT';
            case 1:
            case 2:
            case 4:
            case 5:
              return '[pro\u0161li] dddd [u] LT';
            }
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: 'za %s',
          past: 'prije %s',
          s: 'par sekundi',
          m: translate,
          mm: translate,
          h: translate,
          hh: translate,
          d: 'dan',
          dd: translate,
          M: 'mjesec',
          MM: translate,
          y: 'godinu',
          yy: translate
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var weekEndings = 'vas\xE1rnap h\xE9tf\u0151n kedden szerd\xE1n cs\xFCt\xF6rt\xF6k\xF6n p\xE9nteken szombaton'.split(' ');
      function translate(number, withoutSuffix, key, isFuture) {
        var num = number, suffix;
        switch (key) {
        case 's':
          return isFuture || withoutSuffix ? 'n\xE9h\xE1ny m\xE1sodperc' : 'n\xE9h\xE1ny m\xE1sodperce';
        case 'm':
          return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'mm':
          return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'h':
          return 'egy' + (isFuture || withoutSuffix ? ' \xF3ra' : ' \xF3r\xE1ja');
        case 'hh':
          return num + (isFuture || withoutSuffix ? ' \xF3ra' : ' \xF3r\xE1ja');
        case 'd':
          return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'dd':
          return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'M':
          return 'egy' + (isFuture || withoutSuffix ? ' h\xF3nap' : ' h\xF3napja');
        case 'MM':
          return num + (isFuture || withoutSuffix ? ' h\xF3nap' : ' h\xF3napja');
        case 'y':
          return 'egy' + (isFuture || withoutSuffix ? ' \xE9v' : ' \xE9ve');
        case 'yy':
          return num + (isFuture || withoutSuffix ? ' \xE9v' : ' \xE9ve');
        }
        return '';
      }
      function week(isFuture) {
        return (isFuture ? '' : '[m\xFAlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
      }
      return moment.defineLocale('hu', {
        months: 'janu\xE1r_febru\xE1r_m\xE1rcius_\xE1prilis_m\xE1jus_j\xFAnius_j\xFAlius_augusztus_szeptember_okt\xF3ber_november_december'.split('_'),
        monthsShort: 'jan_feb_m\xE1rc_\xE1pr_m\xE1j_j\xFAn_j\xFAl_aug_szept_okt_nov_dec'.split('_'),
        weekdays: 'vas\xE1rnap_h\xE9tf\u0151_kedd_szerda_cs\xFCt\xF6rt\xF6k_p\xE9ntek_szombat'.split('_'),
        weekdaysShort: 'vas_h\xE9t_kedd_sze_cs\xFCt_p\xE9n_szo'.split('_'),
        weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          L: 'YYYY.MM.DD.',
          LL: 'YYYY. MMMM D.',
          LLL: 'YYYY. MMMM D., LT',
          LLLL: 'YYYY. MMMM D., dddd LT'
        },
        meridiem: function (hours, minutes, isLower) {
          if (hours < 12) {
            return isLower === true ? 'de' : 'DE';
          } else {
            return isLower === true ? 'du' : 'DU';
          }
        },
        calendar: {
          sameDay: '[ma] LT[-kor]',
          nextDay: '[holnap] LT[-kor]',
          nextWeek: function () {
            return week.call(this, true);
          },
          lastDay: '[tegnap] LT[-kor]',
          lastWeek: function () {
            return week.call(this, false);
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: '%s m\xFAlva',
          past: '%s',
          s: translate,
          m: translate,
          mm: translate,
          h: translate,
          hh: translate,
          d: translate,
          dd: translate,
          M: translate,
          MM: translate,
          y: translate,
          yy: translate
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      function monthsCaseReplace(m, format) {
        var months = {
            'nominative': '\u0570\u0578\u0582\u0576\u057E\u0561\u0580_\u0583\u0565\u057F\u0580\u057E\u0561\u0580_\u0574\u0561\u0580\u057F_\u0561\u057A\u0580\u056B\u056C_\u0574\u0561\u0575\u056B\u057D_\u0570\u0578\u0582\u0576\u056B\u057D_\u0570\u0578\u0582\u056C\u056B\u057D_\u0585\u0563\u0578\u057D\u057F\u0578\u057D_\u057D\u0565\u057A\u057F\u0565\u0574\u0562\u0565\u0580_\u0570\u0578\u056F\u057F\u0565\u0574\u0562\u0565\u0580_\u0576\u0578\u0575\u0565\u0574\u0562\u0565\u0580_\u0564\u0565\u056F\u057F\u0565\u0574\u0562\u0565\u0580'.split('_'),
            'accusative': '\u0570\u0578\u0582\u0576\u057E\u0561\u0580\u056B_\u0583\u0565\u057F\u0580\u057E\u0561\u0580\u056B_\u0574\u0561\u0580\u057F\u056B_\u0561\u057A\u0580\u056B\u056C\u056B_\u0574\u0561\u0575\u056B\u057D\u056B_\u0570\u0578\u0582\u0576\u056B\u057D\u056B_\u0570\u0578\u0582\u056C\u056B\u057D\u056B_\u0585\u0563\u0578\u057D\u057F\u0578\u057D\u056B_\u057D\u0565\u057A\u057F\u0565\u0574\u0562\u0565\u0580\u056B_\u0570\u0578\u056F\u057F\u0565\u0574\u0562\u0565\u0580\u056B_\u0576\u0578\u0575\u0565\u0574\u0562\u0565\u0580\u056B_\u0564\u0565\u056F\u057F\u0565\u0574\u0562\u0565\u0580\u056B'.split('_')
          }, nounCase = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(format) ? 'accusative' : 'nominative';
        return months[nounCase][m.month()];
      }
      function monthsShortCaseReplace(m, format) {
        var monthsShort = '\u0570\u0576\u057E_\u0583\u057F\u0580_\u0574\u0580\u057F_\u0561\u057A\u0580_\u0574\u0575\u057D_\u0570\u0576\u057D_\u0570\u056C\u057D_\u0585\u0563\u057D_\u057D\u057A\u057F_\u0570\u056F\u057F_\u0576\u0574\u0562_\u0564\u056F\u057F'.split('_');
        return monthsShort[m.month()];
      }
      function weekdaysCaseReplace(m, format) {
        var weekdays = '\u056F\u056B\u0580\u0561\u056F\u056B_\u0565\u0580\u056F\u0578\u0582\u0577\u0561\u0562\u0569\u056B_\u0565\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056B_\u0579\u0578\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056B_\u0570\u056B\u0576\u0563\u0577\u0561\u0562\u0569\u056B_\u0578\u0582\u0580\u0562\u0561\u0569_\u0577\u0561\u0562\u0561\u0569'.split('_');
        return weekdays[m.day()];
      }
      return moment.defineLocale('hy-am', {
        months: monthsCaseReplace,
        monthsShort: monthsShortCaseReplace,
        weekdays: weekdaysCaseReplace,
        weekdaysShort: '\u056F\u0580\u056F_\u0565\u0580\u056F_\u0565\u0580\u0584_\u0579\u0580\u0584_\u0570\u0576\u0563_\u0578\u0582\u0580\u0562_\u0577\u0562\u0569'.split('_'),
        weekdaysMin: '\u056F\u0580\u056F_\u0565\u0580\u056F_\u0565\u0580\u0584_\u0579\u0580\u0584_\u0570\u0576\u0563_\u0578\u0582\u0580\u0562_\u0577\u0562\u0569'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD.MM.YYYY',
          LL: 'D MMMM YYYY \u0569.',
          LLL: 'D MMMM YYYY \u0569., LT',
          LLLL: 'dddd, D MMMM YYYY \u0569., LT'
        },
        calendar: {
          sameDay: '[\u0561\u0575\u057D\u0585\u0580] LT',
          nextDay: '[\u057E\u0561\u0572\u0568] LT',
          lastDay: '[\u0565\u0580\u0565\u056F] LT',
          nextWeek: function () {
            return 'dddd [\u0585\u0580\u0568 \u056A\u0561\u0574\u0568] LT';
          },
          lastWeek: function () {
            return '[\u0561\u0576\u0581\u0561\u056E] dddd [\u0585\u0580\u0568 \u056A\u0561\u0574\u0568] LT';
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: '%s \u0570\u0565\u057F\u0578',
          past: '%s \u0561\u057C\u0561\u057B',
          s: '\u0574\u056B \u0584\u0561\u0576\u056B \u057E\u0561\u0575\u0580\u056F\u0575\u0561\u0576',
          m: '\u0580\u0578\u057A\u0565',
          mm: '%d \u0580\u0578\u057A\u0565',
          h: '\u056A\u0561\u0574',
          hh: '%d \u056A\u0561\u0574',
          d: '\u0585\u0580',
          dd: '%d \u0585\u0580',
          M: '\u0561\u0574\u056B\u057D',
          MM: '%d \u0561\u0574\u056B\u057D',
          y: '\u057F\u0561\u0580\u056B',
          yy: '%d \u057F\u0561\u0580\u056B'
        },
        meridiem: function (hour) {
          if (hour < 4) {
            return '\u0563\u056B\u0577\u0565\u0580\u057E\u0561';
          } else if (hour < 12) {
            return '\u0561\u057C\u0561\u057E\u0578\u057F\u057E\u0561';
          } else if (hour < 17) {
            return '\u0581\u0565\u0580\u0565\u056F\u057E\u0561';
          } else {
            return '\u0565\u0580\u0565\u056F\u0578\u0575\u0561\u0576';
          }
        },
        ordinal: function (number, period) {
          switch (period) {
          case 'DDD':
          case 'w':
          case 'W':
          case 'DDDo':
            if (number === 1) {
              return number + '-\u056B\u0576';
            }
            return number + '-\u0580\u0564';
          default:
            return number;
          }
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('id', {
        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
        weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
          LT: 'HH.mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY [pukul] LT',
          LLLL: 'dddd, D MMMM YYYY [pukul] LT'
        },
        meridiem: function (hours, minutes, isLower) {
          if (hours < 11) {
            return 'pagi';
          } else if (hours < 15) {
            return 'siang';
          } else if (hours < 19) {
            return 'sore';
          } else {
            return 'malam';
          }
        },
        calendar: {
          sameDay: '[Hari ini pukul] LT',
          nextDay: '[Besok pukul] LT',
          nextWeek: 'dddd [pukul] LT',
          lastDay: '[Kemarin pukul] LT',
          lastWeek: 'dddd [lalu pukul] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'dalam %s',
          past: '%s yang lalu',
          s: 'beberapa detik',
          m: 'semenit',
          mm: '%d menit',
          h: 'sejam',
          hh: '%d jam',
          d: 'sehari',
          dd: '%d hari',
          M: 'sebulan',
          MM: '%d bulan',
          y: 'setahun',
          yy: '%d tahun'
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      function plural(n) {
        if (n % 100 === 11) {
          return true;
        } else if (n % 10 === 1) {
          return false;
        }
        return true;
      }
      function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
        case 's':
          return withoutSuffix || isFuture ? 'nokkrar sek\xFAndur' : 'nokkrum sek\xFAndum';
        case 'm':
          return withoutSuffix ? 'm\xEDn\xFAta' : 'm\xEDn\xFAtu';
        case 'mm':
          if (plural(number)) {
            return result + (withoutSuffix || isFuture ? 'm\xEDn\xFAtur' : 'm\xEDn\xFAtum');
          } else if (withoutSuffix) {
            return result + 'm\xEDn\xFAta';
          }
          return result + 'm\xEDn\xFAtu';
        case 'hh':
          if (plural(number)) {
            return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
          }
          return result + 'klukkustund';
        case 'd':
          if (withoutSuffix) {
            return 'dagur';
          }
          return isFuture ? 'dag' : 'degi';
        case 'dd':
          if (plural(number)) {
            if (withoutSuffix) {
              return result + 'dagar';
            }
            return result + (isFuture ? 'daga' : 'd\xF6gum');
          } else if (withoutSuffix) {
            return result + 'dagur';
          }
          return result + (isFuture ? 'dag' : 'degi');
        case 'M':
          if (withoutSuffix) {
            return 'm\xE1nu\xF0ur';
          }
          return isFuture ? 'm\xE1nu\xF0' : 'm\xE1nu\xF0i';
        case 'MM':
          if (plural(number)) {
            if (withoutSuffix) {
              return result + 'm\xE1nu\xF0ir';
            }
            return result + (isFuture ? 'm\xE1nu\xF0i' : 'm\xE1nu\xF0um');
          } else if (withoutSuffix) {
            return result + 'm\xE1nu\xF0ur';
          }
          return result + (isFuture ? 'm\xE1nu\xF0' : 'm\xE1nu\xF0i');
        case 'y':
          return withoutSuffix || isFuture ? '\xE1r' : '\xE1ri';
        case 'yy':
          if (plural(number)) {
            return result + (withoutSuffix || isFuture ? '\xE1r' : '\xE1rum');
          }
          return result + (withoutSuffix || isFuture ? '\xE1r' : '\xE1ri');
        }
      }
      return moment.defineLocale('is', {
        months: 'jan\xFAar_febr\xFAar_mars_apr\xEDl_ma\xED_j\xFAn\xED_j\xFAl\xED_\xE1g\xFAst_september_okt\xF3ber_n\xF3vember_desember'.split('_'),
        monthsShort: 'jan_feb_mar_apr_ma\xED_j\xFAn_j\xFAl_\xE1g\xFA_sep_okt_n\xF3v_des'.split('_'),
        weekdays: 'sunnudagur_m\xE1nudagur_\xFEri\xF0judagur_mi\xF0vikudagur_fimmtudagur_f\xF6studagur_laugardagur'.split('_'),
        weekdaysShort: 'sun_m\xE1n_\xFEri_mi\xF0_fim_f\xF6s_lau'.split('_'),
        weekdaysMin: 'Su_M\xE1_\xDEr_Mi_Fi_F\xF6_La'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          L: 'DD/MM/YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY [kl.] LT',
          LLLL: 'dddd, D. MMMM YYYY [kl.] LT'
        },
        calendar: {
          sameDay: '[\xED dag kl.] LT',
          nextDay: '[\xE1 morgun kl.] LT',
          nextWeek: 'dddd [kl.] LT',
          lastDay: '[\xED g\xE6r kl.] LT',
          lastWeek: '[s\xED\xF0asta] dddd [kl.] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'eftir %s',
          past: 'fyrir %s s\xED\xF0an',
          s: translate,
          m: translate,
          mm: translate,
          h: 'klukkustund',
          hh: translate,
          d: translate,
          dd: translate,
          M: translate,
          MM: translate,
          y: translate,
          yy: translate
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('it', {
        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays: 'Domenica_Luned\xEC_Marted\xEC_Mercoled\xEC_Gioved\xEC_Venerd\xEC_Sabato'.split('_'),
        weekdaysShort: 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),
        weekdaysMin: 'D_L_Ma_Me_G_V_S'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[Oggi alle] LT',
          nextDay: '[Domani alle] LT',
          nextWeek: 'dddd [alle] LT',
          lastDay: '[Ieri alle] LT',
          lastWeek: '[lo scorso] dddd [alle] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: function (s) {
            return (/^[0-9].+$/.test(s) ? 'tra' : 'in') + ' ' + s;
          },
          past: '%s fa',
          s: 'alcuni secondi',
          m: 'un minuto',
          mm: '%d minuti',
          h: 'un\'ora',
          hh: '%d ore',
          d: 'un giorno',
          dd: '%d giorni',
          M: 'un mese',
          MM: '%d mesi',
          y: 'un anno',
          yy: '%d anni'
        },
        ordinal: '%d\xBA',
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('ja', {
        months: '1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708'.split('_'),
        monthsShort: '1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708'.split('_'),
        weekdays: '\u65E5\u66DC\u65E5_\u6708\u66DC\u65E5_\u706B\u66DC\u65E5_\u6C34\u66DC\u65E5_\u6728\u66DC\u65E5_\u91D1\u66DC\u65E5_\u571F\u66DC\u65E5'.split('_'),
        weekdaysShort: '\u65E5_\u6708_\u706B_\u6C34_\u6728_\u91D1_\u571F'.split('_'),
        weekdaysMin: '\u65E5_\u6708_\u706B_\u6C34_\u6728_\u91D1_\u571F'.split('_'),
        longDateFormat: {
          LT: 'Ah\u6642m\u5206',
          L: 'YYYY/MM/DD',
          LL: 'YYYY\u5E74M\u6708D\u65E5',
          LLL: 'YYYY\u5E74M\u6708D\u65E5LT',
          LLLL: 'YYYY\u5E74M\u6708D\u65E5LT dddd'
        },
        meridiem: function (hour, minute, isLower) {
          if (hour < 12) {
            return '\u5348\u524D';
          } else {
            return '\u5348\u5F8C';
          }
        },
        calendar: {
          sameDay: '[\u4ECA\u65E5] LT',
          nextDay: '[\u660E\u65E5] LT',
          nextWeek: '[\u6765\u9031]dddd LT',
          lastDay: '[\u6628\u65E5] LT',
          lastWeek: '[\u524D\u9031]dddd LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '%s\u5F8C',
          past: '%s\u524D',
          s: '\u6570\u79D2',
          m: '1\u5206',
          mm: '%d\u5206',
          h: '1\u6642\u9593',
          hh: '%d\u6642\u9593',
          d: '1\u65E5',
          dd: '%d\u65E5',
          M: '1\u30F6\u6708',
          MM: '%d\u30F6\u6708',
          y: '1\u5E74',
          yy: '%d\u5E74'
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      function monthsCaseReplace(m, format) {
        var months = {
            'nominative': '\u10D8\u10D0\u10DC\u10D5\u10D0\u10E0\u10D8_\u10D7\u10D4\u10D1\u10D4\u10E0\u10D5\u10D0\u10DA\u10D8_\u10DB\u10D0\u10E0\u10E2\u10D8_\u10D0\u10DE\u10E0\u10D8\u10DA\u10D8_\u10DB\u10D0\u10D8\u10E1\u10D8_\u10D8\u10D5\u10DC\u10D8\u10E1\u10D8_\u10D8\u10D5\u10DA\u10D8\u10E1\u10D8_\u10D0\u10D2\u10D5\u10D8\u10E1\u10E2\u10DD_\u10E1\u10D4\u10E5\u10E2\u10D4\u10DB\u10D1\u10D4\u10E0\u10D8_\u10DD\u10E5\u10E2\u10DD\u10DB\u10D1\u10D4\u10E0\u10D8_\u10DC\u10DD\u10D4\u10DB\u10D1\u10D4\u10E0\u10D8_\u10D3\u10D4\u10D9\u10D4\u10DB\u10D1\u10D4\u10E0\u10D8'.split('_'),
            'accusative': '\u10D8\u10D0\u10DC\u10D5\u10D0\u10E0\u10E1_\u10D7\u10D4\u10D1\u10D4\u10E0\u10D5\u10D0\u10DA\u10E1_\u10DB\u10D0\u10E0\u10E2\u10E1_\u10D0\u10DE\u10E0\u10D8\u10DA\u10D8\u10E1_\u10DB\u10D0\u10D8\u10E1\u10E1_\u10D8\u10D5\u10DC\u10D8\u10E1\u10E1_\u10D8\u10D5\u10DA\u10D8\u10E1\u10E1_\u10D0\u10D2\u10D5\u10D8\u10E1\u10E2\u10E1_\u10E1\u10D4\u10E5\u10E2\u10D4\u10DB\u10D1\u10D4\u10E0\u10E1_\u10DD\u10E5\u10E2\u10DD\u10DB\u10D1\u10D4\u10E0\u10E1_\u10DC\u10DD\u10D4\u10DB\u10D1\u10D4\u10E0\u10E1_\u10D3\u10D4\u10D9\u10D4\u10DB\u10D1\u10D4\u10E0\u10E1'.split('_')
          }, nounCase = /D[oD] *MMMM?/.test(format) ? 'accusative' : 'nominative';
        return months[nounCase][m.month()];
      }
      function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': '\u10D9\u10D5\u10D8\u10E0\u10D0_\u10DD\u10E0\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8_\u10E1\u10D0\u10DB\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8_\u10DD\u10D7\u10EE\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8_\u10EE\u10E3\u10D7\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8_\u10DE\u10D0\u10E0\u10D0\u10E1\u10D9\u10D4\u10D5\u10D8_\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8'.split('_'),
            'accusative': '\u10D9\u10D5\u10D8\u10E0\u10D0\u10E1_\u10DD\u10E0\u10E8\u10D0\u10D1\u10D0\u10D7\u10E1_\u10E1\u10D0\u10DB\u10E8\u10D0\u10D1\u10D0\u10D7\u10E1_\u10DD\u10D7\u10EE\u10E8\u10D0\u10D1\u10D0\u10D7\u10E1_\u10EE\u10E3\u10D7\u10E8\u10D0\u10D1\u10D0\u10D7\u10E1_\u10DE\u10D0\u10E0\u10D0\u10E1\u10D9\u10D4\u10D5\u10E1_\u10E8\u10D0\u10D1\u10D0\u10D7\u10E1'.split('_')
          }, nounCase = /(წინა|შემდეგ)/.test(format) ? 'accusative' : 'nominative';
        return weekdays[nounCase][m.day()];
      }
      return moment.defineLocale('ka', {
        months: monthsCaseReplace,
        monthsShort: '\u10D8\u10D0\u10DC_\u10D7\u10D4\u10D1_\u10DB\u10D0\u10E0_\u10D0\u10DE\u10E0_\u10DB\u10D0\u10D8_\u10D8\u10D5\u10DC_\u10D8\u10D5\u10DA_\u10D0\u10D2\u10D5_\u10E1\u10D4\u10E5_\u10DD\u10E5\u10E2_\u10DC\u10DD\u10D4_\u10D3\u10D4\u10D9'.split('_'),
        weekdays: weekdaysCaseReplace,
        weekdaysShort: '\u10D9\u10D5\u10D8_\u10DD\u10E0\u10E8_\u10E1\u10D0\u10DB_\u10DD\u10D7\u10EE_\u10EE\u10E3\u10D7_\u10DE\u10D0\u10E0_\u10E8\u10D0\u10D1'.split('_'),
        weekdaysMin: '\u10D9\u10D5_\u10DD\u10E0_\u10E1\u10D0_\u10DD\u10D7_\u10EE\u10E3_\u10DE\u10D0_\u10E8\u10D0'.split('_'),
        longDateFormat: {
          LT: 'h:mm A',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[\u10D3\u10E6\u10D4\u10E1] LT[-\u10D6\u10D4]',
          nextDay: '[\u10EE\u10D5\u10D0\u10DA] LT[-\u10D6\u10D4]',
          lastDay: '[\u10D2\u10E3\u10E8\u10D8\u10DC] LT[-\u10D6\u10D4]',
          nextWeek: '[\u10E8\u10D4\u10DB\u10D3\u10D4\u10D2] dddd LT[-\u10D6\u10D4]',
          lastWeek: '[\u10EC\u10D8\u10DC\u10D0] dddd LT-\u10D6\u10D4',
          sameElse: 'L'
        },
        relativeTime: {
          future: function (s) {
            return /(წამი|წუთი|საათი|წელი)/.test(s) ? s.replace(/ი$/, '\u10E8\u10D8') : s + '\u10E8\u10D8';
          },
          past: function (s) {
            if (/(წამი|წუთი|საათი|დღე|თვე)/.test(s)) {
              return s.replace(/(ი|ე)$/, '\u10D8\u10E1 \u10EC\u10D8\u10DC');
            }
            if (/წელი/.test(s)) {
              return s.replace(/წელი$/, '\u10EC\u10DA\u10D8\u10E1 \u10EC\u10D8\u10DC');
            }
          },
          s: '\u10E0\u10D0\u10DB\u10D3\u10D4\u10DC\u10D8\u10DB\u10D4 \u10EC\u10D0\u10DB\u10D8',
          m: '\u10EC\u10E3\u10D7\u10D8',
          mm: '%d \u10EC\u10E3\u10D7\u10D8',
          h: '\u10E1\u10D0\u10D0\u10D7\u10D8',
          hh: '%d \u10E1\u10D0\u10D0\u10D7\u10D8',
          d: '\u10D3\u10E6\u10D4',
          dd: '%d \u10D3\u10E6\u10D4',
          M: '\u10D7\u10D5\u10D4',
          MM: '%d \u10D7\u10D5\u10D4',
          y: '\u10EC\u10D4\u10DA\u10D8',
          yy: '%d \u10EC\u10D4\u10DA\u10D8'
        },
        ordinal: function (number) {
          if (number === 0) {
            return number;
          }
          if (number === 1) {
            return number + '-\u10DA\u10D8';
          }
          if (number < 20 || number <= 100 && number % 20 === 0 || number % 100 === 0) {
            return '\u10DB\u10D4-' + number;
          }
          return number + '-\u10D4';
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('km', {
        months: '\u1798\u1780\u179A\u17B6_\u1780\u17BB\u1798\u17D2\u1797\u17C8_\u1798\u17B7\u1793\u17B6_\u1798\u17C1\u179F\u17B6_\u17A7\u179F\u1797\u17B6_\u1798\u17B7\u1790\u17BB\u1793\u17B6_\u1780\u1780\u17D2\u1780\u178A\u17B6_\u179F\u17B8\u17A0\u17B6_\u1780\u1789\u17D2\u1789\u17B6_\u178F\u17BB\u179B\u17B6_\u179C\u17B7\u1785\u17D2\u1786\u17B7\u1780\u17B6_\u1792\u17D2\u1793\u17BC'.split('_'),
        monthsShort: '\u1798\u1780\u179A\u17B6_\u1780\u17BB\u1798\u17D2\u1797\u17C8_\u1798\u17B7\u1793\u17B6_\u1798\u17C1\u179F\u17B6_\u17A7\u179F\u1797\u17B6_\u1798\u17B7\u1790\u17BB\u1793\u17B6_\u1780\u1780\u17D2\u1780\u178A\u17B6_\u179F\u17B8\u17A0\u17B6_\u1780\u1789\u17D2\u1789\u17B6_\u178F\u17BB\u179B\u17B6_\u179C\u17B7\u1785\u17D2\u1786\u17B7\u1780\u17B6_\u1792\u17D2\u1793\u17BC'.split('_'),
        weekdays: '\u17A2\u17B6\u1791\u17B7\u178F\u17D2\u1799_\u1785\u17D0\u1793\u17D2\u1791_\u17A2\u1784\u17D2\u1782\u17B6\u179A_\u1796\u17BB\u1792_\u1796\u17D2\u179A\u17A0\u179F\u17D2\u1794\u178F\u17B7\u17CD_\u179F\u17BB\u1780\u17D2\u179A_\u179F\u17C5\u179A\u17CD'.split('_'),
        weekdaysShort: '\u17A2\u17B6\u1791\u17B7\u178F\u17D2\u1799_\u1785\u17D0\u1793\u17D2\u1791_\u17A2\u1784\u17D2\u1782\u17B6\u179A_\u1796\u17BB\u1792_\u1796\u17D2\u179A\u17A0\u179F\u17D2\u1794\u178F\u17B7\u17CD_\u179F\u17BB\u1780\u17D2\u179A_\u179F\u17C5\u179A\u17CD'.split('_'),
        weekdaysMin: '\u17A2\u17B6\u1791\u17B7\u178F\u17D2\u1799_\u1785\u17D0\u1793\u17D2\u1791_\u17A2\u1784\u17D2\u1782\u17B6\u179A_\u1796\u17BB\u1792_\u1796\u17D2\u179A\u17A0\u179F\u17D2\u1794\u178F\u17B7\u17CD_\u179F\u17BB\u1780\u17D2\u179A_\u179F\u17C5\u179A\u17CD'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[\u1790\u17D2\u1784\u17C3\u1793\u17C8 \u1798\u17C9\u17C4\u1784] LT',
          nextDay: '[\u179F\u17D2\u17A2\u17C2\u1780 \u1798\u17C9\u17C4\u1784] LT',
          nextWeek: 'dddd [\u1798\u17C9\u17C4\u1784] LT',
          lastDay: '[\u1798\u17D2\u179F\u17B7\u179B\u1798\u17B7\u1789 \u1798\u17C9\u17C4\u1784] LT',
          lastWeek: 'dddd [\u179F\u1794\u17D2\u178F\u17B6\u17A0\u17CD\u1798\u17BB\u1793] [\u1798\u17C9\u17C4\u1784] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '%s\u1791\u17C0\u178F',
          past: '%s\u1798\u17BB\u1793',
          s: '\u1794\u17C9\u17BB\u1793\u17D2\u1798\u17B6\u1793\u179C\u17B7\u1793\u17B6\u1791\u17B8',
          m: '\u1798\u17BD\u1799\u1793\u17B6\u1791\u17B8',
          mm: '%d \u1793\u17B6\u1791\u17B8',
          h: '\u1798\u17BD\u1799\u1798\u17C9\u17C4\u1784',
          hh: '%d \u1798\u17C9\u17C4\u1784',
          d: '\u1798\u17BD\u1799\u1790\u17D2\u1784\u17C3',
          dd: '%d \u1790\u17D2\u1784\u17C3',
          M: '\u1798\u17BD\u1799\u1781\u17C2',
          MM: '%d \u1781\u17C2',
          y: '\u1798\u17BD\u1799\u1786\u17D2\u1793\u17B6\u17C6',
          yy: '%d \u1786\u17D2\u1793\u17B6\u17C6'
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('ko', {
        months: '1\uC6D4_2\uC6D4_3\uC6D4_4\uC6D4_5\uC6D4_6\uC6D4_7\uC6D4_8\uC6D4_9\uC6D4_10\uC6D4_11\uC6D4_12\uC6D4'.split('_'),
        monthsShort: '1\uC6D4_2\uC6D4_3\uC6D4_4\uC6D4_5\uC6D4_6\uC6D4_7\uC6D4_8\uC6D4_9\uC6D4_10\uC6D4_11\uC6D4_12\uC6D4'.split('_'),
        weekdays: '\uC77C\uC694\uC77C_\uC6D4\uC694\uC77C_\uD654\uC694\uC77C_\uC218\uC694\uC77C_\uBAA9\uC694\uC77C_\uAE08\uC694\uC77C_\uD1A0\uC694\uC77C'.split('_'),
        weekdaysShort: '\uC77C_\uC6D4_\uD654_\uC218_\uBAA9_\uAE08_\uD1A0'.split('_'),
        weekdaysMin: '\uC77C_\uC6D4_\uD654_\uC218_\uBAA9_\uAE08_\uD1A0'.split('_'),
        longDateFormat: {
          LT: 'A h\uC2DC m\uBD84',
          L: 'YYYY.MM.DD',
          LL: 'YYYY\uB144 MMMM D\uC77C',
          LLL: 'YYYY\uB144 MMMM D\uC77C LT',
          LLLL: 'YYYY\uB144 MMMM D\uC77C dddd LT'
        },
        meridiem: function (hour, minute, isUpper) {
          return hour < 12 ? '\uC624\uC804' : '\uC624\uD6C4';
        },
        calendar: {
          sameDay: '\uC624\uB298 LT',
          nextDay: '\uB0B4\uC77C LT',
          nextWeek: 'dddd LT',
          lastDay: '\uC5B4\uC81C LT',
          lastWeek: '\uC9C0\uB09C\uC8FC dddd LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '%s \uD6C4',
          past: '%s \uC804',
          s: '\uBA87\uCD08',
          ss: '%d\uCD08',
          m: '\uC77C\uBD84',
          mm: '%d\uBD84',
          h: '\uD55C\uC2DC\uAC04',
          hh: '%d\uC2DC\uAC04',
          d: '\uD558\uB8E8',
          dd: '%d\uC77C',
          M: '\uD55C\uB2EC',
          MM: '%d\uB2EC',
          y: '\uC77C\uB144',
          yy: '%d\uB144'
        },
        ordinal: '%d\uC77C',
        meridiemParse: /(오전|오후)/,
        isPM: function (token) {
          return token === '\uC624\uD6C4';
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': [
              'eng Minutt',
              'enger Minutt'
            ],
            'h': [
              'eng Stonn',
              'enger Stonn'
            ],
            'd': [
              'een Dag',
              'engem Dag'
            ],
            'M': [
              'ee Mount',
              'engem Mount'
            ],
            'y': [
              'ee Joer',
              'engem Joer'
            ]
          };
        return withoutSuffix ? format[key][0] : format[key][1];
      }
      function processFutureTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
          return 'a ' + string;
        }
        return 'an ' + string;
      }
      function processPastTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
          return 'viru ' + string;
        }
        return 'virun ' + string;
      }
      function eifelerRegelAppliesToNumber(number) {
        number = parseInt(number, 10);
        if (isNaN(number)) {
          return false;
        }
        if (number < 0) {
          return true;
        } else if (number < 10) {
          if (4 <= number && number <= 7) {
            return true;
          }
          return false;
        } else if (number < 100) {
          var lastDigit = number % 10, firstDigit = number / 10;
          if (lastDigit === 0) {
            return eifelerRegelAppliesToNumber(firstDigit);
          }
          return eifelerRegelAppliesToNumber(lastDigit);
        } else if (number < 10000) {
          while (number >= 10) {
            number = number / 10;
          }
          return eifelerRegelAppliesToNumber(number);
        } else {
          number = number / 1000;
          return eifelerRegelAppliesToNumber(number);
        }
      }
      return moment.defineLocale('lb', {
        months: 'Januar_Februar_M\xE4erz_Abr\xEBll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
        weekdays: 'Sonndeg_M\xE9indeg_D\xEBnschdeg_M\xEBttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
        weekdaysShort: 'So._M\xE9._D\xEB._M\xEB._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_M\xE9_D\xEB_M\xEB_Do_Fr_Sa'.split('_'),
        longDateFormat: {
          LT: 'H:mm [Auer]',
          L: 'DD.MM.YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd, D. MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[Haut um] LT',
          sameElse: 'L',
          nextDay: '[Muer um] LT',
          nextWeek: 'dddd [um] LT',
          lastDay: '[G\xEBschter um] LT',
          lastWeek: function () {
            switch (this.day()) {
            case 2:
            case 4:
              return '[Leschten] dddd [um] LT';
            default:
              return '[Leschte] dddd [um] LT';
            }
          }
        },
        relativeTime: {
          future: processFutureTime,
          past: processPastTime,
          s: 'e puer Sekonnen',
          m: processRelativeTime,
          mm: '%d Minutten',
          h: processRelativeTime,
          hh: '%d Stonnen',
          d: processRelativeTime,
          dd: '%d Deeg',
          M: processRelativeTime,
          MM: '%d M\xE9int',
          y: processRelativeTime,
          yy: '%d Joer'
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var units = {
          'm': 'minut\u0117_minut\u0117s_minut\u0119',
          'mm': 'minut\u0117s_minu\u010Di\u0173_minutes',
          'h': 'valanda_valandos_valand\u0105',
          'hh': 'valandos_valand\u0173_valandas',
          'd': 'diena_dienos_dien\u0105',
          'dd': 'dienos_dien\u0173_dienas',
          'M': 'm\u0117nuo_m\u0117nesio_m\u0117nes\u012F',
          'MM': 'm\u0117nesiai_m\u0117nesi\u0173_m\u0117nesius',
          'y': 'metai_met\u0173_metus',
          'yy': 'metai_met\u0173_metus'
        }, weekDays = 'sekmadienis_pirmadienis_antradienis_tre\u010Diadienis_ketvirtadienis_penktadienis_\u0161e\u0161tadienis'.split('_');
      function translateSeconds(number, withoutSuffix, key, isFuture) {
        if (withoutSuffix) {
          return 'kelios sekund\u0117s';
        } else {
          return isFuture ? 'keli\u0173 sekund\u017Ei\u0173' : 'kelias sekundes';
        }
      }
      function translateSingular(number, withoutSuffix, key, isFuture) {
        return withoutSuffix ? forms(key)[0] : isFuture ? forms(key)[1] : forms(key)[2];
      }
      function special(number) {
        return number % 10 === 0 || number > 10 && number < 20;
      }
      function forms(key) {
        return units[key].split('_');
      }
      function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        if (number === 1) {
          return result + translateSingular(number, withoutSuffix, key[0], isFuture);
        } else if (withoutSuffix) {
          return result + (special(number) ? forms(key)[1] : forms(key)[0]);
        } else {
          if (isFuture) {
            return result + forms(key)[1];
          } else {
            return result + (special(number) ? forms(key)[1] : forms(key)[2]);
          }
        }
      }
      function relativeWeekDay(moment, format) {
        var nominative = format.indexOf('dddd HH:mm') === -1, weekDay = weekDays[moment.day()];
        return nominative ? weekDay : weekDay.substring(0, weekDay.length - 2) + '\u012F';
      }
      return moment.defineLocale('lt', {
        months: 'sausio_vasario_kovo_baland\u017Eio_gegu\u017E\u0117s_bir\u017Eelio_liepos_rugpj\u016B\u010Dio_rugs\u0117jo_spalio_lapkri\u010Dio_gruod\u017Eio'.split('_'),
        monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
        weekdays: relativeWeekDay,
        weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_\u0160e\u0161'.split('_'),
        weekdaysMin: 'S_P_A_T_K_Pn_\u0160'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'YYYY-MM-DD',
          LL: 'YYYY [m.] MMMM D [d.]',
          LLL: 'YYYY [m.] MMMM D [d.], LT [val.]',
          LLLL: 'YYYY [m.] MMMM D [d.], dddd, LT [val.]',
          l: 'YYYY-MM-DD',
          ll: 'YYYY [m.] MMMM D [d.]',
          lll: 'YYYY [m.] MMMM D [d.], LT [val.]',
          llll: 'YYYY [m.] MMMM D [d.], ddd, LT [val.]'
        },
        calendar: {
          sameDay: '[\u0160iandien] LT',
          nextDay: '[Rytoj] LT',
          nextWeek: 'dddd LT',
          lastDay: '[Vakar] LT',
          lastWeek: '[Pra\u0117jus\u012F] dddd LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'po %s',
          past: 'prie\u0161 %s',
          s: translateSeconds,
          m: translateSingular,
          mm: translate,
          h: translateSingular,
          hh: translate,
          d: translateSingular,
          dd: translate,
          M: translateSingular,
          MM: translate,
          y: translateSingular,
          yy: translate
        },
        ordinal: function (number) {
          return number + '-oji';
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var units = {
          'mm': 'min\u016Bti_min\u016Btes_min\u016Bte_min\u016Btes',
          'hh': 'stundu_stundas_stunda_stundas',
          'dd': 'dienu_dienas_diena_dienas',
          'MM': 'm\u0113nesi_m\u0113ne\u0161us_m\u0113nesis_m\u0113ne\u0161i',
          'yy': 'gadu_gadus_gads_gadi'
        };
      function format(word, number, withoutSuffix) {
        var forms = word.split('_');
        if (withoutSuffix) {
          return number % 10 === 1 && number !== 11 ? forms[2] : forms[3];
        } else {
          return number % 10 === 1 && number !== 11 ? forms[0] : forms[1];
        }
      }
      function relativeTimeWithPlural(number, withoutSuffix, key) {
        return number + ' ' + format(units[key], number, withoutSuffix);
      }
      return moment.defineLocale('lv', {
        months: 'janv\u0101ris_febru\u0101ris_marts_apr\u012Blis_maijs_j\u016Bnijs_j\u016Blijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
        monthsShort: 'jan_feb_mar_apr_mai_j\u016Bn_j\u016Bl_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'sv\u0113tdiena_pirmdiena_otrdiena_tre\u0161diena_ceturtdiena_piektdiena_sestdiena'.split('_'),
        weekdaysShort: 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysMin: 'Sv_P_O_T_C_Pk_S'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD.MM.YYYY',
          LL: 'YYYY. [gada] D. MMMM',
          LLL: 'YYYY. [gada] D. MMMM, LT',
          LLLL: 'YYYY. [gada] D. MMMM, dddd, LT'
        },
        calendar: {
          sameDay: '[\u0160odien pulksten] LT',
          nextDay: '[R\u012Bt pulksten] LT',
          nextWeek: 'dddd [pulksten] LT',
          lastDay: '[Vakar pulksten] LT',
          lastWeek: '[Pag\u0101ju\u0161\u0101] dddd [pulksten] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '%s v\u0113l\u0101k',
          past: '%s agr\u0101k',
          s: 'da\u017Eas sekundes',
          m: 'min\u016Bti',
          mm: relativeTimeWithPlural,
          h: 'stundu',
          hh: relativeTimeWithPlural,
          d: 'dienu',
          dd: relativeTimeWithPlural,
          M: 'm\u0113nesi',
          MM: relativeTimeWithPlural,
          y: 'gadu',
          yy: relativeTimeWithPlural
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('mk', {
        months: '\u0458\u0430\u043D\u0443\u0430\u0440\u0438_\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438_\u043C\u0430\u0440\u0442_\u0430\u043F\u0440\u0438\u043B_\u043C\u0430\u0458_\u0458\u0443\u043D\u0438_\u0458\u0443\u043B\u0438_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043F\u0442\u0435\u043C\u0432\u0440\u0438_\u043E\u043A\u0442\u043E\u043C\u0432\u0440\u0438_\u043D\u043E\u0435\u043C\u0432\u0440\u0438_\u0434\u0435\u043A\u0435\u043C\u0432\u0440\u0438'.split('_'),
        monthsShort: '\u0458\u0430\u043D_\u0444\u0435\u0432_\u043C\u0430\u0440_\u0430\u043F\u0440_\u043C\u0430\u0458_\u0458\u0443\u043D_\u0458\u0443\u043B_\u0430\u0432\u0433_\u0441\u0435\u043F_\u043E\u043A\u0442_\u043D\u043E\u0435_\u0434\u0435\u043A'.split('_'),
        weekdays: '\u043D\u0435\u0434\u0435\u043B\u0430_\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u043D\u0438\u043A_\u0432\u0442\u043E\u0440\u043D\u0438\u043A_\u0441\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0440\u0442\u043E\u043A_\u043F\u0435\u0442\u043E\u043A_\u0441\u0430\u0431\u043E\u0442\u0430'.split('_'),
        weekdaysShort: '\u043D\u0435\u0434_\u043F\u043E\u043D_\u0432\u0442\u043E_\u0441\u0440\u0435_\u0447\u0435\u0442_\u043F\u0435\u0442_\u0441\u0430\u0431'.split('_'),
        weekdaysMin: '\u043De_\u043Fo_\u0432\u0442_\u0441\u0440_\u0447\u0435_\u043F\u0435_\u0441a'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          L: 'D.MM.YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[\u0414\u0435\u043D\u0435\u0441 \u0432\u043E] LT',
          nextDay: '[\u0423\u0442\u0440\u0435 \u0432\u043E] LT',
          nextWeek: 'dddd [\u0432\u043E] LT',
          lastDay: '[\u0412\u0447\u0435\u0440\u0430 \u0432\u043E] LT',
          lastWeek: function () {
            switch (this.day()) {
            case 0:
            case 3:
            case 6:
              return '[\u0412\u043E \u0438\u0437\u043C\u0438\u043D\u0430\u0442\u0430\u0442\u0430] dddd [\u0432\u043E] LT';
            case 1:
            case 2:
            case 4:
            case 5:
              return '[\u0412\u043E \u0438\u0437\u043C\u0438\u043D\u0430\u0442\u0438\u043E\u0442] dddd [\u0432\u043E] LT';
            }
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: '\u043F\u043E\u0441\u043B\u0435 %s',
          past: '\u043F\u0440\u0435\u0434 %s',
          s: '\u043D\u0435\u043A\u043E\u043B\u043A\u0443 \u0441\u0435\u043A\u0443\u043D\u0434\u0438',
          m: '\u043C\u0438\u043D\u0443\u0442\u0430',
          mm: '%d \u043C\u0438\u043D\u0443\u0442\u0438',
          h: '\u0447\u0430\u0441',
          hh: '%d \u0447\u0430\u0441\u0430',
          d: '\u0434\u0435\u043D',
          dd: '%d \u0434\u0435\u043D\u0430',
          M: '\u043C\u0435\u0441\u0435\u0446',
          MM: '%d \u043C\u0435\u0441\u0435\u0446\u0438',
          y: '\u0433\u043E\u0434\u0438\u043D\u0430',
          yy: '%d \u0433\u043E\u0434\u0438\u043D\u0438'
        },
        ordinal: function (number) {
          var lastDigit = number % 10, last2Digits = number % 100;
          if (number === 0) {
            return number + '-\u0435\u0432';
          } else if (last2Digits === 0) {
            return number + '-\u0435\u043D';
          } else if (last2Digits > 10 && last2Digits < 20) {
            return number + '-\u0442\u0438';
          } else if (lastDigit === 1) {
            return number + '-\u0432\u0438';
          } else if (lastDigit === 2) {
            return number + '-\u0440\u0438';
          } else if (lastDigit === 7 || lastDigit === 8) {
            return number + '-\u043C\u0438';
          } else {
            return number + '-\u0442\u0438';
          }
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('ml', {
        months: '\u0D1C\u0D28\u0D41\u0D35\u0D30\u0D3F_\u0D2B\u0D46\u0D2C\u0D4D\u0D30\u0D41\u0D35\u0D30\u0D3F_\u0D2E\u0D3E\u0D7C\u0D1A\u0D4D\u0D1A\u0D4D_\u0D0F\u0D2A\u0D4D\u0D30\u0D3F\u0D7D_\u0D2E\u0D47\u0D2F\u0D4D_\u0D1C\u0D42\u0D7A_\u0D1C\u0D42\u0D32\u0D48_\u0D13\u0D17\u0D38\u0D4D\u0D31\u0D4D\u0D31\u0D4D_\u0D38\u0D46\u0D2A\u0D4D\u0D31\u0D4D\u0D31\u0D02\u0D2C\u0D7C_\u0D12\u0D15\u0D4D\u0D1F\u0D4B\u0D2C\u0D7C_\u0D28\u0D35\u0D02\u0D2C\u0D7C_\u0D21\u0D3F\u0D38\u0D02\u0D2C\u0D7C'.split('_'),
        monthsShort: '\u0D1C\u0D28\u0D41._\u0D2B\u0D46\u0D2C\u0D4D\u0D30\u0D41._\u0D2E\u0D3E\u0D7C._\u0D0F\u0D2A\u0D4D\u0D30\u0D3F._\u0D2E\u0D47\u0D2F\u0D4D_\u0D1C\u0D42\u0D7A_\u0D1C\u0D42\u0D32\u0D48._\u0D13\u0D17._\u0D38\u0D46\u0D2A\u0D4D\u0D31\u0D4D\u0D31._\u0D12\u0D15\u0D4D\u0D1F\u0D4B._\u0D28\u0D35\u0D02._\u0D21\u0D3F\u0D38\u0D02.'.split('_'),
        weekdays: '\u0D1E\u0D3E\u0D2F\u0D31\u0D3E\u0D34\u0D4D\u0D1A_\u0D24\u0D3F\u0D19\u0D4D\u0D15\u0D33\u0D3E\u0D34\u0D4D\u0D1A_\u0D1A\u0D4A\u0D35\u0D4D\u0D35\u0D3E\u0D34\u0D4D\u0D1A_\u0D2C\u0D41\u0D27\u0D28\u0D3E\u0D34\u0D4D\u0D1A_\u0D35\u0D4D\u0D2F\u0D3E\u0D34\u0D3E\u0D34\u0D4D\u0D1A_\u0D35\u0D46\u0D33\u0D4D\u0D33\u0D3F\u0D2F\u0D3E\u0D34\u0D4D\u0D1A_\u0D36\u0D28\u0D3F\u0D2F\u0D3E\u0D34\u0D4D\u0D1A'.split('_'),
        weekdaysShort: '\u0D1E\u0D3E\u0D2F\u0D7C_\u0D24\u0D3F\u0D19\u0D4D\u0D15\u0D7E_\u0D1A\u0D4A\u0D35\u0D4D\u0D35_\u0D2C\u0D41\u0D27\u0D7B_\u0D35\u0D4D\u0D2F\u0D3E\u0D34\u0D02_\u0D35\u0D46\u0D33\u0D4D\u0D33\u0D3F_\u0D36\u0D28\u0D3F'.split('_'),
        weekdaysMin: '\u0D1E\u0D3E_\u0D24\u0D3F_\u0D1A\u0D4A_\u0D2C\u0D41_\u0D35\u0D4D\u0D2F\u0D3E_\u0D35\u0D46_\u0D36'.split('_'),
        longDateFormat: {
          LT: 'A h:mm -\u0D28\u0D41',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY, LT',
          LLLL: 'dddd, D MMMM YYYY, LT'
        },
        calendar: {
          sameDay: '[\u0D07\u0D28\u0D4D\u0D28\u0D4D] LT',
          nextDay: '[\u0D28\u0D3E\u0D33\u0D46] LT',
          nextWeek: 'dddd, LT',
          lastDay: '[\u0D07\u0D28\u0D4D\u0D28\u0D32\u0D46] LT',
          lastWeek: '[\u0D15\u0D34\u0D3F\u0D1E\u0D4D\u0D1E] dddd, LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '%s \u0D15\u0D34\u0D3F\u0D1E\u0D4D\u0D1E\u0D4D',
          past: '%s \u0D2E\u0D41\u0D7B\u0D2A\u0D4D',
          s: '\u0D05\u0D7D\u0D2A \u0D28\u0D3F\u0D2E\u0D3F\u0D37\u0D19\u0D4D\u0D19\u0D7E',
          m: '\u0D12\u0D30\u0D41 \u0D2E\u0D3F\u0D28\u0D3F\u0D31\u0D4D\u0D31\u0D4D',
          mm: '%d \u0D2E\u0D3F\u0D28\u0D3F\u0D31\u0D4D\u0D31\u0D4D',
          h: '\u0D12\u0D30\u0D41 \u0D2E\u0D23\u0D3F\u0D15\u0D4D\u0D15\u0D42\u0D7C',
          hh: '%d \u0D2E\u0D23\u0D3F\u0D15\u0D4D\u0D15\u0D42\u0D7C',
          d: '\u0D12\u0D30\u0D41 \u0D26\u0D3F\u0D35\u0D38\u0D02',
          dd: '%d \u0D26\u0D3F\u0D35\u0D38\u0D02',
          M: '\u0D12\u0D30\u0D41 \u0D2E\u0D3E\u0D38\u0D02',
          MM: '%d \u0D2E\u0D3E\u0D38\u0D02',
          y: '\u0D12\u0D30\u0D41 \u0D35\u0D7C\u0D37\u0D02',
          yy: '%d \u0D35\u0D7C\u0D37\u0D02'
        },
        meridiem: function (hour, minute, isLower) {
          if (hour < 4) {
            return '\u0D30\u0D3E\u0D24\u0D4D\u0D30\u0D3F';
          } else if (hour < 12) {
            return '\u0D30\u0D3E\u0D35\u0D3F\u0D32\u0D46';
          } else if (hour < 17) {
            return '\u0D09\u0D1A\u0D4D\u0D1A \u0D15\u0D34\u0D3F\u0D1E\u0D4D\u0D1E\u0D4D';
          } else if (hour < 20) {
            return '\u0D35\u0D48\u0D15\u0D41\u0D28\u0D4D\u0D28\u0D47\u0D30\u0D02';
          } else {
            return '\u0D30\u0D3E\u0D24\u0D4D\u0D30\u0D3F';
          }
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var symbolMap = {
          '1': '\u0967',
          '2': '\u0968',
          '3': '\u0969',
          '4': '\u096A',
          '5': '\u096B',
          '6': '\u096C',
          '7': '\u096D',
          '8': '\u096E',
          '9': '\u096F',
          '0': '\u0966'
        }, numberMap = {
          '\u0967': '1',
          '\u0968': '2',
          '\u0969': '3',
          '\u096A': '4',
          '\u096B': '5',
          '\u096C': '6',
          '\u096D': '7',
          '\u096E': '8',
          '\u096F': '9',
          '\u0966': '0'
        };
      return moment.defineLocale('mr', {
        months: '\u091C\u093E\u0928\u0947\u0935\u093E\u0930\u0940_\u092B\u0947\u092C\u094D\u0930\u0941\u0935\u093E\u0930\u0940_\u092E\u093E\u0930\u094D\u091A_\u090F\u092A\u094D\u0930\u093F\u0932_\u092E\u0947_\u091C\u0942\u0928_\u091C\u0941\u0932\u0948_\u0911\u0917\u0938\u094D\u091F_\u0938\u092A\u094D\u091F\u0947\u0902\u092C\u0930_\u0911\u0915\u094D\u091F\u094B\u092C\u0930_\u0928\u094B\u0935\u094D\u0939\u0947\u0902\u092C\u0930_\u0921\u093F\u0938\u0947\u0902\u092C\u0930'.split('_'),
        monthsShort: '\u091C\u093E\u0928\u0947._\u092B\u0947\u092C\u094D\u0930\u0941._\u092E\u093E\u0930\u094D\u091A._\u090F\u092A\u094D\u0930\u093F._\u092E\u0947._\u091C\u0942\u0928._\u091C\u0941\u0932\u0948._\u0911\u0917._\u0938\u092A\u094D\u091F\u0947\u0902._\u0911\u0915\u094D\u091F\u094B._\u0928\u094B\u0935\u094D\u0939\u0947\u0902._\u0921\u093F\u0938\u0947\u0902.'.split('_'),
        weekdays: '\u0930\u0935\u093F\u0935\u093E\u0930_\u0938\u094B\u092E\u0935\u093E\u0930_\u092E\u0902\u0917\u0933\u0935\u093E\u0930_\u092C\u0941\u0927\u0935\u093E\u0930_\u0917\u0941\u0930\u0942\u0935\u093E\u0930_\u0936\u0941\u0915\u094D\u0930\u0935\u093E\u0930_\u0936\u0928\u093F\u0935\u093E\u0930'.split('_'),
        weekdaysShort: '\u0930\u0935\u093F_\u0938\u094B\u092E_\u092E\u0902\u0917\u0933_\u092C\u0941\u0927_\u0917\u0941\u0930\u0942_\u0936\u0941\u0915\u094D\u0930_\u0936\u0928\u093F'.split('_'),
        weekdaysMin: '\u0930_\u0938\u094B_\u092E\u0902_\u092C\u0941_\u0917\u0941_\u0936\u0941_\u0936'.split('_'),
        longDateFormat: {
          LT: 'A h:mm \u0935\u093E\u091C\u0924\u093E',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY, LT',
          LLLL: 'dddd, D MMMM YYYY, LT'
        },
        calendar: {
          sameDay: '[\u0906\u091C] LT',
          nextDay: '[\u0909\u0926\u094D\u092F\u093E] LT',
          nextWeek: 'dddd, LT',
          lastDay: '[\u0915\u093E\u0932] LT',
          lastWeek: '[\u092E\u093E\u0917\u0940\u0932] dddd, LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '%s \u0928\u0902\u0924\u0930',
          past: '%s \u092A\u0942\u0930\u094D\u0935\u0940',
          s: '\u0938\u0947\u0915\u0902\u0926',
          m: '\u090F\u0915 \u092E\u093F\u0928\u093F\u091F',
          mm: '%d \u092E\u093F\u0928\u093F\u091F\u0947',
          h: '\u090F\u0915 \u0924\u093E\u0938',
          hh: '%d \u0924\u093E\u0938',
          d: '\u090F\u0915 \u0926\u093F\u0935\u0938',
          dd: '%d \u0926\u093F\u0935\u0938',
          M: '\u090F\u0915 \u092E\u0939\u093F\u0928\u093E',
          MM: '%d \u092E\u0939\u093F\u0928\u0947',
          y: '\u090F\u0915 \u0935\u0930\u094D\u0937',
          yy: '%d \u0935\u0930\u094D\u0937\u0947'
        },
        preparse: function (string) {
          return string.replace(/[१२३४५६७८९०]/g, function (match) {
            return numberMap[match];
          });
        },
        postformat: function (string) {
          return string.replace(/\d/g, function (match) {
            return symbolMap[match];
          });
        },
        meridiem: function (hour, minute, isLower) {
          if (hour < 4) {
            return '\u0930\u093E\u0924\u094D\u0930\u0940';
          } else if (hour < 10) {
            return '\u0938\u0915\u093E\u0933\u0940';
          } else if (hour < 17) {
            return '\u0926\u0941\u092A\u093E\u0930\u0940';
          } else if (hour < 20) {
            return '\u0938\u093E\u092F\u0902\u0915\u093E\u0933\u0940';
          } else {
            return '\u0930\u093E\u0924\u094D\u0930\u0940';
          }
        },
        week: {
          dow: 0,
          doy: 6
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('ms-my', {
        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
          LT: 'HH.mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY [pukul] LT',
          LLLL: 'dddd, D MMMM YYYY [pukul] LT'
        },
        meridiem: function (hours, minutes, isLower) {
          if (hours < 11) {
            return 'pagi';
          } else if (hours < 15) {
            return 'tengahari';
          } else if (hours < 19) {
            return 'petang';
          } else {
            return 'malam';
          }
        },
        calendar: {
          sameDay: '[Hari ini pukul] LT',
          nextDay: '[Esok pukul] LT',
          nextWeek: 'dddd [pukul] LT',
          lastDay: '[Kelmarin pukul] LT',
          lastWeek: 'dddd [lepas pukul] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'dalam %s',
          past: '%s yang lepas',
          s: 'beberapa saat',
          m: 'seminit',
          mm: '%d minit',
          h: 'sejam',
          hh: '%d jam',
          d: 'sehari',
          dd: '%d hari',
          M: 'sebulan',
          MM: '%d bulan',
          y: 'setahun',
          yy: '%d tahun'
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var symbolMap = {
          '1': '\u1041',
          '2': '\u1042',
          '3': '\u1043',
          '4': '\u1044',
          '5': '\u1045',
          '6': '\u1046',
          '7': '\u1047',
          '8': '\u1048',
          '9': '\u1049',
          '0': '\u1040'
        }, numberMap = {
          '\u1041': '1',
          '\u1042': '2',
          '\u1043': '3',
          '\u1044': '4',
          '\u1045': '5',
          '\u1046': '6',
          '\u1047': '7',
          '\u1048': '8',
          '\u1049': '9',
          '\u1040': '0'
        };
      return moment.defineLocale('my', {
        months: '\u1007\u1014\u103A\u1014\u101D\u102B\u101B\u102E_\u1016\u1031\u1016\u1031\u102C\u103A\u101D\u102B\u101B\u102E_\u1019\u1010\u103A_\u1027\u1015\u103C\u102E_\u1019\u1031_\u1007\u103D\u1014\u103A_\u1007\u1030\u101C\u102D\u102F\u1004\u103A_\u101E\u103C\u1002\u102F\u1010\u103A_\u1005\u1000\u103A\u1010\u1004\u103A\u1018\u102C_\u1021\u1031\u102C\u1000\u103A\u1010\u102D\u102F\u1018\u102C_\u1014\u102D\u102F\u101D\u1004\u103A\u1018\u102C_\u1012\u102E\u1007\u1004\u103A\u1018\u102C'.split('_'),
        monthsShort: '\u1007\u1014\u103A_\u1016\u1031_\u1019\u1010\u103A_\u1015\u103C\u102E_\u1019\u1031_\u1007\u103D\u1014\u103A_\u101C\u102D\u102F\u1004\u103A_\u101E\u103C_\u1005\u1000\u103A_\u1021\u1031\u102C\u1000\u103A_\u1014\u102D\u102F_\u1012\u102E'.split('_'),
        weekdays: '\u1010\u1014\u1004\u103A\u1039\u1002\u1014\u103D\u1031_\u1010\u1014\u1004\u103A\u1039\u101C\u102C_\u1021\u1004\u103A\u1039\u1002\u102B_\u1017\u102F\u1012\u1039\u1013\u101F\u1030\u1038_\u1000\u103C\u102C\u101E\u1015\u1010\u1031\u1038_\u101E\u1031\u102C\u1000\u103C\u102C_\u1005\u1014\u1031'.split('_'),
        weekdaysShort: '\u1014\u103D\u1031_\u101C\u102C_\u1004\u103A\u1039\u1002\u102B_\u101F\u1030\u1038_\u1000\u103C\u102C_\u101E\u1031\u102C_\u1014\u1031'.split('_'),
        weekdaysMin: '\u1014\u103D\u1031_\u101C\u102C_\u1004\u103A\u1039\u1002\u102B_\u101F\u1030\u1038_\u1000\u103C\u102C_\u101E\u1031\u102C_\u1014\u1031'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[\u101A\u1014\u1031.] LT [\u1019\u103E\u102C]',
          nextDay: '[\u1019\u1014\u1000\u103A\u1016\u103C\u1014\u103A] LT [\u1019\u103E\u102C]',
          nextWeek: 'dddd LT [\u1019\u103E\u102C]',
          lastDay: '[\u1019\u1014\u1031.\u1000] LT [\u1019\u103E\u102C]',
          lastWeek: '[\u1015\u103C\u102E\u1038\u1001\u1032\u1037\u101E\u1031\u102C] dddd LT [\u1019\u103E\u102C]',
          sameElse: 'L'
        },
        relativeTime: {
          future: '\u101C\u102C\u1019\u100A\u103A\u1037 %s \u1019\u103E\u102C',
          past: '\u101C\u103D\u1014\u103A\u1001\u1032\u1037\u101E\u1031\u102C %s \u1000',
          s: '\u1005\u1000\u1039\u1000\u1014\u103A.\u1021\u1014\u100A\u103A\u1038\u1004\u101A\u103A',
          m: '\u1010\u1005\u103A\u1019\u102D\u1014\u1005\u103A',
          mm: '%d \u1019\u102D\u1014\u1005\u103A',
          h: '\u1010\u1005\u103A\u1014\u102C\u101B\u102E',
          hh: '%d \u1014\u102C\u101B\u102E',
          d: '\u1010\u1005\u103A\u101B\u1000\u103A',
          dd: '%d \u101B\u1000\u103A',
          M: '\u1010\u1005\u103A\u101C',
          MM: '%d \u101C',
          y: '\u1010\u1005\u103A\u1014\u103E\u1005\u103A',
          yy: '%d \u1014\u103E\u1005\u103A'
        },
        preparse: function (string) {
          return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
            return numberMap[match];
          });
        },
        postformat: function (string) {
          return string.replace(/\d/g, function (match) {
            return symbolMap[match];
          });
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('nb', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays: 's\xF8ndag_mandag_tirsdag_onsdag_torsdag_fredag_l\xF8rdag'.split('_'),
        weekdaysShort: 's\xF8n_man_tirs_ons_tors_fre_l\xF8r'.split('_'),
        weekdaysMin: 's\xF8_ma_ti_on_to_fr_l\xF8'.split('_'),
        longDateFormat: {
          LT: 'H.mm',
          L: 'DD.MM.YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY [kl.] LT',
          LLLL: 'dddd D. MMMM YYYY [kl.] LT'
        },
        calendar: {
          sameDay: '[i dag kl.] LT',
          nextDay: '[i morgen kl.] LT',
          nextWeek: 'dddd [kl.] LT',
          lastDay: '[i g\xE5r kl.] LT',
          lastWeek: '[forrige] dddd [kl.] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'om %s',
          past: 'for %s siden',
          s: 'noen sekunder',
          m: 'ett minutt',
          mm: '%d minutter',
          h: 'en time',
          hh: '%d timer',
          d: 'en dag',
          dd: '%d dager',
          M: 'en m\xE5ned',
          MM: '%d m\xE5neder',
          y: 'ett \xE5r',
          yy: '%d \xE5r'
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var symbolMap = {
          '1': '\u0967',
          '2': '\u0968',
          '3': '\u0969',
          '4': '\u096A',
          '5': '\u096B',
          '6': '\u096C',
          '7': '\u096D',
          '8': '\u096E',
          '9': '\u096F',
          '0': '\u0966'
        }, numberMap = {
          '\u0967': '1',
          '\u0968': '2',
          '\u0969': '3',
          '\u096A': '4',
          '\u096B': '5',
          '\u096C': '6',
          '\u096D': '7',
          '\u096E': '8',
          '\u096F': '9',
          '\u0966': '0'
        };
      return moment.defineLocale('ne', {
        months: '\u091C\u0928\u0935\u0930\u0940_\u092B\u0947\u092C\u094D\u0930\u0941\u0935\u0930\u0940_\u092E\u093E\u0930\u094D\u091A_\u0905\u092A\u094D\u0930\u093F\u0932_\u092E\u0908_\u091C\u0941\u0928_\u091C\u0941\u0932\u093E\u0908_\u0905\u0917\u0937\u094D\u091F_\u0938\u0947\u092A\u094D\u091F\u0947\u092E\u094D\u092C\u0930_\u0905\u0915\u094D\u091F\u094B\u092C\u0930_\u0928\u094B\u092D\u0947\u092E\u094D\u092C\u0930_\u0921\u093F\u0938\u0947\u092E\u094D\u092C\u0930'.split('_'),
        monthsShort: '\u091C\u0928._\u092B\u0947\u092C\u094D\u0930\u0941._\u092E\u093E\u0930\u094D\u091A_\u0905\u092A\u094D\u0930\u093F._\u092E\u0908_\u091C\u0941\u0928_\u091C\u0941\u0932\u093E\u0908._\u0905\u0917._\u0938\u0947\u092A\u094D\u091F._\u0905\u0915\u094D\u091F\u094B._\u0928\u094B\u092D\u0947._\u0921\u093F\u0938\u0947.'.split('_'),
        weekdays: '\u0906\u0907\u0924\u092C\u093E\u0930_\u0938\u094B\u092E\u092C\u093E\u0930_\u092E\u0919\u094D\u0917\u0932\u092C\u093E\u0930_\u092C\u0941\u0927\u092C\u093E\u0930_\u092C\u093F\u0939\u093F\u092C\u093E\u0930_\u0936\u0941\u0915\u094D\u0930\u092C\u093E\u0930_\u0936\u0928\u093F\u092C\u093E\u0930'.split('_'),
        weekdaysShort: '\u0906\u0907\u0924._\u0938\u094B\u092E._\u092E\u0919\u094D\u0917\u0932._\u092C\u0941\u0927._\u092C\u093F\u0939\u093F._\u0936\u0941\u0915\u094D\u0930._\u0936\u0928\u093F.'.split('_'),
        weekdaysMin: '\u0906\u0907._\u0938\u094B._\u092E\u0919\u094D_\u092C\u0941._\u092C\u093F._\u0936\u0941._\u0936.'.split('_'),
        longDateFormat: {
          LT: 'A\u0915\u094B h:mm \u092C\u091C\u0947',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY, LT',
          LLLL: 'dddd, D MMMM YYYY, LT'
        },
        preparse: function (string) {
          return string.replace(/[१२३४५६७८९०]/g, function (match) {
            return numberMap[match];
          });
        },
        postformat: function (string) {
          return string.replace(/\d/g, function (match) {
            return symbolMap[match];
          });
        },
        meridiem: function (hour, minute, isLower) {
          if (hour < 3) {
            return '\u0930\u093E\u0924\u0940';
          } else if (hour < 10) {
            return '\u092C\u093F\u0939\u093E\u0928';
          } else if (hour < 15) {
            return '\u0926\u093F\u0909\u0901\u0938\u094B';
          } else if (hour < 18) {
            return '\u092C\u0947\u0932\u0941\u0915\u093E';
          } else if (hour < 20) {
            return '\u0938\u093E\u0901\u091D';
          } else {
            return '\u0930\u093E\u0924\u0940';
          }
        },
        calendar: {
          sameDay: '[\u0906\u091C] LT',
          nextDay: '[\u092D\u094B\u0932\u0940] LT',
          nextWeek: '[\u0906\u0909\u0901\u0926\u094B] dddd[,] LT',
          lastDay: '[\u0939\u093F\u091C\u094B] LT',
          lastWeek: '[\u0917\u090F\u0915\u094B] dddd[,] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '%s\u092E\u093E',
          past: '%s \u0905\u0917\u093E\u0921\u0940',
          s: '\u0915\u0947\u0939\u0940 \u0938\u092E\u092F',
          m: '\u090F\u0915 \u092E\u093F\u0928\u0947\u091F',
          mm: '%d \u092E\u093F\u0928\u0947\u091F',
          h: '\u090F\u0915 \u0918\u0923\u094D\u091F\u093E',
          hh: '%d \u0918\u0923\u094D\u091F\u093E',
          d: '\u090F\u0915 \u0926\u093F\u0928',
          dd: '%d \u0926\u093F\u0928',
          M: '\u090F\u0915 \u092E\u0939\u093F\u0928\u093E',
          MM: '%d \u092E\u0939\u093F\u0928\u093E',
          y: '\u090F\u0915 \u092C\u0930\u094D\u0937',
          yy: '%d \u092C\u0930\u094D\u0937'
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'), monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');
      return moment.defineLocale('nl', {
        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
        monthsShort: function (m, format) {
          if (/-MMM-/.test(format)) {
            return monthsShortWithoutDots[m.month()];
          } else {
            return monthsShortWithDots[m.month()];
          }
        },
        weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin: 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD-MM-YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[vandaag om] LT',
          nextDay: '[morgen om] LT',
          nextWeek: 'dddd [om] LT',
          lastDay: '[gisteren om] LT',
          lastWeek: '[afgelopen] dddd [om] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'over %s',
          past: '%s geleden',
          s: 'een paar seconden',
          m: '\xE9\xE9n minuut',
          mm: '%d minuten',
          h: '\xE9\xE9n uur',
          hh: '%d uur',
          d: '\xE9\xE9n dag',
          dd: '%d dagen',
          M: '\xE9\xE9n maand',
          MM: '%d maanden',
          y: '\xE9\xE9n jaar',
          yy: '%d jaar'
        },
        ordinal: function (number) {
          return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de');
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('nn', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays: 'sundag_m\xE5ndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
        weekdaysShort: 'sun_m\xE5n_tys_ons_tor_fre_lau'.split('_'),
        weekdaysMin: 'su_m\xE5_ty_on_to_fr_l\xF8'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD.MM.YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[I dag klokka] LT',
          nextDay: '[I morgon klokka] LT',
          nextWeek: 'dddd [klokka] LT',
          lastDay: '[I g\xE5r klokka] LT',
          lastWeek: '[F\xF8reg\xE5ande] dddd [klokka] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'om %s',
          past: 'for %s sidan',
          s: 'nokre sekund',
          m: 'eit minutt',
          mm: '%d minutt',
          h: 'ein time',
          hh: '%d timar',
          d: 'ein dag',
          dd: '%d dagar',
          M: 'ein m\xE5nad',
          MM: '%d m\xE5nader',
          y: 'eit \xE5r',
          yy: '%d \xE5r'
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var monthsNominative = 'stycze\u0144_luty_marzec_kwiecie\u0144_maj_czerwiec_lipiec_sierpie\u0144_wrzesie\u0144_pa\u017Adziernik_listopad_grudzie\u0144'.split('_'), monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_wrze\u015Bnia_pa\u017Adziernika_listopada_grudnia'.split('_');
      function plural(n) {
        return n % 10 < 5 && n % 10 > 1 && ~~(n / 10) % 10 !== 1;
      }
      function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
        case 'm':
          return withoutSuffix ? 'minuta' : 'minut\u0119';
        case 'mm':
          return result + (plural(number) ? 'minuty' : 'minut');
        case 'h':
          return withoutSuffix ? 'godzina' : 'godzin\u0119';
        case 'hh':
          return result + (plural(number) ? 'godziny' : 'godzin');
        case 'MM':
          return result + (plural(number) ? 'miesi\u0105ce' : 'miesi\u0119cy');
        case 'yy':
          return result + (plural(number) ? 'lata' : 'lat');
        }
      }
      return moment.defineLocale('pl', {
        months: function (momentToFormat, format) {
          if (/D MMMM/.test(format)) {
            return monthsSubjective[momentToFormat.month()];
          } else {
            return monthsNominative[momentToFormat.month()];
          }
        },
        monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_pa\u017A_lis_gru'.split('_'),
        weekdays: 'niedziela_poniedzia\u0142ek_wtorek_\u015Broda_czwartek_pi\u0105tek_sobota'.split('_'),
        weekdaysShort: 'nie_pon_wt_\u015Br_czw_pt_sb'.split('_'),
        weekdaysMin: 'N_Pn_Wt_\u015Ar_Cz_Pt_So'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD.MM.YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[Dzi\u015B o] LT',
          nextDay: '[Jutro o] LT',
          nextWeek: '[W] dddd [o] LT',
          lastDay: '[Wczoraj o] LT',
          lastWeek: function () {
            switch (this.day()) {
            case 0:
              return '[W zesz\u0142\u0105 niedziel\u0119 o] LT';
            case 3:
              return '[W zesz\u0142\u0105 \u015Brod\u0119 o] LT';
            case 6:
              return '[W zesz\u0142\u0105 sobot\u0119 o] LT';
            default:
              return '[W zesz\u0142y] dddd [o] LT';
            }
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: 'za %s',
          past: '%s temu',
          s: 'kilka sekund',
          m: translate,
          mm: translate,
          h: translate,
          hh: translate,
          d: '1 dzie\u0144',
          dd: '%d dni',
          M: 'miesi\u0105c',
          MM: translate,
          y: 'rok',
          yy: translate
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('pt-br', {
        months: 'janeiro_fevereiro_mar\xE7o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
        weekdays: 'domingo_segunda-feira_ter\xE7a-feira_quarta-feira_quinta-feira_sexta-feira_s\xE1bado'.split('_'),
        weekdaysShort: 'dom_seg_ter_qua_qui_sex_s\xE1b'.split('_'),
        weekdaysMin: 'dom_2\xAA_3\xAA_4\xAA_5\xAA_6\xAA_s\xE1b'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D [de] MMMM [de] YYYY',
          LLL: 'D [de] MMMM [de] YYYY [\xE0s] LT',
          LLLL: 'dddd, D [de] MMMM [de] YYYY [\xE0s] LT'
        },
        calendar: {
          sameDay: '[Hoje \xE0s] LT',
          nextDay: '[Amanh\xE3 \xE0s] LT',
          nextWeek: 'dddd [\xE0s] LT',
          lastDay: '[Ontem \xE0s] LT',
          lastWeek: function () {
            return this.day() === 0 || this.day() === 6 ? '[\xDAltimo] dddd [\xE0s] LT' : '[\xDAltima] dddd [\xE0s] LT';
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: 'em %s',
          past: '%s atr\xE1s',
          s: 'segundos',
          m: 'um minuto',
          mm: '%d minutos',
          h: 'uma hora',
          hh: '%d horas',
          d: 'um dia',
          dd: '%d dias',
          M: 'um m\xEAs',
          MM: '%d meses',
          y: 'um ano',
          yy: '%d anos'
        },
        ordinal: '%d\xBA'
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('pt', {
        months: 'janeiro_fevereiro_mar\xE7o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
        weekdays: 'domingo_segunda-feira_ter\xE7a-feira_quarta-feira_quinta-feira_sexta-feira_s\xE1bado'.split('_'),
        weekdaysShort: 'dom_seg_ter_qua_qui_sex_s\xE1b'.split('_'),
        weekdaysMin: 'dom_2\xAA_3\xAA_4\xAA_5\xAA_6\xAA_s\xE1b'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D [de] MMMM [de] YYYY',
          LLL: 'D [de] MMMM [de] YYYY LT',
          LLLL: 'dddd, D [de] MMMM [de] YYYY LT'
        },
        calendar: {
          sameDay: '[Hoje \xE0s] LT',
          nextDay: '[Amanh\xE3 \xE0s] LT',
          nextWeek: 'dddd [\xE0s] LT',
          lastDay: '[Ontem \xE0s] LT',
          lastWeek: function () {
            return this.day() === 0 || this.day() === 6 ? '[\xDAltimo] dddd [\xE0s] LT' : '[\xDAltima] dddd [\xE0s] LT';
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: 'em %s',
          past: 'h\xE1 %s',
          s: 'segundos',
          m: 'um minuto',
          mm: '%d minutos',
          h: 'uma hora',
          hh: '%d horas',
          d: 'um dia',
          dd: '%d dias',
          M: 'um m\xEAs',
          MM: '%d meses',
          y: 'um ano',
          yy: '%d anos'
        },
        ordinal: '%d\xBA',
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': 'minute',
            'hh': 'ore',
            'dd': 'zile',
            'MM': 'luni',
            'yy': 'ani'
          }, separator = ' ';
        if (number % 100 >= 20 || number >= 100 && number % 100 === 0) {
          separator = ' de ';
        }
        return number + separator + format[key];
      }
      return moment.defineLocale('ro', {
        months: 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
        monthsShort: 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
        weekdays: 'duminic\u0103_luni_mar\u021Bi_miercuri_joi_vineri_s\xE2mb\u0103t\u0103'.split('_'),
        weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_S\xE2m'.split('_'),
        weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_S\xE2'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          L: 'DD.MM.YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY H:mm',
          LLLL: 'dddd, D MMMM YYYY H:mm'
        },
        calendar: {
          sameDay: '[azi la] LT',
          nextDay: '[m\xE2ine la] LT',
          nextWeek: 'dddd [la] LT',
          lastDay: '[ieri la] LT',
          lastWeek: '[fosta] dddd [la] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'peste %s',
          past: '%s \xEEn urm\u0103',
          s: 'c\xE2teva secunde',
          m: 'un minut',
          mm: relativeTimeWithPlural,
          h: 'o or\u0103',
          hh: relativeTimeWithPlural,
          d: 'o zi',
          dd: relativeTimeWithPlural,
          M: 'o lun\u0103',
          MM: relativeTimeWithPlural,
          y: 'un an',
          yy: relativeTimeWithPlural
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
      }
      function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': withoutSuffix ? '\u043C\u0438\u043D\u0443\u0442\u0430_\u043C\u0438\u043D\u0443\u0442\u044B_\u043C\u0438\u043D\u0443\u0442' : '\u043C\u0438\u043D\u0443\u0442\u0443_\u043C\u0438\u043D\u0443\u0442\u044B_\u043C\u0438\u043D\u0443\u0442',
            'hh': '\u0447\u0430\u0441_\u0447\u0430\u0441\u0430_\u0447\u0430\u0441\u043E\u0432',
            'dd': '\u0434\u0435\u043D\u044C_\u0434\u043D\u044F_\u0434\u043D\u0435\u0439',
            'MM': '\u043C\u0435\u0441\u044F\u0446_\u043C\u0435\u0441\u044F\u0446\u0430_\u043C\u0435\u0441\u044F\u0446\u0435\u0432',
            'yy': '\u0433\u043E\u0434_\u0433\u043E\u0434\u0430_\u043B\u0435\u0442'
          };
        if (key === 'm') {
          return withoutSuffix ? '\u043C\u0438\u043D\u0443\u0442\u0430' : '\u043C\u0438\u043D\u0443\u0442\u0443';
        } else {
          return number + ' ' + plural(format[key], +number);
        }
      }
      function monthsCaseReplace(m, format) {
        var months = {
            'nominative': '\u044F\u043D\u0432\u0430\u0440\u044C_\u0444\u0435\u0432\u0440\u0430\u043B\u044C_\u043C\u0430\u0440\u0442_\u0430\u043F\u0440\u0435\u043B\u044C_\u043C\u0430\u0439_\u0438\u044E\u043D\u044C_\u0438\u044E\u043B\u044C_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044C_\u043E\u043A\u0442\u044F\u0431\u0440\u044C_\u043D\u043E\u044F\u0431\u0440\u044C_\u0434\u0435\u043A\u0430\u0431\u0440\u044C'.split('_'),
            'accusative': '\u044F\u043D\u0432\u0430\u0440\u044F_\u0444\u0435\u0432\u0440\u0430\u043B\u044F_\u043C\u0430\u0440\u0442\u0430_\u0430\u043F\u0440\u0435\u043B\u044F_\u043C\u0430\u044F_\u0438\u044E\u043D\u044F_\u0438\u044E\u043B\u044F_\u0430\u0432\u0433\u0443\u0441\u0442\u0430_\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044F_\u043E\u043A\u0442\u044F\u0431\u0440\u044F_\u043D\u043E\u044F\u0431\u0440\u044F_\u0434\u0435\u043A\u0430\u0431\u0440\u044F'.split('_')
          }, nounCase = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(format) ? 'accusative' : 'nominative';
        return months[nounCase][m.month()];
      }
      function monthsShortCaseReplace(m, format) {
        var monthsShort = {
            'nominative': '\u044F\u043D\u0432_\u0444\u0435\u0432_\u043C\u0430\u0440_\u0430\u043F\u0440_\u043C\u0430\u0439_\u0438\u044E\u043D\u044C_\u0438\u044E\u043B\u044C_\u0430\u0432\u0433_\u0441\u0435\u043D_\u043E\u043A\u0442_\u043D\u043E\u044F_\u0434\u0435\u043A'.split('_'),
            'accusative': '\u044F\u043D\u0432_\u0444\u0435\u0432_\u043C\u0430\u0440_\u0430\u043F\u0440_\u043C\u0430\u044F_\u0438\u044E\u043D\u044F_\u0438\u044E\u043B\u044F_\u0430\u0432\u0433_\u0441\u0435\u043D_\u043E\u043A\u0442_\u043D\u043E\u044F_\u0434\u0435\u043A'.split('_')
          }, nounCase = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(format) ? 'accusative' : 'nominative';
        return monthsShort[nounCase][m.month()];
      }
      function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': '\u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435_\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A_\u0432\u0442\u043E\u0440\u043D\u0438\u043A_\u0441\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0435\u0440\u0433_\u043F\u044F\u0442\u043D\u0438\u0446\u0430_\u0441\u0443\u0431\u0431\u043E\u0442\u0430'.split('_'),
            'accusative': '\u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435_\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A_\u0432\u0442\u043E\u0440\u043D\u0438\u043A_\u0441\u0440\u0435\u0434\u0443_\u0447\u0435\u0442\u0432\u0435\u0440\u0433_\u043F\u044F\u0442\u043D\u0438\u0446\u0443_\u0441\u0443\u0431\u0431\u043E\u0442\u0443'.split('_')
          }, nounCase = /\[ ?[Вв] ?(?:прошлую|следующую)? ?\] ?dddd/.test(format) ? 'accusative' : 'nominative';
        return weekdays[nounCase][m.day()];
      }
      return moment.defineLocale('ru', {
        months: monthsCaseReplace,
        monthsShort: monthsShortCaseReplace,
        weekdays: weekdaysCaseReplace,
        weekdaysShort: '\u0432\u0441_\u043F\u043D_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043F\u0442_\u0441\u0431'.split('_'),
        weekdaysMin: '\u0432\u0441_\u043F\u043D_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043F\u0442_\u0441\u0431'.split('_'),
        monthsParse: [
          /^янв/i,
          /^фев/i,
          /^мар/i,
          /^апр/i,
          /^ма[й|я]/i,
          /^июн/i,
          /^июл/i,
          /^авг/i,
          /^сен/i,
          /^окт/i,
          /^ноя/i,
          /^дек/i
        ],
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD.MM.YYYY',
          LL: 'D MMMM YYYY \u0433.',
          LLL: 'D MMMM YYYY \u0433., LT',
          LLLL: 'dddd, D MMMM YYYY \u0433., LT'
        },
        calendar: {
          sameDay: '[\u0421\u0435\u0433\u043E\u0434\u043D\u044F \u0432] LT',
          nextDay: '[\u0417\u0430\u0432\u0442\u0440\u0430 \u0432] LT',
          lastDay: '[\u0412\u0447\u0435\u0440\u0430 \u0432] LT',
          nextWeek: function () {
            return this.day() === 2 ? '[\u0412\u043E] dddd [\u0432] LT' : '[\u0412] dddd [\u0432] LT';
          },
          lastWeek: function () {
            switch (this.day()) {
            case 0:
              return '[\u0412 \u043F\u0440\u043E\u0448\u043B\u043E\u0435] dddd [\u0432] LT';
            case 1:
            case 2:
            case 4:
              return '[\u0412 \u043F\u0440\u043E\u0448\u043B\u044B\u0439] dddd [\u0432] LT';
            case 3:
            case 5:
            case 6:
              return '[\u0412 \u043F\u0440\u043E\u0448\u043B\u0443\u044E] dddd [\u0432] LT';
            }
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: '\u0447\u0435\u0440\u0435\u0437 %s',
          past: '%s \u043D\u0430\u0437\u0430\u0434',
          s: '\u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E \u0441\u0435\u043A\u0443\u043D\u0434',
          m: relativeTimeWithPlural,
          mm: relativeTimeWithPlural,
          h: '\u0447\u0430\u0441',
          hh: relativeTimeWithPlural,
          d: '\u0434\u0435\u043D\u044C',
          dd: relativeTimeWithPlural,
          M: '\u043C\u0435\u0441\u044F\u0446',
          MM: relativeTimeWithPlural,
          y: '\u0433\u043E\u0434',
          yy: relativeTimeWithPlural
        },
        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM: function (input) {
          return /^(дня|вечера)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
          if (hour < 4) {
            return '\u043D\u043E\u0447\u0438';
          } else if (hour < 12) {
            return '\u0443\u0442\u0440\u0430';
          } else if (hour < 17) {
            return '\u0434\u043D\u044F';
          } else {
            return '\u0432\u0435\u0447\u0435\u0440\u0430';
          }
        },
        ordinal: function (number, period) {
          switch (period) {
          case 'M':
          case 'd':
          case 'DDD':
            return number + '-\u0439';
          case 'D':
            return number + '-\u0433\u043E';
          case 'w':
          case 'W':
            return number + '-\u044F';
          default:
            return number;
          }
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var months = 'janu\xE1r_febru\xE1r_marec_apr\xEDl_m\xE1j_j\xFAn_j\xFAl_august_september_okt\xF3ber_november_december'.split('_'), monthsShort = 'jan_feb_mar_apr_m\xE1j_j\xFAn_j\xFAl_aug_sep_okt_nov_dec'.split('_');
      function plural(n) {
        return n > 1 && n < 5;
      }
      function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
        case 's':
          return withoutSuffix || isFuture ? 'p\xE1r sek\xFAnd' : 'p\xE1r sekundami';
        case 'm':
          return withoutSuffix ? 'min\xFAta' : isFuture ? 'min\xFAtu' : 'min\xFAtou';
        case 'mm':
          if (withoutSuffix || isFuture) {
            return result + (plural(number) ? 'min\xFAty' : 'min\xFAt');
          } else {
            return result + 'min\xFAtami';
          }
          break;
        case 'h':
          return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
        case 'hh':
          if (withoutSuffix || isFuture) {
            return result + (plural(number) ? 'hodiny' : 'hod\xEDn');
          } else {
            return result + 'hodinami';
          }
          break;
        case 'd':
          return withoutSuffix || isFuture ? 'de\u0148' : 'd\u0148om';
        case 'dd':
          if (withoutSuffix || isFuture) {
            return result + (plural(number) ? 'dni' : 'dn\xED');
          } else {
            return result + 'd\u0148ami';
          }
          break;
        case 'M':
          return withoutSuffix || isFuture ? 'mesiac' : 'mesiacom';
        case 'MM':
          if (withoutSuffix || isFuture) {
            return result + (plural(number) ? 'mesiace' : 'mesiacov');
          } else {
            return result + 'mesiacmi';
          }
          break;
        case 'y':
          return withoutSuffix || isFuture ? 'rok' : 'rokom';
        case 'yy':
          if (withoutSuffix || isFuture) {
            return result + (plural(number) ? 'roky' : 'rokov');
          } else {
            return result + 'rokmi';
          }
          break;
        }
      }
      return moment.defineLocale('sk', {
        months: months,
        monthsShort: monthsShort,
        monthsParse: function (months, monthsShort) {
          var i, _monthsParse = [];
          for (i = 0; i < 12; i++) {
            _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
          }
          return _monthsParse;
        }(months, monthsShort),
        weekdays: 'nede\u013Ea_pondelok_utorok_streda_\u0161tvrtok_piatok_sobota'.split('_'),
        weekdaysShort: 'ne_po_ut_st_\u0161t_pi_so'.split('_'),
        weekdaysMin: 'ne_po_ut_st_\u0161t_pi_so'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          L: 'DD.MM.YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd D. MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[dnes o] LT',
          nextDay: '[zajtra o] LT',
          nextWeek: function () {
            switch (this.day()) {
            case 0:
              return '[v nede\u013Eu o] LT';
            case 1:
            case 2:
              return '[v] dddd [o] LT';
            case 3:
              return '[v stredu o] LT';
            case 4:
              return '[vo \u0161tvrtok o] LT';
            case 5:
              return '[v piatok o] LT';
            case 6:
              return '[v sobotu o] LT';
            }
          },
          lastDay: '[v\u010Dera o] LT',
          lastWeek: function () {
            switch (this.day()) {
            case 0:
              return '[minul\xFA nede\u013Eu o] LT';
            case 1:
            case 2:
              return '[minul\xFD] dddd [o] LT';
            case 3:
              return '[minul\xFA stredu o] LT';
            case 4:
            case 5:
              return '[minul\xFD] dddd [o] LT';
            case 6:
              return '[minul\xFA sobotu o] LT';
            }
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: 'za %s',
          past: 'pred %s',
          s: translate,
          m: translate,
          mm: translate,
          h: translate,
          hh: translate,
          d: translate,
          dd: translate,
          M: translate,
          MM: translate,
          y: translate,
          yy: translate
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
        case 'm':
          return withoutSuffix ? 'ena minuta' : 'eno minuto';
        case 'mm':
          if (number === 1) {
            result += 'minuta';
          } else if (number === 2) {
            result += 'minuti';
          } else if (number === 3 || number === 4) {
            result += 'minute';
          } else {
            result += 'minut';
          }
          return result;
        case 'h':
          return withoutSuffix ? 'ena ura' : 'eno uro';
        case 'hh':
          if (number === 1) {
            result += 'ura';
          } else if (number === 2) {
            result += 'uri';
          } else if (number === 3 || number === 4) {
            result += 'ure';
          } else {
            result += 'ur';
          }
          return result;
        case 'dd':
          if (number === 1) {
            result += 'dan';
          } else {
            result += 'dni';
          }
          return result;
        case 'MM':
          if (number === 1) {
            result += 'mesec';
          } else if (number === 2) {
            result += 'meseca';
          } else if (number === 3 || number === 4) {
            result += 'mesece';
          } else {
            result += 'mesecev';
          }
          return result;
        case 'yy':
          if (number === 1) {
            result += 'leto';
          } else if (number === 2) {
            result += 'leti';
          } else if (number === 3 || number === 4) {
            result += 'leta';
          } else {
            result += 'let';
          }
          return result;
        }
      }
      return moment.defineLocale('sl', {
        months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
        monthsShort: 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
        weekdays: 'nedelja_ponedeljek_torek_sreda_\u010Detrtek_petek_sobota'.split('_'),
        weekdaysShort: 'ned._pon._tor._sre._\u010Det._pet._sob.'.split('_'),
        weekdaysMin: 'ne_po_to_sr_\u010De_pe_so'.split('_'),
        longDateFormat: {
          LT: 'H:mm',
          L: 'DD. MM. YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd, D. MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[danes ob] LT',
          nextDay: '[jutri ob] LT',
          nextWeek: function () {
            switch (this.day()) {
            case 0:
              return '[v] [nedeljo] [ob] LT';
            case 3:
              return '[v] [sredo] [ob] LT';
            case 6:
              return '[v] [soboto] [ob] LT';
            case 1:
            case 2:
            case 4:
            case 5:
              return '[v] dddd [ob] LT';
            }
          },
          lastDay: '[v\u010Deraj ob] LT',
          lastWeek: function () {
            switch (this.day()) {
            case 0:
            case 3:
            case 6:
              return '[prej\u0161nja] dddd [ob] LT';
            case 1:
            case 2:
            case 4:
            case 5:
              return '[prej\u0161nji] dddd [ob] LT';
            }
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: '\u010Dez %s',
          past: '%s nazaj',
          s: 'nekaj sekund',
          m: translate,
          mm: translate,
          h: translate,
          hh: translate,
          d: 'en dan',
          dd: translate,
          M: 'en mesec',
          MM: translate,
          y: 'eno leto',
          yy: translate
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('sq', {
        months: 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_N\xEBntor_Dhjetor'.split('_'),
        monthsShort: 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_N\xEBn_Dhj'.split('_'),
        weekdays: 'E Diel_E H\xEBn\xEB_E Mart\xEB_E M\xEBrkur\xEB_E Enjte_E Premte_E Shtun\xEB'.split('_'),
        weekdaysShort: 'Die_H\xEBn_Mar_M\xEBr_Enj_Pre_Sht'.split('_'),
        weekdaysMin: 'D_H_Ma_M\xEB_E_P_Sh'.split('_'),
        meridiem: function (hours, minutes, isLower) {
          return hours < 12 ? 'PD' : 'MD';
        },
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[Sot n\xEB] LT',
          nextDay: '[Nes\xEBr n\xEB] LT',
          nextWeek: 'dddd [n\xEB] LT',
          lastDay: '[Dje n\xEB] LT',
          lastWeek: 'dddd [e kaluar n\xEB] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'n\xEB %s',
          past: '%s m\xEB par\xEB',
          s: 'disa sekonda',
          m: 'nj\xEB minut\xEB',
          mm: '%d minuta',
          h: 'nj\xEB or\xEB',
          hh: '%d or\xEB',
          d: 'nj\xEB dit\xEB',
          dd: '%d dit\xEB',
          M: 'nj\xEB muaj',
          MM: '%d muaj',
          y: 'nj\xEB vit',
          yy: '%d vite'
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var translator = {
          words: {
            m: [
              '\u0458\u0435\u0434\u0430\u043D \u043C\u0438\u043D\u0443\u0442',
              '\u0458\u0435\u0434\u043D\u0435 \u043C\u0438\u043D\u0443\u0442\u0435'
            ],
            mm: [
              '\u043C\u0438\u043D\u0443\u0442',
              '\u043C\u0438\u043D\u0443\u0442\u0435',
              '\u043C\u0438\u043D\u0443\u0442\u0430'
            ],
            h: [
              '\u0458\u0435\u0434\u0430\u043D \u0441\u0430\u0442',
              '\u0458\u0435\u0434\u043D\u043E\u0433 \u0441\u0430\u0442\u0430'
            ],
            hh: [
              '\u0441\u0430\u0442',
              '\u0441\u0430\u0442\u0430',
              '\u0441\u0430\u0442\u0438'
            ],
            dd: [
              '\u0434\u0430\u043D',
              '\u0434\u0430\u043D\u0430',
              '\u0434\u0430\u043D\u0430'
            ],
            MM: [
              '\u043C\u0435\u0441\u0435\u0446',
              '\u043C\u0435\u0441\u0435\u0446\u0430',
              '\u043C\u0435\u0441\u0435\u0446\u0438'
            ],
            yy: [
              '\u0433\u043E\u0434\u0438\u043D\u0430',
              '\u0433\u043E\u0434\u0438\u043D\u0435',
              '\u0433\u043E\u0434\u0438\u043D\u0430'
            ]
          },
          correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];
          },
          translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
              return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
              return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
          }
        };
      return moment.defineLocale('sr-cyrl', {
        months: [
          '\u0458\u0430\u043D\u0443\u0430\u0440',
          '\u0444\u0435\u0431\u0440\u0443\u0430\u0440',
          '\u043C\u0430\u0440\u0442',
          '\u0430\u043F\u0440\u0438\u043B',
          '\u043C\u0430\u0458',
          '\u0458\u0443\u043D',
          '\u0458\u0443\u043B',
          '\u0430\u0432\u0433\u0443\u0441\u0442',
          '\u0441\u0435\u043F\u0442\u0435\u043C\u0431\u0430\u0440',
          '\u043E\u043A\u0442\u043E\u0431\u0430\u0440',
          '\u043D\u043E\u0432\u0435\u043C\u0431\u0430\u0440',
          '\u0434\u0435\u0446\u0435\u043C\u0431\u0430\u0440'
        ],
        monthsShort: [
          '\u0458\u0430\u043D.',
          '\u0444\u0435\u0431.',
          '\u043C\u0430\u0440.',
          '\u0430\u043F\u0440.',
          '\u043C\u0430\u0458',
          '\u0458\u0443\u043D',
          '\u0458\u0443\u043B',
          '\u0430\u0432\u0433.',
          '\u0441\u0435\u043F.',
          '\u043E\u043A\u0442.',
          '\u043D\u043E\u0432.',
          '\u0434\u0435\u0446.'
        ],
        weekdays: [
          '\u043D\u0435\u0434\u0435\u0459\u0430',
          '\u043F\u043E\u043D\u0435\u0434\u0435\u0459\u0430\u043A',
          '\u0443\u0442\u043E\u0440\u0430\u043A',
          '\u0441\u0440\u0435\u0434\u0430',
          '\u0447\u0435\u0442\u0432\u0440\u0442\u0430\u043A',
          '\u043F\u0435\u0442\u0430\u043A',
          '\u0441\u0443\u0431\u043E\u0442\u0430'
        ],
        weekdaysShort: [
          '\u043D\u0435\u0434.',
          '\u043F\u043E\u043D.',
          '\u0443\u0442\u043E.',
          '\u0441\u0440\u0435.',
          '\u0447\u0435\u0442.',
          '\u043F\u0435\u0442.',
          '\u0441\u0443\u0431.'
        ],
        weekdaysMin: [
          '\u043D\u0435',
          '\u043F\u043E',
          '\u0443\u0442',
          '\u0441\u0440',
          '\u0447\u0435',
          '\u043F\u0435',
          '\u0441\u0443'
        ],
        longDateFormat: {
          LT: 'H:mm',
          L: 'DD. MM. YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd, D. MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[\u0434\u0430\u043D\u0430\u0441 \u0443] LT',
          nextDay: '[\u0441\u0443\u0442\u0440\u0430 \u0443] LT',
          nextWeek: function () {
            switch (this.day()) {
            case 0:
              return '[\u0443] [\u043D\u0435\u0434\u0435\u0459\u0443] [\u0443] LT';
            case 3:
              return '[\u0443] [\u0441\u0440\u0435\u0434\u0443] [\u0443] LT';
            case 6:
              return '[\u0443] [\u0441\u0443\u0431\u043E\u0442\u0443] [\u0443] LT';
            case 1:
            case 2:
            case 4:
            case 5:
              return '[\u0443] dddd [\u0443] LT';
            }
          },
          lastDay: '[\u0458\u0443\u0447\u0435 \u0443] LT',
          lastWeek: function () {
            var lastWeekDays = [
                '[\u043F\u0440\u043E\u0448\u043B\u0435] [\u043D\u0435\u0434\u0435\u0459\u0435] [\u0443] LT',
                '[\u043F\u0440\u043E\u0448\u043B\u043E\u0433] [\u043F\u043E\u043D\u0435\u0434\u0435\u0459\u043A\u0430] [\u0443] LT',
                '[\u043F\u0440\u043E\u0448\u043B\u043E\u0433] [\u0443\u0442\u043E\u0440\u043A\u0430] [\u0443] LT',
                '[\u043F\u0440\u043E\u0448\u043B\u0435] [\u0441\u0440\u0435\u0434\u0435] [\u0443] LT',
                '[\u043F\u0440\u043E\u0448\u043B\u043E\u0433] [\u0447\u0435\u0442\u0432\u0440\u0442\u043A\u0430] [\u0443] LT',
                '[\u043F\u0440\u043E\u0448\u043B\u043E\u0433] [\u043F\u0435\u0442\u043A\u0430] [\u0443] LT',
                '[\u043F\u0440\u043E\u0448\u043B\u0435] [\u0441\u0443\u0431\u043E\u0442\u0435] [\u0443] LT'
              ];
            return lastWeekDays[this.day()];
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: '\u0437\u0430 %s',
          past: '\u043F\u0440\u0435 %s',
          s: '\u043D\u0435\u043A\u043E\u043B\u0438\u043A\u043E \u0441\u0435\u043A\u0443\u043D\u0434\u0438',
          m: translator.translate,
          mm: translator.translate,
          h: translator.translate,
          hh: translator.translate,
          d: '\u0434\u0430\u043D',
          dd: translator.translate,
          M: '\u043C\u0435\u0441\u0435\u0446',
          MM: translator.translate,
          y: '\u0433\u043E\u0434\u0438\u043D\u0443',
          yy: translator.translate
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var translator = {
          words: {
            m: [
              'jedan minut',
              'jedne minute'
            ],
            mm: [
              'minut',
              'minute',
              'minuta'
            ],
            h: [
              'jedan sat',
              'jednog sata'
            ],
            hh: [
              'sat',
              'sata',
              'sati'
            ],
            dd: [
              'dan',
              'dana',
              'dana'
            ],
            MM: [
              'mesec',
              'meseca',
              'meseci'
            ],
            yy: [
              'godina',
              'godine',
              'godina'
            ]
          },
          correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];
          },
          translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
              return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
              return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
          }
        };
      return moment.defineLocale('sr', {
        months: [
          'januar',
          'februar',
          'mart',
          'april',
          'maj',
          'jun',
          'jul',
          'avgust',
          'septembar',
          'oktobar',
          'novembar',
          'decembar'
        ],
        monthsShort: [
          'jan.',
          'feb.',
          'mar.',
          'apr.',
          'maj',
          'jun',
          'jul',
          'avg.',
          'sep.',
          'okt.',
          'nov.',
          'dec.'
        ],
        weekdays: [
          'nedelja',
          'ponedeljak',
          'utorak',
          'sreda',
          '\u010Detvrtak',
          'petak',
          'subota'
        ],
        weekdaysShort: [
          'ned.',
          'pon.',
          'uto.',
          'sre.',
          '\u010Det.',
          'pet.',
          'sub.'
        ],
        weekdaysMin: [
          'ne',
          'po',
          'ut',
          'sr',
          '\u010De',
          'pe',
          'su'
        ],
        longDateFormat: {
          LT: 'H:mm',
          L: 'DD. MM. YYYY',
          LL: 'D. MMMM YYYY',
          LLL: 'D. MMMM YYYY LT',
          LLLL: 'dddd, D. MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[danas u] LT',
          nextDay: '[sutra u] LT',
          nextWeek: function () {
            switch (this.day()) {
            case 0:
              return '[u] [nedelju] [u] LT';
            case 3:
              return '[u] [sredu] [u] LT';
            case 6:
              return '[u] [subotu] [u] LT';
            case 1:
            case 2:
            case 4:
            case 5:
              return '[u] dddd [u] LT';
            }
          },
          lastDay: '[ju\u010De u] LT',
          lastWeek: function () {
            var lastWeekDays = [
                '[pro\u0161le] [nedelje] [u] LT',
                '[pro\u0161log] [ponedeljka] [u] LT',
                '[pro\u0161log] [utorka] [u] LT',
                '[pro\u0161le] [srede] [u] LT',
                '[pro\u0161log] [\u010Detvrtka] [u] LT',
                '[pro\u0161log] [petka] [u] LT',
                '[pro\u0161le] [subote] [u] LT'
              ];
            return lastWeekDays[this.day()];
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: 'za %s',
          past: 'pre %s',
          s: 'nekoliko sekundi',
          m: translator.translate,
          mm: translator.translate,
          h: translator.translate,
          hh: translator.translate,
          d: 'dan',
          dd: translator.translate,
          M: 'mesec',
          MM: translator.translate,
          y: 'godinu',
          yy: translator.translate
        },
        ordinal: '%d.',
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('sv', {
        months: 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 's\xF6ndag_m\xE5ndag_tisdag_onsdag_torsdag_fredag_l\xF6rdag'.split('_'),
        weekdaysShort: 's\xF6n_m\xE5n_tis_ons_tor_fre_l\xF6r'.split('_'),
        weekdaysMin: 's\xF6_m\xE5_ti_on_to_fr_l\xF6'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'YYYY-MM-DD',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[Idag] LT',
          nextDay: '[Imorgon] LT',
          lastDay: '[Ig\xE5r] LT',
          nextWeek: 'dddd LT',
          lastWeek: '[F\xF6rra] dddd[en] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'om %s',
          past: 'f\xF6r %s sedan',
          s: 'n\xE5gra sekunder',
          m: 'en minut',
          mm: '%d minuter',
          h: 'en timme',
          hh: '%d timmar',
          d: 'en dag',
          dd: '%d dagar',
          M: 'en m\xE5nad',
          MM: '%d m\xE5nader',
          y: 'ett \xE5r',
          yy: '%d \xE5r'
        },
        ordinal: function (number) {
          var b = number % 10, output = ~~(number % 100 / 10) === 1 ? 'e' : b === 1 ? 'a' : b === 2 ? 'a' : b === 3 ? 'e' : 'e';
          return number + output;
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('ta', {
        months: '\u0B9C\u0BA9\u0BB5\u0BB0\u0BBF_\u0BAA\u0BBF\u0BAA\u0BCD\u0BB0\u0BB5\u0BB0\u0BBF_\u0BAE\u0BBE\u0BB0\u0BCD\u0B9A\u0BCD_\u0B8F\u0BAA\u0BCD\u0BB0\u0BB2\u0BCD_\u0BAE\u0BC7_\u0B9C\u0BC2\u0BA9\u0BCD_\u0B9C\u0BC2\u0BB2\u0BC8_\u0B86\u0B95\u0BB8\u0BCD\u0B9F\u0BCD_\u0B9A\u0BC6\u0BAA\u0BCD\u0B9F\u0BC6\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD_\u0B85\u0B95\u0BCD\u0B9F\u0BC7\u0BBE\u0BAA\u0BB0\u0BCD_\u0BA8\u0BB5\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD_\u0B9F\u0BBF\u0B9A\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD'.split('_'),
        monthsShort: '\u0B9C\u0BA9\u0BB5\u0BB0\u0BBF_\u0BAA\u0BBF\u0BAA\u0BCD\u0BB0\u0BB5\u0BB0\u0BBF_\u0BAE\u0BBE\u0BB0\u0BCD\u0B9A\u0BCD_\u0B8F\u0BAA\u0BCD\u0BB0\u0BB2\u0BCD_\u0BAE\u0BC7_\u0B9C\u0BC2\u0BA9\u0BCD_\u0B9C\u0BC2\u0BB2\u0BC8_\u0B86\u0B95\u0BB8\u0BCD\u0B9F\u0BCD_\u0B9A\u0BC6\u0BAA\u0BCD\u0B9F\u0BC6\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD_\u0B85\u0B95\u0BCD\u0B9F\u0BC7\u0BBE\u0BAA\u0BB0\u0BCD_\u0BA8\u0BB5\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD_\u0B9F\u0BBF\u0B9A\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD'.split('_'),
        weekdays: '\u0B9E\u0BBE\u0BAF\u0BBF\u0BB1\u0BCD\u0BB1\u0BC1\u0B95\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8_\u0BA4\u0BBF\u0B99\u0BCD\u0B95\u0B9F\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8_\u0B9A\u0BC6\u0BB5\u0BCD\u0BB5\u0BBE\u0BAF\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8_\u0BAA\u0BC1\u0BA4\u0BA9\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8_\u0BB5\u0BBF\u0BAF\u0BBE\u0BB4\u0B95\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8_\u0BB5\u0BC6\u0BB3\u0BCD\u0BB3\u0BBF\u0B95\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8_\u0B9A\u0BA9\u0BBF\u0B95\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8'.split('_'),
        weekdaysShort: '\u0B9E\u0BBE\u0BAF\u0BBF\u0BB1\u0BC1_\u0BA4\u0BBF\u0B99\u0BCD\u0B95\u0BB3\u0BCD_\u0B9A\u0BC6\u0BB5\u0BCD\u0BB5\u0BBE\u0BAF\u0BCD_\u0BAA\u0BC1\u0BA4\u0BA9\u0BCD_\u0BB5\u0BBF\u0BAF\u0BBE\u0BB4\u0BA9\u0BCD_\u0BB5\u0BC6\u0BB3\u0BCD\u0BB3\u0BBF_\u0B9A\u0BA9\u0BBF'.split('_'),
        weekdaysMin: '\u0B9E\u0BBE_\u0BA4\u0BBF_\u0B9A\u0BC6_\u0BAA\u0BC1_\u0BB5\u0BBF_\u0BB5\u0BC6_\u0B9A'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY, LT',
          LLLL: 'dddd, D MMMM YYYY, LT'
        },
        calendar: {
          sameDay: '[\u0B87\u0BA9\u0BCD\u0BB1\u0BC1] LT',
          nextDay: '[\u0BA8\u0BBE\u0BB3\u0BC8] LT',
          nextWeek: 'dddd, LT',
          lastDay: '[\u0BA8\u0BC7\u0BB1\u0BCD\u0BB1\u0BC1] LT',
          lastWeek: '[\u0B95\u0B9F\u0BA8\u0BCD\u0BA4 \u0BB5\u0BBE\u0BB0\u0BAE\u0BCD] dddd, LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '%s \u0B87\u0BB2\u0BCD',
          past: '%s \u0BAE\u0BC1\u0BA9\u0BCD',
          s: '\u0B92\u0BB0\u0BC1 \u0B9A\u0BBF\u0BB2 \u0BB5\u0BBF\u0BA8\u0BBE\u0B9F\u0BBF\u0B95\u0BB3\u0BCD',
          m: '\u0B92\u0BB0\u0BC1 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BAE\u0BCD',
          mm: '%d \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0B99\u0BCD\u0B95\u0BB3\u0BCD',
          h: '\u0B92\u0BB0\u0BC1 \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD',
          hh: '%d \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD',
          d: '\u0B92\u0BB0\u0BC1 \u0BA8\u0BBE\u0BB3\u0BCD',
          dd: '%d \u0BA8\u0BBE\u0B9F\u0BCD\u0B95\u0BB3\u0BCD',
          M: '\u0B92\u0BB0\u0BC1 \u0BAE\u0BBE\u0BA4\u0BAE\u0BCD',
          MM: '%d \u0BAE\u0BBE\u0BA4\u0B99\u0BCD\u0B95\u0BB3\u0BCD',
          y: '\u0B92\u0BB0\u0BC1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BAE\u0BCD',
          yy: '%d \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BCD'
        },
        ordinal: function (number) {
          return number + '\u0BB5\u0BA4\u0BC1';
        },
        meridiem: function (hour, minute, isLower) {
          if (hour >= 6 && hour <= 10) {
            return ' \u0B95\u0BBE\u0BB2\u0BC8';
          } else if (hour >= 10 && hour <= 14) {
            return ' \u0BA8\u0BA3\u0BCD\u0BAA\u0B95\u0BB2\u0BCD';
          } else if (hour >= 14 && hour <= 18) {
            return ' \u0B8E\u0BB1\u0BCD\u0BAA\u0BBE\u0B9F\u0BC1';
          } else if (hour >= 18 && hour <= 20) {
            return ' \u0BAE\u0BBE\u0BB2\u0BC8';
          } else if (hour >= 20 && hour <= 24) {
            return ' \u0B87\u0BB0\u0BB5\u0BC1';
          } else if (hour >= 0 && hour <= 6) {
            return ' \u0BB5\u0BC8\u0B95\u0BB1\u0BC8';
          }
        },
        week: {
          dow: 0,
          doy: 6
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('th', {
        months: '\u0E21\u0E01\u0E23\u0E32\u0E04\u0E21_\u0E01\u0E38\u0E21\u0E20\u0E32\u0E1E\u0E31\u0E19\u0E18\u0E4C_\u0E21\u0E35\u0E19\u0E32\u0E04\u0E21_\u0E40\u0E21\u0E29\u0E32\u0E22\u0E19_\u0E1E\u0E24\u0E29\u0E20\u0E32\u0E04\u0E21_\u0E21\u0E34\u0E16\u0E38\u0E19\u0E32\u0E22\u0E19_\u0E01\u0E23\u0E01\u0E0E\u0E32\u0E04\u0E21_\u0E2A\u0E34\u0E07\u0E2B\u0E32\u0E04\u0E21_\u0E01\u0E31\u0E19\u0E22\u0E32\u0E22\u0E19_\u0E15\u0E38\u0E25\u0E32\u0E04\u0E21_\u0E1E\u0E24\u0E28\u0E08\u0E34\u0E01\u0E32\u0E22\u0E19_\u0E18\u0E31\u0E19\u0E27\u0E32\u0E04\u0E21'.split('_'),
        monthsShort: '\u0E21\u0E01\u0E23\u0E32_\u0E01\u0E38\u0E21\u0E20\u0E32_\u0E21\u0E35\u0E19\u0E32_\u0E40\u0E21\u0E29\u0E32_\u0E1E\u0E24\u0E29\u0E20\u0E32_\u0E21\u0E34\u0E16\u0E38\u0E19\u0E32_\u0E01\u0E23\u0E01\u0E0E\u0E32_\u0E2A\u0E34\u0E07\u0E2B\u0E32_\u0E01\u0E31\u0E19\u0E22\u0E32_\u0E15\u0E38\u0E25\u0E32_\u0E1E\u0E24\u0E28\u0E08\u0E34\u0E01\u0E32_\u0E18\u0E31\u0E19\u0E27\u0E32'.split('_'),
        weekdays: '\u0E2D\u0E32\u0E17\u0E34\u0E15\u0E22\u0E4C_\u0E08\u0E31\u0E19\u0E17\u0E23\u0E4C_\u0E2D\u0E31\u0E07\u0E04\u0E32\u0E23_\u0E1E\u0E38\u0E18_\u0E1E\u0E24\u0E2B\u0E31\u0E2A\u0E1A\u0E14\u0E35_\u0E28\u0E38\u0E01\u0E23\u0E4C_\u0E40\u0E2A\u0E32\u0E23\u0E4C'.split('_'),
        weekdaysShort: '\u0E2D\u0E32\u0E17\u0E34\u0E15\u0E22\u0E4C_\u0E08\u0E31\u0E19\u0E17\u0E23\u0E4C_\u0E2D\u0E31\u0E07\u0E04\u0E32\u0E23_\u0E1E\u0E38\u0E18_\u0E1E\u0E24\u0E2B\u0E31\u0E2A_\u0E28\u0E38\u0E01\u0E23\u0E4C_\u0E40\u0E2A\u0E32\u0E23\u0E4C'.split('_'),
        weekdaysMin: '\u0E2D\u0E32._\u0E08._\u0E2D._\u0E1E._\u0E1E\u0E24._\u0E28._\u0E2A.'.split('_'),
        longDateFormat: {
          LT: 'H \u0E19\u0E32\u0E2C\u0E34\u0E01\u0E32 m \u0E19\u0E32\u0E17\u0E35',
          L: 'YYYY/MM/DD',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY \u0E40\u0E27\u0E25\u0E32 LT',
          LLLL: '\u0E27\u0E31\u0E19dddd\u0E17\u0E35\u0E48 D MMMM YYYY \u0E40\u0E27\u0E25\u0E32 LT'
        },
        meridiem: function (hour, minute, isLower) {
          if (hour < 12) {
            return '\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07';
          } else {
            return '\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07';
          }
        },
        calendar: {
          sameDay: '[\u0E27\u0E31\u0E19\u0E19\u0E35\u0E49 \u0E40\u0E27\u0E25\u0E32] LT',
          nextDay: '[\u0E1E\u0E23\u0E38\u0E48\u0E07\u0E19\u0E35\u0E49 \u0E40\u0E27\u0E25\u0E32] LT',
          nextWeek: 'dddd[\u0E2B\u0E19\u0E49\u0E32 \u0E40\u0E27\u0E25\u0E32] LT',
          lastDay: '[\u0E40\u0E21\u0E37\u0E48\u0E2D\u0E27\u0E32\u0E19\u0E19\u0E35\u0E49 \u0E40\u0E27\u0E25\u0E32] LT',
          lastWeek: '[\u0E27\u0E31\u0E19]dddd[\u0E17\u0E35\u0E48\u0E41\u0E25\u0E49\u0E27 \u0E40\u0E27\u0E25\u0E32] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '\u0E2D\u0E35\u0E01 %s',
          past: '%s\u0E17\u0E35\u0E48\u0E41\u0E25\u0E49\u0E27',
          s: '\u0E44\u0E21\u0E48\u0E01\u0E35\u0E48\u0E27\u0E34\u0E19\u0E32\u0E17\u0E35',
          m: '1 \u0E19\u0E32\u0E17\u0E35',
          mm: '%d \u0E19\u0E32\u0E17\u0E35',
          h: '1 \u0E0A\u0E31\u0E48\u0E27\u0E42\u0E21\u0E07',
          hh: '%d \u0E0A\u0E31\u0E48\u0E27\u0E42\u0E21\u0E07',
          d: '1 \u0E27\u0E31\u0E19',
          dd: '%d \u0E27\u0E31\u0E19',
          M: '1 \u0E40\u0E14\u0E37\u0E2D\u0E19',
          MM: '%d \u0E40\u0E14\u0E37\u0E2D\u0E19',
          y: '1 \u0E1B\u0E35',
          yy: '%d \u0E1B\u0E35'
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('tl-ph', {
        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'MM/D/YYYY',
          LL: 'MMMM D, YYYY',
          LLL: 'MMMM D, YYYY LT',
          LLLL: 'dddd, MMMM DD, YYYY LT'
        },
        calendar: {
          sameDay: '[Ngayon sa] LT',
          nextDay: '[Bukas sa] LT',
          nextWeek: 'dddd [sa] LT',
          lastDay: '[Kahapon sa] LT',
          lastWeek: 'dddd [huling linggo] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'sa loob ng %s',
          past: '%s ang nakalipas',
          s: 'ilang segundo',
          m: 'isang minuto',
          mm: '%d minuto',
          h: 'isang oras',
          hh: '%d oras',
          d: 'isang araw',
          dd: '%d araw',
          M: 'isang buwan',
          MM: '%d buwan',
          y: 'isang taon',
          yy: '%d taon'
        },
        ordinal: function (number) {
          return number;
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      var suffixes = {
          1: '\'inci',
          5: '\'inci',
          8: '\'inci',
          70: '\'inci',
          80: '\'inci',
          2: '\'nci',
          7: '\'nci',
          20: '\'nci',
          50: '\'nci',
          3: '\'\xFCnc\xFC',
          4: '\'\xFCnc\xFC',
          100: '\'\xFCnc\xFC',
          6: '\'nc\u0131',
          9: '\'uncu',
          10: '\'uncu',
          30: '\'uncu',
          60: '\'\u0131nc\u0131',
          90: '\'\u0131nc\u0131'
        };
      return moment.defineLocale('tr', {
        months: 'Ocak_\u015Eubat_Mart_Nisan_May\u0131s_Haziran_Temmuz_A\u011Fustos_Eyl\xFCl_Ekim_Kas\u0131m_Aral\u0131k'.split('_'),
        monthsShort: 'Oca_\u015Eub_Mar_Nis_May_Haz_Tem_A\u011Fu_Eyl_Eki_Kas_Ara'.split('_'),
        weekdays: 'Pazar_Pazartesi_Sal\u0131_\xC7ar\u015Famba_Per\u015Fembe_Cuma_Cumartesi'.split('_'),
        weekdaysShort: 'Paz_Pts_Sal_\xC7ar_Per_Cum_Cts'.split('_'),
        weekdaysMin: 'Pz_Pt_Sa_\xC7a_Pe_Cu_Ct'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD.MM.YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[bug\xFCn saat] LT',
          nextDay: '[yar\u0131n saat] LT',
          nextWeek: '[haftaya] dddd [saat] LT',
          lastDay: '[d\xFCn] LT',
          lastWeek: '[ge\xE7en hafta] dddd [saat] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '%s sonra',
          past: '%s \xF6nce',
          s: 'birka\xE7 saniye',
          m: 'bir dakika',
          mm: '%d dakika',
          h: 'bir saat',
          hh: '%d saat',
          d: 'bir g\xFCn',
          dd: '%d g\xFCn',
          M: 'bir ay',
          MM: '%d ay',
          y: 'bir y\u0131l',
          yy: '%d y\u0131l'
        },
        ordinal: function (number) {
          if (number === 0) {
            return number + '\'\u0131nc\u0131';
          }
          var a = number % 10, b = number % 100 - a, c = number >= 100 ? 100 : null;
          return number + (suffixes[a] || suffixes[b] || suffixes[c]);
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('tzm-latn', {
        months: 'innayr_br\u02E4ayr\u02E4_mar\u02E4s\u02E4_ibrir_mayyw_ywnyw_ywlywz_\u0263w\u0161t_\u0161wtanbir_kt\u02E4wbr\u02E4_nwwanbir_dwjnbir'.split('_'),
        monthsShort: 'innayr_br\u02E4ayr\u02E4_mar\u02E4s\u02E4_ibrir_mayyw_ywnyw_ywlywz_\u0263w\u0161t_\u0161wtanbir_kt\u02E4wbr\u02E4_nwwanbir_dwjnbir'.split('_'),
        weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asi\u1E0Dyas'.split('_'),
        weekdaysShort: 'asamas_aynas_asinas_akras_akwas_asimwas_asi\u1E0Dyas'.split('_'),
        weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asi\u1E0Dyas'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[asdkh g] LT',
          nextDay: '[aska g] LT',
          nextWeek: 'dddd [g] LT',
          lastDay: '[assant g] LT',
          lastWeek: 'dddd [g] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: 'dadkh s yan %s',
          past: 'yan %s',
          s: 'imik',
          m: 'minu\u1E0D',
          mm: '%d minu\u1E0D',
          h: 'sa\u025Ba',
          hh: '%d tassa\u025Bin',
          d: 'ass',
          dd: '%d ossan',
          M: 'ayowr',
          MM: '%d iyyirn',
          y: 'asgas',
          yy: '%d isgasn'
        },
        week: {
          dow: 6,
          doy: 12
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('tzm', {
        months: '\u2D49\u2D4F\u2D4F\u2D30\u2D62\u2D54_\u2D31\u2D55\u2D30\u2D62\u2D55_\u2D4E\u2D30\u2D55\u2D5A_\u2D49\u2D31\u2D54\u2D49\u2D54_\u2D4E\u2D30\u2D62\u2D62\u2D53_\u2D62\u2D53\u2D4F\u2D62\u2D53_\u2D62\u2D53\u2D4D\u2D62\u2D53\u2D63_\u2D56\u2D53\u2D5B\u2D5C_\u2D5B\u2D53\u2D5C\u2D30\u2D4F\u2D31\u2D49\u2D54_\u2D3D\u2D5F\u2D53\u2D31\u2D55_\u2D4F\u2D53\u2D61\u2D30\u2D4F\u2D31\u2D49\u2D54_\u2D37\u2D53\u2D4A\u2D4F\u2D31\u2D49\u2D54'.split('_'),
        monthsShort: '\u2D49\u2D4F\u2D4F\u2D30\u2D62\u2D54_\u2D31\u2D55\u2D30\u2D62\u2D55_\u2D4E\u2D30\u2D55\u2D5A_\u2D49\u2D31\u2D54\u2D49\u2D54_\u2D4E\u2D30\u2D62\u2D62\u2D53_\u2D62\u2D53\u2D4F\u2D62\u2D53_\u2D62\u2D53\u2D4D\u2D62\u2D53\u2D63_\u2D56\u2D53\u2D5B\u2D5C_\u2D5B\u2D53\u2D5C\u2D30\u2D4F\u2D31\u2D49\u2D54_\u2D3D\u2D5F\u2D53\u2D31\u2D55_\u2D4F\u2D53\u2D61\u2D30\u2D4F\u2D31\u2D49\u2D54_\u2D37\u2D53\u2D4A\u2D4F\u2D31\u2D49\u2D54'.split('_'),
        weekdays: '\u2D30\u2D59\u2D30\u2D4E\u2D30\u2D59_\u2D30\u2D62\u2D4F\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D4F\u2D30\u2D59_\u2D30\u2D3D\u2D54\u2D30\u2D59_\u2D30\u2D3D\u2D61\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D4E\u2D61\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D39\u2D62\u2D30\u2D59'.split('_'),
        weekdaysShort: '\u2D30\u2D59\u2D30\u2D4E\u2D30\u2D59_\u2D30\u2D62\u2D4F\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D4F\u2D30\u2D59_\u2D30\u2D3D\u2D54\u2D30\u2D59_\u2D30\u2D3D\u2D61\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D4E\u2D61\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D39\u2D62\u2D30\u2D59'.split('_'),
        weekdaysMin: '\u2D30\u2D59\u2D30\u2D4E\u2D30\u2D59_\u2D30\u2D62\u2D4F\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D4F\u2D30\u2D59_\u2D30\u2D3D\u2D54\u2D30\u2D59_\u2D30\u2D3D\u2D61\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D4E\u2D61\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D39\u2D62\u2D30\u2D59'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
          sameDay: '[\u2D30\u2D59\u2D37\u2D45 \u2D34] LT',
          nextDay: '[\u2D30\u2D59\u2D3D\u2D30 \u2D34] LT',
          nextWeek: 'dddd [\u2D34] LT',
          lastDay: '[\u2D30\u2D5A\u2D30\u2D4F\u2D5C \u2D34] LT',
          lastWeek: 'dddd [\u2D34] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '\u2D37\u2D30\u2D37\u2D45 \u2D59 \u2D62\u2D30\u2D4F %s',
          past: '\u2D62\u2D30\u2D4F %s',
          s: '\u2D49\u2D4E\u2D49\u2D3D',
          m: '\u2D4E\u2D49\u2D4F\u2D53\u2D3A',
          mm: '%d \u2D4E\u2D49\u2D4F\u2D53\u2D3A',
          h: '\u2D59\u2D30\u2D44\u2D30',
          hh: '%d \u2D5C\u2D30\u2D59\u2D59\u2D30\u2D44\u2D49\u2D4F',
          d: '\u2D30\u2D59\u2D59',
          dd: '%d o\u2D59\u2D59\u2D30\u2D4F',
          M: '\u2D30\u2D62o\u2D53\u2D54',
          MM: '%d \u2D49\u2D62\u2D62\u2D49\u2D54\u2D4F',
          y: '\u2D30\u2D59\u2D33\u2D30\u2D59',
          yy: '%d \u2D49\u2D59\u2D33\u2D30\u2D59\u2D4F'
        },
        week: {
          dow: 6,
          doy: 12
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
      }
      function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': '\u0445\u0432\u0438\u043B\u0438\u043D\u0430_\u0445\u0432\u0438\u043B\u0438\u043D\u0438_\u0445\u0432\u0438\u043B\u0438\u043D',
            'hh': '\u0433\u043E\u0434\u0438\u043D\u0430_\u0433\u043E\u0434\u0438\u043D\u0438_\u0433\u043E\u0434\u0438\u043D',
            'dd': '\u0434\u0435\u043D\u044C_\u0434\u043D\u0456_\u0434\u043D\u0456\u0432',
            'MM': '\u043C\u0456\u0441\u044F\u0446\u044C_\u043C\u0456\u0441\u044F\u0446\u0456_\u043C\u0456\u0441\u044F\u0446\u0456\u0432',
            'yy': '\u0440\u0456\u043A_\u0440\u043E\u043A\u0438_\u0440\u043E\u043A\u0456\u0432'
          };
        if (key === 'm') {
          return withoutSuffix ? '\u0445\u0432\u0438\u043B\u0438\u043D\u0430' : '\u0445\u0432\u0438\u043B\u0438\u043D\u0443';
        } else if (key === 'h') {
          return withoutSuffix ? '\u0433\u043E\u0434\u0438\u043D\u0430' : '\u0433\u043E\u0434\u0438\u043D\u0443';
        } else {
          return number + ' ' + plural(format[key], +number);
        }
      }
      function monthsCaseReplace(m, format) {
        var months = {
            'nominative': '\u0441\u0456\u0447\u0435\u043D\u044C_\u043B\u044E\u0442\u0438\u0439_\u0431\u0435\u0440\u0435\u0437\u0435\u043D\u044C_\u043A\u0432\u0456\u0442\u0435\u043D\u044C_\u0442\u0440\u0430\u0432\u0435\u043D\u044C_\u0447\u0435\u0440\u0432\u0435\u043D\u044C_\u043B\u0438\u043F\u0435\u043D\u044C_\u0441\u0435\u0440\u043F\u0435\u043D\u044C_\u0432\u0435\u0440\u0435\u0441\u0435\u043D\u044C_\u0436\u043E\u0432\u0442\u0435\u043D\u044C_\u043B\u0438\u0441\u0442\u043E\u043F\u0430\u0434_\u0433\u0440\u0443\u0434\u0435\u043D\u044C'.split('_'),
            'accusative': '\u0441\u0456\u0447\u043D\u044F_\u043B\u044E\u0442\u043E\u0433\u043E_\u0431\u0435\u0440\u0435\u0437\u043D\u044F_\u043A\u0432\u0456\u0442\u043D\u044F_\u0442\u0440\u0430\u0432\u043D\u044F_\u0447\u0435\u0440\u0432\u043D\u044F_\u043B\u0438\u043F\u043D\u044F_\u0441\u0435\u0440\u043F\u043D\u044F_\u0432\u0435\u0440\u0435\u0441\u043D\u044F_\u0436\u043E\u0432\u0442\u043D\u044F_\u043B\u0438\u0441\u0442\u043E\u043F\u0430\u0434\u0430_\u0433\u0440\u0443\u0434\u043D\u044F'.split('_')
          }, nounCase = /D[oD]? *MMMM?/.test(format) ? 'accusative' : 'nominative';
        return months[nounCase][m.month()];
      }
      function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': '\u043D\u0435\u0434\u0456\u043B\u044F_\u043F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A_\u0432\u0456\u0432\u0442\u043E\u0440\u043E\u043A_\u0441\u0435\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0435\u0440_\u043F\u2019\u044F\u0442\u043D\u0438\u0446\u044F_\u0441\u0443\u0431\u043E\u0442\u0430'.split('_'),
            'accusative': '\u043D\u0435\u0434\u0456\u043B\u044E_\u043F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A_\u0432\u0456\u0432\u0442\u043E\u0440\u043E\u043A_\u0441\u0435\u0440\u0435\u0434\u0443_\u0447\u0435\u0442\u0432\u0435\u0440_\u043F\u2019\u044F\u0442\u043D\u0438\u0446\u044E_\u0441\u0443\u0431\u043E\u0442\u0443'.split('_'),
            'genitive': '\u043D\u0435\u0434\u0456\u043B\u0456_\u043F\u043E\u043D\u0435\u0434\u0456\u043B\u043A\u0430_\u0432\u0456\u0432\u0442\u043E\u0440\u043A\u0430_\u0441\u0435\u0440\u0435\u0434\u0438_\u0447\u0435\u0442\u0432\u0435\u0440\u0433\u0430_\u043F\u2019\u044F\u0442\u043D\u0438\u0446\u0456_\u0441\u0443\u0431\u043E\u0442\u0438'.split('_')
          }, nounCase = /(\[[ВвУу]\]) ?dddd/.test(format) ? 'accusative' : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(format) ? 'genitive' : 'nominative';
        return weekdays[nounCase][m.day()];
      }
      function processHoursFunction(str) {
        return function () {
          return str + '\u043E' + (this.hours() === 11 ? '\u0431' : '') + '] LT';
        };
      }
      return moment.defineLocale('uk', {
        months: monthsCaseReplace,
        monthsShort: '\u0441\u0456\u0447_\u043B\u044E\u0442_\u0431\u0435\u0440_\u043A\u0432\u0456\u0442_\u0442\u0440\u0430\u0432_\u0447\u0435\u0440\u0432_\u043B\u0438\u043F_\u0441\u0435\u0440\u043F_\u0432\u0435\u0440_\u0436\u043E\u0432\u0442_\u043B\u0438\u0441\u0442_\u0433\u0440\u0443\u0434'.split('_'),
        weekdays: weekdaysCaseReplace,
        weekdaysShort: '\u043D\u0434_\u043F\u043D_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043F\u0442_\u0441\u0431'.split('_'),
        weekdaysMin: '\u043D\u0434_\u043F\u043D_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043F\u0442_\u0441\u0431'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD.MM.YYYY',
          LL: 'D MMMM YYYY \u0440.',
          LLL: 'D MMMM YYYY \u0440., LT',
          LLLL: 'dddd, D MMMM YYYY \u0440., LT'
        },
        calendar: {
          sameDay: processHoursFunction('[\u0421\u044C\u043E\u0433\u043E\u0434\u043D\u0456 '),
          nextDay: processHoursFunction('[\u0417\u0430\u0432\u0442\u0440\u0430 '),
          lastDay: processHoursFunction('[\u0412\u0447\u043E\u0440\u0430 '),
          nextWeek: processHoursFunction('[\u0423] dddd ['),
          lastWeek: function () {
            switch (this.day()) {
            case 0:
            case 3:
            case 5:
            case 6:
              return processHoursFunction('[\u041C\u0438\u043D\u0443\u043B\u043E\u0457] dddd [').call(this);
            case 1:
            case 2:
            case 4:
              return processHoursFunction('[\u041C\u0438\u043D\u0443\u043B\u043E\u0433\u043E] dddd [').call(this);
            }
          },
          sameElse: 'L'
        },
        relativeTime: {
          future: '\u0437\u0430 %s',
          past: '%s \u0442\u043E\u043C\u0443',
          s: '\u0434\u0435\u043A\u0456\u043B\u044C\u043A\u0430 \u0441\u0435\u043A\u0443\u043D\u0434',
          m: relativeTimeWithPlural,
          mm: relativeTimeWithPlural,
          h: '\u0433\u043E\u0434\u0438\u043D\u0443',
          hh: relativeTimeWithPlural,
          d: '\u0434\u0435\u043D\u044C',
          dd: relativeTimeWithPlural,
          M: '\u043C\u0456\u0441\u044F\u0446\u044C',
          MM: relativeTimeWithPlural,
          y: '\u0440\u0456\u043A',
          yy: relativeTimeWithPlural
        },
        meridiem: function (hour, minute, isLower) {
          if (hour < 4) {
            return '\u043D\u043E\u0447\u0456';
          } else if (hour < 12) {
            return '\u0440\u0430\u043D\u043A\u0443';
          } else if (hour < 17) {
            return '\u0434\u043D\u044F';
          } else {
            return '\u0432\u0435\u0447\u043E\u0440\u0430';
          }
        },
        ordinal: function (number, period) {
          switch (period) {
          case 'M':
          case 'd':
          case 'DDD':
          case 'w':
          case 'W':
            return number + '-\u0439';
          case 'D':
            return number + '-\u0433\u043E';
          default:
            return number;
          }
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('uz', {
        months: '\u044F\u043D\u0432\u0430\u0440\u044C_\u0444\u0435\u0432\u0440\u0430\u043B\u044C_\u043C\u0430\u0440\u0442_\u0430\u043F\u0440\u0435\u043B\u044C_\u043C\u0430\u0439_\u0438\u044E\u043D\u044C_\u0438\u044E\u043B\u044C_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044C_\u043E\u043A\u0442\u044F\u0431\u0440\u044C_\u043D\u043E\u044F\u0431\u0440\u044C_\u0434\u0435\u043A\u0430\u0431\u0440\u044C'.split('_'),
        monthsShort: '\u044F\u043D\u0432_\u0444\u0435\u0432_\u043C\u0430\u0440_\u0430\u043F\u0440_\u043C\u0430\u0439_\u0438\u044E\u043D_\u0438\u044E\u043B_\u0430\u0432\u0433_\u0441\u0435\u043D_\u043E\u043A\u0442_\u043D\u043E\u044F_\u0434\u0435\u043A'.split('_'),
        weekdays: '\u042F\u043A\u0448\u0430\u043D\u0431\u0430_\u0414\u0443\u0448\u0430\u043D\u0431\u0430_\u0421\u0435\u0448\u0430\u043D\u0431\u0430_\u0427\u043E\u0440\u0448\u0430\u043D\u0431\u0430_\u041F\u0430\u0439\u0448\u0430\u043D\u0431\u0430_\u0416\u0443\u043C\u0430_\u0428\u0430\u043D\u0431\u0430'.split('_'),
        weekdaysShort: '\u042F\u043A\u0448_\u0414\u0443\u0448_\u0421\u0435\u0448_\u0427\u043E\u0440_\u041F\u0430\u0439_\u0416\u0443\u043C_\u0428\u0430\u043D'.split('_'),
        weekdaysMin: '\u042F\u043A_\u0414\u0443_\u0421\u0435_\u0427\u043E_\u041F\u0430_\u0416\u0443_\u0428\u0430'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM YYYY',
          LLL: 'D MMMM YYYY LT',
          LLLL: 'D MMMM YYYY, dddd LT'
        },
        calendar: {
          sameDay: '[\u0411\u0443\u0433\u0443\u043D \u0441\u043E\u0430\u0442] LT [\u0434\u0430]',
          nextDay: '[\u042D\u0440\u0442\u0430\u0433\u0430] LT [\u0434\u0430]',
          nextWeek: 'dddd [\u043A\u0443\u043D\u0438 \u0441\u043E\u0430\u0442] LT [\u0434\u0430]',
          lastDay: '[\u041A\u0435\u0447\u0430 \u0441\u043E\u0430\u0442] LT [\u0434\u0430]',
          lastWeek: '[\u0423\u0442\u0433\u0430\u043D] dddd [\u043A\u0443\u043D\u0438 \u0441\u043E\u0430\u0442] LT [\u0434\u0430]',
          sameElse: 'L'
        },
        relativeTime: {
          future: '\u042F\u043A\u0438\u043D %s \u0438\u0447\u0438\u0434\u0430',
          past: '\u0411\u0438\u0440 \u043D\u0435\u0447\u0430 %s \u043E\u043B\u0434\u0438\u043D',
          s: '\u0444\u0443\u0440\u0441\u0430\u0442',
          m: '\u0431\u0438\u0440 \u0434\u0430\u043A\u0438\u043A\u0430',
          mm: '%d \u0434\u0430\u043A\u0438\u043A\u0430',
          h: '\u0431\u0438\u0440 \u0441\u043E\u0430\u0442',
          hh: '%d \u0441\u043E\u0430\u0442',
          d: '\u0431\u0438\u0440 \u043A\u0443\u043D',
          dd: '%d \u043A\u0443\u043D',
          M: '\u0431\u0438\u0440 \u043E\u0439',
          MM: '%d \u043E\u0439',
          y: '\u0431\u0438\u0440 \u0439\u0438\u043B',
          yy: '%d \u0439\u0438\u043B'
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('vi', {
        months: 'th\xE1ng 1_th\xE1ng 2_th\xE1ng 3_th\xE1ng 4_th\xE1ng 5_th\xE1ng 6_th\xE1ng 7_th\xE1ng 8_th\xE1ng 9_th\xE1ng 10_th\xE1ng 11_th\xE1ng 12'.split('_'),
        monthsShort: 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
        weekdays: 'ch\u1EE7 nh\u1EADt_th\u1EE9 hai_th\u1EE9 ba_th\u1EE9 t\u01B0_th\u1EE9 n\u0103m_th\u1EE9 s\xE1u_th\u1EE9 b\u1EA3y'.split('_'),
        weekdaysShort: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysMin: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        longDateFormat: {
          LT: 'HH:mm',
          L: 'DD/MM/YYYY',
          LL: 'D MMMM [n\u0103m] YYYY',
          LLL: 'D MMMM [n\u0103m] YYYY LT',
          LLLL: 'dddd, D MMMM [n\u0103m] YYYY LT',
          l: 'DD/M/YYYY',
          ll: 'D MMM YYYY',
          lll: 'D MMM YYYY LT',
          llll: 'ddd, D MMM YYYY LT'
        },
        calendar: {
          sameDay: '[H\xF4m nay l\xFAc] LT',
          nextDay: '[Ng\xE0y mai l\xFAc] LT',
          nextWeek: 'dddd [tu\u1EA7n t\u1EDBi l\xFAc] LT',
          lastDay: '[H\xF4m qua l\xFAc] LT',
          lastWeek: 'dddd [tu\u1EA7n r\u1ED3i l\xFAc] LT',
          sameElse: 'L'
        },
        relativeTime: {
          future: '%s t\u1EDBi',
          past: '%s tr\u01B0\u1EDBc',
          s: 'v\xE0i gi\xE2y',
          m: 'm\u1ED9t ph\xFAt',
          mm: '%d ph\xFAt',
          h: 'm\u1ED9t gi\u1EDD',
          hh: '%d gi\u1EDD',
          d: 'm\u1ED9t ng\xE0y',
          dd: '%d ng\xE0y',
          M: 'm\u1ED9t th\xE1ng',
          MM: '%d th\xE1ng',
          y: 'm\u1ED9t n\u0103m',
          yy: '%d n\u0103m'
        },
        ordinal: function (number) {
          return number;
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('zh-cn', {
        months: '\u4E00\u6708_\u4E8C\u6708_\u4E09\u6708_\u56DB\u6708_\u4E94\u6708_\u516D\u6708_\u4E03\u6708_\u516B\u6708_\u4E5D\u6708_\u5341\u6708_\u5341\u4E00\u6708_\u5341\u4E8C\u6708'.split('_'),
        monthsShort: '1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708'.split('_'),
        weekdays: '\u661F\u671F\u65E5_\u661F\u671F\u4E00_\u661F\u671F\u4E8C_\u661F\u671F\u4E09_\u661F\u671F\u56DB_\u661F\u671F\u4E94_\u661F\u671F\u516D'.split('_'),
        weekdaysShort: '\u5468\u65E5_\u5468\u4E00_\u5468\u4E8C_\u5468\u4E09_\u5468\u56DB_\u5468\u4E94_\u5468\u516D'.split('_'),
        weekdaysMin: '\u65E5_\u4E00_\u4E8C_\u4E09_\u56DB_\u4E94_\u516D'.split('_'),
        longDateFormat: {
          LT: 'Ah\u70B9mm',
          L: 'YYYY-MM-DD',
          LL: 'YYYY\u5E74MMMD\u65E5',
          LLL: 'YYYY\u5E74MMMD\u65E5LT',
          LLLL: 'YYYY\u5E74MMMD\u65E5ddddLT',
          l: 'YYYY-MM-DD',
          ll: 'YYYY\u5E74MMMD\u65E5',
          lll: 'YYYY\u5E74MMMD\u65E5LT',
          llll: 'YYYY\u5E74MMMD\u65E5ddddLT'
        },
        meridiem: function (hour, minute, isLower) {
          var hm = hour * 100 + minute;
          if (hm < 600) {
            return '\u51CC\u6668';
          } else if (hm < 900) {
            return '\u65E9\u4E0A';
          } else if (hm < 1130) {
            return '\u4E0A\u5348';
          } else if (hm < 1230) {
            return '\u4E2D\u5348';
          } else if (hm < 1800) {
            return '\u4E0B\u5348';
          } else {
            return '\u665A\u4E0A';
          }
        },
        calendar: {
          sameDay: function () {
            return this.minutes() === 0 ? '[\u4ECA\u5929]Ah[\u70B9\u6574]' : '[\u4ECA\u5929]LT';
          },
          nextDay: function () {
            return this.minutes() === 0 ? '[\u660E\u5929]Ah[\u70B9\u6574]' : '[\u660E\u5929]LT';
          },
          lastDay: function () {
            return this.minutes() === 0 ? '[\u6628\u5929]Ah[\u70B9\u6574]' : '[\u6628\u5929]LT';
          },
          nextWeek: function () {
            var startOfWeek, prefix;
            startOfWeek = moment().startOf('week');
            prefix = this.unix() - startOfWeek.unix() >= 7 * 24 * 3600 ? '[\u4E0B]' : '[\u672C]';
            return this.minutes() === 0 ? prefix + 'dddAh\u70B9\u6574' : prefix + 'dddAh\u70B9mm';
          },
          lastWeek: function () {
            var startOfWeek, prefix;
            startOfWeek = moment().startOf('week');
            prefix = this.unix() < startOfWeek.unix() ? '[\u4E0A]' : '[\u672C]';
            return this.minutes() === 0 ? prefix + 'dddAh\u70B9\u6574' : prefix + 'dddAh\u70B9mm';
          },
          sameElse: 'LL'
        },
        ordinal: function (number, period) {
          switch (period) {
          case 'd':
          case 'D':
          case 'DDD':
            return number + '\u65E5';
          case 'M':
            return number + '\u6708';
          case 'w':
          case 'W':
            return number + '\u5468';
          default:
            return number;
          }
        },
        relativeTime: {
          future: '%s\u5185',
          past: '%s\u524D',
          s: '\u51E0\u79D2',
          m: '1\u5206\u949F',
          mm: '%d\u5206\u949F',
          h: '1\u5C0F\u65F6',
          hh: '%d\u5C0F\u65F6',
          d: '1\u5929',
          dd: '%d\u5929',
          M: '1\u4E2A\u6708',
          MM: '%d\u4E2A\u6708',
          y: '1\u5E74',
          yy: '%d\u5E74'
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }));
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);
      } else if (typeof exports === 'object') {
        module.exports = factory(require('./node_modules/moment/moment.js'));
      } else {
        factory(window.moment);
      }
    }(function (moment) {
      return moment.defineLocale('zh-tw', {
        months: '\u4E00\u6708_\u4E8C\u6708_\u4E09\u6708_\u56DB\u6708_\u4E94\u6708_\u516D\u6708_\u4E03\u6708_\u516B\u6708_\u4E5D\u6708_\u5341\u6708_\u5341\u4E00\u6708_\u5341\u4E8C\u6708'.split('_'),
        monthsShort: '1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708'.split('_'),
        weekdays: '\u661F\u671F\u65E5_\u661F\u671F\u4E00_\u661F\u671F\u4E8C_\u661F\u671F\u4E09_\u661F\u671F\u56DB_\u661F\u671F\u4E94_\u661F\u671F\u516D'.split('_'),
        weekdaysShort: '\u9031\u65E5_\u9031\u4E00_\u9031\u4E8C_\u9031\u4E09_\u9031\u56DB_\u9031\u4E94_\u9031\u516D'.split('_'),
        weekdaysMin: '\u65E5_\u4E00_\u4E8C_\u4E09_\u56DB_\u4E94_\u516D'.split('_'),
        longDateFormat: {
          LT: 'Ah\u9EDEmm',
          L: 'YYYY\u5E74MMMD\u65E5',
          LL: 'YYYY\u5E74MMMD\u65E5',
          LLL: 'YYYY\u5E74MMMD\u65E5LT',
          LLLL: 'YYYY\u5E74MMMD\u65E5ddddLT',
          l: 'YYYY\u5E74MMMD\u65E5',
          ll: 'YYYY\u5E74MMMD\u65E5',
          lll: 'YYYY\u5E74MMMD\u65E5LT',
          llll: 'YYYY\u5E74MMMD\u65E5ddddLT'
        },
        meridiem: function (hour, minute, isLower) {
          var hm = hour * 100 + minute;
          if (hm < 900) {
            return '\u65E9\u4E0A';
          } else if (hm < 1130) {
            return '\u4E0A\u5348';
          } else if (hm < 1230) {
            return '\u4E2D\u5348';
          } else if (hm < 1800) {
            return '\u4E0B\u5348';
          } else {
            return '\u665A\u4E0A';
          }
        },
        calendar: {
          sameDay: '[\u4ECA\u5929]LT',
          nextDay: '[\u660E\u5929]LT',
          nextWeek: '[\u4E0B]ddddLT',
          lastDay: '[\u6628\u5929]LT',
          lastWeek: '[\u4E0A]ddddLT',
          sameElse: 'L'
        },
        ordinal: function (number, period) {
          switch (period) {
          case 'd':
          case 'D':
          case 'DDD':
            return number + '\u65E5';
          case 'M':
            return number + '\u6708';
          case 'w':
          case 'W':
            return number + '\u9031';
          default:
            return number;
          }
        },
        relativeTime: {
          future: '%s\u5167',
          past: '%s\u524D',
          s: '\u5E7E\u79D2',
          m: '\u4E00\u5206\u9418',
          mm: '%d\u5206\u9418',
          h: '\u4E00\u5C0F\u6642',
          hh: '%d\u5C0F\u6642',
          d: '\u4E00\u5929',
          dd: '%d\u5929',
          M: '\u4E00\u500B\u6708',
          MM: '%d\u500B\u6708',
          y: '\u4E00\u5E74',
          yy: '%d\u5E74'
        }
      });
    }));
  },
  './node_modules/spotify-liburi/src/uri.js': function (require, module, exports, global) {
    'use strict';
    var Base62 = require('./node_modules/spotify-crypto/src/base62.js');
    var URI_PREFIX = 'spotify:';
    var PLAY_HTTP_PREFIX = 'http://play.spotify.com/';
    var PLAY_HTTPS_PREFIX = 'https://play.spotify.com/';
    var OPEN_HTTP_PREFIX = 'http://open.spotify.com/';
    var OPEN_HTTPS_PREFIX = 'https://open.spotify.com/';
    var ERROR_INVALID = new TypeError('Invalid Spotify URI!');
    var ERROR_NOT_IMPLEMENTED = new TypeError('Not implemented!');
    var Format = {
        URI: 0,
        URL: 1
      };
    var SplittedURI;
    var _splitIntoComponents = function (str) {
      var components;
      var format = Format.URL;
      if (str.indexOf(URI_PREFIX) == 0) {
        return {
          components: str.slice(URI_PREFIX.length).split(':'),
          format: Format.URI
        };
      }
      str = str.split('?')[0];
      if (str.indexOf(PLAY_HTTP_PREFIX) == 0) {
        components = str.slice(PLAY_HTTP_PREFIX.length).split('/');
      } else if (str.indexOf(PLAY_HTTPS_PREFIX) == 0) {
        components = str.slice(PLAY_HTTPS_PREFIX.length).split('/');
      } else if (str.indexOf(OPEN_HTTP_PREFIX) == 0) {
        components = str.slice(OPEN_HTTP_PREFIX.length).split('/');
      } else if (str.indexOf(OPEN_HTTPS_PREFIX) == 0) {
        components = str.slice(OPEN_HTTPS_PREFIX.length).split('/');
      } else {
        throw ERROR_INVALID;
      }
      return {
        format: format,
        components: components
      };
    };
    var _encodeComponent = function (component, format) {
      component = encodeURIComponent(component);
      if (format === Format.URI) {
        component = component.replace(/%20/g, '+');
      }
      component = component.replace(/[!'()]/g, escape);
      component = component.replace(/\*/g, '%2A');
      return component;
    };
    var _decodeComponent = function (component, format) {
      var part = format == Format.URI ? component.replace(/\+/g, '%20') : component;
      return decodeURIComponent(part);
    };
    var _getComponents = function (uri, format) {
      var base62;
      if (uri.id) {
        base62 = Base62.fromHex(uri.id, 22);
      }
      var components;
      var i;
      var len;
      switch (uri.type) {
      case URI.Type.ALBUM:
        components = [
          URI.Type.ALBUM,
          base62
        ];
        if (uri.disc) {
          components.push(uri.disc);
        }
        return components;
      case URI.Type.AD:
        return [
          URI.Type.AD,
          uri.id
        ];
      case URI.Type.ARTIST:
        return [
          URI.Type.ARTIST,
          base62
        ];
      case URI.Type.ARTIST_TOPLIST:
        return [
          URI.Type.ARTIST,
          base62,
          URI.Type.TOP,
          uri.toplist
        ];
      case URI.Type.SEARCH:
        return [
          URI.Type.SEARCH,
          _encodeComponent(uri.query, format)
        ];
      case URI.Type.TRACK:
        return [
          URI.Type.TRACK,
          base62
        ];
      case URI.Type.TRACKSET:
        var trackIds = [];
        for (i = 0, len = uri.tracks.length; i < len; i++) {
          trackIds.push(Base62.fromHex(uri.tracks[i].id, 22));
        }
        trackIds = [trackIds.join(',')];
        if (uri.index !== null) {
          trackIds.push('#', uri.index);
        }
        return [
          URI.Type.TRACKSET,
          _encodeComponent(uri.name)
        ].concat(trackIds);
      case URI.Type.FACEBOOK:
        return [
          URI.Type.USER,
          URI.Type.FACEBOOK,
          uri.uid
        ];
      case URI.Type.AUDIO_FILE:
        return [
          URI.Type.AUDIO_FILE,
          uri.extension,
          uri.id
        ];
      case URI.Type.FOLDER:
        return [
          URI.Type.USER,
          _encodeComponent(uri.username, format),
          URI.Type.FOLDER,
          uri.id
        ];
      case URI.Type.FOLLOWERS:
        return [
          URI.Type.USER,
          _encodeComponent(uri.username, format),
          URI.Type.FOLLOWERS
        ];
      case URI.Type.FOLLOWING:
        return [
          URI.Type.USER,
          _encodeComponent(uri.username, format),
          URI.Type.FOLLOWING
        ];
      case URI.Type.PLAYLIST:
        return [
          URI.Type.USER,
          _encodeComponent(uri.username, format),
          URI.Type.PLAYLIST,
          base62
        ];
      case URI.Type.STARRED:
        return [
          URI.Type.USER,
          _encodeComponent(uri.username, format),
          URI.Type.STARRED
        ];
      case URI.Type.TEMP_PLAYLIST:
        return [
          URI.Type.TEMP_PLAYLIST,
          uri.origin,
          uri.data
        ];
      case URI.Type.CONTEXT_GROUP:
        return [
          URI.Type.CONTEXT_GROUP,
          uri.origin,
          uri.name
        ];
      case URI.Type.USER_TOPLIST:
        return [
          URI.Type.USER,
          _encodeComponent(uri.username, format),
          URI.Type.TOP,
          uri.toplist
        ];
      case URI.Type.USET_TOP_TRACKS:
        return [
          URI.Type.USER,
          _encodeComponent(uri.username, format),
          URI.Type.TOPLIST
        ];
      case URI.Type.TOPLIST:
        return [
          URI.Type.TOP,
          uri.toplist
        ].concat(uri.global ? [URI.Type.GLOBAL] : [
          'country',
          uri.country
        ]);
      case URI.Type.INBOX:
        return [
          URI.Type.USER,
          _encodeComponent(uri.username, format),
          URI.Type.INBOX
        ];
      case URI.Type.ROOTLIST:
        return [
          URI.Type.USER,
          _encodeComponent(uri.username, format),
          URI.Type.ROOTLIST
        ];
      case URI.Type.PUBLISHED_ROOTLIST:
        return [
          URI.Type.USER,
          _encodeComponent(uri.username, format),
          URI.Type.PUBLISHED_ROOTLIST
        ];
      case URI.Type.COLLECTION_TRACK_LIST:
        return [
          URI.Type.USER,
          _encodeComponent(uri.username, format),
          URI.Type.COLLECTION_TRACK_LIST,
          base62
        ];
      case URI.Type.PROFILE:
        if (uri.args && uri.args.length > 0)
          return [
            URI.Type.USER,
            _encodeComponent(uri.username, format)
          ].concat(uri.args);
        return [
          URI.Type.USER,
          _encodeComponent(uri.username, format)
        ];
      case URI.Type.LOCAL_ARTIST:
        return [
          URI.Type.LOCAL,
          _encodeComponent(uri.artist, format)
        ];
      case URI.Type.LOCAL_ALBUM:
        return [
          URI.Type.LOCAL,
          _encodeComponent(uri.artist, format),
          _encodeComponent(uri.album, format)
        ];
      case URI.Type.LOCAL:
        return [
          URI.Type.LOCAL,
          _encodeComponent(uri.artist, format),
          _encodeComponent(uri.album, format),
          _encodeComponent(uri.track, format),
          uri.duration
        ];
      case URI.Type.LIBRARY:
        return [
          URI.Type.USER,
          _encodeComponent(uri.username, format),
          URI.Type.LIBRARY
        ].concat(uri.category ? [uri.category] : []);
      case URI.Type.IMAGE:
        return [
          URI.Type.IMAGE,
          uri.id
        ];
      case URI.Type.MOSAIC:
        components = uri.ids.slice(0);
        components.unshift(URI.Type.MOSAIC);
        return components;
      case URI.Type.RADIO:
        return [
          URI.Type.RADIO,
          uri.args
        ];
      case URI.Type.APPLICATION:
        components = [
          URI.Type.APP,
          uri.id
        ];
        var args = uri.args || [];
        for (i = 0, len = args.length; i < len; ++i)
          components.push(_encodeComponent(args[i], format));
        return components;
      case URI.Type.COLLECTION_ALBUM:
        return [
          URI.Type.USER,
          _encodeComponent(uri.username, format),
          URI.Type.COLLECTION,
          URI.Type.ALBUM,
          base62
        ];
      case URI.Type.COLLECTION_MISSING_ALBUM:
        return [
          URI.Type.USER,
          _encodeComponent(uri.username, format),
          URI.Type.COLLECTION,
          URI.Type.ALBUM,
          base62,
          'missing'
        ];
      case URI.Type.COLLECTION_ARTIST:
        return [
          URI.Type.USER,
          _encodeComponent(uri.username, format),
          URI.Type.COLLECTION,
          URI.Type.ARTIST,
          base62
        ];
      case URI.Type.COLLECTION:
        return [
          URI.Type.USER,
          _encodeComponent(uri.username, format),
          URI.Type.COLLECTION
        ].concat(uri.category ? [uri.category] : []);
      default:
        throw ERROR_INVALID;
      }
    };
    var _parseFromComponents = function (components, format) {
      var _current = 0;
      var _getNextComponent = function () {
        return components[_current++];
      };
      var _getIdComponent = function () {
        var id = _getNextComponent();
        if (id.length == 22) {
          return Base62.toHex(id, 32);
        }
        return id;
      };
      var _getRemainingComponents = function () {
        return components.slice(_current);
      };
      var _getRemainingString = function () {
        var separator = format == Format.URI ? ':' : '/';
        return components.slice(_current).join(separator);
      };
      var part = _getNextComponent();
      var id;
      var i;
      var len;
      switch (part) {
      case URI.Type.ALBUM:
        return URI.albumURI(_getIdComponent(), parseInt(_getNextComponent(), 10));
      case URI.Type.AD:
        return URI.adURI(_getIdComponent());
      case URI.Type.ARTIST:
        id = _getIdComponent();
        if (_getNextComponent() == URI.Type.TOP) {
          return URI.artistToplistURI(id, _getNextComponent());
        } else {
          return URI.artistURI(id);
        }
      case URI.Type.AUDIO_FILE:
        return URI.audioFileURI(_getNextComponent(), _getNextComponent());
      case URI.Type.TEMP_PLAYLIST:
        return URI.temporaryPlaylistURI(_getNextComponent(), _getRemainingString());
      case URI.Type.SEARCH:
        return URI.searchURI(_decodeComponent(_getRemainingString(), format));
      case URI.Type.TRACK:
        return URI.trackURI(_getIdComponent());
      case URI.Type.TRACKSET:
        var name = _decodeComponent(_getNextComponent());
        var tracksArray = _getNextComponent();
        var hashSign = _getNextComponent();
        var index = parseInt(_getNextComponent(), 10);
        if (hashSign !== '%23' || isNaN(index)) {
          index = null;
        }
        var tracksetTracks = [];
        if (tracksArray) {
          tracksArray = _decodeComponent(tracksArray).split(',');
          for (i = 0, len = tracksArray.length; i < len; i++) {
            var trackId = tracksArray[i];
            tracksetTracks.push(URI.trackURI(Base62.toHex(trackId, 32)));
          }
        }
        return URI.tracksetURI(tracksetTracks, name, index);
      case URI.Type.CONTEXT_GROUP:
        return URI.contextGroupURI(_getNextComponent(), _getNextComponent());
      case URI.Type.TOP:
        var type = _getNextComponent();
        if (_getNextComponent() == URI.Type.GLOBAL) {
          return URI.toplistURI(type, null, true);
        } else {
          return URI.toplistURI(type, _getNextComponent(), false);
        }
      case URI.Type.USER:
        var username = _decodeComponent(_getNextComponent(), format);
        var text = _getNextComponent();
        if (username == URI.Type.FACEBOOK && text != null) {
          return URI.facebookURI(parseInt(text, 10));
        } else if (text != null) {
          switch (text) {
          case URI.Type.PLAYLIST:
            return URI.playlistURI(username, _getIdComponent());
          case URI.Type.FOLDER:
            return URI.folderURI(username, _getIdComponent());
          case URI.Type.COLLECTION_TRACK_LIST:
            return URI.collectionTrackList(username, _getIdComponent());
          case URI.Type.COLLECTION:
            var collectionItemType = _getNextComponent();
            switch (collectionItemType) {
            case URI.Type.ALBUM:
              id = _getIdComponent();
              if (_getNextComponent() === 'missing') {
                return URI.collectionMissingAlbumURI(username, id);
              } else {
                return URI.collectionAlbumURI(username, id);
              }
            case URI.Type.ARTIST:
              return URI.collectionArtistURI(username, _getIdComponent());
            default:
              return URI.collectionURI(username, collectionItemType);
            }
          case URI.Type.STARRED:
            return URI.starredURI(username);
          case URI.Type.FOLLOWERS:
            return URI.followersURI(username);
          case URI.Type.FOLLOWING:
            return URI.followingURI(username);
          case URI.Type.TOP:
            return URI.userToplistURI(username, _getNextComponent());
          case URI.Type.INBOX:
            return URI.inboxURI(username);
          case URI.Type.ROOTLIST:
            return URI.rootlistURI(username);
          case URI.Type.PUBLISHED_ROOTLIST:
            return URI.publishedRootlistURI(username);
          case URI.Type.TOPLIST:
            return URI.userTopTracksURI(username);
          case URI.Type.LIBRARY:
            return URI.libraryURI(username, _getNextComponent());
          }
        }
        var rem = _getRemainingComponents();
        if (text != null && rem.length > 0) {
          return URI.profileURI(username, [text].concat(rem));
        } else if (text != null) {
          return URI.profileURI(username, [text]);
        } else {
          return URI.profileURI(username);
        }
      case URI.Type.LOCAL:
        var artistNameComponent = _getNextComponent();
        var artistName = artistNameComponent && _decodeComponent(artistNameComponent, format);
        var albumNameComponent = _getNextComponent();
        var albumName = albumNameComponent && _decodeComponent(albumNameComponent, format);
        var trackNameComponent = _getNextComponent();
        var trackName = trackNameComponent && _decodeComponent(trackNameComponent, format);
        var durationComponent = _getNextComponent();
        var duration = parseInt(durationComponent, 10);
        if (trackNameComponent !== undefined) {
          return URI.localURI(artistName, albumName, trackName, duration);
        } else if (albumNameComponent !== undefined) {
          return URI.localAlbumURI(artistName, albumName);
        } else {
          return URI.localArtistURI(artistName);
        }
      case URI.Type.IMAGE:
        return URI.imageURI(_getIdComponent());
      case URI.Type.MOSAIC:
        return URI.mosaicURI(components.slice(_current));
      case URI.Type.RADIO:
        return URI.radioURI(_getRemainingString());
      default:
        if (part === URI.Type.APP) {
          id = _getNextComponent();
        } else {
          id = part;
        }
        var args = _getRemainingComponents();
        for (i = 0, len = args.length; i < len; ++i)
          args[i] = _decodeComponent(args[i], format);
        return URI.applicationURI(id, args);
      }
      throw ERROR_INVALID;
    };
    function URI(type, props) {
      this.type = type;
      for (var prop in props) {
        if (typeof props[prop] == 'function') {
          continue;
        }
        this[prop] = props[prop];
      }
    }
    URI.prototype.toAppType = function () {
      if (this.type == URI.Type.APPLICATION) {
        return URI.applicationURI(this.id, this.args);
      } else {
        var components = _getComponents(this, Format.URL);
        var id = components.shift();
        var len = components.length;
        if (len) {
          while (len--) {
            components[len] = _decodeComponent(components[len], Format.URL);
          }
        }
        if (this.type == URI.Type.RADIO) {
          components = components.shift().split(':');
        }
        var result = URI.applicationURI(id, components);
        return result;
      }
    };
    URI.prototype.toRealType = function () {
      if (this.type == URI.Type.APPLICATION) {
        return _parseFromComponents([this.id].concat(this.args), Format.URI);
      } else {
        return new URI(null, this);
      }
    };
    URI.prototype.toURI = function () {
      return URI_PREFIX + _getComponents(this, Format.URI).join(':');
    };
    URI.prototype.toString = function () {
      return this.toURI();
    };
    URI.prototype.toURLPath = function (opt_leadingSlash) {
      var components = _getComponents(this, Format.URL);
      if (components[0] === URI.Type.APP) {
        components.shift();
      }
      var isTrackset = components[0] === URI.Type.TRACKSET;
      var isLocalTrack = components[0] === URI.Type.LOCAL;
      var shouldStripEmptyComponents = !isTrackset && !isLocalTrack;
      if (shouldStripEmptyComponents) {
        var _temp = [];
        for (var i = 0, l = components.length; i < l; i++) {
          var component = components[i];
          if (!!component) {
            _temp.push(component);
          }
        }
        components = _temp;
      }
      var path = components.join('/');
      return opt_leadingSlash ? '/' + path : path;
    };
    URI.prototype.toPlayURL = function () {
      return PLAY_HTTPS_PREFIX + this.toURLPath();
    };
    URI.prototype.toURL = function () {
      return this.toPlayURL();
    };
    URI.prototype.toOpenURL = function () {
      return OPEN_HTTPS_PREFIX + this.toURLPath();
    };
    URI.prototype.toSecurePlayURL = function () {
      return this.toPlayURL();
    };
    URI.prototype.toSecureURL = function () {
      return this.toPlayURL();
    };
    URI.prototype.toSecureOpenURL = function () {
      return this.toOpenURL();
    };
    URI.prototype.idToByteString = function () {
      var id = Base62.fromHex(this.id);
      var data = Base62.toBytes(id);
      data = data.map(function (i) {
        return String.fromCharCode(i);
      }).join('');
      while (data.length < 16) {
        data = String.fromCharCode(0) + data;
      }
      return data;
    };
    URI.Type = {
      EMPTY: 'empty',
      ALBUM: 'album',
      AD: 'ad',
      APP: 'app',
      APPLICATION: 'application',
      ARTIST: 'artist',
      ARTIST_TOPLIST: 'artist-toplist',
      AUDIO_FILE: 'audiofile',
      COLLECTION: 'collection',
      COLLECTION_ALBUM: 'collection-album',
      COLLECTION_MISSING_ALBUM: 'collection-missing-album',
      COLLECTION_ARTIST: 'collection-artist',
      CONTEXT_GROUP: 'context-group',
      FACEBOOK: 'facebook',
      FOLDER: 'folder',
      FOLLOWERS: 'followers',
      FOLLOWING: 'following',
      GLOBAL: 'global',
      IMAGE: 'image',
      INBOX: 'inbox',
      LOCAL_ARTIST: 'local-artist',
      LOCAL_ALBUM: 'local-album',
      LOCAL: 'local',
      LIBRARY: 'library',
      MOSAIC: 'mosaic',
      PLAYLIST: 'playlist',
      PROFILE: 'profile',
      PUBLISHED_ROOTLIST: 'published-rootlist',
      RADIO: 'radio',
      ROOTLIST: 'rootlist',
      COLLECTION_TRACK_LIST: 'collectiontracklist',
      SEARCH: 'search',
      STARRED: 'starred',
      TEMP_PLAYLIST: 'temp-playlist',
      TOP: 'top',
      TOPLIST: 'toplist',
      TRACK: 'track',
      TRACKSET: 'trackset',
      USER: 'user',
      USER_TOPLIST: 'user-toplist',
      USET_TOP_TRACKS: 'user-top-tracks'
    };
    URI.fromString = function (str) {
      var splitted = _splitIntoComponents(str);
      return _parseFromComponents(splitted.components, splitted.format);
    };
    URI.from = function (value) {
      try {
        if (value instanceof URI) {
          return value;
        }
        if (typeof value == 'object' && value.type) {
          return new URI(null, value);
        }
        return URI.fromString(value.toString());
      } catch (e) {
        return null;
      }
    };
    URI.fromByteString = function (type, idByteString, opt_args) {
      var bytes = [];
      for (var i = 0; i < idByteString.length; i++) {
        bytes.push(idByteString.charCodeAt(i));
      }
      var id = Base62.fromBytes(bytes, 22);
      id = Base62.toHex(id);
      var args = opt_args || {};
      args.id = id;
      return new URI(type, args);
    };
    URI.clone = function (uri) {
      if (!(uri instanceof URI)) {
        return null;
      }
      return new URI(null, uri);
    };
    URI.getCanonical = function (username) {
      return this.getCanonical(username);
    };
    URI.getCanonicalUsername = function (username) {
      return _encodeComponent(username, Format.URI);
    };
    URI.getDisplayUsername = function (username) {
      return _decodeComponent(username, Format.URI);
    };
    URI.idToHex = function (id) {
      if (id.length == 22) {
        return Base62.toHex(id, 32);
      }
      return id;
    };
    URI.hexToId = function (hex) {
      if (hex.length == 32) {
        return Base62.fromHex(hex, 22);
      }
      return hex;
    };
    URI.emptyURI = function () {
      return new URI(URI.Type.EMPTY, {});
    };
    URI.albumURI = function (id, disc) {
      if (id.length == 22) {
        id = Base62.toHex(id, 32);
      }
      return new URI(URI.Type.ALBUM, {
        id: id,
        disc: disc
      });
    };
    URI.adURI = function (id) {
      return new URI(URI.Type.AD, { id: id });
    };
    URI.audioFileURI = function (extension, id) {
      return new URI(URI.Type.AUDIO_FILE, {
        id: id,
        extension: extension
      });
    };
    URI.artistURI = function (id) {
      if (id.length == 22) {
        id = Base62.toHex(id, 32);
      }
      return new URI(URI.Type.ARTIST, { id: id });
    };
    URI.artistToplistURI = function (id, toplist) {
      if (id.length == 22) {
        id = Base62.toHex(id, 32);
      }
      return new URI(URI.Type.ARTIST_TOPLIST, {
        id: id,
        toplist: toplist
      });
    };
    URI.searchURI = function (query) {
      return new URI(URI.Type.SEARCH, { query: query });
    };
    URI.trackURI = function (id) {
      if (id.length == 22) {
        id = Base62.toHex(id, 32);
      }
      return new URI(URI.Type.TRACK, { id: id });
    };
    URI.tracksetURI = function (tracks, name, index) {
      return new URI(URI.Type.TRACKSET, {
        tracks: tracks,
        name: name || '',
        index: isNaN(index) ? null : index
      });
    };
    URI.facebookURI = function (uid) {
      return new URI(URI.Type.FACEBOOK, { uid: uid });
    };
    URI.followersURI = function (username) {
      return new URI(URI.Type.FOLLOWERS, { username: username });
    };
    URI.followingURI = function (username) {
      return new URI(URI.Type.FOLLOWING, { username: username });
    };
    URI.playlistURI = function (username, id) {
      if (id.length == 22) {
        id = Base62.toHex(id, 32);
      }
      return new URI(URI.Type.PLAYLIST, {
        username: username,
        id: id
      });
    };
    URI.folderURI = function (username, id) {
      if (id.length == 22) {
        id = Base62.toHex(id, 32);
      }
      return new URI(URI.Type.FOLDER, {
        username: username,
        id: id
      });
    };
    URI.collectionTrackList = function (username, id) {
      if (id.length == 22) {
        id = Base62.toHex(id, 32);
      }
      return new URI(URI.Type.COLLECTION_TRACK_LIST, {
        username: username,
        id: id
      });
    };
    URI.starredURI = function (username) {
      return new URI(URI.Type.STARRED, { username: username });
    };
    URI.userToplistURI = function (username, toplist) {
      return new URI(URI.Type.USER_TOPLIST, {
        username: username,
        toplist: toplist
      });
    };
    URI.userTopTracksURI = function (username) {
      return new URI(URI.Type.USET_TOP_TRACKS, { username: username });
    };
    URI.toplistURI = function (toplist, country, global) {
      return new URI(URI.Type.TOPLIST, {
        toplist: toplist,
        country: country,
        global: !!global
      });
    };
    URI.inboxURI = function (username) {
      return new URI(URI.Type.INBOX, { username: username });
    };
    URI.rootlistURI = function (username) {
      return new URI(URI.Type.ROOTLIST, { username: username });
    };
    URI.publishedRootlistURI = function (username) {
      return new URI(URI.Type.PUBLISHED_ROOTLIST, { username: username });
    };
    URI.localArtistURI = function (artist) {
      return new URI(URI.Type.LOCAL_ARTIST, { artist: artist });
    };
    URI.localAlbumURI = function (artist, album) {
      return new URI(URI.Type.LOCAL_ALBUM, {
        artist: artist,
        album: album
      });
    };
    URI.localURI = function (artist, album, track, duration) {
      return new URI(URI.Type.LOCAL, {
        artist: artist,
        album: album,
        track: track,
        duration: duration
      });
    };
    URI.libraryURI = function (username, category) {
      return new URI(URI.Type.LIBRARY, {
        username: username,
        category: category
      });
    };
    URI.collectionURI = function (username, category) {
      return new URI(URI.Type.COLLECTION, {
        username: username,
        category: category
      });
    };
    URI.temporaryPlaylistURI = function (origin, data) {
      return new URI(URI.Type.TEMP_PLAYLIST, {
        origin: origin,
        data: data
      });
    };
    URI.contextGroupURI = function (origin, name) {
      return new URI(URI.Type.CONTEXT_GROUP, {
        origin: origin,
        name: name
      });
    };
    URI.profileURI = function (username, args) {
      return new URI(URI.Type.PROFILE, {
        username: username,
        args: args
      });
    };
    URI.imageURI = function (id) {
      if (id.length == 22) {
        id = Base62.toHex(id, 32);
      }
      return new URI(URI.Type.IMAGE, { id: id });
    };
    URI.mosaicURI = function (ids) {
      return new URI(URI.Type.MOSAIC, { ids: ids });
    };
    URI.radioURI = function (args) {
      args = typeof args === 'undefined' ? '' : args;
      return new URI(URI.Type.RADIO, { args: args });
    };
    URI.applicationURI = function (id, args) {
      args = typeof args === 'undefined' ? [] : args;
      return new URI(URI.Type.APPLICATION, {
        id: id,
        args: args
      });
    };
    URI.collectionAlbumURI = function (username, id) {
      return new URI(URI.Type.COLLECTION_ALBUM, {
        username: username,
        id: id
      });
    };
    URI.collectionMissingAlbumURI = function (username, id) {
      return new URI(URI.Type.COLLECTION_MISSING_ALBUM, {
        username: username,
        id: id
      });
    };
    URI.collectionArtistURI = function (username, id) {
      return new URI(URI.Type.COLLECTION_ARTIST, {
        username: username,
        id: id
      });
    };
    module.exports = URI;
  },
  './node_modules/logging-utils/scripts/logger.js': function (require, module, exports, global) {
    (function (app, session) {
      'use strict';
      var CONSOLE_METHOD = {
          DEBUG: 'debug',
          LOG: 'log',
          WARN: 'warn',
          ERROR: 'error'
        };
      var loggers = {};
      function Logger(tag, context) {
        this.tag = tag;
        this.context = context;
        this.timerData = {};
        this.timerOptions = {};
        this.inRolloutPercentage = true;
        this.setLogOutputLevel();
      }
      Logger.forTag = function (tag, context) {
        if (typeof tag != 'string' || tag.length < 1) {
          throw 'Improper tag name.';
        }
        var returnLogger = loggers[tag];
        if (!returnLogger) {
          returnLogger = new Logger(tag, context);
          loggers[tag] = returnLogger;
        }
        return returnLogger;
      };
      Logger.OUTPUT_LEVEL = {
        DEBUG: 4,
        LOG: 3,
        INFO: 2,
        ERROR: 1,
        NONE: 0
      };
      Logger.prototype.setLogOutputLevel = function (logOutputLevel) {
        var logOutputGobalOverride = null, debuggingEnabled = false;
        if (logOutputGobalOverride) {
          this.logOutputLevel = logOutputGobalOverride;
        } else if (logOutputLevel === undefined || logOutputLevel < Logger.OUTPUT_LEVEL.NONE || logOutputLevel > Logger.OUTPUT_LEVEL.DEBUG) {
          var suffix = 'spotify.net';
          var hostname = window.location.hostname;
          try {
            debuggingEnabled = window.localStorage && !!localStorage.getItem('logging_debug');
          } catch (e) {
          }
          if (debuggingEnabled) {
            this.logOutputLevel = Logger.OUTPUT_LEVEL.DEBUG;
          } else if (hostname.indexOf(suffix, hostname.length - suffix.length) !== -1) {
            this.logOutputLevel = Logger.OUTPUT_LEVEL.ERROR;
          } else {
            this.logOutputLevel = Logger.OUTPUT_LEVEL.NONE;
          }
        } else {
          this.logOutputLevel = logOutputLevel;
        }
      };
      Logger._testVersion = 'base';
      Logger.setTestVersion = function (testVersion) {
        if (typeof testVersion != 'string' || testVersion.length < 1) {
          throw 'Improper test name.';
        }
        Logger._testVersion = testVersion;
      };
      Logger.prototype.setTestRollout = function (percentage) {
        var self = this;
        this.inRolloutPercentage = false;
        if (percentage > 0) {
          session.load('testGroup').done(function (s) {
            var tg = parseInt(s.testGroup, 10);
            if (tg <= percentage * 10) {
              self.inRolloutPercentage = true;
            }
          });
        }
      };
      var ALLOWED_EVENTS = {
          USER_HOLD_TIMER: 'user:hold',
          USER_HIT: 'user:hit',
          USER_SELECT: 'user:select',
          USER_HOVER: 'user:hover',
          USER_IMPRESSION: 'user:impression',
          INFO_TIMER_DEFAULT: 'info:timer',
          INFO_STATE_LOAD_TIMER: 'info:state_load_timer',
          INFO_DEFAULT: 'info:default',
          INFO_WARN: 'info:warn',
          ERROR_DEFAULT: 'error:user_action_fail',
          ERROR_USER_ACTION_FAIL: 'error:user_action_fail',
          ERROR_RENDER_FAIL: 'error:render_fail',
          DEBUG: 'debug'
        };
      var C = CONSOLE_METHOD, O = Logger.OUTPUT_LEVEL, E = ALLOWED_EVENTS;
      Logger.prototype.debug = function (eventVersion, data, opt_context) {
        return this._log(C.DEBUG, E.DEBUG, O.DEBUG, eventVersion, data, opt_context, true, true);
      };
      Logger.prototype.log = function (eventVersion, data, opt_context) {
        return this._log(C.LOG, E.DEBUG, O.LOG, eventVersion, data, opt_context, true);
      };
      Logger.prototype.userHit = function (eventVersion, data, opt_context) {
        return this._log(C.LOG, E.USER_HIT, O.INFO, eventVersion, data, opt_context);
      };
      Logger.prototype.userSelect = function (eventVersion, data, opt_context) {
        return this._log(C.LOG, E.USER_SELECT, O.INFO, eventVersion, data, opt_context);
      };
      Logger.prototype.userHover = function (eventVersion, data, opt_context) {
        return this._log(C.LOG, E.USER_HOVER, O.INFO, eventVersion, data, opt_context);
      };
      Logger.prototype.userImpression = function (eventVersion, data, opt_context) {
        return this._log(C.LOG, E.USER_IMPRESSION, O.INFO, eventVersion, data, opt_context);
      };
      Logger.prototype.info = function (eventVersion, data, opt_context) {
        return this._log(C.LOG, E.INFO_DEFAULT, O.INFO, eventVersion, data, opt_context);
      };
      Logger.prototype.infoWarn = function (eventVersion, data, opt_context) {
        return this._log(C.WARN, E.INFO_WARN, O.INFO, eventVersion, data, opt_context);
      };
      Logger.prototype.error = function (eventVersion, data, opt_context) {
        return this._log(C.ERROR, E.ERROR_DEFAULT, O.ERROR, eventVersion, data, opt_context);
      };
      Logger.prototype.errorUserActionFail = function (eventVersion, data, opt_context) {
        return this._log(C.ERROR, E.ERROR_USER_ACTION_FAIL, O.ERROR, eventVersion, data, opt_context);
      };
      Logger.prototype.errorRenderFail = function (eventVersion, data, opt_context) {
        return this._log(C.ERROR, E.ERROR_RENDER_FAIL, O.ERROR, eventVersion, data, opt_context);
      };
      Logger.prototype.startHoldTimer = function (eventVersion, data, opt_context) {
        this._startTimer(eventVersion, data, E.USER_HOLD_TIMER, opt_context);
      };
      Logger.prototype.startTimer = function (eventVersion, data, opt_context) {
        this._startTimer(eventVersion, data, E.INFO_TIMER_DEFAULT, opt_context);
      };
      Logger.prototype.startStateLoadTimer = function (eventVersion, data, opt_context) {
        this._startTimer(eventVersion, data, E.INFO_STATE_LOAD_TIMER, opt_context);
      };
      Logger.prototype.startDebugTimer = function (eventVersion, data, opt_context) {
        this._startTimer(eventVersion, data, E.DEBUG_TIMER, opt_context);
      };
      Logger.prototype.hasTimer = function (eventVersion) {
        return this.timerData[eventVersion] ? true : false;
      };
      Logger.prototype.overrideStartTime = function (eventVersion, newStartTime) {
        this.timerData[eventVersion].timerStart = newStartTime;
      };
      Logger.prototype.cancelTimer = function (eventVersion) {
        delete this.timerData[eventVersion];
        delete this.timerOptions[eventVersion];
      };
      Logger.prototype.tickTimer = function (eventVersion, tickName) {
        if (!this.timerData[eventVersion]) {
          return this.error('cannot_tick_unstarted_timer', { timerName: eventVersion });
        }
        tickName = 'timer_tick_' + tickName;
        var data = this.timerData[eventVersion];
        var tickDiff = new Date().getTime() - data.timerStart;
        data[tickName] = tickDiff;
        return true;
      };
      Logger.prototype.endTimer = function (eventVersion, opt_overrideTotalTime) {
        if (!this.timerData[eventVersion]) {
          return this.error('cannot_end_unstarted_timer', { timerName: eventVersion });
        }
        var data = this.timerData[eventVersion];
        if (typeof opt_overrideTotalTime == 'number') {
          data['timer_total_time'] = opt_overrideTotalTime;
        } else {
          var timerEnd = new Date().getTime();
          data['timer_total_time'] = timerEnd - data.timerStart;
        }
        delete data.timerStart;
        var opts = this.timerOptions[eventVersion];
        var isDebug = opts.timerEvent == ALLOWED_EVENTS.DEBUG_TIMER;
        var retVal = this._log(isDebug ? CONSOLE_METHOD.DEBUG : CONSOLE_METHOD.LOG, opts.timerEvent, isDebug ? Logger.OUTPUT_LEVEL.DEBUG : Logger.OUTPUT_LEVEL.INFO, eventVersion, data, opts.context, isDebug);
        this.cancelTimer(eventVersion);
        return retVal;
      };
      Logger.prototype.addDataToTimer = function (eventVersion, propName, propValue) {
        if (!this.timerData[eventVersion]) {
          return this.error('cannot_add_data_to_unstarted_timer', { timerName: eventVersion });
        }
        var tickNamePattern = /^timer_tick_\d*/;
        if (propName == 'timerStart' || tickNamePattern.test(propName)) {
          return this.error('cant_override_tick_info', { timerName: eventVersion });
        } else {
          this.timerData[eventVersion][propName] = propValue;
        }
      };
      Logger.prototype._startTimer = function (eventVersion, data, timerEvent, opt_context) {
        if (this.timerData[eventVersion]) {
          return this.error('cannot_restart_timer', { timerName: eventVersion });
        }
        data = data ? data : {};
        data.timerStart = new Date().getTime();
        this.timerData[eventVersion] = data;
        this.timerOptions[eventVersion] = {
          timerEvent: timerEvent,
          context: opt_context
        };
        return true;
      };
      Logger.prototype._getErrorObject = function () {
        try {
          throw new Error('');
        } catch (err) {
          return err;
        }
      };
      Logger.prototype._getBackendData = function (data) {
        if (!data) {
          return {};
        }
        Object.keys(data).forEach(function (key) {
          var val = data[key];
          data[key] = typeof val === 'undefined' ? '' : val;
        });
        if (typeof data == 'string' || typeof data == 'number' || typeof data == 'boolean') {
          return { data: data };
        }
        if (typeof data != 'object') {
          return { error: 'unparsable_data' };
        }
        var backendData = {};
        for (var key in data) {
          if (data.hasOwnProperty(key) && (typeof data[key] == 'string' || typeof data[key] == 'number' || typeof data[key] == 'boolean')) {
            backendData[key] = data[key];
          }
        }
        return backendData;
      };
      Logger.prototype._log = function (consoleMethod, event, minOutputLevel, eventVersion, data, opt_context, opt_debugOnly, opt_printStacktrace) {
        var sole = typeof console !== 'undefined';
        var context;
        if (opt_context)
          context = opt_context;
        else
          context = this.context ? this.context : '';
        event = event ? event : '';
        eventVersion = eventVersion ? eventVersion : '';
        if (!opt_debugOnly && this.inRolloutPercentage) {
          var backendData = this._getBackendData(data);
          var promise = app.clientEvent(context, event, eventVersion, Logger._testVersion, backendData);
          promise.fail(function () {
            sole && console.error('could_not_log_to_backend');
          });
        }
        if (!sole || this.logOutputLevel < minOutputLevel) {
          return false;
        }
        var stackTrace = '';
        if (opt_printStacktrace) {
          var err = this._getErrorObject();
          stackTrace = '{no stack-trace available}';
          if (err.stack) {
            stackTrace = err.stack.split('\n').slice(1);
          }
        }
        var consoleFunction = console[consoleMethod] ? console[consoleMethod] : console.log;
        if (typeof consoleFunction == 'object') {
          consoleFunction = Function.prototype.bind.call(consoleFunction, console);
        }
        data = data ? data : '';
        consoleFunction.apply(console, [
          '[' + this.tag + ']',
          context,
          event,
          eventVersion,
          data,
          stackTrace
        ]);
        return true;
      };
      exports.Logger = Logger;
    }(require('./node_modules/api/scripts/models.js').application, require('./node_modules/api/scripts/models.js').session));
  },
  './node_modules/spotify-glue-cat/templates/media/image.hbs': function (require, module, exports, global) {
    var Handlebars = require('./node_modules/handlebars/dist/cjs/handlebars.runtime.js')['default'];
    var template = Handlebars.template(function (Handlebars, depth0, helpers, partials, data) {
        this.compilerInfo = [
          4,
          '>= 1.0.0'
        ];
        helpers = this.merge(helpers, Handlebars.helpers);
        data = data || {};
        var buffer = '', stack1, helper, options, functionType = 'function', escapeExpression = this.escapeExpression, self = this, helperMissing = helpers.helperMissing;
        function program1(depth0, data) {
          var buffer = '', stack1;
          buffer += '\n  <div class="mo-image-background-color">\n    ';
          stack1 = helpers['if'].call(depth0, depth0 && depth0.imageUrl, {
            hash: {},
            inverse: self.noop,
            fn: self.program(2, program2, data),
            data: data
          });
          if (stack1 || stack1 === 0) {
            buffer += stack1;
          }
          buffer += '\n  </div>\n';
          return buffer;
        }
        function program2(depth0, data) {
          var buffer = '', stack1, helper;
          buffer += '\n      <div class="mo-image-background" style="background-image: url(';
          if (helper = helpers.imageUrl) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.imageUrl;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + ')"></div>\n    ';
          return buffer;
        }
        function program4(depth0, data) {
          return '\n  <div class="mo-image mo-starred-wrapper">\n    <svg class="mo-starred" viewBox="0 0 10 10" preserveAspectRatio="xMidYMid meet">\n      <text x="5" y="9.8">&#xf14b;</text>\n    </svg>\n  </div>\n';
        }
        function program6(depth0, data) {
          var buffer = '', stack1;
          buffer += '\n  <div class="mo-image" ';
          stack1 = helpers['if'].call(depth0, depth0 && depth0.imageUrl, {
            hash: {},
            inverse: self.noop,
            fn: self.program(7, program7, data),
            data: data
          });
          if (stack1 || stack1 === 0) {
            buffer += stack1;
          }
          buffer += '>\n  </div>\n  <span class="mo-verified">\n    <span class="spoticon-check-16"></span>\n  </span>\n';
          return buffer;
        }
        function program7(depth0, data) {
          var buffer = '', stack1, helper;
          buffer += 'style="background-image: url(';
          if (helper = helpers.imageUrl) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.imageUrl;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + ')"';
          return buffer;
        }
        buffer += '<svg class="mo-placeholder" viewBox="0 0 10 10" preserveAspectRatio="xMidYMid meet">\n  <text class="playlist-placeholder" x="5" y="9.8">&#xf135;</text>\n  <text class="playlist-folder-placeholder" x="5" y="9.8">&#xf137;</text>\n  <text class="album-placeholder" x="5" y="9.8">&#xf101;</text>\n  <text class="artist-placeholder" x="5" y="9.8">&#xf103;</text>\n  <text class="user-placeholder" x="5" y="9.8">&#xf15d;</text>\n  <text class="genre-placeholder" x="5" y="9.8">&#xf109;</text>\n</svg>\n\n';
        stack1 = (helper = helpers.type || depth0 && depth0.type, options = {
          hash: {},
          inverse: self.noop,
          fn: self.program(1, program1, data),
          data: data
        }, helper ? helper.call(depth0, depth0 && depth0.uri, 'user', 'artist', options) : helperMissing.call(depth0, 'type', depth0 && depth0.uri, 'user', 'artist', options));
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n\n';
        stack1 = helpers['if'].call(depth0, depth0 && depth0.starred, {
          hash: {},
          inverse: self.program(6, program6, data),
          fn: self.program(4, program4, data),
          data: data
        });
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n';
        return buffer;
      });
    Handlebars.registerPartial('./node_modules/spotify-glue-cat/templates/media/image.hbs', template);
    module.exports = template;
  },
  './node_modules/spotify-glue-cat/templates/media/controllers.hbs': function (require, module, exports, global) {
    var Handlebars = require('./node_modules/handlebars/dist/cjs/handlebars.runtime.js')['default'];
    var template = Handlebars.template(function (Handlebars, depth0, helpers, partials, data) {
        this.compilerInfo = [
          4,
          '>= 1.0.0'
        ];
        helpers = this.merge(helpers, Handlebars.helpers);
        data = data || {};
        var buffer = '', stack1, helper, options, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression, self = this, functionType = 'function', blockHelperMissing = helpers.blockHelperMissing;
        function program1(depth0, data) {
          var buffer = '', stack1, helper, options;
          buffer += '\n  ';
          stack1 = (helper = helpers.type || depth0 && depth0.type, options = {
            hash: {},
            inverse: self.noop,
            fn: self.program(2, program2, data),
            data: data
          }, helper ? helper.call(depth0, depth0 && depth0.uri, 'track', 'album', options) : helperMissing.call(depth0, 'type', depth0 && depth0.uri, 'track', 'album', options));
          if (stack1 || stack1 === 0) {
            buffer += stack1;
          }
          buffer += '\n  ';
          stack1 = (helper = helpers.type || depth0 && depth0.type, options = {
            hash: {},
            inverse: self.noop,
            fn: self.program(4, program4, data),
            data: data
          }, helper ? helper.call(depth0, depth0 && depth0.uri, 'playlist', options) : helperMissing.call(depth0, 'type', depth0 && depth0.uri, 'playlist', options));
          if (stack1 || stack1 === 0) {
            buffer += stack1;
          }
          buffer += '\n';
          return buffer;
        }
        function program2(depth0, data) {
          var buffer = '', helper, options;
          buffer += '\n    <button type="button" data-button="add" class="button button-icon-only button-add mo-add" data-tooltip="' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
            hash: {},
            data: data
          }, helper ? helper.call(depth0, 'Save', options) : helperMissing.call(depth0, 'loc', 'Save', options))) + '" data-tooltip-add="' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
            hash: {},
            data: data
          }, helper ? helper.call(depth0, 'Save', options) : helperMissing.call(depth0, 'loc', 'Save', options))) + '" data-tooltip-remove="' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
            hash: {},
            data: data
          }, helper ? helper.call(depth0, 'Remove', options) : helperMissing.call(depth0, 'loc', 'Remove', options))) + '" data-log-click="add-button"></button>\n  ';
          return buffer;
        }
        function program4(depth0, data) {
          var buffer = '', stack1, helper, options;
          buffer += '\n    ';
          options = {
            hash: {},
            inverse: self.program(5, program5, data),
            fn: self.noop,
            data: data
          };
          if (helper = helpers.currentUserPlaylist) {
            stack1 = helper.call(depth0, options);
          } else {
            helper = depth0 && depth0.currentUserPlaylist;
            stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper;
          }
          if (!helpers.currentUserPlaylist) {
            stack1 = blockHelperMissing.call(depth0, stack1, {
              hash: {},
              inverse: self.program(5, program5, data),
              fn: self.noop,
              data: data
            });
          }
          if (stack1 || stack1 === 0) {
            buffer += stack1;
          }
          buffer += '\n  ';
          return buffer;
        }
        function program5(depth0, data) {
          var buffer = '', helper, options;
          buffer += '\n    <button type="button" data-button="add" class="button button-icon-only button-add mo-add" data-tooltip="' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
            hash: {},
            data: data
          }, helper ? helper.call(depth0, 'Follow', options) : helperMissing.call(depth0, 'loc', 'Follow', options))) + '" data-tooltip-add="' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
            hash: {},
            data: data
          }, helper ? helper.call(depth0, 'Follow', options) : helperMissing.call(depth0, 'loc', 'Follow', options))) + '" data-tooltip-remove="' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
            hash: {},
            data: data
          }, helper ? helper.call(depth0, 'Unfollow', options) : helperMissing.call(depth0, 'loc', 'Unfollow', options))) + '" data-log-click="follow-button"></button>\n    ';
          return buffer;
        }
        function program7(depth0, data) {
          var buffer = '', stack1, helper;
          buffer += 'data-range="';
          if (helper = helpers.start) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.start;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + ',';
          if (helper = helpers.end) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.end;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '"';
          return buffer;
        }
        function program9(depth0, data) {
          var buffer = '', helper, options;
          buffer += ' data-tooltip="' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
            hash: {},
            data: data
          }, helper ? helper.call(depth0, 'HoldToPreview', options) : helperMissing.call(depth0, 'loc', 'HoldToPreview', options))) + '"';
          return buffer;
        }
        function program11(depth0, data) {
          var buffer = '', helper, options;
          buffer += '\n  <button type="button" data-button="contextmenu" class="button button-icon-only button-more button-no-border mo-more" data-tooltip="' + escapeExpression((helper = helpers.loc || depth0 && depth0.loc, options = {
            hash: {},
            data: data
          }, helper ? helper.call(depth0, 'More', options) : helperMissing.call(depth0, 'loc', 'More', options))) + '" data-log-click="context-menu-button"></button>\n';
          return buffer;
        }
        function program13(depth0, data) {
          return '\n<button type="button" class="button button-icon-only button-no-border mo-delete" data-log-click="delete-button"></button>\n';
        }
        stack1 = (helper = helpers.type || depth0 && depth0.type, options = {
          hash: {},
          inverse: self.noop,
          fn: self.program(1, program1, data),
          data: data
        }, helper ? helper.call(depth0, depth0 && depth0.uri, 'playlist', 'track', 'album', options) : helperMissing.call(depth0, 'type', depth0 && depth0.uri, 'playlist', 'track', 'album', options));
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n\n<button type="button" data-button="play" class="button button-icon-only button-play mo-play" data-log-click="play-button"\n  ';
        options = {
          hash: {},
          inverse: self.noop,
          fn: self.program(7, program7, data),
          data: data
        };
        if (helper = helpers.range) {
          stack1 = helper.call(depth0, options);
        } else {
          helper = depth0 && depth0.range;
          stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper;
        }
        if (!helpers.range) {
          stack1 = blockHelperMissing.call(depth0, stack1, {
            hash: {},
            inverse: self.noop,
            fn: self.program(7, program7, data),
            data: data
          });
        }
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        options = {
          hash: {},
          inverse: self.noop,
          fn: self.program(9, program9, data),
          data: data
        };
        if (helper = helpers.preview) {
          stack1 = helper.call(depth0, options);
        } else {
          helper = depth0 && depth0.preview;
          stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper;
        }
        if (!helpers.preview) {
          stack1 = blockHelperMissing.call(depth0, stack1, {
            hash: {},
            inverse: self.noop,
            fn: self.program(9, program9, data),
            data: data
          });
        }
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '></button>\n\n';
        stack1 = (helper = helpers.type || depth0 && depth0.type, options = {
          hash: {},
          inverse: self.noop,
          fn: self.program(11, program11, data),
          data: data
        }, helper ? helper.call(depth0, depth0 && depth0.uri, 'playlist', 'track', 'album', options) : helperMissing.call(depth0, 'type', depth0 && depth0.uri, 'playlist', 'track', 'album', options));
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n\n';
        options = {
          hash: {},
          inverse: self.noop,
          fn: self.program(13, program13, data),
          data: data
        };
        if (helper = helpers.canDelete) {
          stack1 = helper.call(depth0, options);
        } else {
          helper = depth0 && depth0.canDelete;
          stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper;
        }
        if (!helpers.canDelete) {
          stack1 = blockHelperMissing.call(depth0, stack1, {
            hash: {},
            inverse: self.noop,
            fn: self.program(13, program13, data),
            data: data
          });
        }
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n';
        return buffer;
      });
    Handlebars.registerPartial('./node_modules/spotify-glue-cat/templates/media/controllers.hbs', template);
    module.exports = template;
  },
  './node_modules/spotify-glue-cat/templates/media/info.hbs': function (require, module, exports, global) {
    var Handlebars = require('./node_modules/handlebars/dist/cjs/handlebars.runtime.js')['default'];
    var template = Handlebars.template(function (Handlebars, depth0, helpers, partials, data) {
        this.compilerInfo = [
          4,
          '>= 1.0.0'
        ];
        helpers = this.merge(helpers, Handlebars.helpers);
        partials = this.merge(partials, Handlebars.partials);
        data = data || {};
        var buffer = '', stack1, helper, options, functionType = 'function', escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing, self = this, blockHelperMissing = helpers.blockHelperMissing;
        function program1(depth0, data) {
          return 'meta';
        }
        function program3(depth0, data) {
          return 'description';
        }
        function program5(depth0, data) {
          return 'socialproof';
        }
        function program7(depth0, data) {
          return 'subtitle';
        }
        function program9(depth0, data) {
          var buffer = '', stack1, helper;
          buffer += '\n      <div class="mo-title" title="';
          if (helper = helpers.name) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.name;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '" data-uri="';
          if (helper = helpers.uri) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.uri;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '" data-log-click="media-title" draggable="true">\n    ';
          return buffer;
        }
        function program11(depth0, data) {
          var buffer = '', stack1, helper, options;
          buffer += '\n      <a class="mo-title" title="';
          if (helper = helpers.name) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.name;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '" href="' + escapeExpression((helper = helpers.href || depth0 && depth0.href, options = {
            hash: {},
            data: data
          }, helper ? helper.call(depth0, depth0 && depth0.uri, options) : helperMissing.call(depth0, 'href', depth0 && depth0.uri, options))) + '" data-uri="';
          if (helper = helpers.uri) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.uri;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '" data-log-click="media-title">\n    ';
          return buffer;
        }
        function program13(depth0, data) {
          return '\n      </div>\n    ';
        }
        function program15(depth0, data) {
          return '\n      </a>\n    ';
        }
        function program17(depth0, data) {
          var buffer = '', stack1, helper, options;
          buffer += '\n      <div class="mo-subtitle text-muted one-line">\n        ';
          options = {
            hash: {},
            inverse: self.noop,
            fn: self.program(18, program18, data),
            data: data
          };
          if (helper = helpers.artists) {
            stack1 = helper.call(depth0, options);
          } else {
            helper = depth0 && depth0.artists;
            stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper;
          }
          if (!helpers.artists) {
            stack1 = blockHelperMissing.call(depth0, stack1, {
              hash: {},
              inverse: self.noop,
              fn: self.program(18, program18, data),
              data: data
            });
          }
          if (stack1 || stack1 === 0) {
            buffer += stack1;
          }
          buffer += '\n        ';
          options = {
            hash: {},
            inverse: self.noop,
            fn: self.program(20, program20, data),
            data: data
          };
          if (helper = helpers.owner) {
            stack1 = helper.call(depth0, options);
          } else {
            helper = depth0 && depth0.owner;
            stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper;
          }
          if (!helpers.owner) {
            stack1 = blockHelperMissing.call(depth0, stack1, {
              hash: {},
              inverse: self.noop,
              fn: self.program(20, program20, data),
              data: data
            });
          }
          if (stack1 || stack1 === 0) {
            buffer += stack1;
          }
          buffer += '\n      </div>\n    ';
          return buffer;
        }
        function program18(depth0, data) {
          var buffer = '', stack1, helper, options;
          buffer += '\n          <a title="';
          if (helper = helpers.name) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.name;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '" href="' + escapeExpression((helper = helpers.href || depth0 && depth0.href, options = {
            hash: {},
            data: data
          }, helper ? helper.call(depth0, depth0 && depth0.uri, options) : helperMissing.call(depth0, 'href', depth0 && depth0.uri, options))) + '" data-uri="';
          if (helper = helpers.uri) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.uri;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '" data-log-click="artist-name">';
          if (helper = helpers.name) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.name;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '</a>\n        ';
          return buffer;
        }
        function program20(depth0, data) {
          var buffer = '', stack1, helper, options;
          buffer += '\n          <a title="';
          if (helper = helpers.name) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.name;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '" href="' + escapeExpression((helper = helpers.href || depth0 && depth0.href, options = {
            hash: {},
            data: data
          }, helper ? helper.call(depth0, depth0 && depth0.uri, options) : helperMissing.call(depth0, 'href', depth0 && depth0.uri, options))) + '" data-uri="';
          if (helper = helpers.uri) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.uri;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '" data-log-click="owner-name">';
          if (helper = helpers.name) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.name;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '</a>\n        ';
          return buffer;
        }
        function program22(depth0, data) {
          var buffer = '', stack1, helper;
          buffer += '\n      <div class="mo-description">';
          if (helper = helpers.description) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.description;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '</div>\n    ';
          return buffer;
        }
        function program24(depth0, data) {
          var buffer = '', stack1;
          buffer += '\n      ';
          stack1 = helpers['if'].call(depth0, depth0 && depth0.totalListeners, {
            hash: {},
            inverse: self.noop,
            fn: self.program(25, program25, data),
            data: data
          });
          if (stack1 || stack1 === 0) {
            buffer += stack1;
          }
          buffer += '\n    ';
          return buffer;
        }
        function program25(depth0, data) {
          var buffer = '', stack1;
          buffer += '\n        ';
          stack1 = self.invokePartial(partials['./node_modules/spotify-glue-cat/templates/facepile-common.hbs'], './node_modules/spotify-glue-cat/templates/facepile-common.hbs', depth0, helpers, partials, data);
          if (stack1 || stack1 === 0) {
            buffer += stack1;
          }
          buffer += '\n      ';
          return buffer;
        }
        function program27(depth0, data) {
          var buffer = '', stack1, helper;
          buffer += '\n      <div class="mo-meta">';
          if (helper = helpers.meta) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.meta;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '</div>\n    ';
          return buffer;
        }
        buffer += '<div class="mo-info ';
        stack1 = helpers['if'].call(depth0, depth0 && depth0.meta, {
          hash: {},
          inverse: self.noop,
          fn: self.program(1, program1, data),
          data: data
        });
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += ' ';
        stack1 = helpers['if'].call(depth0, depth0 && depth0.description, {
          hash: {},
          inverse: self.noop,
          fn: self.program(3, program3, data),
          data: data
        });
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += ' ';
        stack1 = helpers['if'].call(depth0, depth0 && depth0.socialproof, {
          hash: {},
          inverse: self.noop,
          fn: self.program(5, program5, data),
          data: data
        });
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += ' ';
        options = {
          hash: {},
          inverse: self.program(7, program7, data),
          fn: self.noop,
          data: data
        };
        if (helper = helpers.hideSubtitle) {
          stack1 = helper.call(depth0, options);
        } else {
          helper = depth0 && depth0.hideSubtitle;
          stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper;
        }
        if (!helpers.hideSubtitle) {
          stack1 = blockHelperMissing.call(depth0, stack1, {
            hash: {},
            inverse: self.program(7, program7, data),
            fn: self.noop,
            data: data
          });
        }
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '" data-log-context="media-info">\n  <div class="mo-info-wrapper">\n    ';
        stack1 = helpers['if'].call(depth0, depth0 && depth0.noLink, {
          hash: {},
          inverse: self.program(11, program11, data),
          fn: self.program(9, program9, data),
          data: data
        });
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n        <span class="mo-title-border">\n          ';
        if (helper = helpers.name) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.name;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        buffer += escapeExpression(stack1) + '\n          <span class="ellipsis">&nbsp;</span>\n        </span>\n    ';
        stack1 = helpers['if'].call(depth0, depth0 && depth0.noLink, {
          hash: {},
          inverse: self.program(15, program15, data),
          fn: self.program(13, program13, data),
          data: data
        });
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n\n    ';
        options = {
          hash: {},
          inverse: self.program(17, program17, data),
          fn: self.noop,
          data: data
        };
        if (helper = helpers.hideSubtitle) {
          stack1 = helper.call(depth0, options);
        } else {
          helper = depth0 && depth0.hideSubtitle;
          stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper;
        }
        if (!helpers.hideSubtitle) {
          stack1 = blockHelperMissing.call(depth0, stack1, {
            hash: {},
            inverse: self.program(17, program17, data),
            fn: self.noop,
            data: data
          });
        }
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n\n    ';
        stack1 = helpers['if'].call(depth0, depth0 && depth0.description, {
          hash: {},
          inverse: self.noop,
          fn: self.program(22, program22, data),
          data: data
        });
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n\n    ';
        options = {
          hash: {},
          inverse: self.noop,
          fn: self.program(24, program24, data),
          data: data
        };
        if (helper = helpers.socialproof) {
          stack1 = helper.call(depth0, options);
        } else {
          helper = depth0 && depth0.socialproof;
          stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper;
        }
        if (!helpers.socialproof) {
          stack1 = blockHelperMissing.call(depth0, stack1, {
            hash: {},
            inverse: self.noop,
            fn: self.program(24, program24, data),
            data: data
          });
        }
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n\n    ';
        stack1 = helpers['if'].call(depth0, depth0 && depth0.meta, {
          hash: {},
          inverse: self.noop,
          fn: self.program(27, program27, data),
          data: data
        });
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n    <div class="media-link-hider"></div>\n    ';
        if (helper = helpers.customContent) {
          stack1 = helper.call(depth0, {
            hash: {},
            data: data
          });
        } else {
          helper = depth0 && depth0.customContent;
          stack1 = typeof helper === functionType ? helper.call(depth0, {
            hash: {},
            data: data
          }) : helper;
        }
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n  </div>\n</div>\n';
        return buffer;
      });
    Handlebars.registerPartial('./node_modules/spotify-glue-cat/templates/media/info.hbs', template);
    require('./node_modules/spotify-glue-cat/templates/facepile-common.hbs');
    module.exports = template;
  },
  './node_modules/spotify-live-models/player/index.js': function (require, module, exports, global) {
    'use strict';
    var live = require('./node_modules/spotify-live/index.js');
    var URI = require('./node_modules/spotify-liburi/src/uri.js');
    var playbackControl = require('./node_modules/spotify-live-models/player/control.js');
    var dataUtils = require('./node_modules/spotify-live-models/player/data.js');
    var updatesUtils = require('./node_modules/spotify-live-models/player/updates.js');
    var sortUriUtils = require('./node_modules/spotify-live-sort-uri/index.js');
    var filterUriUtils = require('./node_modules/spotify-live-filter-uri/index.js');
    var stationRegex = require('./node_modules/spotify-live-models/station.js').matches;
    var isStationUri = stationRegex.test.bind(stationRegex);
    var TYPE_TRACK = 'track';
    var TYPE_TRACK_RESOLVER = 'track-resolver';
    var TYPE_BRIDGE_TRACK_RESOLVER = 'bridge-track-resolver';
    var TYPE_ROWS = 'rows';
    var TYPE_CP_RESOLVER_PLAYLIST = 'context-player-resolver-playlist';
    var TYPE_CP_CONTEXT = 'context-player-context';
    var VARIANT_KEY = 'list-variant-';
    var lastPlayRequestId = 0;
    function shouldUseContextPlayer() {
      return !!(global.__spotify && global.__spotify.uses_context_player);
    }
    function onWait(model) {
      updateState(model);
    }
    function onSync(model) {
      updateState(model);
    }
    function onPlayerStateUpdate(error, data) {
      if (error) {
        if (global.console)
          console.error(error);
        return;
      }
      var model = live('spotify:player');
      if (model.get('pending'))
        return;
      model.update(data);
    }
    function onUpdate(model) {
      var index = model.get('index');
      if (index != null) {
        updatesUtils.setPlayingIndex(index);
      }
      updatesUtils.clean(model);
    }
    function onPlay(model, event) {
      var context = event.context;
      if (!context)
        return;
      var playRequestId = ++lastPlayRequestId;
      model.update({
        playing: true,
        context: { uri: context },
        index: event.index === undefined ? null : event.index,
        track: null,
        contextUpdatedCrossFrame: false
      });
      dataUtils.getPlayOptions(event, function (error, options) {
        if (error || !options.context)
          return updateState(model);
        getStoredSortUri(options.context, function (error, sortUri) {
          if (error)
            return updateState(model);
          if (lastPlayRequestId !== playRequestId) {
            return;
          }
          options.context = sortUri;
          playWithOptions(model, playRequestId, options);
        });
      });
    }
    function onPause(model) {
      if (model.get('playing') === false)
        return;
      model.update({ playing: false });
      playbackControl.pause(function (error) {
        if (error)
          return model.update({ playing: true });
      });
    }
    function onResume(model) {
      if (model.get('playing') === true)
        return;
      model.update({ playing: true });
      playbackControl.resume(function (error) {
        if (error)
          return model.update({ playing: false });
      });
    }
    function onSkipPrev() {
      playbackControl.skipPrev();
    }
    function onSkipNext() {
      playbackControl.skipNext();
    }
    function onUpdateContext(model, event) {
      var contextUri = event.context;
      if (!contextUri)
        return;
      var context = live(contextUri);
      var playRequestId = ++lastPlayRequestId;
      var currentIndex = model.get('index');
      var currentContext = model.get('context');
      model.update({
        context: context,
        index: null,
        pending: true,
        contextUpdatedCrossFrame: false
      });
      live(contextUri).get('rows', function (error, rowsList) {
        if (error) {
          model.update({ pending: false });
          if (global.console)
            console.error(error);
          return;
        }
        var options = { context: contextUri };
        dataUtils.getPlayOptions(options, function (error, options) {
          if (lastPlayRequestId !== playRequestId) {
            return;
          }
          updatesUtils.setPlayingIndex(currentIndex, currentContext.get('rows'));
          options.index = updatesUtils.getPlayingIndexInList(rowsList);
          model.update({ index: options.index });
          var resolverType = getPlaybackResolverType(contextUri);
          if (resolverType === TYPE_TRACK_RESOLVER && !shouldUseContextPlayer()) {
            playbackControl.updateWithResolver(options, function (error) {
              model.update({ pending: false });
              if (error)
                return updateState(model);
            });
          } else if (resolverType === TYPE_ROWS || shouldUseContextPlayer()) {
            if (model.get('origin') && model.get('origin').get('referrer') !== options.referrer) {
              model.update({ contextUpdatedCrossFrame: true });
            }
            playbackControl.updateWithRows(rowsList, options, function (error) {
              model.update({ pending: false });
              if (error)
                return updateState(model);
            });
            updatesUtils.listen(rowsList, options, function (options) {
              playbackControl.updateWithRows(rowsList, options, function (error) {
                if (error)
                  return updateState(model);
              });
            });
          }
        });
      });
    }
    function playWithOptions(model, playRequestId, options) {
      var contextUri = options.context;
      var resolverType = getPlaybackResolverType(contextUri);
      if (resolverType === TYPE_TRACK) {
        playbackControl.playTrack(contextUri, options, function (error) {
          if (error)
            return updateState(model);
        });
      } else if (resolverType === TYPE_TRACK_RESOLVER) {
        playbackControl.playFromResolver(contextUri, options, function (error) {
          if (error)
            return updateState(model);
        });
      } else if (resolverType === TYPE_BRIDGE_TRACK_RESOLVER) {
        playbackControl.playFromBridge(contextUri, function (error) {
          if (error)
            return updateState(model);
        });
      } else if (resolverType === TYPE_ROWS) {
        var isSortedList = sortUriUtils.isValid(contextUri);
        if (isSortedList) {
          getSortedRows(contextUri, function (error, rowsList) {
            if (error)
              return updateState(model);
            if (lastPlayRequestId !== playRequestId) {
              return;
            }
            playRows(model, rowsList, options);
          });
        } else {
          live(contextUri).query('rows(track(uri))', function (err) {
            if (!err && lastPlayRequestId === playRequestId) {
              playRows(model, live(contextUri).get('rows'), options);
            }
          });
        }
      } else if (resolverType === TYPE_CP_RESOLVER_PLAYLIST) {
        playbackControl.playFromPlaylistResolver(contextUri, options, function (error) {
          if (error)
            return updateState(model);
        });
      } else if (resolverType === TYPE_CP_CONTEXT) {
        var context = {
            url: 'context://' + contextUri,
            entity_uri: contextUri
          };
        playbackControl.playContext(context, options, function (error) {
          if (error)
            return updateState(model);
        });
      }
    }
    function playRows(model, rowsList, options) {
      playbackControl.playRows(rowsList, options, function (error) {
        if (error)
          return updateState(model);
        updatesUtils.listen(rowsList, options, function (options) {
          playbackControl.updateWithRows(rowsList, options, function (error) {
            if (error)
              return updateState(model);
          });
        });
      });
    }
    function getPlaybackResolverType(contextUri) {
      var contextType = URI.from(contextUri).type;
      var isTrack = contextType === URI.Type.TRACK;
      var isPlaylist = contextType === URI.Type.PLAYLIST;
      var isPlaylistFolder = contextType === URI.Type.FOLDER;
      var isStarred = contextType === URI.Type.STARRED;
      var isSortedList = sortUriUtils.isValid(contextUri);
      var isFilteredList = filterUriUtils.isValid(contextUri);
      var isStation = isStationUri(contextUri);
      if (isTrack)
        return TYPE_TRACK;
      if (isPlaylist) {
        if (playbackControl.shouldUseContextPlayer())
          return TYPE_CP_RESOLVER_PLAYLIST;
        return TYPE_TRACK_RESOLVER;
      }
      if (isPlaylistFolder) {
        if (playbackControl.shouldUseContextPlayer())
          return TYPE_CP_CONTEXT;
        return TYPE_BRIDGE_TRACK_RESOLVER;
      }
      if (isStation)
        return TYPE_ROWS;
      var originContextType, originUri;
      if (isSortedList) {
        if (playbackControl.shouldUseContextPlayer()) {
          originUri = sortUriUtils.parse(contextUri).originUri;
          if (filterUriUtils.isValid(originUri))
            originUri = filterUriUtils.parse(originUri).originUri;
          originContextType = URI.from(originUri).type;
          if (originContextType === URI.Type.PLAYLIST)
            return TYPE_CP_RESOLVER_PLAYLIST;
        }
        return TYPE_ROWS;
      }
      if (isFilteredList) {
        if (playbackControl.shouldUseContextPlayer()) {
          originUri = filterUriUtils.parse(contextUri).originUri;
          originContextType = URI.from(originUri).type;
          if (originContextType === URI.Type.PLAYLIST)
            return TYPE_CP_RESOLVER_PLAYLIST;
        }
        return TYPE_ROWS;
      }
      if (isStarred) {
        var isDesktop = !!global._getSpotifyModule;
        var client = global.__spotify && global.__spotify.client;
        var isZelda = client === 'zelda';
        if (isDesktop && !isZelda)
          return TYPE_TRACK_RESOLVER;
        return TYPE_ROWS;
      }
      var rowsList = live(contextUri).get('rows');
      if (rowsList && rowsList.length) {
        return TYPE_ROWS;
      }
      return TYPE_TRACK_RESOLVER;
    }
    function getStoredSortUri(listUri, callback) {
      live('spotify:client').query('containerFeatures(clientStorage)', function (error, data) {
        if (error)
          return callback(null, listUri);
        var isStarred = URI.fromString(listUri).type === URI.Type.STARRED;
        var defaultUri = isStarred ? sortUriUtils.create(listUri, 'asc', 'timeSinceAdded') : listUri;
        if (data.containerFeatures.clientStorage) {
          var key = VARIANT_KEY + listUri;
          var clientStorage = live('spotify:client-storage');
          if (clientStorage.get('implemented')) {
            clientStorage.get(key, function (error, variant) {
              if (error)
                return callback(null, defaultUri);
              if (variant && sortUriUtils.isValid(variant) || variant === listUri) {
                return callback(null, variant);
              }
              callback(null, defaultUri);
            });
          } else {
            callback(null, defaultUri);
          }
        } else {
          callback(null, defaultUri);
        }
      });
    }
    function getSortedRows(sortUri, callback) {
      var playlistUri = sortUriUtils.getOriginUri(sortUri);
      live(playlistUri).get('rows', function (error, rows) {
        if (error)
          return callback(error);
        rows.get(0, rows.length, function (error) {
          if (error)
            return callback(error);
          live(sortUri).get('rows', function (error, rowsList) {
            if (error)
              return callback(error);
            callback(null, rowsList);
          });
        });
      });
    }
    function updateState(model) {
      dataUtils.getPlayerState(function (error, data) {
        if (error) {
          if (global.console)
            console.error(error);
          return;
        }
        model.update(data);
      });
    }
    var regExp = exports.matches = /^spotify:player$/;
    var registered;
    var playerSubscription;
    exports.register = function () {
      if (registered)
        return;
      registered = true;
      live.subscribe(regExp, 'play', onPlay);
      live.subscribe(regExp, 'pause', onPause);
      live.subscribe(regExp, 'resume', onResume);
      live.subscribe(regExp, 'skip-previous', onSkipPrev);
      live.subscribe(regExp, 'skip-next', onSkipNext);
      live.subscribe(regExp, 'update-context', onUpdateContext);
      live.subscribe(regExp, 'update', onUpdate);
      live.subscribe(regExp, 'wait', onWait);
      live.subscribe(regExp, 'sync-position', onSync);
      playerSubscription = dataUtils.subscribeForPlayerState(onPlayerStateUpdate);
    };
    exports.unregister = function () {
      if (!registered)
        return;
      registered = false;
      live.unsubscribe(regExp, 'play', onPlay);
      live.unsubscribe(regExp, 'pause', onPause);
      live.unsubscribe(regExp, 'resume', onResume);
      live.unsubscribe(regExp, 'skip-previous', onSkipPrev);
      live.unsubscribe(regExp, 'skip-next', onSkipNext);
      live.unsubscribe(regExp, 'update-context', onUpdateContext);
      live.unsubscribe(regExp, 'update', onUpdate);
      live.unsubscribe(regExp, 'wait', onWait);
      live.unsubscribe(regExp, 'sync-position', onSync);
      playerSubscription.unsubscribe();
      playerSubscription = null;
    };
  },
  './node_modules/spotify-live-models/add/index.js': function (require, module, exports, global) {
    'use strict';
    var album = require('./node_modules/spotify-live-models/add/album.js');
    var artist = require('./node_modules/spotify-live-models/add/artist.js');
    var playlist = require('./node_modules/spotify-live-models/add/playlist.js');
    var track = require('./node_modules/spotify-live-models/add/track.js');
    var user = require('./node_modules/spotify-live-models/add/user.js');
    var local = require('./node_modules/spotify-live-models/add/local.js');
    exports.register = function () {
      album.register();
      artist.register();
      playlist.register();
      track.register();
      user.register();
      local.register();
    };
    exports.unregister = function () {
      album.unregister();
      artist.unregister();
      playlist.unregister();
      track.unregister();
      user.unregister();
      local.register();
    };
  },
  './node_modules/spotify-handlebars/helpers/index.js': function (require, module, exports, global) {
    'use strict';
    exports.compare = require('./node_modules/spotify-handlebars/helpers/compare.js');
    exports.duration = require('./node_modules/spotify-handlebars/helpers/duration.js');
    exports.facepile = require('./node_modules/spotify-handlebars/helpers/facepile.js');
    exports.href = require('./node_modules/spotify-handlebars/helpers/href.js');
    exports.humanizeDuration = require('./node_modules/spotify-handlebars/helpers/humanize-duration.js');
    exports.list = require('./node_modules/spotify-handlebars/helpers/list.js');
    exports.loc = require('./node_modules/spotify-handlebars/helpers/loc.js');
    exports.nameListTooltip = require('./node_modules/spotify-handlebars/helpers/name-list-tooltip.js');
    exports.numeral = require('./node_modules/spotify-handlebars/helpers/numeral.js');
    exports.share = require('./node_modules/spotify-handlebars/helpers/share.js');
    exports.slice = require('./node_modules/spotify-handlebars/helpers/slice.js');
    exports.type = require('./node_modules/spotify-handlebars/helpers/type.js');
    exports.userReaction = require('./node_modules/spotify-handlebars/helpers/user-reaction.js');
  },
  './node_modules/stacktrace-parser/index.js': function (require, module, exports, global) {
    module.exports = require('./node_modules/stacktrace-parser/lib/stacktrace-parser.js');
  },
  './node_modules/spotify-dom-logger/dom-logger.js': function (require, module, exports, global) {
    function DomLogger(opt_options) {
      opt_options = opt_options || {};
      this.document = opt_options.document || document;
      if (!opt_options.logger) {
        var CLientLogger = require('./node_modules/spotify-dom-logger/node_modules/spotify-client-logger/src/logger.js');
        this.logger = new CLientLogger();
      } else {
        this.logger = opt_options.logger;
      }
    }
    ;
    DomLogger.GATHERED_ATTRIBUTES = [
      'data-log-click',
      'data-log-context',
      'data-log-data'
    ];
    DomLogger.prototype.init = function () {
      this.document.addEventListener('click', this._handleClick.bind(this), true);
    };
    DomLogger.prototype.logClick = function (clickedElement) {
      var element = clickedElement;
      var identifier = 'unknown-element';
      var attrs = this._gatherAttributes(DomLogger.GATHERED_ATTRIBUTES, element);
      if (attrs.values['data-log-click'].length) {
        element = attrs.nodes['data-log-click'].pop();
        identifier = attrs.values['data-log-click'].pop();
      }
      var data = attrs.values['data-log-data'] ? this._mergeJSONStrings(attrs.values['data-log-data']) : {};
      var context = attrs.values['data-log-context'].join('/');
      if (element.getAttribute('data-log-click-as-select')) {
        this.logger.userSelect(identifier, data, context);
      } else {
        this.logger.userHit(identifier, data, context);
      }
    };
    DomLogger.prototype._handleClick = function (event) {
      this.logClick(event.target);
    };
    DomLogger.prototype._mergeJSONStrings = function (datas) {
      try {
        datas = datas.map(function (item) {
          return JSON.parse(item);
        });
      } catch (e) {
        console.log('Failed to parse data-log-data (needs to be proper JSON):', datas);
        datas = [];
      }
      return datas.reduce(function (accum, cur) {
        Object.keys(cur).forEach(function (key) {
          accum[key] = cur[key];
        });
        return accum;
      }, {});
    };
    DomLogger.prototype._gatherAttributes = function (attributes, element, opt_resultMap) {
      var resultMap = opt_resultMap || {
          nodes: {},
          values: {}
        };
      if (element.parentNode && element.parentNode.getAttribute) {
        this._gatherAttributes(attributes, element.parentNode, resultMap);
      }
      for (var i = 0; i < attributes.length; i++) {
        var name = attributes[i];
        var value = element.getAttribute(name);
        resultMap.values[name] = resultMap.values[name] || [];
        resultMap.nodes[name] = resultMap.nodes[name] || [];
        if (value) {
          resultMap.values[name].push(value);
          resultMap.nodes[name].push(element);
        }
      }
      return resultMap;
    };
    module.exports = DomLogger;
  },
  './node_modules/spotify-live/util/diff.js': function (require, module, exports, global) {
    'use strict';
    var splice_ = Array.prototype.splice;
    var slice_ = Array.prototype.slice;
    var annotate = function annotate(before, after) {
      var beforeLength = before.length;
      var afterLength = after.length;
      var moves = [];
      var beforeMarked = {};
      var afterMarked = {};
      for (var beforeIndex = 0; beforeIndex < beforeLength; beforeIndex++) {
        var beforeItem = before[beforeIndex];
        for (var afterIndex = 0; afterIndex < afterLength; afterIndex++) {
          if (afterMarked[afterIndex])
            continue;
          if (beforeItem !== after[afterIndex])
            continue;
          var from = beforeIndex;
          var to = afterIndex;
          var length = 0;
          do {
            beforeMarked[beforeIndex++] = afterMarked[afterIndex++] = true;
            length++;
          } while (beforeIndex < beforeLength && afterIndex < afterLength && before[beforeIndex] === after[afterIndex] && !afterMarked[afterIndex]);
          var moveDiff = {
              type: 'move',
              from: from,
              to: to,
              length: length
            };
          moves.push(moveDiff);
          beforeIndex--;
          break;
        }
      }
      var removes = [];
      for (beforeIndex = 0; beforeIndex < beforeLength;) {
        if (beforeMarked[beforeIndex]) {
          beforeIndex++;
          continue;
        }
        var index = beforeIndex;
        var length = 0;
        while (beforeIndex < beforeLength && !beforeMarked[beforeIndex++]) {
          length++;
        }
        var removeDiff = {
            type: 'remove',
            index: index,
            length: length,
            values: slice_.call(before, index, index + length)
          };
        removes.push(removeDiff);
      }
      var inserts = [];
      for (afterIndex = 0; afterIndex < afterLength;) {
        if (afterMarked[afterIndex]) {
          afterIndex++;
          continue;
        }
        var index = afterIndex;
        var length = 0;
        while (afterIndex < afterLength && !afterMarked[afterIndex++]) {
          length++;
        }
        var values = slice_.call(after, index, index + length);
        inserts.push({
          type: 'insert',
          index: index,
          length: length,
          values: values
        });
      }
      return [
        removes,
        moves,
        inserts
      ];
    };
    var offset = function offset(removes, moves, inserts) {
      var insertsLength = inserts.length;
      var removesLength = removes.length;
      var movesLength = moves.length;
      var i, j;
      var count = 0;
      for (i = 0; i < removesLength; i++) {
        var remove = removes[i];
        remove.index -= count;
        count += remove.length;
        for (j = 0; j < movesLength; j++) {
          var move = moves[j];
          if (move.from >= remove.index)
            move.from -= remove.length;
        }
      }
      for (i = insertsLength; i--;) {
        var insert = inserts[i];
        var length = insert.length;
        for (j = movesLength; j--;) {
          var move = moves[j];
          if (move.to >= insert.index)
            move.to -= length;
        }
      }
      for (i = movesLength; i-- > 1;) {
        var move = moves[i];
        if (move.to === move.from)
          continue;
        for (j = i; j--;) {
          var earlier = moves[j];
          if (earlier.to >= move.to)
            earlier.to -= move.length;
          if (earlier.to >= move.from)
            earlier.to += move.length;
        }
      }
      var outputMoves = [];
      for (i = 0; i < movesLength; i++) {
        var move = moves[i];
        if (move.to === move.from)
          continue;
        outputMoves.push(move);
        for (j = i + 1; j < movesLength; j++) {
          var later = moves[j];
          if (later.from >= move.from)
            later.from -= move.length;
          if (later.from >= move.to)
            later.from += move.length;
        }
      }
      reduceMoves(outputMoves);
      return removes.concat(outputMoves, inserts);
    };
    var reduceMoves = function reduceMoves(moves) {
      for (var i = 0; i < moves.length; i++) {
        if (moves[i].length > Math.abs(moves[i].to - moves[i].from)) {
          var from = moves[i].from;
          var to = moves[i].to;
          var length = moves[i].length;
          moves[i].length = Math.abs(moves[i].to - moves[i].from);
          moves[i].from = to;
          moves[i].to = to + length;
        }
      }
    };
    var insert = function insert(array, index, values) {
      for (var i = 0; i < values.length; i++) {
        if (i in values) {
          var idx = index + i;
          if (array.length < idx)
            array.length = idx;
          array.splice(idx, 0, values[i]);
        }
      }
      return values;
    };
    var remove = function remove(array, index, length) {
      return splice_.call(array, index, length);
    };
    var move = function move(array, from, to, length) {
      var moved = remove(array, from, length);
      insert(array, to, moved);
      return moved;
    };
    var patch = function patch(array, operations) {
      for (var i = 0; i < operations.length; i++) {
        var operation = operations[i];
        switch (operation.type) {
        case 'move':
          move(array, operation.from, operation.to, operation.length);
          break;
        case 'remove':
          remove(array, operation.index, operation.length);
          break;
        case 'insert':
          insert(array, operation.index, operation.values);
          break;
        }
      }
      return array;
    };
    var diff = function diff(before, after) {
      var operations = annotate(before, after);
      return offset.apply(this, operations);
    };
    diff.annotate = annotate;
    diff.offset = offset;
    diff.remove = remove;
    diff.insert = insert;
    diff.move = move;
    diff.patch = patch;
    module.exports = diff;
  },
  './node_modules/spotify-locales/languages.json': function (require, module, exports, global) {
    module.exports = {
      'bn': { 'smartling': 'bn-IN' },
      'de': { 'smartling': 'de-DE' },
      'el': { 'smartling': 'el-GR' },
      'en': { 'smartling': 'en-GB' },
      'es-419': {
        'moment': 'es',
        'numeral': 'es-ES',
        'smartling': 'es-LA'
      },
      'es': {
        'numeral': 'es-ES',
        'smartling': 'es-ES'
      },
      'fi': { 'smartling': 'fi-FI' },
      'fr': { 'smartling': 'fr-FR' },
      'fr-CA': { 'smartling': 'fr-CA' },
      'hi': { 'smartling': 'hi-IN' },
      'hu': { 'smartling': 'hu-HU' },
      'it': { 'smartling': 'it-IT' },
      'ja': { 'smartling': 'ja-JP' },
      'ko': { 'smartling': 'ko-KR' },
      'nl': {
        'numeral': 'nl-nl',
        'smartling': 'nl-NL'
      },
      'pl': { 'smartling': 'pl-PL' },
      'pt-BR': {
        'moment': 'pt-br',
        'numeral': 'pt-br',
        'smartling': 'pt-BR'
      },
      'ro': { 'smartling': 'ro-RO' },
      'ru': { 'smartling': 'ru-RU' },
      'sv': { 'smartling': 'sv-SE' },
      'ta': { 'smartling': 'ta-IN' },
      'th': { 'smartling': 'th-TH' },
      'tr': { 'smartling': 'tr-TR' },
      'zh-Hant': {
        'moment': 'zh-cn',
        'smartling': 'zh-TW'
      },
      'zsm': {
        'moment': 'ms-my',
        'smartling': 'ms-MY'
      }
    };
  },
  './node_modules/api/@supported-languages.json': function (require, module, exports, global) {
    module.exports = [
      'arb',
      'de',
      'el',
      'en',
      'es',
      'es-la',
      'es-419',
      'fi',
      'fr',
      'fr-ca',
      'hu',
      'id',
      'it',
      'ja',
      'nl',
      'pl',
      'pt-br',
      'ro',
      'ru',
      'sv',
      'th',
      'tr',
      'zh-hant',
      'zsm'
    ];
  },
  './node_modules/spotify-events/player.js': function (require, module, exports, global) {
    'use strict';
    var indexOf = require('./node_modules/mout/array/indexOf.js');
    var difference = require('./node_modules/mout/array/difference.js');
    var forEach = require('./node_modules/mout/array/forEach.js');
    var map = require('./node_modules/mout/array/map.js');
    var find = require('./node_modules/mout/array/find.js');
    var live = require('./node_modules/spotify-live/index.js');
    var Range = require('./node_modules/spotify-range2/index.js');
    var getOriginUri = require('./node_modules/spotify-events/util/get-origin-uri.js');
    var liburi = require('./node_modules/spotify-liburi/src/uri.js');
    var center = require('./node_modules/spotify-events/center.js');
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var selection = require('./node_modules/spotify-events/selection/index.js');
    var PLAYER_MODEL_URI = 'spotify:player';
    var CURRENT = 'current';
    var PAUSED = 'paused';
    var PLAYING = 'playing';
    var LOG_PLAY_BUTTON = 'play-button';
    var LOG_PAUSE_BUTTON = 'pause-button';
    var SELECTOR_LIST_ROW = '[data-context] [data-list-item]';
    var SELECTOR_PLAY_BUTTON = '[data-button=play]';
    var storedContextURIsForUnplayable = {};
    function getSelectorForContextUri(context) {
      return '[data-context][data-uri' + context.operator + context.uri + ']';
    }
    function getSelectorForIndex(context, index) {
      var contextSelector = getSelectorForContextUri(context);
      return contextSelector + ' [data-context-index=' + index + ']';
    }
    function getSelectorDescriptions(uri, opt_withVariants) {
      var ENDSWITH = '$=';
      var SAME = '=';
      var descriptions = [];
      if (!opt_withVariants) {
        descriptions.push({
          uri: uri,
          operator: SAME
        });
        var normalized = normalizeUri(uri);
        if (uri !== normalized) {
          descriptions.push({
            uri: normalized,
            operator: SAME
          });
        }
      } else {
        var endsWith = getOriginUri(uri) || uri;
        var endsWithNormalized = normalizeUri(endsWith);
        descriptions.push({
          uri: endsWith.replace(/^spotify:/, ':'),
          operator: ENDSWITH
        });
        if (endsWith !== endsWithNormalized) {
          descriptions.push({
            uri: endsWithNormalized.replace(/^spotify:/, ':'),
            operator: ENDSWITH
          });
        }
      }
      return descriptions;
    }
    function getPlayingNodes(node, contextURI, index) {
      var actualContexts = getSelectorDescriptions(contextURI);
      var rowNodes = getContextNodesForRows(node, actualContexts, index) || [];
      var contextsWithVariants = getSelectorDescriptions(contextURI, true);
      var contextNodes = getContextNodes(node, contextsWithVariants, index) || [];
      var rangeNodes = getContextNodesForRanges(node, contextsWithVariants, index) || [];
      return $([
        contextNodes,
        rowNodes,
        rangeNodes
      ]);
    }
    function getContextNodes(node, contexts, index) {
      var selectors = map(contexts, function (context) {
          return getSelectorForContextUri(context);
        });
      var contextSelector = selectors.join(', ');
      var contextNodes = node.search(contextSelector);
      contextNodes = filterRanges(index, contextNodes);
      return contextNodes;
    }
    function getContextNodesForRows(node, contexts, index) {
      var selectors = map(contexts, function (context) {
          return getSelectorForIndex(context, index);
        });
      return node.search(selectors.join(', '));
    }
    function getContextNodesForRanges(node, contexts, index) {
      var selectors = map(contexts, function (context) {
          return getSelectorForContextUri(context);
        });
      var rangeAttribute = '[data-range]';
      selectors = map(selectors, function (selector) {
        var rangeInContextSelector = selector + ' ' + rangeAttribute;
        var rangedContextSelector = selector + rangeAttribute;
        var rangeSelector = [
            rangeInContextSelector,
            rangedContextSelector
          ].join(', ');
        return rangeSelector;
      });
      var rangeNodes = node.search(selectors.join(', '));
      return filterRanges(index, rangeNodes);
    }
    function filterRanges(index, nodes) {
      var thisRange = index != null ? new Range(index, index + 1) : null;
      if (nodes) {
        nodes = nodes.filter(function (node) {
          node = $(node);
          var range = node.data('range');
          if (!range)
            return true;
          if (!thisRange)
            return false;
          range = Range.fromString(range);
          return range.contains(thisRange);
        });
      }
      return nodes;
    }
    function compareContexts(context1, context2) {
      if (!context1 || !context2)
        return false;
      context1 = normalizeUri(getOriginUri(context1) || context1);
      context2 = normalizeUri(getOriginUri(context2) || context2);
      return context1 === context2;
    }
    function normalizeUri(uri) {
      var uriObj = liburi.from(uri);
      return uriObj ? uriObj.toString() : uri;
    }
    var getPlaySourceFromNode = function (node) {
      var playSourceNode = node.matches('[data-play-source]') ? node : node.parent('[data-play-source]');
      return playSourceNode && playSourceNode.data('play-source');
    };
    var handlePlayButton = function (event, button) {
      var player = live(PLAYER_MODEL_URI);
      var context = player.get('context');
      var index = player.get('index');
      var playing = player.get('playing');
      if (context === undefined || index === undefined || playing === undefined)
        return;
      var contextURI = getUriFromButton(button);
      if (!contextURI)
        return;
      var newContext = live(contextURI);
      var contextIndexNode = button.matches('[data-context-index]') ? button : button.parent('[data-context-index]');
      var source = getPlaySourceFromNode(button);
      var newIndex, range, uids, uris, list;
      var dataRange = button.data('range');
      if (dataRange) {
        range = Range.fromString(dataRange);
        list = newContext.get('rows');
        if (list) {
          var indices = range.toIndices();
          uids = indices.map(function (index) {
            return list.keys[index];
          });
          uris = indices.map(function (index) {
            var track = list.get(index).get('track');
            return track.uri;
          });
        }
        newIndex = null;
      } else if (contextIndexNode) {
        newIndex = +contextIndexNode.data('context-index');
        list = newContext.get('rows');
        if (list) {
          uids = [list.keys[newIndex]];
          uris = [list.get(newIndex).get('track').uri];
        }
      } else {
        newIndex = null;
      }
      var playContextURI = context && context.get('uri');
      var isSameContext = compareContexts(playContextURI, contextURI);
      var shouldPauseResume = false;
      if (isSameContext) {
        if (range) {
          if (index == null) {
            shouldPauseResume = false;
          } else {
            shouldPauseResume = range.contains(new Range(index, index + 1));
          }
        } else if (newIndex != null) {
          shouldPauseResume = newIndex === index;
        } else {
          shouldPauseResume = true;
        }
      }
      if (shouldPauseResume) {
        player.emit(playing ? 'pause' : 'resume');
      } else {
        var eventData = {
            context: contextURI,
            index: newIndex,
            playing: true,
            source: source,
            reason: 'playbtn'
          };
        if (range) {
          eventData.range = [
            range.start,
            range.end
          ];
        }
        if (uids) {
          eventData.uids = uids;
        }
        if (uris) {
          eventData.uris = uris;
        }
        player.emit('play', eventData);
      }
    };
    var isFormOrLinkElement = function (element) {
      var tagName = element.tagName.toLowerCase();
      var elements = [
          'input',
          'textarea',
          'button',
          'select',
          'optgroup',
          'option',
          'a'
        ];
      return indexOf(elements, tagName) > -1;
    };
    var handleKeyDown = function (event, row) {
      var isEnter = event.keyCode === 13;
      if (isEnter) {
        if (isFormOrLinkElement(event.target)) {
          return;
        }
        event.preventDefault();
        event.stopPropagation();
        playFromRow(row);
      }
    };
    var handleChange = function () {
      var player = live(PLAYER_MODEL_URI);
      if (player.get('context') !== undefined) {
        update(null, { skipFindUnplayableButtons: true });
      }
    };
    var handleScrollShowAfter = function (event) {
      var container = event.container;
      var contextNode = container.matches('[data-context]') ? container : container.parent('[data-context]');
      var skipFindUnplayableButtons = contextNode && contextNode.matches('[data-list]');
      var contextNodeParent = contextNode && contextNode.parent() || doc;
      update(contextNodeParent, { skipFindUnplayableButtons: skipFindUnplayableButtons });
    };
    var handleListRow = function (event, row) {
      var target = $(event.target);
      var isPlayButton = target.matches('[data-button=play]') || target.parent('[data-button=play]');
      if (isPlayButton)
        return;
      playFromRow(row);
    };
    var playFromRow = function (row) {
      var context = row.parent('[data-context]');
      var contextURI = context.data('uri');
      var contextIndex = +row.data('context-index');
      var source = getPlaySourceFromNode(row);
      var eventData = {
          context: contextURI,
          index: contextIndex,
          source: source,
          reason: 'clickrow'
        };
      var list = live(contextURI);
      var uid;
      var uri;
      var rows = list.get('rows');
      if (rows) {
        uid = rows.keys[contextIndex];
        var track = rows.get(contextIndex).get('track');
        uri = track.uri;
      }
      if (uid)
        eventData.uids = [uid];
      if (uri)
        eventData.uris = [uri];
      live(PLAYER_MODEL_URI).emit('play', eventData);
    };
    var getUriFromButton = function (button) {
      button = $(button);
      var contextNode = button.matches('[data-context]') ? button : button.parent('[data-context]');
      if (!contextNode)
        return;
      return contextNode.data('uri');
    };
    var isButtonInRow = function (button) {
      var rowNode = $(button).parent('[data-list-item]');
      return !!rowNode;
    };
    var findUnplayableButtons = exports._findUnplayableButtons = function (node) {
        var buttons = node.search('[data-button=play]');
        if (!buttons)
          return;
        var delayedTime = 0;
        forEach(buttons, function (button) {
          if (isButtonInRow(button)) {
            return;
          }
          var uri = getUriFromButton(button);
          if (live(uri).get('playable')) {
            return;
          }
          setTimeout(function () {
            live(uri).get('rows', function (error, rows) {
              updateButtonBasedOnTracks(uri, rows, button);
              if (uri in storedContextURIsForUnplayable)
                return;
              storedContextURIsForUnplayable[uri] = true;
              setTimeout(function () {
                rows.on('update', function () {
                  updateButtonsBasedOnTracks(uri, rows);
                });
              }, 0);
            });
          }, delayedTime);
          delayedTime = delayedTime + 50;
        });
      };
    var hasPlayableRow = function (rows) {
      if (rows.length === 0)
        return false;
      var ranges = rows.index;
      if (ranges.length !== 1)
        return true;
      if (ranges[0].length !== rows.length)
        return true;
      for (var i = 0, l = rows.length; i < l; i++) {
        var row = rows.get(i);
        var track = row && row.get('track');
        if (track && track.get('playable') === true) {
          return true;
        }
      }
      return false;
    };
    var updateButtonBasedOnTracks = function (contextURI, rows, button) {
      if (isButtonInRow(button)) {
        return;
      }
      var buttonUri = getUriFromButton(button);
      if (buttonUri === contextURI) {
        if (!hasPlayableRow(rows)) {
          button.setAttribute('disabled', '');
          if (rows.length) {
            var anyRowHasLoadedPlayable = rows.values.some(function (row) {
                return row && row.get('track') && row.get('track').has('playable');
              });
            if (!anyRowHasLoadedPlayable) {
              var firstTrack = rows.get(0) && rows.get(0).get('track');
              if (firstTrack) {
                firstTrack.on('update', function onFirstTrackUpdate(props) {
                  if ('playable' in props) {
                    firstTrack.off('update', onFirstTrackUpdate);
                    updateButtonsBasedOnTracks(contextURI, rows);
                  }
                });
              }
            }
          }
        } else {
          button.removeAttribute('disabled');
        }
      }
    };
    var updateButtonsBasedOnTracks = function (contextURI, rows) {
      var buttons = $('[data-button=play]');
      if (!buttons)
        return;
      forEach(buttons, updateButtonBasedOnTracks.bind(null, contextURI, rows));
    };
    var findAndUpdateButtonsBasedOnPlaying = function (node, playing) {
      var button = node.matches(SELECTOR_PLAY_BUTTON) ? node : node.find(SELECTOR_PLAY_BUTTON);
      if (!button)
        return;
      button.setAttribute('data-log-click', playing ? LOG_PAUSE_BUTTON : LOG_PLAY_BUTTON);
    };
    var doc = $(document);
    exports.attach = function attach() {
      var player = live(PLAYER_MODEL_URI);
      player.on('update', handleChange);
      doc.delegate('keydown', SELECTOR_LIST_ROW, handleKeyDown);
      doc.delegate('dblclick', SELECTOR_LIST_ROW, handleListRow);
      doc.delegate('click', SELECTOR_PLAY_BUTTON, handlePlayButton);
      center.on('scroll-show-after', handleScrollShowAfter);
      return this;
    };
    exports.detach = function detach() {
      var player = live(PLAYER_MODEL_URI);
      player.off('update', handleChange);
      doc.undelegate('keydown', SELECTOR_LIST_ROW, handleKeyDown);
      doc.undelegate('dblclick', SELECTOR_LIST_ROW, handleListRow);
      doc.undelegate('click', SELECTOR_PLAY_BUTTON, handlePlayButton);
      center.off('scroll-show-after', handleScrollShowAfter);
      storedContextURIsForUnplayable = {};
      return this;
    };
    var update = exports.update = function update(node, options) {
        node = $(node) || doc;
        var player = live(PLAYER_MODEL_URI);
        if (!options || !options.skipFindUnplayableButtons) {
          exports._findUnplayableButtons(node);
        }
        player.get('context', 'index', 'playing', function (err, context, index, playing) {
          var nodes;
          var contextURI = context && context.uri;
          if (contextURI) {
            nodes = getPlayingNodes(node, contextURI, index);
          }
          var currentNodes = node.search('[data-playback-active=true]');
          if (currentNodes) {
            var nodesForRemoval = nodes ? difference(currentNodes, nodes) : currentNodes;
            forEach(nodesForRemoval, function (node) {
              node = $(node);
              var className = [
                  CURRENT,
                  PAUSED,
                  PLAYING
                ].join(' ');
              node.removeClass(className).removeAttribute('data-playback-active');
              findAndUpdateButtonsBasedOnPlaying(node, false);
            });
          }
          if (nodes) {
            var nodesForAddition = currentNodes ? difference(nodes, currentNodes) : nodes;
            forEach(nodesForAddition, function (node) {
              node = $(node);
              var classNames = [
                  CURRENT,
                  playing ? PLAYING : PAUSED
                ].join(' ');
              node.addClass(classNames).data('playback-active', true);
              findAndUpdateButtonsBasedOnPlaying(node, playing);
            });
            var nodesForUpdate = difference(nodes, nodesForAddition);
            forEach(nodesForUpdate, function (node) {
              node = $(node);
              var currentClassName = playing ? PAUSED : PLAYING;
              var newClassName = playing ? PLAYING : PAUSED;
              findAndUpdateButtonsBasedOnPlaying(node, playing);
              if (node.hasClass(currentClassName))
                node.removeClass(currentClassName);
              if (!node.hasClass(newClassName))
                node.addClass(newClassName);
            });
          }
        }, live.ASAP);
        return this;
      };
  },
  './node_modules/spotify-events/add.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var forIn = require('./node_modules/mout/object/forIn.js');
    var live = require('./node_modules/spotify-live/index.js');
    var center = require('./node_modules/spotify-events/center.js');
    var IS_ADDED_PROPERTY = 'added';
    var FOLLOWERSCOUNT_PROPERTY = 'followersCount';
    var FOLLOWINGCOUNT_PROPERTY = 'followingCount';
    var BUTTON_SELECTOR = '[data-button=add]';
    var JUSTCHANGED_CLASSNAME = 'just-changed';
    var ADDED_CLASSNAME = 'added';
    var dataPropertiesForAdd = [
        IS_ADDED_PROPERTY,
        FOLLOWERSCOUNT_PROPERTY,
        FOLLOWINGCOUNT_PROPERTY
      ];
    var changeHandlers = {};
    var utils = {
        getAddedClass: function (node) {
          var addedClassNode = node.hasAttribute('data-class-added') ? node : node.parent('[data-class-added]');
          return addedClassNode ? addedClassNode.data('class-added') : ADDED_CLASSNAME;
        },
        getURIFromNode: function (node) {
          var stateNode = node.hasAttribute('data-uri') ? node : node.parent('[data-uri]');
          if (!stateNode)
            return null;
          return stateNode.data('uri');
        }
      };
    var eventHandlers = {
        click: function (event, node) {
          var stateNode = node.hasAttribute('data-uri') ? node : node.parent('[data-uri]');
          if (!stateNode)
            return;
          var uri = stateNode.data('uri');
          if (!uri)
            return;
          var addedClass = utils.getAddedClass(node);
          var shouldBeAdded = !stateNode.hasClass(addedClass);
          var data = { added: shouldBeAdded };
          if (shouldBeAdded) {
            node.addClass(JUSTCHANGED_CLASSNAME);
            node.on('mouseout', function mouseoutHandler(event) {
              if (event.target !== node[0])
                return;
              node.off('mouseout', mouseoutHandler);
              node.removeClass(JUSTCHANGED_CLASSNAME);
            });
          }
          live(uri).publish(data);
        },
        changeHandler: function (key, value, uri) {
          if (key === IS_ADDED_PROPERTY) {
            var numAffectedButtons = actions.setStateForURI(uri, value);
            if (numAffectedButtons === 0) {
              live(uri).off('update', changeHandlers[uri]);
              delete changeHandlers[uri];
            }
          }
          if (dataPropertiesForAdd.indexOf(key) > -1) {
            center.emit('add-data-change', {
              uri: uri,
              model: live(uri),
              key: key,
              value: value
            });
          }
        }
      };
    var actions = {
        setStateForURI: function (uri, isAdded) {
          var numAffectedButtons = 0;
          var nodes = $(document).search(BUTTON_SELECTOR);
          if (!nodes)
            return numAffectedButtons;
          for (var i = 0, l = nodes.length; i < l; i++) {
            var node = $(nodes[i]);
            var buttonURI = utils.getURIFromNode(node);
            if (uri === buttonURI) {
              numAffectedButtons++;
              actions.setStateForButtonNode(node, isAdded);
            }
          }
          return numAffectedButtons;
        },
        setStateForButtonNode: function (node, isAdded) {
          var stateNode = node.hasAttribute('data-uri') ? node : node.parent('[data-uri]');
          if (!stateNode)
            return;
          var addedClass = utils.getAddedClass(node);
          actions.setVisualState(isAdded, stateNode, node, addedClass);
        },
        setVisualState: function (isAdded, node, button, className) {
          if (isAdded) {
            if (!node.hasClass(className))
              node.addClass(className);
            var tooltipRemove = button.data('tooltip-remove');
            if (tooltipRemove) {
              button.setAttribute('data-tooltip', tooltipRemove);
              button.setAttribute('aria-label', tooltipRemove);
            }
            button.setAttribute('data-log-click', 'remove-button');
          } else {
            if (node.hasClass(className))
              node.removeClass(className);
            var tooltipAdd = button.data('tooltip-add');
            if (tooltipAdd) {
              button.setAttribute('data-tooltip', tooltipAdd);
              button.setAttribute('aria-label', tooltipAdd);
            }
            button.setAttribute('data-log-click', 'add-button');
          }
        },
        addListenerForNode: function (node) {
          var uri = utils.getURIFromNode(node);
          if (changeHandlers[uri]) {
            live(uri).get('added', function (error, isAdded) {
              if (error)
                throw error;
              actions.setStateForButtonNode(node, isAdded);
            });
            return;
          }
          changeHandlers[uri] = function (properties) {
            forIn(properties, function (value, key) {
              eventHandlers.changeHandler(key, value, uri);
            });
          };
          var model = live(uri);
          model.get('added', function (error, isAdded) {
            if (error)
              throw error;
            actions.setStateForButtonNode(node, isAdded);
            model.on('update', changeHandlers[uri]);
          });
        }
      };
    var handleScrollShow = function (data) {
      update(data.pageNode, data.nodes);
    };
    exports._classNames = {
      ADDED: ADDED_CLASSNAME,
      JUSTCHANGED: JUSTCHANGED_CLASSNAME
    };
    exports.attach = function attach() {
      $(document).delegate('click', BUTTON_SELECTOR, eventHandlers.click);
      center.on('scroll-show-before', handleScrollShow);
    };
    exports.detach = function detach() {
      $(document).undelegate('click', BUTTON_SELECTOR, eventHandlers.click);
      center.off('scroll-show-before', handleScrollShow);
    };
    var update = exports.update = function update(node, nodes) {
        if (node && $(node).matches(BUTTON_SELECTOR)) {
          actions.addListenerForNode($(node));
        } else {
          var nodes = ($(nodes) || $(node) || $(document)).search(BUTTON_SELECTOR);
          if (!nodes)
            return;
          for (var i = 0, l = nodes.length; i < l; i++) {
            actions.addListenerForNode($(nodes[i]));
          }
        }
      };
  },
  './node_modules/spotify-events/contextmenu.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var live = require('./node_modules/spotify-live/index.js');
    var selection = require('./node_modules/spotify-events/selection/index.js');
    var map = require('./node_modules/mout/array/map.js');
    var getOriginUri = require('./node_modules/spotify-events/util/get-origin-uri.js');
    var CONTEXTMENU = [
        'a[data-uri]',
        '[data-contextmenu]'
      ].join(',');
    var makeContextMenuData = function (selectionContexts, primaryIndex, uris, x, y) {
      var contexts = [];
      for (var i = 0, selectionContext; selectionContext = selectionContexts[i]; i++) {
        var indices = selectionContext.indices || [];
        primaryIndex = primaryIndex || indices[0];
        primaryIndex = primaryIndex == null ? null : primaryIndex;
        var contextData = {
            uri: selectionContext.uri,
            indices: indices,
            primaryIndex: primaryIndex
          };
        var origin = selectionContext.origin;
        if (origin) {
          if (primaryIndex != null) {
            var wrappedList = live(selectionContext.uri).get('rows');
            var originList = live(origin.uri).get('rows');
            if (wrappedList && originList) {
              var key = wrappedList.keys[primaryIndex];
              origin.primaryIndex = originList.indexOf(key);
            }
          }
          contextData.origin = origin;
        }
        contexts.push(contextData);
      }
      return {
        contexts: contexts,
        x: x,
        y: y,
        uris: uris
      };
    };
    var handleContextMenuEvent = function (event, node) {
      event.preventDefault();
      event.stopPropagation();
      var x = event.clientX, y = event.clientY;
      var client = live('spotify:client');
      if (node[0].tagName.toLowerCase() === 'a') {
        var uri = node.data('uri');
        if (uri) {
          client.query('containerFeatures(contextMenuJS)', function (error, data) {
            if (error)
              throw error;
            if (data.containerFeatures.contextMenuJS)
              showContextMenuV2({
                uris: [uri],
                x: x,
                y: y
              });
            else
              showContextMenuV1([uri], x, y);
          }, live.ASAP);
        }
      } else {
        var contextNode = node.parent('[data-list]');
        var contextURI;
        if (contextNode)
          contextURI = contextNode.data('uri');
        var index = +node.data('index');
        var isSelected = false;
        var omitContext = false;
        var indices = selection.getIndicesPerList();
        if (contextNode) {
          isSelected = selection.isNodeSelected(node);
          omitContext = indices.length > 1;
        }
        var uris = isSelected ? selection.getUris() : [node.data('uri')];
        client.query('containerFeatures(contextMenuJS)', function (error, data) {
          if (error)
            throw error;
          if (data.containerFeatures.contextMenuJS)
            showContextMenuV2(makeContextMenuData(indices, index, uris, x, y));
          else
            showContextMenuV1(uris, x, y, omitContext ? null : contextURI, index);
        }, live.ASAP);
      }
    };
    var handleContextMenuButton = function (event, node) {
      var parent;
      var uri = node.data('uri') || (parent = node.parent('[data-uri]')) && parent.data('uri');
      if (!uri)
        return;
      var origin = getOriginUri(uri);
      if (origin)
        uri = origin;
      var contextURI = (parent = node.parent('[data-list][data-uri]')) && parent.data('uri');
      var contextIndex = (parent = node.parent('[data-index]')) && +parent.data('index');
      var contextMenuNode = node.matches('[data-button="contextmenu"]') ? node : node.parent('[data-button="contextmenu"]');
      var relativeTo = contextMenuNode || parent || node;
      var rect = relativeTo[0].getBoundingClientRect();
      var x = rect.left + rect.width / 2;
      var y = rect.top + rect.height;
      if (y > window.innerHeight)
        y = window.innerHeight - 1;
      if (x > window.innerWidth)
        x = window.innerWidth - 1;
      var client = live('spotify:client');
      client.query('containerFeatures(contextMenuJS)', function (error, data) {
        if (error)
          throw error;
        if (data.containerFeatures.contextMenuJS) {
          var indices = contextIndex == null ? null : [contextIndex];
          contextIndex = contextIndex == null ? null : contextIndex;
          var context;
          if (contextURI) {
            context = { uri: contextURI };
            if (indices) {
              context.indices = indices;
            }
            var origin = getOriginUri(contextURI);
            if (origin) {
              context.origin = { uri: origin };
              if (indices) {
                var wrappedList = live(contextURI).get('rows');
                var originList = live(origin).get('rows');
                if (wrappedList && originList) {
                  var originIndices = map(indices, function (index) {
                      var key = wrappedList.keys[index];
                      return originList.indexOf(key);
                    });
                  context.origin.indices = originIndices;
                }
              }
            }
          }
          showContextMenuV2(makeContextMenuData([context], contextIndex, [uri], x, y));
        } else {
          showContextMenuV1([uri], x, y, contextURI, contextIndex);
        }
      }, live.ASAP);
    };
    var showContextMenuV1 = function (uris, x, y, opt_contextURI, opt_index) {
      var client = live('spotify:client');
      var context = opt_contextURI && live(opt_contextURI);
      var index = opt_index;
      var originUri = context && getOriginUri(context.uri);
      if (originUri) {
        if (typeof index === 'number') {
          var wrappedList = live(context.uri).get('rows');
          var originList = live(originUri).get('rows');
          if (wrappedList && originList) {
            var key = wrappedList.keys[index];
            index = originList.indexOf(key);
          }
        }
        context = live(originUri);
      }
      client.emit('show-context-menu', {
        uris: uris,
        x: x,
        y: y,
        context: context || null,
        index: index === undefined ? null : index
      });
    };
    var showContextMenuV2 = function (data) {
      var application = live('spotify:application');
      application.query('appURI', function (error, application_data) {
        if (!error) {
          data.appURI = application_data.appURI;
        }
        var client = live('spotify:client');
        client.emit('show-context-menu-v2', data);
      });
    };
    exports.attach = function attach() {
      $(document).delegate('contextmenu', CONTEXTMENU, handleContextMenuEvent);
      $(document).delegate('click', '[data-button=contextmenu]', handleContextMenuButton);
    };
    exports.detach = function detach() {
      $(document).undelegate('contextmenu', CONTEXTMENU, handleContextMenuEvent);
      $(document).undelegate('click', '[data-button=contextmenu]', handleContextMenuButton);
    };
    exports.update = function () {
    };
  },
  './node_modules/spotify-events/navbar.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var map = require('./node_modules/mout/array/map.js');
    var live = require('./node_modules/spotify-live/index.js');
    var center = require('./node_modules/spotify-events/center.js');
    var NAVBAR_ATTR_NAME = 'navbar';
    var NAVBAR_ID_ATTR_NAME = 'navbar-id';
    var ITEM_ID_ATTR_NAME = 'navbar-item-id';
    var ITEM_MATCHER_ATTR_NAME = 'navbar-item-matcher';
    var VIEW_ID_ATTR_NAME = 'navbar-view-id';
    var ACTIVE_ID_ATTR_NAME = 'navbar-active-id';
    var HISTORY_ATTR_NAME = 'navbar-history';
    var HISTORY_POS_ATTR_NAME = 'navbar-history-position';
    var CLASSNAME_ACTIVE = 'active';
    var APPLICATION_MODEL_URI = 'spotify:application';
    var isDesktop = !!global._getSpotifyModule;
    var handleClick = function (event, tab) {
      var navbarId = tab.data(NAVBAR_ID_ATTR_NAME);
      var navbar;
      if (navbarId) {
        navbar = $('[data-' + NAVBAR_ATTR_NAME + '=' + navbarId + ']');
      }
      navbar = navbar || tab.parent('[data-' + NAVBAR_ATTR_NAME + ']');
      if (!navbar)
        return;
      var id = tab.data(ITEM_ID_ATTR_NAME);
      var view = getView(id);
      if (!view)
        return;
      var tabs = $('[data-' + ITEM_ID_ATTR_NAME + '="' + id + '"]') || tab;
      event.preventDefault();
      setActive(id, tabs, view, navbar);
      if (shouldUseHistory(navbar)) {
        setHistory(id, navbar);
      }
    };
    var getViewsForNavbar = function (navbar) {
      var all = $(document).search('[data-' + VIEW_ID_ATTR_NAME + ']');
      var navbarId = navbar.data(NAVBAR_ATTR_NAME);
      if (navbarId) {
        all = all.filter(function (view) {
          var id = view.getAttribute('data-' + NAVBAR_ID_ATTR_NAME);
          return !id || id === navbarId;
        });
      }
      var views = $(all);
      return views;
    };
    var getTabsForNavbar = function (navbar) {
      var inNavbar = navbar.search('[data-' + ITEM_ID_ATTR_NAME + ']');
      var byId;
      var navbarId = navbar.data(NAVBAR_ATTR_NAME);
      if (navbarId) {
        byId = $(document).search('[data-' + NAVBAR_ID_ATTR_NAME + '="' + navbarId + '"]');
      }
      var tabs = $([
          inNavbar,
          byId
        ]);
      return tabs;
    };
    var getActiveTab = function (navbar) {
      var activeTabId = navbar.data(ACTIVE_ID_ATTR_NAME);
      var activeTab;
      if (activeTabId) {
        activeTab = navbar.find('[data-' + ITEM_ID_ATTR_NAME + '=' + activeTabId + ']');
        if (!activeTab) {
          activeTab = getTab(activeTabId, navbar);
        }
      }
      return activeTab || null;
    };
    var getTab = function (tabId, navbar) {
      var tab = navbar.find('[data-' + ITEM_ID_ATTR_NAME + '=' + tabId + ']');
      if (tab)
        return tab;
      var navbarId = navbar.data(NAVBAR_ATTR_NAME);
      if (!navbarId)
        return null;
      var navbarSelector = navbarId ? '[data-' + NAVBAR_ID_ATTR_NAME + '=' + navbarId + ']' : '';
      var itemSelector = '[data-' + ITEM_ID_ATTR_NAME + '=' + tabId + ']';
      return $(navbarSelector + itemSelector);
    };
    var getView = function (id) {
      return $('[data-' + VIEW_ID_ATTR_NAME + '=' + id + ']');
    };
    var getFirstTabId = function (navbar) {
      var tab = navbar.find('[data-' + ITEM_ID_ATTR_NAME + ']');
      return tab ? tab.data(ITEM_ID_ATTR_NAME) || null : null;
    };
    var setActiveForTabId = function (id, navbar) {
      var tab = getTab(id, navbar);
      if (!tab)
        return;
      var view = getView(id);
      if (!view)
        return;
      setActive(id, tab, view, navbar);
    };
    var setActive = function (id, tab, view, navbar) {
      var currentActiveTab = getActiveTab(navbar);
      var currentActiveId = currentActiveTab && currentActiveTab.data(ITEM_ID_ATTR_NAME);
      var currentActiveView = currentActiveId ? getView(currentActiveId) : null;
      if (currentActiveId === id)
        return;
      setActiveTab(id, tab, currentActiveTab, navbar);
      setActiveView(id, view, currentActiveView, navbar);
      center.emit('navbar-change', { id: id });
    };
    var setActiveTab = function (id, tab, currentActiveTab, navbar) {
      navbar.data(ACTIVE_ID_ATTR_NAME, id);
      if (tab)
        tab.addClass(CLASSNAME_ACTIVE);
      var tabs = getTabsForNavbar(navbar);
      if (tabs) {
        tabs.forEach(function (_tab) {
          _tab = $(_tab);
          if (_tab.data(ITEM_ID_ATTR_NAME) !== id) {
            _tab.removeClass(CLASSNAME_ACTIVE);
          }
        });
      }
    };
    var setActiveView = function (id, view, currentActiveView, navbar) {
      var views = getViewsForNavbar(navbar);
      for (var i = 0, l = views.length; i < l; i++) {
        if (views[i] !== view[0]) {
          hide($(views[i]));
        }
      }
      if (view)
        show(view);
    };
    var setHistory = function (id, navbar) {
      var application = live(APPLICATION_MODEL_URI);
      application.query('appURI, arguments', function (error, data) {
        if (error)
          throw error;
        var args = data.arguments.split(':');
        var argumentIndex = +navbar.data(HISTORY_POS_ATTR_NAME) || 0;
        args[argumentIndex] = id;
        var uri = fixAppURI(data.appURI);
        var argString = args.join(':');
        args = map(args, function (a) {
          return encodeURIComponent(a).replace(/%20/g, '+');
        });
        var newURI = uri + (args.length > 0 ? ':' + args.join(':') : '');
        application.update({ arguments: argString });
        application.emit('push-history-state', { uri: newURI });
      });
    };
    var hide = function (element) {
      element[0].style.display = 'none';
    };
    var show = function (element) {
      element[0].style.display = 'block';
    };
    var shouldUseHistory = function (navbar) {
      var urlChange = navbar.getAttribute('data-' + HISTORY_ATTR_NAME);
      var isTrue = urlChange === 'true' || urlChange === '';
      var isFalse = urlChange === 'false';
      return isTrue || (isFalse ? false : isDesktop);
    };
    var updateForNode = function (node) {
      var navbars = $(node).search('[data-' + NAVBAR_ATTR_NAME + ']');
      if (!navbars)
        return;
      navbars.forEach(function (navbar) {
        navbar = $(navbar);
        if (shouldUseHistory(navbar)) {
          live(APPLICATION_MODEL_URI).query('appURI, arguments', function (error, data) {
            if (error)
              throw error;
            var uri = fixAppURI(data.appURI);
            var fullAppURI = uri + ':' + data.arguments;
            var id = getIdFromMatchers(fullAppURI);
            if (id) {
              setActiveForTabId(id, navbar);
            } else {
              var argumentIndex = +navbar.data(HISTORY_POS_ATTR_NAME) || 0;
              id = data.arguments.split(':')[argumentIndex] || getFirstTabId(navbar);
              if (id) {
                setActiveForTabId(id, navbar);
              }
            }
          });
        }
      });
    };
    var fixAppURI = function (uri) {
      return uri.split(':').slice(0, 3).join(':');
    };
    var storedMatchers = {};
    var getMatchers = function (node) {
      var matchers = $(node).search('[data-' + ITEM_MATCHER_ATTR_NAME + ']');
      if (!matchers)
        return;
      matchers.forEach(function (matcher) {
        matcher = $(matcher);
        var regexp = matcher.data(ITEM_MATCHER_ATTR_NAME);
        var id = matcher.data(ITEM_ID_ATTR_NAME);
        storedMatchers[regexp] = id;
      });
    };
    var getIdFromMatchers = function (uri) {
      for (var regexp in storedMatchers) {
        if (storedMatchers.hasOwnProperty(regexp)) {
          var regexpObj = new RegExp(regexp);
          if (regexpObj.test(uri))
            return storedMatchers[regexp];
        }
      }
      return null;
    };
    var onApplicationChange = function (event) {
      if ('arguments' in event) {
        updateForNode(document);
      }
    };
    exports.update = function update(node) {
      updateForNode(node || document);
      getMatchers(node || document);
    };
    exports.attach = function attach() {
      $(document).delegate('click', '[data-' + ITEM_ID_ATTR_NAME + ']', handleClick);
      live(APPLICATION_MODEL_URI).on('update', onApplicationChange);
    };
    exports.detach = function detach() {
      $(document).undelegate('click', '[data-' + ITEM_ID_ATTR_NAME + ']', handleClick);
      live(APPLICATION_MODEL_URI).off('update', onApplicationChange);
    };
  },
  './node_modules/spotify-events/offline.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var live = require('./node_modules/spotify-live/index.js');
    var sessionModel;
    function onSessionUpdate(properties) {
      if ('online' in properties) {
        if (properties.online) {
          $(document.body).removeClass('offline');
        } else {
          $(document.body).addClass('offline');
        }
      }
    }
    function updateWithSessionValue() {
      live('spotify:client').query('session(online)', function (error, data) {
        if (error)
          throw error;
        onSessionUpdate({ online: data.session.online });
      });
    }
    exports.update = function () {
      updateWithSessionValue();
    };
    exports.attach = function () {
      if (!sessionModel) {
        live('spotify:client').get('session', function (error, session) {
          if (error)
            throw error;
          sessionModel = session;
          sessionModel.on('update', onSessionUpdate);
        });
      }
    };
    exports.detach = function () {
      if (sessionModel) {
        sessionModel.off('update', onSessionUpdate);
        sessionModel = null;
      }
    };
  },
  './node_modules/spotify-events/sticky.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var throttle = require('./node_modules/spotify-events/util/throttle.js');
    var center = require('./node_modules/spotify-events/center.js');
    var sort = require('./node_modules/spotify-events/sort.js');
    exports.DEFAULT_STICKY_CLASS_NAME = 'sticky-top';
    var updateStickies = throttle(function () {
        var stickies = $('[data-sticky]');
        if (!stickies)
          return;
        stickies.forEach(setStickyForNode);
      });
    var updatePositions = throttle(function () {
        var stickies = $('[data-sticky]');
        if (!stickies)
          return;
        stickies.forEach(updatePositionForNode);
      });
    var setStickyForNode = function (stickyNode) {
      var stickyClassName = getStickyClassName(stickyNode);
      var sticky = $(stickyNode);
      var rect = stickyNode.getBoundingClientRect();
      var offset = rect.top;
      var parent = sticky.parent();
      var parentNode = parent[0];
      var parentOffset = parentNode.getBoundingClientRect().top;
      var isSticky = sticky.hasClass(stickyClassName);
      if (!isSticky && offset < 0) {
        var viewportWidth = document.documentElement.getBoundingClientRect().width;
        if (stickyNode.nodeName === 'THEAD') {
          var tableHead = stickyNode;
          var table = tableHead.parentNode;
          var tableHeadClone = tableHead.cloneNode(true);
          var tableClone = table.cloneNode(false);
          tableClone.appendChild(tableHeadClone);
          var stickyCloneWrapper = document.createElement('div');
          var tableParentRect = table.parentNode.getBoundingClientRect();
          stickyCloneWrapper.className = 'sticky-clone';
          stickyCloneWrapper.style.position = 'fixed';
          stickyCloneWrapper.style.top = rect.top - tableParentRect.top + 'px';
          tableHeadClone.removeAttribute('data-sticky');
          tableHead.removeAttribute('data-sticky');
          stickyCloneWrapper.setAttribute('data-sticky', '');
          tableHead.style.visibility = 'hidden';
          stickyCloneWrapper.appendChild(tableClone);
          table.parentNode.appendChild(stickyCloneWrapper);
          var onListSwap = function (data) {
            var listNode = $(tableHeadClone).parent('[data-list]');
            if (!listNode)
              return;
            var uri = listNode.data('uri');
            if (!uri)
              return;
            listNode.data('uri', data.after);
            sort.update(table);
          };
          center.on('list-swap', onListSwap);
          stickyCloneWrapper._cleanup = function () {
            stickyCloneWrapper.parentNode.removeChild(stickyCloneWrapper);
            tableHead.setAttribute('data-sticky', '');
            tableHead.style.removeProperty('visibility');
            center.off('list-swap', onListSwap);
          };
          stickyNode = stickyCloneWrapper;
        }
        stickyNode.style.left = rect.left + 'px';
        stickyNode.style.right = viewportWidth - rect.right + 'px';
        $(stickyNode).addClass(stickyClassName);
        stickyNode.setAttribute('data-sticky-active', '');
      } else if (isSticky && parentOffset >= offset) {
        if (stickyNode._cleanup)
          stickyNode._cleanup();
        stickyNode.style.left = '';
        stickyNode.style.right = '';
        sticky.removeClass(stickyClassName);
        stickyNode.removeAttribute('data-sticky-active', '');
      }
    };
    var updatePositionForNode = function (stickyNode) {
      var isSticky = $(stickyNode).hasClass(getStickyClassName(stickyNode));
      if (!isSticky)
        return;
      var rect = stickyNode.parentNode.getBoundingClientRect();
      var viewportWidth = document.documentElement.getBoundingClientRect().width;
      stickyNode.style.left = rect.left + 'px';
      stickyNode.style.right = viewportWidth - rect.right + 'px';
    };
    var getStickyClassName = exports._getStickyClassName = function (stickyNode) {
        var sticky = $(stickyNode);
        var stickyData = sticky.data('class-sticky');
        if (stickyData)
          return stickyData;
        var parent = sticky.parent('[data-class-sticky]');
        return parent && parent.data('class-sticky') || exports.DEFAULT_STICKY_CLASS_NAME;
      };
    var win = $(window);
    exports.attach = function attach() {
      win.on('scroll', updateStickies);
      win.on('resize', updatePositions);
    };
    exports.detach = function detach() {
      win.off('scroll', updateStickies);
      win.off('resize', updatePositions);
    };
    exports.update = function () {
    };
  },
  './node_modules/spotify-events/filter.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var center = require('./node_modules/spotify-events/center.js');
    var cosmos = require('./node_modules/spotify-events/util/cosmos.js');
    var merge = require('./node_modules/mout/object/merge.js');
    var getOriginUri = require('./node_modules/spotify-events/util/get-origin-uri.js');
    var appUtil = require('./node_modules/spotify-events/util/app.js');
    var SCROLL_PADDING = 8;
    function update(node) {
      node = $(node) || $(document);
      var nodes = node.matches('[data-filter]') ? [node[0]] : node.search('[data-filter]');
      if (!nodes)
        return;
      nodes.forEach(function (node) {
        var uri = getURI(node);
        if (uri)
          handleStale(uri);
      });
    }
    function handleStale(uri) {
      render(uri);
      fetchFeatureFlag(uri);
      logUsage(uri);
      emitFilterRequest(uri);
    }
    function render(uri) {
      var $candidateContainers = $(document).search('[data-uri] [data-filter]');
      var $matchingCandidates = $candidateContainers.filter(function (container) {
          return getURI(container) === uri;
        });
      $matchingCandidates.forEach(function (mainElement) {
        var state = getState(uri);
        var inputElement = $(mainElement).find('input[type=text]')[0];
        var wrapperElement = $(mainElement).find('.h-search-wrapper')[0];
        if (state.activated) {
          wrapperElement.style.display = null;
          if (!$(wrapperElement).hasClass('focus'))
            $(wrapperElement).addClass('focus');
          if (inputElement.value !== state.enteredString) {
            inputElement.value = state.enteredString;
          }
        } else {
          wrapperElement.style.display = state.hasCallToAction ? null : 'none';
          inputElement.blur();
          if ($(wrapperElement).hasClass('focus'))
            $(wrapperElement).removeClass('focus');
          inputElement.value = '';
        }
      });
    }
    function focusAndSelectInput(inputElement) {
      if (document.activeElement != inputElement) {
        inputElement.focus();
        inputElement.select();
      }
    }
    function scrollIntoView(inputElement) {
      var rect = inputElement.getBoundingClientRect();
      if (rect.top < 0 || rect.bottom > window.innerHeight) {
        window.scrollTo(0, window.pageYOffset + rect.top - SCROLL_PADDING);
      }
    }
    function fetchFeatureFlag(uri) {
      var state = getState(uri);
      if (state.hasCallToAction === null && !state.requestedFeatureFlags) {
        updateState(uri, { requestedFeatureFlags: true });
        cosmos.post({
          url: 'sp://abba/v1/flags',
          body: { flags: ['playlist-filter'] }
        }, function (_, response) {
          var flags = response && response.body && response.body.flags || [];
          var featureFlagCell = flags[0] && flags[0].featureName === 'playlist-filter' && flags[0].cell;
          updateState(uri, {
            featureFlagCell: featureFlagCell,
            hasCallToAction: featureFlagCell === 'CallToAction'
          });
        });
      }
    }
    function logUsage(uri) {
      var state = getState(uri);
      if (state.enteredString && !getState(uri).usageLogged) {
        updateState(uri, { usageLogged: true });
        cosmos.post({
          url: 'sp://logging/v1/log',
          body: {
            'message': 'ClientEvent',
            'version': 3,
            'fields': [
              'spotify:app:playlist',
              'spotify-events-filter',
              'user:typing',
              'input-field',
              state.featureFlagCell,
              '',
              '',
              ''
            ]
          }
        });
      }
    }
    function emitFilterRequest(uri) {
      var state = getState(uri);
      center.emit('filter-request', uri, state.activated ? state.enteredString : '');
    }
    function handleCancelClick(e) {
      clear(getURI(e.target));
    }
    function handleInputInput(e) {
      updateState(getURI(e.target), { enteredString: e.target.value });
    }
    function handleInputKeyup(e) {
      var isEscape = e.keyCode === 27;
      if (isEscape)
        clear(getURI(e.target));
    }
    function handleInputFocus(e) {
      updateState(getURI(e.target), { activated: true });
    }
    function handleInputFocusOut(e) {
      var state = getState(getURI(e.target));
      if (state.enteredString === '')
        updateState(getURI(e.target), { activated: false });
    }
    function clear(uri) {
      updateState(uri, {
        activated: false,
        enteredString: ''
      });
    }
    function getState(uri) {
      return states[uri] || {
        activated: false,
        hasCallToAction: null,
        enteredString: ''
      };
    }
    function updateState(uri, update) {
      states[uri] = merge(getState(uri), update);
      handleStale(uri);
    }
    function getURI(element) {
      var uri = element.getAttribute('data-uri');
      if (!uri) {
        var parents = $(element).parents('[data-uri]');
        if (parents)
          uri = parents[0].getAttribute('data-uri');
      }
      if (uri && getOriginUri(uri))
        uri = getOriginUri(uri);
      return uri || null;
    }
    var states;
    var isAttached = false;
    var controlMessageSubscription;
    var attach = function attach() {
      if (isAttached)
        return;
      isAttached = true;
      states = {};
      controlMessageSubscription = cosmos.subscribe({ url: 'sp://messages/v1/container/control' }, function (_, response) {
        if (!appUtil.isActive())
          return;
        var isMessageOfTypeFind = response && response.body && response.body.type === 'filter';
        if (!isMessageOfTypeFind)
          return;
        $('[data-filter]').forEach(function (mainElement, i) {
          updateState(getURI(mainElement), { activated: true });
          var inputElement = $(mainElement).find('input[type=text]')[0];
          if (inputElement) {
            if (i === 0) {
              scrollIntoView(inputElement);
            }
            focusAndSelectInput(inputElement);
          }
        });
      });
      center.on('filter-reset', clear);
      $(document).delegate('click', '[data-filter] .h-search-close', handleCancelClick);
      $(document).delegate('click', '[data-filter-reset]', handleCancelClick);
      $(document).delegate('input', '[data-filter] input', handleInputInput);
      $(document).delegate('keyup', '[data-filter] input', handleInputKeyup);
      $(document).delegate('focusin', '[data-filter] input', handleInputFocus);
      $(document).delegate('focusout', '[data-filter] input', handleInputFocusOut);
    };
    var detach = function detach() {
      if (!isAttached)
        return;
      states = null;
      controlMessageSubscription.cancel();
      center.off('filter-reset', clear);
      $(document).undelegate('click', '[data-filter] .h-search-close', handleCancelClick);
      $(document).undelegate('click', '[data-filter-reset]', handleCancelClick);
      $(document).undelegate('input', '[data-filter] input', handleInputInput);
      $(document).undelegate('keyup', '[data-filter] input', handleInputKeyup);
      $(document).undelegate('focusin', '[data-filter] input', handleInputFocus);
      $(document).undelegate('focusout', '[data-filter] input', handleInputFocusOut);
      isAttached = false;
    };
    module.exports = {
      attach: attach,
      detach: detach,
      update: update
    };
  },
  './node_modules/spotify-events/watch.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var live = require('./node_modules/spotify-live/index.js');
    var update = function update(node) {
      var observables = ($(node) || $(document)).search('[data-watch]');
      if (observables)
        observables.forEach(function (node) {
          node = $(node);
          var key = node.data('watch');
          if (!key)
            return;
          var observed = node._observed || (node._observed = {});
          if (observed[key])
            return;
          observed[key] = true;
          var parent;
          var uri = node.data('uri') || (parent = node.parent('[data-uri]')) && parent.data('uri');
          if (!uri)
            return;
          var model = live(uri);
          var updateText = function (event) {
            if (key in event) {
              var value = event[key];
              node.text(value == null ? '' : value);
            }
          };
          model.get(key, function (err, value) {
            if (err)
              throw err;
            var event = {};
            event[key] = value;
            updateText(event);
          });
          model.on('update', updateText);
        });
    };
    exports.update = update;
    exports.attach = function () {
    };
    exports.detach = function () {
    };
  },
  './node_modules/spotify-events/tooltip.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var zen = require('./node_modules/spotify-events/node_modules/elements/zen.js');
    var tooltipMargin = 8;
    var tooltip = zen('div#tooltip');
    var tooltipNode = tooltip[0];
    var tooltipTextNode = zen('span')[0];
    var tooltipArrowTop = zen('div.tooltip-arrow-top');
    var tooltipArrowBottom = zen('div.tooltip-arrow-bottom');
    tooltip.appendChild(tooltipArrowTop);
    tooltip.appendChild(tooltipArrowBottom);
    tooltip.appendChild(tooltipTextNode);
    var attachedNode = null;
    var tooltipNodeAttached = false;
    var tooltipArrow = null;
    var addTooltipToDOM = function () {
      document.body.appendChild(tooltipNode);
      tooltipNodeAttached = true;
    };
    var removeTooltipFromDOM = function () {
      attachedNode = null;
      if (tooltipNode.parentNode)
        document.body.removeChild(tooltipNode);
      tooltipNodeAttached = false;
    };
    var showTooltip = function (event, node) {
      var realNode = node[0];
      var top = 0;
      var left = 0;
      var tooltipText = node.data('tooltip') || node.getAttribute('title');
      if (!tooltipText)
        return;
      attachedNode = node;
      if (!node.tooltipCheck) {
        node.removeAttribute('title');
        node.setAttribute('data-tooltip', tooltipText);
        node.tooltipCheck = true;
      }
      if (!tooltipNodeAttached)
        addTooltipToDOM();
      setText(tooltipText);
      var tooltipHeight = tooltipNode.clientHeight;
      var tooltipWidth = tooltipNode.offsetWidth;
      var scrollY = window.pageYOffset;
      var bounds = realNode.getBoundingClientRect();
      var targetHeight = realNode.offsetHeight;
      var targetWidth = realNode.offsetWidth;
      var targetTop = parseInt(bounds.top) + scrollY;
      var targetLeft = parseInt(bounds.left);
      var targetCenter = targetLeft + targetWidth / 2;
      var targetBottom = targetTop + targetHeight;
      var viewportWidth = document.documentElement.clientWidth;
      var viewportHeight = document.documentElement.clientHeight;
      if (targetBottom + tooltipHeight + tooltipMargin - scrollY > viewportHeight) {
        top = targetTop - tooltipHeight - tooltipMargin;
        tooltipArrowTop.removeClass('visible');
        tooltipArrowBottom.addClass('visible');
        tooltipArrow = tooltipArrowBottom;
      } else {
        top = targetTop + targetHeight + tooltipMargin;
        if (top - scrollY > viewportHeight) {
          top = viewportHeight - tooltipHeight;
        }
        tooltipArrowTop.addClass('visible');
        tooltipArrowBottom.removeClass('visible');
        tooltipArrow = tooltipArrowTop;
      }
      var distanceToTheRight = viewportWidth - tooltipMargin - targetCenter;
      var distanceToTheLeft = targetCenter - tooltipMargin;
      var tooltipOffsetRight = Math.max(0, tooltipWidth / 2 - distanceToTheRight);
      var tooltipOffsetLeft = Math.max(0, tooltipWidth / 2 - distanceToTheLeft);
      left = targetCenter - tooltipWidth / 2 - (tooltipOffsetRight || -tooltipOffsetLeft);
      tooltipNode.style.top = top + 'px';
      tooltipNode.style.left = left + 'px';
      tooltipArrow[0].style.left = targetCenter - left + 'px';
      if (node.hasAttribute('data-tooltip-instant')) {
        tooltip.addClass('instant');
      } else {
        tooltip.removeClass('instant');
      }
      tooltip.addClass('visible');
    };
    var hideTooltip = function () {
      attachedNode = null;
      setText('');
      tooltip.removeClass('visible');
      tooltipNode.style.left = 0;
      tooltipNode.style.top = 0;
      if (tooltipArrow) {
        tooltipArrow[0].style.left = 0;
      }
    };
    var setText = function (text) {
      tooltipTextNode.innerHTML = text;
    };
    exports.attach = function attach() {
      var doc = $(document);
      doc.delegate('mouseover', '[data-tooltip]', showTooltip);
      doc.delegate('mouseout', '[data-tooltip]', hideTooltip);
      doc.on('keydown', hideTooltip);
      doc.on('mousedown', hideTooltip);
    };
    exports.detach = function detach() {
      removeTooltipFromDOM();
      var doc = $(document);
      doc.undelegate('mouseover', '[data-tooltip]', showTooltip);
      doc.undelegate('mouseout', '[data-tooltip]', hideTooltip);
      doc.off('keydown', hideTooltip);
      doc.off('mousedown', hideTooltip);
    };
    exports.update = function update() {
      if (!attachedNode)
        return;
      if (attachedNode.data('tooltip')) {
        showTooltip(null, attachedNode);
      } else {
        hideTooltip();
      }
    };
    exports._setText = setText;
  },
  './node_modules/spotify-events/list.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var forEach = require('./node_modules/mout/array/forEach.js');
    var live = require('./node_modules/spotify-live/index.js');
    var center = require('./node_modules/spotify-events/center.js');
    var selection = require('./node_modules/spotify-events/selection/index.js');
    var cosmos = require('./node_modules/spotify-events/util/cosmos.js');
    var appUtil = require('./node_modules/spotify-events/util/app.js');
    var ROW_SELECTOR = '[data-list-item]';
    var UNAVAILABLE_CLASS_NAME = 'unavailable';
    var OFFLINE_DOWNLOADED_CLASS_NAME = 'offline-downloaded';
    var OFFLINE_DOWNLOADING_CLASS_NAME = 'offline-downloading';
    var OFFLINE_WAITING_CLASS_NAME = 'offline-waiting';
    var storedTrackURIsForUnplayable = {};
    var storedTrackURIsForOffline = {};
    function updatePlayabilityForRows(uri, playable) {
      var rows = $(document).search(ROW_SELECTOR + '[data-uri="' + uri + '"]');
      if (rows) {
        updatePlayabilityForElements(rows, playable);
      }
    }
    function updatePlayabilityForElements(elements, playable) {
      if (playable) {
        elements.removeClass(UNAVAILABLE_CLASS_NAME);
      } else {
        elements.addClass(UNAVAILABLE_CLASS_NAME);
      }
    }
    function updateOfflineForRows(uri, shouldBeOffline, offlineProgress) {
      var rows = $(document).search(ROW_SELECTOR + '[data-uri="' + uri + '"]');
      if (rows) {
        updateOfflineForElements(rows, shouldBeOffline, offlineProgress);
      }
    }
    function updateOfflineForElements(elements, shouldBeOffline, offlineProgress) {
      if (shouldBeOffline) {
        if (offlineProgress === 1) {
          elements.addClass(OFFLINE_DOWNLOADED_CLASS_NAME);
          elements.removeClass(OFFLINE_DOWNLOADING_CLASS_NAME);
          elements.removeClass(OFFLINE_WAITING_CLASS_NAME);
        } else if (offlineProgress === 0) {
          elements.addClass(OFFLINE_WAITING_CLASS_NAME);
          elements.removeClass(OFFLINE_DOWNLOADED_CLASS_NAME);
          elements.removeClass(OFFLINE_DOWNLOADING_CLASS_NAME);
        } else {
          elements.addClass(OFFLINE_DOWNLOADING_CLASS_NAME);
          elements.removeClass(OFFLINE_DOWNLOADED_CLASS_NAME);
          elements.removeClass(OFFLINE_WAITING_CLASS_NAME);
        }
      } else {
        elements.removeClass(OFFLINE_DOWNLOADED_CLASS_NAME);
        elements.removeClass(OFFLINE_DOWNLOADING_CLASS_NAME);
        elements.removeClass(OFFLINE_WAITING_CLASS_NAME);
      }
    }
    function updateUnplayableRows(node, opt_rows) {
      var rows = opt_rows || ($(node) || $(document)).search(ROW_SELECTOR);
      if (rows) {
        forEach(rows, function (row) {
          var uri = $(row).data('uri');
          var model = live(uri);
          var playable = model.get('playable');
          if (playable !== undefined) {
            updatePlayabilityForElements($(row), playable);
          }
          if (uri in storedTrackURIsForUnplayable)
            return;
          storedTrackURIsForUnplayable[uri] = true;
          model.on('update', function (properties) {
            if ('playable' in properties) {
              updatePlayabilityForRows(uri, properties.playable);
            }
          });
        });
      }
    }
    function updateOfflineSyncing(node, opt_rows) {
      var rows = opt_rows || ($(node) || $(document)).search(ROW_SELECTOR);
      if (rows) {
        forEach(rows, function (row) {
          var uri = $(row).data('uri');
          var model = live(uri);
          model.query('shouldBeOffline, offlineProgress', function (error, data) {
            if (error)
              throw error;
            updateOfflineForElements($(row), data.shouldBeOffline, data.offlineProgress);
            if (uri in storedTrackURIsForOffline)
              return;
            storedTrackURIsForOffline[uri] = true;
            model.on('update', function (properties) {
              if ('shouldBeOffline' in properties || 'offlineProgress' in properties) {
                updateOfflineForRows(uri, model.get('shouldBeOffline'), model.get('offlineProgress'));
              }
            });
          }, live.ASAP);
        });
      }
    }
    function handleKeyDown(event) {
      if (!($(event.target).matches(ROW_SELECTOR) || $(event.target).parent(ROW_SELECTOR)))
        return;
      if (event.keyCode === 8 || event.keyCode === 46) {
        removeCurrentlySelectedListItems();
      }
    }
    function removeCurrentlySelectedListItems() {
      var lists = selection.getIndicesPerList();
      if (lists.length > 0) {
        var firstContainerIndex = null;
        var firstIndex = null;
        forEach(lists, function (list) {
          if (list.origin) {
            list = list.origin;
          }
          var model = live(list.uri);
          var indices = list.indices.sort(function (a, b) {
              return a - b;
            });
          model.query('allows(removeTracks)', function (error, data) {
            if (error)
              throw error;
            if (!data.allows.removeTracks)
              return;
            model.get('rows', function (error, liveList) {
              if (error)
                throw error;
              var operations = indices.map(function (index, indexInArray) {
                  return {
                    type: 'remove',
                    index: index - indexInArray,
                    length: 1
                  };
                });
              liveList.publish(operations);
              if (firstIndex === null) {
                firstIndex = indices[0];
                firstContainerIndex = list.containerIndex;
              }
            });
          });
        });
      }
    }
    function handleScrollShow(data) {
      updateUnplayableRows(data.container, data.nodes);
      updateOfflineSyncing(data.container, data.nodes);
    }
    exports._classNames = {
      UNAVAILABLE: UNAVAILABLE_CLASS_NAME,
      OFFLINE_WAITING: OFFLINE_WAITING_CLASS_NAME,
      OFFLINE_DOWNLOADING: OFFLINE_DOWNLOADING_CLASS_NAME,
      OFFLINE_DOWNLOADED: OFFLINE_DOWNLOADED_CLASS_NAME
    };
    exports.update = function update(node) {
      updateUnplayableRows(node);
      updateOfflineSyncing(node);
    };
    var doc = $(document);
    var deleteSubscription;
    exports.attach = function () {
      doc.on('keydown', handleKeyDown);
      center.on('scroll-show-before', handleScrollShow);
      deleteSubscription = cosmos.subscribe({ url: 'sp://messages/v1/container/control' }, function (error, response) {
        if (error)
          throw error;
        var data = response.body;
        if (data && data.type === 'delete' && appUtil.isActiveAndFocused()) {
          removeCurrentlySelectedListItems();
        }
      });
    };
    exports.detach = function () {
      doc.off('keydown', handleKeyDown);
      center.off('scroll-show-before', handleScrollShow);
      if (deleteSubscription) {
        deleteSubscription.cancel();
        deleteSubscription = null;
      }
    };
  },
  './node_modules/spotify-events/menu.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var throttle = require('./node_modules/spotify-events/util/throttle.js');
    var center = require('./node_modules/spotify-events/center.js');
    var SELECTOR_MENU = '[data-menu]';
    var SELECTOR_MENU_ITEM = '[data-menu-item]';
    var SELECTOR_MENU_ITEM_ENABLED = '[data-menu-item]:not([data-menu-item-disabled])';
    var SELECTOR_MENU_ITEM_DISABLED = '[data-menu-item-disabled]';
    var ATTRIBUTE_MENU = 'data-menu';
    var ATTRIBUTE_MENU_ITEM = 'data-menu-item';
    var ATTRIBUTE_MENU_FOCUSED = 'data-menu-focused';
    var activeMenu = null;
    var activeMenuItem = null;
    function onFocus(event) {
      var target = $(event.target);
      while (target && !target.matches(SELECTOR_MENU)) {
        target = target.parent();
      }
      if (target) {
        var isFocusedAlready = target.getAttribute(ATTRIBUTE_MENU_FOCUSED);
        if (!isFocusedAlready) {
          activeMenu = target[0];
          activeMenu.setAttribute(ATTRIBUTE_MENU_FOCUSED, '');
          activeMenu.addEventListener('mousemove', onMouseMoveThrottled, false);
        }
      }
    }
    function onBlur(event) {
      var target = event.target;
      if (target === activeMenu) {
        reset();
      }
    }
    function onKeyDown(event) {
      if (!activeMenu)
        return;
      var isUp = event.keyCode === 38;
      var isDown = event.keyCode === 40;
      var isEnter = event.keyCode === 13;
      var isEscape = event.keyCode === 27;
      if (isEnter) {
        return activateCurrentItem();
      }
      if (isEscape) {
        return hideMenu();
      }
      if (isUp || isDown) {
        return updateCurrentItem(isDown);
      }
    }
    function onMouseMove(event) {
      var target = $(event.target);
      while (target && !target.matches(SELECTOR_MENU_ITEM)) {
        target = target.parent();
      }
      if (!target) {
        resetActiveItem();
        return;
      }
      if (target[0] === activeMenuItem)
        return;
      if (target.matches(SELECTOR_MENU_ITEM_DISABLED)) {
        resetActiveItem();
      } else {
        setActiveItem(target[0]);
      }
    }
    var onMouseMoveThrottled = throttle(onMouseMove);
    function onMouseOut(event) {
      resetActiveItem();
    }
    function onItemClick(event) {
      activateCurrentItem();
    }
    function activateCurrentItem() {
      if (!activeMenu || !activeMenuItem) {
        return;
      }
      center.emit('menu-activate-item', {
        menu: {
          id: activeMenu.getAttribute(ATTRIBUTE_MENU) || '',
          element: activeMenu
        },
        item: {
          id: activeMenuItem.getAttribute(ATTRIBUTE_MENU_ITEM) || '',
          element: activeMenuItem
        }
      });
    }
    function updateCurrentItem(isDown) {
      var newActiveMenuItem = isDown ? getMenuItemBelow() : getMenuItemAbove();
      if (newActiveMenuItem) {
        setActiveItem(newActiveMenuItem);
      }
    }
    function setActiveItem(newActiveMenuItem) {
      resetActiveItem();
      selectMenuItem(newActiveMenuItem);
      activeMenuItem = newActiveMenuItem;
      activeMenuItem.addEventListener('mouseout', onMouseOut, false);
      activeMenuItem.addEventListener('click', onItemClick, false);
    }
    function resetActiveItem() {
      if (activeMenuItem) {
        deselectMenuItem(activeMenuItem);
        activeMenuItem.removeEventListener('mouseout', onMouseOut, false);
        activeMenuItem.removeEventListener('click', onItemClick, false);
        activeMenuItem = null;
      }
    }
    function selectMenuItem(element) {
      $(element).addClass('selected');
    }
    function deselectMenuItem(element) {
      $(element).removeClass('selected');
    }
    function getMenuItemBelow() {
      if (!activeMenu) {
        return null;
      }
      if (!activeMenuItem) {
        var result = $(activeMenu).find(SELECTOR_MENU_ITEM_ENABLED);
        return result ? result[0] : null;
      }
      var item = $(activeMenuItem.nextElementSibling);
      while (item) {
        var isMenuItem = item.matches(SELECTOR_MENU_ITEM);
        var isDisabled = item.matches(SELECTOR_MENU_ITEM_DISABLED);
        if (isMenuItem && !isDisabled) {
          break;
        }
        item = $(item[0].nextElementSibling);
      }
      return item ? item[0] : null;
    }
    function getMenuItemAbove() {
      if (!activeMenu) {
        return null;
      }
      if (!activeMenuItem) {
        var results = $(activeMenu).search(SELECTOR_MENU_ITEM_ENABLED);
        return results ? results[results.length - 1] : null;
      }
      var item = $(activeMenuItem.previousElementSibling);
      while (item) {
        var isMenuItem = item.matches(SELECTOR_MENU_ITEM);
        var isDisabled = item.matches(SELECTOR_MENU_ITEM_DISABLED);
        if (isMenuItem && !isDisabled) {
          break;
        }
        item = $(item[0].previousElementSibling);
      }
      return item ? item[0] : null;
    }
    function hideMenu() {
      center.emit('menu-hide', {
        menu: {
          id: activeMenu.getAttribute(ATTRIBUTE_MENU) || '',
          element: activeMenu
        }
      });
    }
    function reset() {
      resetActiveItem();
      if (activeMenu) {
        activeMenu.removeAttribute(ATTRIBUTE_MENU_FOCUSED);
        activeMenu.removeEventListener('mousemove', onMouseMoveThrottled, false);
        activeMenu = null;
      }
    }
    exports.attach = function attach() {
      document.addEventListener('focus', onFocus, true);
      document.addEventListener('blur', onBlur, true);
      $(document).on('keydown', onKeyDown);
    };
    exports.detach = function detach() {
      reset();
      document.removeEventListener('focus', onFocus, true);
      document.removeEventListener('blur', onBlur, true);
      $(document).off('keydown', onKeyDown);
    };
    exports.update = function update() {
    };
  },
  './node_modules/spotify-events/scroll.js': function (require, module, exports, global) {
    'use strict';
    var Range = require('./node_modules/spotify-range2/index.js');
    var filter = require('./node_modules/mout/array/filter.js');
    var contains = require('./node_modules/mout/array/contains.js');
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var SYNC = require('./node_modules/prime/emitter.js').EMIT_SYNC;
    var throttle = require('./node_modules/spotify-events/util/throttle.js');
    var ListManager = require('./node_modules/spotify-events/util/ListManager.js');
    var center = require('./node_modules/spotify-events/center.js');
    var doc = $(document);
    var win = $(window);
    var scrollContainers = [];
    var listManagers = [];
    var scrollHandlers = [];
    var pendingScrollContainers = [];
    var pendingHiddenIndices = [];
    var cleanupHandlers = [];
    var getBounds = function (view, container) {
      var dde = document.documentElement;
      if (view === window || view === document.body)
        view = dde;
      var viewTop = view === dde ? 0 : view.getBoundingClientRect().top;
      var viewHeight = view.clientHeight;
      var containerTop = container.getBoundingClientRect().top;
      var containerHeight = container.offsetHeight;
      var viewBox = {
          top: viewTop,
          height: viewHeight,
          bottom: viewTop + viewHeight
        };
      var containerBox = {
          top: containerTop,
          height: containerHeight,
          bottom: containerTop + containerHeight
        };
      return {
        view: viewBox,
        container: containerBox
      };
    };
    var getRange = function (view, container, height, hotZone) {
      hotZone = hotZone || 0;
      var bounds = getBounds(view, container);
      var top = -(bounds.container.top - bounds.view.top);
      var startsAt = Math.floor((top - hotZone) / height);
      var endsAt = Math.ceil((top + bounds.view.height + hotZone) / height);
      if (startsAt < 0)
        startsAt = 0;
      if (endsAt <= startsAt)
        return false;
      return new Range(startsAt, endsAt);
    };
    var init = function (view, container, length, height, tag) {
      var view0 = view[0];
      var container0 = container[0];
      var manager = new ListManager(container0, {
          height: height,
          length: length,
          tag: tag,
          debug: false,
          request: function (range, callback) {
            center.emit('scroll-request', container0, range, callback, SYNC);
          }
        });
      listManagers.push(manager);
      var pendingIndex = pendingScrollContainers.indexOf(container);
      if (pendingIndex > -1) {
        manager.reset(length, pendingHiddenIndices[pendingIndex]);
        pendingScrollContainers.splice(pendingIndex, 1);
        pendingHiddenIndices.splice(pendingIndex, 1);
      }
      manager.on('before-show', function (range, nodes) {
        center.emit('scroll-show-before', {
          pageNode: container,
          container: container,
          range: range,
          nodes: nodes
        }, SYNC);
      });
      manager.on('after-show', function (range, nodes) {
        center.emit('scroll-show-after', {
          pageNode: container,
          container: container,
          range: range,
          nodes: nodes
        }, SYNC);
      });
      manager.on('index-change', function (index) {
        center.emit('scroll-index-change', {
          pageNode: container,
          container: container,
          ranges: index
        }, SYNC);
      });
      var hasRequestedMore = false;
      var scroll = function () {
        var show = getRange(view0, container0, height);
        if (show) {
          var padding = 2;
          show = new Range(show.start - padding, show.end + padding);
          manager.show(new Range(show.start, show.end));
        }
        if (!hasRequestedMore) {
          var bounds = getBounds(view0, container0);
          if (bounds.container.bottom < 2000) {
            hasRequestedMore = true;
            center.emit('scroll-request-more', container0, function (error, length) {
              if (error)
                throw error;
              hasRequestedMore = false;
              scrollReset(container0, length);
            });
          }
        }
      };
      scrollHandlers.push(scroll);
      scroll = container._scrollEvent = throttle(scroll);
      var scrollReset = function (c, height, opt_hiddenIndices, opt_fromIndex) {
        if ($(c) === container) {
          var hasFromIndex = typeof opt_fromIndex === 'number';
          if (hasFromIndex && opt_fromIndex > 0) {
            manager.resetFrom(opt_fromIndex, height, opt_hiddenIndices);
          } else {
            manager.reset(height, opt_hiddenIndices);
          }
          scroll();
        }
      };
      center.on('scroll-reset', scrollReset);
      container._scrollResetEvent = scrollReset;
      var scrollToIndex = function (c, index, opt_offsetScrollPosition) {
        if (view0 !== window) {
          throw new Error('Can\'t scroll to index if view is not `window`');
          return;
        }
        if ($(c) === container) {
          var bounds = getBounds(view0, container0);
          var offset = Math.min(opt_offsetScrollPosition || 0, (bounds.view.height - manager.height) / 2);
          var visibleIndex = index;
          var hiddenIndices = manager.hiddenIndices;
          for (var i = 0, len = hiddenIndices.length; i < len; i++) {
            if (hiddenIndices[i] < index) {
              visibleIndex--;
            } else {
              break;
            }
          }
          var visibleIndexTopRelativeToContainer = manager.height * visibleIndex;
          var position = bounds.container.top + visibleIndexTopRelativeToContainer;
          var scrollY = position + window.pageYOffset;
          var stickyOffset = (doc.search('[data-sticky][data-sticky-active]') || []).map(function (sticky) {
              return sticky.offsetHeight;
            }).reduce(function (a, b) {
              return a + b;
            }, 0);
          if (position <= stickyOffset) {
            scrollY -= offset + stickyOffset;
          } else if (position + manager.height > bounds.view.height) {
            scrollY += offset + manager.height - bounds.view.height;
          } else {
            return;
          }
          view0.scrollTo(0, scrollY);
        }
      };
      center.on('scroll-to-index', scrollToIndex);
      view.on('scroll', scroll);
      win.on('resize', scroll);
      scroll();
      cleanupHandlers.push(function () {
        center.off('scroll-reset', scrollReset);
        center.off('scroll-to-index', scrollToIndex);
        view.off('scroll', scroll);
        win.off('resize', scroll);
      });
    };
    function onScrollSetHidden(data) {
      var hiddenIndices = data.indices;
      var container = $(data.itemContainer);
      var index = scrollContainers.indexOf(container);
      if (index > -1) {
        var manager = listManagers[index];
        if (manager) {
          manager.reset(manager.length, hiddenIndices);
        }
        var scrollHandler = scrollHandlers[index];
        if (scrollHandler) {
          scrollHandler();
        }
      } else {
        pendingScrollContainers.push(container);
        pendingHiddenIndices.push(hiddenIndices);
      }
    }
    exports.update = function (node) {
      node = $(node) || doc;
      var scrollNodes = doc.search('[data-scroll-container]');
      var handlers = [];
      var managers = [];
      scrollContainers = filter(scrollContainers, function (container, index) {
        if (!contains(scrollNodes, container[0])) {
          container._view.off('scroll', container._scrollEvent);
          win.off('resize', container._scrollEvent);
          center.off('scroll-reset', container._scrollResetEvent);
          delete container._scrollEvent;
          delete container._scrollResetEvent;
          return false;
        }
        managers.push(listManagers[index]);
        handlers.push(scrollHandlers[index]);
        return true;
      });
      listManagers = managers;
      scrollHandlers = handlers;
      if (node !== doc)
        scrollNodes = node.search('[data-scroll-container]');
      if (scrollNodes)
        scrollNodes.forEach(function (node0) {
          var container = $(node0);
          if (container._scrollEvent || node0.children.length)
            return;
          scrollContainers.push(container);
          var view = container.parent('[data-scroll-view]') || win;
          container._view = view;
          var callback = function (error, children, length) {
            if (error)
              throw error;
            children = $(children);
            children.insert(container);
            var second = children[1];
            var height = second.offsetHeight;
            var tag = $(second).tag();
            children.remove();
            init(view, container, length, height, tag);
          };
          center.emit('scroll-request', container, new Range(0, 3), callback, SYNC);
        });
    };
    exports.attach = function () {
      center.on('scroll-set-hidden', onScrollSetHidden);
    };
    exports.detach = function () {
      center.off('scroll-set-hidden', onScrollSetHidden);
      cleanupHandlers.forEach(function (cleanupHandler) {
        cleanupHandler();
      });
      cleanupHandlers = [];
    };
  },
  './node_modules/spotify-events/carousel.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var doc = $(document);
    var win = $(window);
    var DISABLED_CLASSNAME = 'disabled';
    var handleClickLeft = function (event, node) {
      handleButtonClick(node, true);
    };
    var handleClickRight = function (event, node) {
      handleButtonClick(node, false);
    };
    var handleButtonClick = function (buttonNode, isLeft) {
      if (buttonNode.hasClass(DISABLED_CLASSNAME)) {
        return;
      }
      var carouselId = buttonNode.data('carousel');
      var carouselInner = $('[data-carousel=' + carouselId + '][data-carousel-main] [data-carousel-inner]')[0];
      var adjust = isLeft ? 100 : -100;
      adjust = carouselInner.style.left ? parseInt(carouselInner.style.left) + adjust : adjust;
      carouselInner.style.left = adjust + '%';
      updateButtonStates(carouselId);
    };
    var updateButtonStates = function (carouselId) {
      var carouselRight = $('[data-carousel=' + carouselId + '][data-button=carousel-right]');
      var carouselLeft = $('[data-carousel=' + carouselId + '][data-button=carousel-left]');
      var carousel = $('[data-carousel=' + carouselId + '][data-carousel-main]');
      var carouselInner = $(carousel).search('[data-carousel-inner]')[0];
      var leftAdjust = carouselInner.style.left ? parseInt(carouselInner.style.left) : 0;
      if (leftAdjust >= 0) {
        carouselLeft.addClass(DISABLED_CLASSNAME);
      } else {
        carouselLeft.removeClass(DISABLED_CLASSNAME);
      }
      if (carouselInner.clientWidth - leftAdjust / 100 * carouselInner.clientWidth + 10 > carouselInner.scrollWidth) {
        carouselRight.addClass(DISABLED_CLASSNAME);
      } else {
        carouselRight.removeClass(DISABLED_CLASSNAME);
      }
    };
    var updateAllButtons = function (node) {
      node = $(node) || doc;
      var carousels = node.search('[data-carousel-main]');
      if (carousels) {
        carousels.forEach(function (carousel) {
          updateButtonStates($(carousel).data('carousel'));
        });
      }
    };
    exports._classNames = { DISABLED: DISABLED_CLASSNAME };
    exports.update = function update(node) {
      updateAllButtons(node);
    };
    exports.attach = function () {
      doc.delegate('click', '[data-button=carousel-right]', handleClickRight);
      doc.delegate('click', '[data-button=carousel-left]', handleClickLeft);
      win.on('resize', updateAllButtons);
    };
    exports.detach = function () {
      doc.undelegate('click', '[data-button=carousel-right]', handleClickRight);
      doc.undelegate('click', '[data-button=carousel-left]', handleClickLeft);
      win.off('resize', updateAllButtons);
    };
  },
  './node_modules/spotify-events/nanoscroll.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var doc = $(document);
    var win = $(window);
    var html = doc.search('html');
    var filter = require('./node_modules/mout/array/filter.js');
    var contains = require('./node_modules/mout/array/contains.js');
    var innerScrollAreas = [];
    var draggingNanoScroller = null;
    var draggingMouseYStart = null;
    var draggingScrollerYStart = null;
    var lastTimer = 0;
    var SCROLLER_SPACE_ATTR_NAME = 'nano-scroll-scroller-space';
    var scroll = function (evt) {
      var node = $(evt.target);
      var nanoScroll = node.parent('[data-nano-scroll]');
      var scroller = nanoScroll.search('[data-nano-scroll-scroller]');
      var scrollerSpace = parseInt(nanoScroll.data(SCROLLER_SPACE_ATTR_NAME));
      var scrollPercentage = node[0].scrollTop / (node[0].scrollHeight - node[0].offsetHeight);
      scroller[0].style.top = scrollerSpace * scrollPercentage + 'px';
      nanoScroll.addClass('scrolling');
      clearTimeout(lastTimer);
      lastTimer = setTimeout(function () {
        nanoScroll.removeClass('scrolling');
      }, 1000);
    };
    var scrollerMouseDown = function (evt, node) {
      var scroller = node.parent('[data-nano-scroll-scroller]');
      draggingNanoScroller = node.parent('[data-nano-scroll]');
      draggingMouseYStart = evt.clientY;
      draggingScrollerYStart = scroller[0].style.top ? parseInt(scroller[0].style.top) : 0;
      draggingNanoScroller.addClass('dragging');
      doc.on('mousemove', _mouseMove);
      doc.on('mouseup', _mouseUp);
      doc.on('selectstart', _preventDefault);
    };
    var _preventDefault = function (evt) {
      evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;
    };
    var _mouseMove = function (evt) {
      evt = evt ? evt : window.event;
      var scrollerSpace = parseInt(draggingNanoScroller.data(SCROLLER_SPACE_ATTR_NAME));
      var newScrollerTop = evt.clientY - draggingMouseYStart + draggingScrollerYStart;
      newScrollerTop = newScrollerTop < 0 ? 0 : newScrollerTop > scrollerSpace ? scrollerSpace : newScrollerTop;
      draggingNanoScroller.search('[data-nano-scroll-scroller]')[0].style.top = newScrollerTop + 'px';
      var inner = draggingNanoScroller.search('[data-nano-scroll-inner-area]')[0];
      var percentageScrolled = newScrollerTop / scrollerSpace;
      percentageScrolled = percentageScrolled < 0 ? 0 : percentageScrolled > 1 ? 1 : percentageScrolled;
      inner.scrollTop = (inner.scrollHeight - inner.offsetHeight) * percentageScrolled;
    };
    var _mouseUp = function () {
      doc.off('mousemove', _mouseMove);
      doc.off('mouseup', _mouseUp);
      doc.off('selectstart', _preventDefault);
      draggingNanoScroller.removeClass('dragging');
      draggingNanoScroller = null;
      draggingMouseYStart = null;
      draggingScrollerYStart = null;
    };
    var _setScrollerDimensions = function (node) {
      var inner = node.search('[data-nano-scroll-inner-area]')[0];
      var scrollbar = node.search('[data-nano-scroll-scrollbar]')[0];
      var scroller = node.search('[data-nano-scroll-scroller]')[0];
      var newScrollerHeight = scrollbar.offsetHeight * (inner.offsetHeight / inner.scrollHeight);
      newScrollerHeight = newScrollerHeight < 20 ? 20 : newScrollerHeight;
      inner.style.marginRight = -(inner.offsetWidth - inner.clientWidth) + 'px';
      scroller.style.height = newScrollerHeight + 'px';
      node.data(SCROLLER_SPACE_ATTR_NAME, scrollbar.offsetHeight - newScrollerHeight);
    };
    var hasRealNanoScroll = function () {
      var scrollMeasurementNode = document.createElement('div');
      scrollMeasurementNode.style.width = '100px';
      scrollMeasurementNode.style.height = '100px';
      scrollMeasurementNode.style.overflow = 'scroll';
      scrollMeasurementNode.style.position = 'absolute';
      scrollMeasurementNode.style.top = '-9999px';
      document.body.appendChild(scrollMeasurementNode);
      var naturalScrollbarWidth = scrollMeasurementNode.offsetWidth - scrollMeasurementNode.clientWidth;
      document.body.removeChild(scrollMeasurementNode);
      return naturalScrollbarWidth === 0;
    };
    var update = exports.update = function (node) {
        node = $(node) || doc;
        var innerScrollNodes = doc.search('[data-nano-scroll-inner-area]');
        innerScrollAreas = filter(innerScrollAreas, function (innerScrollArea) {
          if (!contains(innerScrollNodes, innerScrollArea[0])) {
            innerScrollArea.off('scroll', scroll);
            return false;
          }
          return true;
        });
        if (node !== doc)
          innerScrollNodes = node.search('[data-nano-scroll-inner-area]');
        if (innerScrollNodes)
          innerScrollNodes.forEach(function (innerScrollNode) {
            innerScrollNode = $(innerScrollNode);
            if (!contains(innerScrollAreas, innerScrollNode)) {
              innerScrollAreas.push(innerScrollNode);
              innerScrollNode.on('scroll', scroll);
            }
          });
        var scrollNodes = node.search('[data-nano-scroll]');
        if (scrollNodes)
          scrollNodes.forEach(function (scrollNode) {
            _setScrollerDimensions($(scrollNode));
          });
      };
    exports.attach = function () {
      if (hasRealNanoScroll()) {
        html.addClass('no-nano-scroll');
      } else {
        doc.delegate('mousedown', '[data-nano-scroll-scroller-drag-area]', scrollerMouseDown);
        win.on('resize', update);
      }
    };
    exports.detach = function () {
      if (html.hasClass('no-nano-scroll')) {
        html.removeClass('no-nano-scroll');
      } else {
        doc.undelegate('mousedown', '[data-nano-scroll-scroller-drag-area]', scrollerMouseDown);
        win.off('resize', update);
        for (var i = innerScrollAreas.length - 1; i >= 0; i--) {
          innerScrollAreas[i].off('scroll', scroll);
        }
        innerScrollAreas = [];
      }
    };
  },
  './node_modules/spotify-events/slider.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var forEach = require('./node_modules/mout/array/forEach.js');
    var indexOf = require('./node_modules/mout/array/indexOf.js');
    var center = require('./node_modules/spotify-events/center.js');
    var live = require('./node_modules/spotify-live/index.js');
    var ATTR_SLIDER = 'slider';
    var ATTR_PROPERTY = 'slider-property';
    var SELECTOR_SLIDER = '[data-' + ATTR_SLIDER + ']';
    var CLASSNAME_ENABLED = 'enabled';
    var CLASSNAME_DISABLED = 'disabled';
    var ATTR_ALLOWED = 'slider-allowed-property';
    var SPACE_KEY_CODE = 32;
    var storedNodes = [];
    function handleClick(event, elem) {
      var property = elem.data(ATTR_PROPERTY);
      if (elem.data(ATTR_ALLOWED) && !live(elem.data('uri')).get(elem.data(ATTR_ALLOWED))) {
        return;
      }
      if (property) {
        toggleAndPublish(elem[0], property);
      } else {
        setState(elem[0], !elem.hasClass(CLASSNAME_ENABLED));
      }
    }
    function handleKeyUp(event, elem) {
      if (event.keyCode !== SPACE_KEY_CODE) {
        return;
      }
      handleClick(event, elem);
    }
    ;
    function onSliderSet(event) {
      if (!event.id)
        return;
      var elem = $('[data-' + ATTR_SLIDER + '=' + event.id + ']');
      if (!elem)
        return;
      var node = elem[0];
      var enabled = !!event.enabled;
      var property = elem.data(ATTR_PROPERTY);
      if (property) {
        toggleAndPublish(node, property, enabled);
      } else {
        setState(node, enabled);
      }
    }
    function toggleAndPublish(node, property, opt_enabled) {
      var uri = getUriFromNode(node);
      if (!uri)
        return;
      var model = live(uri);
      var value = model.get(property);
      if (value === undefined)
        return;
      var newValue = opt_enabled === undefined ? !value : opt_enabled;
      var data = {};
      data[property] = newValue;
      model.publish(data);
    }
    function updateNode(node) {
      if (indexOf(storedNodes, node) > -1)
        return;
      storedNodes.push(node);
      var elem = $(node);
      var property = elem.data(ATTR_PROPERTY);
      var allowedProperty = elem.data(ATTR_ALLOWED);
      if (!property)
        return;
      var uri = getUriFromNode(node);
      if (!uri)
        return;
      var model = live(uri);
      model.get(property, function (error, value) {
        if (error)
          throw error;
        setState(node, !!value);
        model.on('update', function (properties) {
          if (property in properties) {
            setState(node, !!properties[property]);
          }
          if (allowedProperty && allowedProperty in properties) {
            disableNode(node, !properties[allowedProperty]);
          }
        });
      });
    }
    function setState(node, enabled) {
      updateNodeWithValue(node, enabled);
      emitUpdate(node, enabled);
    }
    function updateNodeWithValue(node, enabled) {
      var elem = $(node);
      if (enabled) {
        elem.addClass(CLASSNAME_ENABLED);
      } else {
        elem.removeClass(CLASSNAME_ENABLED);
      }
    }
    function disableNode(node, disabled) {
      var elem = $(node);
      if (disabled) {
        elem.addClass(CLASSNAME_DISABLED);
      } else {
        elem.removeClass(CLASSNAME_DISABLED);
      }
    }
    function emitUpdate(node, enabled) {
      var id = $(node).data(ATTR_SLIDER) || null;
      center.emit('slider-change', {
        element: node,
        id: id,
        enabled: enabled
      });
    }
    function getUriFromNode(node) {
      node = $(node);
      var stateNode = node.hasAttribute('data-uri') ? node : node.parent('[data-uri]');
      if (!stateNode)
        return null;
      return stateNode.data('uri');
    }
    exports.update = function (opt_node) {
      var nodes = $(opt_node || document).search(SELECTOR_SLIDER);
      if (!nodes)
        return;
      forEach(nodes, updateNode);
    };
    exports.attach = function () {
      var doc = $(document);
      doc.delegate('click', SELECTOR_SLIDER, handleClick);
      doc.delegate('keyup', SELECTOR_SLIDER, handleKeyUp);
      center.on('slider-set', onSliderSet);
    };
    exports.detach = function () {
      var doc = $(document);
      doc.undelegate('click', SELECTOR_SLIDER, handleClick);
      doc.undelegate('keyup', SELECTOR_SLIDER, handleKeyUp);
      center.off('slider-set', onSliderSet);
    };
  },
  './node_modules/spotify-events/select.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var indexOf = require('./node_modules/mout/array/indexOf.js');
    var forEach = require('./node_modules/mout/array/forEach.js');
    var center = require('./node_modules/spotify-events/center.js');
    var live = require('./node_modules/spotify-live/index.js');
    var ATTR_SELECT = 'select';
    var ATTR_PROPERTY = 'select-property';
    var SELECTOR_SELECT = '[data-' + ATTR_SELECT + ']';
    var storedNodes = [];
    function handleChange(event, elem) {
      var property = elem.data(ATTR_PROPERTY);
      var node = elem[0];
      if (property) {
        publish(node, property);
      } else {
        emitUpdate(node, selectedValue(node));
      }
    }
    function selectedValue(node) {
      var selected = node.options[node.selectedIndex];
      return selected.value;
    }
    function onSelectSet(event) {
      if (!event.id)
        return;
      var elem = $('[data-' + ATTR_SELECT + '=' + event.id + ']');
      if (!elem)
        return;
      var node = elem[0];
      var value = event.selected;
      var property = elem.data(ATTR_PROPERTY);
      if (property) {
        publish(node, property, value);
      } else {
        setState(node, value);
      }
    }
    function publish(node, property, opt_value) {
      var uri = getUriFromNode(node);
      if (!uri)
        return;
      var model = live(uri);
      var value = model.get(property);
      if (value === undefined)
        return;
      var newValue = opt_value === undefined ? selectedValue(node) : opt_value;
      var data = {};
      data[property] = newValue;
      model.publish(data);
    }
    function updateNode(node) {
      if (indexOf(storedNodes, node) > -1)
        return;
      storedNodes.push(node);
      var elem = $(node);
      var property = elem.data(ATTR_PROPERTY);
      if (!property)
        return;
      var uri = getUriFromNode(node);
      if (!uri)
        return;
      var model = live(uri);
      model.get(property, function (error, value) {
        if (error)
          throw error;
        setState(node, value);
        model.on('update', function (properties) {
          if (property in properties) {
            setState(node, properties[property]);
          }
        });
      });
    }
    function setState(node, value) {
      updateNodeWithValue(node, value);
      emitUpdate(node, value);
    }
    function updateNodeWithValue(node, value) {
      var selectElement = $(node);
      var optionElement = selectElement.find('option[value="' + value + '"]');
      if (optionElement && !optionElement.attribute('selected')) {
        optionElement.select();
      }
    }
    function emitUpdate(node, selected) {
      var id = $(node).data(ATTR_SELECT) || null;
      center.emit('select-change', {
        element: node,
        id: id,
        selected: selected
      });
    }
    function getUriFromNode(node) {
      node = $(node);
      var stateNode = node.hasAttribute('data-uri') ? node : node.parent('[data-uri]');
      if (!stateNode)
        return null;
      return stateNode.data('uri');
    }
    exports.update = function (opt_node) {
      var nodes = $(opt_node || document).search(SELECTOR_SELECT);
      if (!nodes)
        return;
      forEach(nodes, updateNode);
    };
    exports.attach = function () {
      var doc = $(document);
      doc.delegate('change', SELECTOR_SELECT, handleChange);
      center.on('select-set', onSelectSet);
    };
    exports.detach = function () {
      var doc = $(document);
      doc.undelegate('change', SELECTOR_SELECT, handleChange);
      center.off('select-set', onSelectSet);
    };
  },
  './node_modules/spotify-events/sort.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    require('./node_modules/spotify-events/node_modules/elements/attributes.js');
    require('./node_modules/spotify-events/node_modules/elements/traversal.js');
    var live = require('./node_modules/spotify-live/index.js');
    var center = require('./node_modules/spotify-events/center.js');
    var sortUriUtils = require('./node_modules/spotify-live-sort-uri/index.js');
    var ASC = 'tl-sort-asc';
    var DESC = 'tl-sort-desc';
    var handleSort = function (event, node) {
      var listNode = node.parent('[data-list]');
      if (!listNode)
        return;
      var uri = listNode.data('uri');
      if (!uri)
        return;
      var model = live(uri);
      var queryCurrent = sortUriUtils.getQuery(uri);
      var directionCurrent = sortUriUtils.getDirection(uri);
      var query = node.data('sort');
      var reverse = directionCurrent === 'asc' ? 'desc' : 'asc';
      var direction = queryCurrent === query ? reverse : 'asc';
      var reset = queryCurrent === query && directionCurrent === 'desc';
      var origin = sortUriUtils.getOriginUri(uri) || uri;
      var nextUri;
      if (reset) {
        nextUri = origin;
        query = null;
        direction = null;
      } else {
        nextUri = sortUriUtils.create(origin, direction, query);
      }
      var nextList = live(nextUri);
      nextList.get('rows', function () {
      });
      var player = live('spotify:player');
      player.get('context', function (error, context) {
        if (error)
          throw error;
        if (context && context.get('uri') === uri) {
          player.emit('update-context', { context: nextUri });
        }
      });
      setClassNames(listNode, query, direction);
      center.emit('sort-header-click', {
        uri: origin,
        requested: {
          query: query || null,
          direction: direction || null
        },
        current: {
          query: queryCurrent || null,
          direction: directionCurrent || null
        }
      });
      center.emit('list-swap', {
        before: uri,
        after: nextUri
      });
    };
    var setClassNames = function (list, opt_query, opt_direction) {
      var uri = list.data('uri');
      var query = opt_query !== undefined ? opt_query : sortUriUtils.getQuery(uri);
      var direction = opt_direction !== undefined ? opt_direction : sortUriUtils.getDirection(uri);
      var headers = list.search('[data-sort]');
      if (!headers)
        return;
      for (var i = 0, header; header = $(headers[i]); i++) {
        header.removeClass(ASC + ' ' + DESC);
        if (header.data('sort') === query) {
          header.addClass(direction === 'asc' ? ASC : DESC);
        }
      }
    };
    var handlePreviousProxyClick = function (event, node) {
      handleSort(null, node.previousSibling());
    };
    exports.update = function (node) {
      node = $(node) || $(document);
      var lists = node.matches('[data-list]') ? [node] : node.search('[data-list]');
      if (!lists)
        return;
      for (var i = 0, list; list = $(lists[i]); i++) {
        var headers = list.search('[data-sort]');
        if (!headers)
          continue;
        setClassNames(list);
      }
    };
    exports.attach = function attach() {
      $(document).delegate('click', '[data-sort]', handleSort);
      $(document).delegate('click', '[data-sort-previous]', handlePreviousProxyClick);
    };
    exports.detach = function detach() {
      $(document).undelegate('click', '[data-sort]', handleSort);
      $(document).undelegate('click', '[data-sort-previous]', handlePreviousProxyClick);
    };
  },
  './node_modules/spotify-cosmos-api/scripts/resolver.js': function (require, module, exports, global) {
    var common = require('./node_modules/spotify-cosmos-api/node_modules/cosmos-common-js/index.js');
    var Request = common.request.Request;
    var Action = common.request.Action;
    var Response = common.response.Response;
    function _isSuccessStatus(status) {
      return status >= 200 && status <= 299;
    }
    ;
    function Resolver(spResolver) {
      if (!spResolver || typeof spResolver.resolve !== 'function') {
        throw TypeError('Incorrect resolver argument');
      }
      this._resolver = spResolver;
    }
    Resolver.prototype.resolve = function (request, callback) {
      return this._resolve(request, callback);
    };
    Resolver.prototype.get = function (options, callback) {
      return this._resolveFromParams(Action.GET, options, callback);
    };
    Resolver.prototype.post = function (options, callback) {
      return this._resolveFromParams(Action.POST, options, callback);
    };
    Resolver.prototype.subscribe = function (options, callback) {
      return this._resolveFromParams(Action.SUB, options, callback);
    };
    Resolver.prototype.patch = function (options, callback) {
      return this._resolveFromParams(Action.PATCH, options, callback);
    };
    Resolver.prototype.delete = function (options, callback) {
      return this._resolveFromParams(Action.DELETE, options, callback);
    };
    Resolver.prototype._resolve = function (request, callback) {
      if (!callback || typeof callback !== 'function') {
        callback = function () {
        };
      }
      var requestHandler;
      function onSuccess(serverResponse) {
        if (!requestHandler._request) {
          return;
        }
        var response = Response.fromObject(serverResponse);
        if (!response) {
          var error = new Error('Failed to parse response: ' + JSON.stringify(serverResponse));
          return callback(error);
        }
        if (_isSuccessStatus(response.getStatusCode())) {
          return callback(null, response);
        } else {
          var errorMessage = response.getHeader('error') || 'Request failed with status code ' + response.getStatusCode();
          var error = new Error(errorMessage);
          error.response = response;
          return callback(error, response);
        }
      }
      function onError(serverResponse) {
        return callback(serverResponse instanceof Error ? serverResponse : new Error('Request failed: ' + JSON.stringify(serverResponse)));
      }
      var resolveFn = request.getAction() === Action.SUB ? this._resolver.subscribe : this._resolver.resolve;
      var clientRequest = resolveFn.call(this._resolver, request, onSuccess, onError);
      requestHandler = new RequestHandler(clientRequest);
      return requestHandler;
    };
    Resolver.prototype._resolveFromParams = function (method, options, callback) {
      options = options || {};
      var url = typeof options === 'string' ? options : options.url;
      var headers = options.headers;
      var body = options.body;
      var request = new Request(method, url, headers, body);
      return this._resolve(request, callback);
    };
    function RequestHandler(request) {
      if (!request || typeof request.close !== 'function')
        throw new TypeError('Invalid `request` argument.');
      this._request = request;
    }
    RequestHandler.prototype.cancel = function () {
      if (this._request) {
        this._request.close();
        this._request = null;
      }
    };
    exports.Resolver = Resolver;
  },
  './node_modules/spotify-cosmos-api/env/bootstrap.native.js': function (require, module, exports, global) {
    'use strict';
    var SpotifyApi = global.SpotifyApi;
    var useApiRequest = !!(SpotifyApi && SpotifyApi.api && typeof SpotifyApi.api.request === 'function');
    var Resolver = require('./node_modules/spotify-cosmos-api/env/bootstrap.js').Resolver;
    var defer = require('./node_modules/spotify-cosmos-api/node_modules/spotify-deferred/src/deferred.js');
    function NativeResolver(spBridge) {
      if (!(this instanceof NativeResolver))
        return new NativeResolver();
      if (!spBridge) {
        throw new TypeError('Missing `spBridge` parameter');
      }
      Resolver.call(this);
      this._bridge = spBridge;
      this._deferredFlush = false;
    }
    NativeResolver.prototype = new Resolver();
    NativeResolver.prototype.constructor = NativeResolver;
    exports.NativeResolver = NativeResolver;
    NativeResolver.prototype._prepareCoreFlush = function () {
      if (!this._deferredFlush) {
        this._deferredFlush = true;
        this._defer(this, this._flushRequests);
      }
    };
    NativeResolver.prototype._flushRequests = function () {
      this._deferredFlush = false;
      var flushMsg = JSON.stringify({
          name: 'core_flush',
          args: []
        });
      this._sendBridgeRequest(flushMsg, {
        onSuccess: function () {
        },
        onFailure: function () {
        }
      });
    };
    NativeResolver.prototype._defer = function (context, callback) {
      defer(callback.bind(context));
    };
    NativeResolver.prototype._sendRequest = function (requestName, requestId, data) {
      var self = this;
      data = data.serialize ? data.serialize() : data;
      var args = [
          requestId,
          data
        ];
      var caller = {
          self: this,
          id: requestId,
          type: requestName
        };
      if (useApiRequest) {
        this._sendApiRequest(requestName, args, caller, this._handleResponse, this._handleError);
      } else {
        this._sendCosmosRequest(requestName, args, caller, this._handleResponse, this._handleError);
      }
    };
    NativeResolver.prototype._sendCosmosRequest = function (requestName, args, caller, onSuccess, onError) {
      var message = JSON.stringify({
          name: requestName,
          args: args
        });
      this._sendBridgeRequest(message, {
        onSuccess: function (data) {
          onSuccess.call(caller, JSON.parse(data));
        },
        onFailure: function (data) {
          data = JSON.parse(data);
          onError.call(caller, data);
        }
      });
      this._prepareCoreFlush();
    };
    NativeResolver.prototype._sendBridgeRequest = function (message, callbackMap) {
      this._bridge.executeRequest(message, callbackMap || {});
    };
    NativeResolver.prototype._sendApiRequest = function (requestName, args, caller, onSuccess, onError) {
      SpotifyApi.api.request(requestName, args, caller, onSuccess, onError);
    };
    NativeResolver.prototype._handleResponse = function (data) {
      this.self._dispatchResponse(this.id, this.type, data.responses && data.responses[0] || data);
    };
    NativeResolver.prototype._handleError = function (error) {
      this.self._dispatchResponse(this.id, this.type, error);
    };
    NativeResolver.prototype.resolve = function (data, onsuccess, onerror) {
      function onResult(callback, response) {
        this._defer(this, callback.bind(this, response));
        request.close();
      }
      var request = this._resolve(data, onResult.bind(this, onsuccess), onResult.bind(this, onerror));
      return request;
    };
    NativeResolver.prototype.subscribe = function (data, onsuccess, onerror) {
      function onResult(callback, response) {
        callback.call(this, response);
        request.pull();
      }
      var request = this._resolve(data, onResult.bind(this, onsuccess), onResult.bind(this, onerror));
      return request;
    };
  },
  './node_modules/spotify-cosmos-api/env/bootstrap.web.js': function (require, module, exports, global) {
    'use strict';
    var defer = require('./node_modules/spotify-cosmos-api/node_modules/spotify-deferred/src/deferred.js');
    var Resolver = require('./node_modules/spotify-cosmos-api/env/bootstrap.js').Resolver;
    function WebResolver(opt_target) {
      if (!(this instanceof WebResolver))
        return new WebResolver(opt_target);
      Resolver.call(this);
      this._target = opt_target || '*';
      this._handleResponse = this._handleResponse.bind(this);
      this._requestMessageType = 'cosmos-request';
      this._responseMessageType = 'cosmos-response';
      this._requestIdPrefix = 'cosmos_';
      this.attach();
    }
    WebResolver.prototype = new Resolver();
    WebResolver.prototype.constructor = WebResolver;
    exports.WebResolver = WebResolver;
    WebResolver.prototype._sendRequest = function (requestName, requestID, data) {
      var top = global.window.top;
      var message = {
          type: this._requestMessageType,
          resolver: this._id,
          id: this._requestIdPrefix + requestID,
          name: requestName,
          payload: data.serialize ? data.serialize() : data
        };
      top.postMessage(JSON.stringify(message), this._target);
    };
    WebResolver.prototype._handleResponse = function (response) {
      var data = response.data;
      if (typeof data == 'string') {
        try {
          data = JSON.parse(response.data);
        } catch (e) {
          return;
        }
      }
      if (data.type != this._responseMessageType || data.resolver != this._id || !data.payload)
        return;
      var id = data.id || '';
      var requestID = parseInt(id.replace(this._requestIdPrefix, ''), 10);
      var requestName = data.name || '';
      if (!requestID || !requestName)
        return;
      this._dispatchResponse(requestID, requestName, data.payload);
    };
    WebResolver.prototype.attach = function () {
      var win = global.window;
      if (win.addEvent && !win.addEventListener) {
        win.addEvent('onmessage', this._handleResponse);
      } else {
        win.addEventListener('message', this._handleResponse, false);
      }
    };
    WebResolver.prototype.detach = function () {
      var win = global.window;
      if (win.removeEvent && !win.removeEventListener) {
        win.removeEvent('onmessage', this._handleResponse);
      } else {
        win.removeEventListener('message', this._handleResponse, false);
      }
    };
    WebResolver.prototype.resolve = function (data, onsuccess, onerror) {
      function onResult(callback, response) {
        defer(callback.bind(this, response));
        request.close();
      }
      var request = this._resolve(data, onResult.bind(this, onsuccess), onResult.bind(this, onerror));
      return request;
    };
    WebResolver.prototype.subscribe = function (data, onsuccess, onerror) {
      return this._resolve(data, onsuccess, onerror);
    };
  },
  './node_modules/spotify-live-models/util/bridge.js': function (require, module, exports, global) {
    'use strict';
    var bridge = require('./node_modules/spotify-live-models/node_modules/spotify-bridge-request/index.js');
    module.exports = { request: bridge.request };
  },
  './node_modules/spotify-live-models/util/common.js': function (require, module, exports, global) {
    'use strict';
    var liburi = require('./node_modules/spotify-liburi/src/uri.js');
    function setLocalProperties(track) {
      if (track.album && track.album.uri) {
        var albumType = liburi.from(track.album.uri).type;
        track.album.local = albumType === liburi.Type.LOCAL_ALBUM;
      }
      if (track.artists) {
        for (var i = 0, l = track.artists.length; i < l; i++) {
          var artist = track.artists[i];
          if (artist.uri) {
            var artistType = liburi.from(artist.uri).type;
            artist.local = artistType === liburi.Type.LOCAL_ARTIST;
          }
        }
      }
    }
    module.exports = { setLocalProperties: setLocalProperties };
  },
  './node_modules/spotify-live-models/util/cosmos.js': function (require, module, exports, global) {
    'use strict';
    var live = require('./node_modules/spotify-live/index.js');
    var cosmos = require('./node_modules/spotify-cosmos-api/index.js');
    var liburi = require('./node_modules/spotify-liburi/src/uri.js');
    var ASAP = live.ASAP;
    function DELETE(options, opt_callback) {
      options.method = exports.cosmos.Action.DELETE;
      return request(options, opt_callback);
    }
    function GET(options, opt_callback) {
      options.method = exports.cosmos.Action.GET;
      return request(options, opt_callback);
    }
    function SUB(options, opt_callback) {
      options.method = exports.cosmos.Action.SUB;
      return request(options, opt_callback);
    }
    function POST(options, opt_callback) {
      options.method = exports.cosmos.Action.POST;
      return request(options, opt_callback);
    }
    function PUT(options, opt_callback) {
      options.method = exports.cosmos.Action.PUT;
      return request(options, opt_callback);
    }
    function HEAD(options, opt_callback) {
      options.method = exports.cosmos.Action.HEAD;
      return request(options, opt_callback);
    }
    function request(options, opt_callback) {
      var method = options.method;
      delete options.method;
      var subscription, canceled;
      sanitizeURL(options.url, function (error, url) {
        if (error)
          return opt_callback && opt_callback(error);
        if (canceled)
          return;
        var request = new exports.cosmos.Request(method || exports.cosmos.Action.GET, url, options.headers, options.body);
        subscription = exports.cosmos.resolver.resolve(request, function (error, response) {
          if (!opt_callback)
            return;
          if (error)
            return opt_callback(error);
          try {
            opt_callback(null, {
              body: JSON.parse(response.getBody() || '{}'),
              headers: response.getHeaders(),
              status: response.getStatusCode()
            });
          } catch (parseError) {
            parseError.response = response;
            opt_callback(parseError);
          }
        });
      });
      return {
        cancel: function () {
          if (subscription && subscription.cancel) {
            subscription.cancel();
            subscription = null;
          } else if (!canceled) {
            canceled = true;
          }
          return null;
        }
      };
    }
    function sanitizeURL(url, callback) {
      if (url.indexOf('@') > -1) {
        live('spotify:client').query('currentUser(username)', function (error, data) {
          if (error)
            return callback(error);
          callback(null, url.replace('@', liburi.getCanonicalUsername(data.currentUser.username)));
        }, ASAP);
      } else {
        callback(null, url);
      }
    }
    exports.request = request;
    exports.get = GET;
    exports.post = POST;
    exports.subscribe = SUB;
    exports.delete = DELETE;
    exports.put = PUT;
    exports.head = HEAD;
    exports.cosmos = cosmos;
    exports.sanitizeURL = sanitizeURL;
  },
  './node_modules/spotify-live-models/sorting/sort.js': function (require, module, exports, global) {
    var chunker = require('./node_modules/spotify-live-models/sorting/chunker.js');
    var poster = require('./node_modules/spotify-live-models/sorting/poster.js');
    var sorter = require('./node_modules/spotify-live-models/sorting/sorter.js');
    var sortWorker = require('./node_modules/spotify-live-models/sorting/sortworker.js');
    var defer = require('./node_modules/prime/defer.js');
    var workerFile;
    var workers = {};
    var callbacks = {};
    var waitingForReset = {};
    var idCounter = 0;
    var lastIds = {};
    function localSorter(sortUri, items, callback) {
      items = sorter(items);
      callbacks[sortUri] = callback;
      defer(function () {
        if (callback === callbacks[sortUri]) {
          delete callbacks[sortUri];
          callback(null, items);
        }
      });
    }
    function workerSorter(sortUri, items, callback) {
      var worker = workers[sortUri];
      if (worker) {
        callbacks[sortUri] = callback;
        waitingForReset[sortUri] = (waitingForReset[sortUri] || 0) + 1;
        var id = (++idCounter).toString(36);
        lastIds[sortUri] = id;
        worker.postMessage({
          reset: true,
          newId: id
        });
        sendItemsToWorker(items, worker, id);
        return;
      }
      worker = new Worker(workerFile);
      workers[sortUri] = worker;
      callbacks[sortUri] = callback;
      var id = (++idCounter).toString(36);
      lastIds[sortUri] = id;
      sendItemsToWorker(items, worker, id);
      var result = { items: [] };
      worker.addEventListener('message', function (event) {
        onWorkerMessage(event, result, sortUri);
      }, false);
    }
    function onWorkerMessage(event, result, sortUri) {
      if (event.data.reset) {
        waitingForReset[sortUri]--;
        result.items.length = 0;
        return;
      }
      if (event.data.id !== lastIds[sortUri]) {
        return;
      }
      if (waitingForReset[sortUri]) {
        return;
      }
      result.items = result.items.concat(event.data.items);
      if (event.data.last) {
        workers[sortUri].terminate();
        var callback = callbacks[sortUri];
        delete callbacks[sortUri];
        delete workers[sortUri];
        callback(null, result.items);
      }
    }
    function createWorkerFile() {
      var workerStr = sortWorker.toString();
      var sortStr = sorter.toString();
      var chunkerStr = chunker.toString();
      var posterStr = poster.toString();
      var argsStr = [
          sortStr,
          chunkerStr,
          posterStr
        ].join(', ');
      var stringWorker = '(' + workerStr + ')(' + argsStr + ')';
      var blob = new Blob([stringWorker], { type: 'text/javascript' });
      var url = URL.createObjectURL(blob);
      return url;
    }
    function sendItemsToWorker(data, worker, id) {
      var chunks = chunker(data);
      poster(worker, chunks, 0, id);
    }
    function getSorter() {
      if (global.Worker && global.Blob && global.URL) {
        if (!workerFile) {
          workerFile = createWorkerFile();
        }
        return workerSorter;
      } else {
        return localSorter;
      }
    }
    module.exports = function (sortUri, items, callback) {
      var sort = getSorter();
      sort(sortUri, items, callback);
    };
  },
  './node_modules/spotify-live-models/sorting/values.js': function (require, module, exports, global) {
    var map = require('./node_modules/mout/array/map.js');
    function getValues(mask, row) {
      var result = [];
      mask.forEach(function (m) {
        var k = m.key;
        var value = row[k];
        if (Array.isArray(value)) {
          if (m.mask) {
            var values = [];
            for (var i = 0, l = value.length; i < l; i++) {
              values = values.concat(getValues(m.mask, value[i]));
            }
            result.push(values.join(', '));
          } else {
            result.push(value.join(', '));
          }
        } else {
          if (m.mask)
            result.push.apply(result, getValues(m.mask, value));
          else
            result.push(value);
        }
      });
      result = sanitizeStrings(result);
      return result;
    }
    function sanitizeStrings(values) {
      return map(values, function (value) {
        if (typeof value !== 'string')
          return value;
        value = value.toLowerCase();
        var articles = [
            'the ',
            '(the) '
          ];
        for (var i = 0, article; article = articles[i]; i++) {
          if (value.indexOf(article) === 0) {
            value = value.replace(article, '');
            break;
          }
        }
        return value.trim();
      });
    }
    module.exports = getValues;
  },
  './node_modules/spotify-glue-cat/templates/facepile-common.hbs': function (require, module, exports, global) {
    var Handlebars = require('./node_modules/handlebars/dist/cjs/handlebars.runtime.js')['default'];
    var template = Handlebars.template(function (Handlebars, depth0, helpers, partials, data) {
        this.compilerInfo = [
          4,
          '>= 1.0.0'
        ];
        helpers = this.merge(helpers, Handlebars.helpers);
        partials = this.merge(partials, Handlebars.partials);
        data = data || {};
        var buffer = '', stack1, helper, options, functionType = 'function', escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing, self = this, blockHelperMissing = helpers.blockHelperMissing;
        function program1(depth0, data) {
          var buffer = '', stack1, helper, options;
          buffer += '\n  <div class="facepile" data-tooltip title="';
          if (helper = helpers.name) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.name;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '" data-tooltip-instant>\n    <div class="media-object media-object-image media-object-link media-object-simple media-object-' + escapeExpression((helper = helpers.type || depth0 && depth0.type, options = {
            hash: {},
            data: data
          }, helper ? helper.call(depth0, depth0 && depth0.uri, options) : helperMissing.call(depth0, 'type', depth0 && depth0.uri, options))) + ' ';
          options = {
            hash: {},
            inverse: self.program(2, program2, data),
            fn: self.noop,
            data: data
          };
          if (helper = helpers.imageUrl) {
            stack1 = helper.call(depth0, options);
          } else {
            helper = depth0 && depth0.imageUrl;
            stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper;
          }
          if (!helpers.imageUrl) {
            stack1 = blockHelperMissing.call(depth0, stack1, {
              hash: {},
              inverse: self.program(2, program2, data),
              fn: self.noop,
              data: data
            });
          }
          if (stack1 || stack1 === 0) {
            buffer += stack1;
          }
          buffer += '"\n      data-uri="';
          if (helper = helpers.uri) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.uri;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '"\n      data-log-context="media-object"\n      data-contextmenu>\n      <div class="mo-wrapper">\n        <div class="mo-image-wrapper">\n          <a href="' + escapeExpression((helper = helpers.href || depth0 && depth0.href, options = {
            hash: {},
            data: data
          }, helper ? helper.call(depth0, depth0 && depth0.uri, options) : helperMissing.call(depth0, 'href', depth0 && depth0.uri, options))) + '" data-uri="';
          if (helper = helpers.uri) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.uri;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '" data-log-click="media-image">\n            ';
          stack1 = self.invokePartial(partials['./node_modules/spotify-glue-cat/templates/media/image.hbs'], './node_modules/spotify-glue-cat/templates/media/image.hbs', depth0, helpers, partials, data);
          if (stack1 || stack1 === 0) {
            buffer += stack1;
          }
          buffer += '\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n';
          return buffer;
        }
        function program2(depth0, data) {
          return 'show-placeholder';
        }
        function program4(depth0, data, depth1) {
          var buffer = '', stack1, helper;
          buffer += '\n  <button\n    type="button"\n    class="button facepile-badge"\n    title="';
          if (helper = helpers.badgeTooltip) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.badgeTooltip;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '"\n    data-tooltip\n    data-tooltip-instant\n    data-modal="spotify:modal:socialproof:' + escapeExpression((stack1 = depth1 && depth1.uri, typeof stack1 === functionType ? stack1.apply(depth0) : stack1)) + '">\n    <span>+';
          if (helper = helpers.badgeCount) {
            stack1 = helper.call(depth0, {
              hash: {},
              data: data
            });
          } else {
            helper = depth0 && depth0.badgeCount;
            stack1 = typeof helper === functionType ? helper.call(depth0, {
              hash: {},
              data: data
            }) : helper;
          }
          buffer += escapeExpression(stack1) + '</span>\n  </button>\n';
          return buffer;
        }
        stack1 = (helper = helpers.facepile || depth0 && depth0.facepile, options = {
          hash: {},
          inverse: self.programWithDepth(4, program4, data, depth0),
          fn: self.program(1, program1, data),
          data: data
        }, helper ? helper.call(depth0, depth0 && depth0.listeners, depth0 && depth0.totalListeners, options) : helperMissing.call(depth0, 'facepile', depth0 && depth0.listeners, depth0 && depth0.totalListeners, options));
        if (stack1 || stack1 === 0) {
          buffer += stack1;
        }
        buffer += '\n';
        return buffer;
      });
    Handlebars.registerPartial('./node_modules/spotify-glue-cat/templates/facepile-common.hbs', template);
    require('./node_modules/spotify-glue-cat/templates/media/image.hbs');
    module.exports = template;
  },
  './node_modules/prime/defer.js': function (require, module, exports, global) {
    'use strict';
    var kindOf = require('./node_modules/mout/lang/kindOf.js'), now = require('./node_modules/mout/time/now.js'), forEach = require('./node_modules/mout/array/forEach.js'), indexOf = require('./node_modules/mout/array/indexOf.js');
    var callbacks = {
        timeout: {},
        frame: [],
        immediate: []
      };
    var push = function (collection, callback, context, defer) {
      var iterator = function () {
        iterate(collection);
      };
      if (!collection.length)
        defer(iterator);
      var entry = {
          callback: callback,
          context: context
        };
      collection.push(entry);
      return function () {
        var io = indexOf(collection, entry);
        if (io > -1)
          collection.splice(io, 1);
      };
    };
    var iterate = function (collection) {
      var time = now();
      forEach(collection.splice(0), function (entry) {
        entry.callback.call(entry.context, time);
      });
    };
    var defer = function (callback, argument, context) {
      return kindOf(argument) === 'Number' ? defer.timeout(callback, argument, context) : defer.immediate(callback, argument);
    };
    if (global.process && process.nextTick) {
      defer.immediate = function (callback, context) {
        return push(callbacks.immediate, callback, context, process.nextTick);
      };
    } else if (global.setImmediate) {
      defer.immediate = function (callback, context) {
        return push(callbacks.immediate, callback, context, setImmediate);
      };
    } else if (global.postMessage && global.addEventListener) {
      addEventListener('message', function (event) {
        if (event.source === global && event.data === '@deferred') {
          event.stopPropagation();
          iterate(callbacks.immediate);
        }
      }, true);
      defer.immediate = function (callback, context) {
        return push(callbacks.immediate, callback, context, function () {
          postMessage('@deferred', '*');
        });
      };
    } else {
      defer.immediate = function (callback, context) {
        return push(callbacks.immediate, callback, context, function (iterator) {
          setTimeout(iterator, 0);
        });
      };
    }
    var requestAnimationFrame = global.requestAnimationFrame || global.webkitRequestAnimationFrame || global.mozRequestAnimationFrame || global.oRequestAnimationFrame || global.msRequestAnimationFrame || function (callback) {
        setTimeout(callback, 1000 / 60);
      };
    defer.frame = function (callback, context) {
      return push(callbacks.frame, callback, context, requestAnimationFrame);
    };
    var clear;
    defer.timeout = function (callback, ms, context) {
      var ct = callbacks.timeout;
      if (!clear)
        clear = defer.immediate(function () {
          clear = null;
          callbacks.timeout = {};
        });
      return push(ct[ms] || (ct[ms] = []), callback, context, function (iterator) {
        setTimeout(iterator, ms);
      });
    };
    module.exports = defer;
  },
  './node_modules/prime/index.js': function (require, module, exports, global) {
    'use strict';
    var hasOwn = require('./node_modules/mout/object/hasOwn.js'), mixIn = require('./node_modules/mout/object/mixIn.js'), create = require('./node_modules/mout/lang/createObject.js'), kindOf = require('./node_modules/mout/lang/kindOf.js');
    var hasDescriptors = true;
    try {
      Object.defineProperty({}, '~', {});
      Object.getOwnPropertyDescriptor({}, '~');
    } catch (e) {
      hasDescriptors = false;
    }
    var hasEnumBug = !{ valueOf: 0 }.propertyIsEnumerable('valueOf'), buggy = [
        'toString',
        'valueOf'
      ];
    var verbs = /^constructor|inherits|mixin$/;
    var implement = function (proto) {
      var prototype = this.prototype;
      for (var key in proto) {
        if (key.match(verbs))
          continue;
        if (hasDescriptors) {
          var descriptor = Object.getOwnPropertyDescriptor(proto, key);
          if (descriptor) {
            Object.defineProperty(prototype, key, descriptor);
            continue;
          }
        }
        prototype[key] = proto[key];
      }
      if (hasEnumBug)
        for (var i = 0; key = buggy[i]; i++) {
          var value = proto[key];
          if (value !== Object.prototype[key])
            prototype[key] = value;
        }
      return this;
    };
    var prime = function (proto) {
      if (kindOf(proto) === 'Function')
        proto = { constructor: proto };
      var superprime = proto.inherits;
      var constructor = hasOwn(proto, 'constructor') ? proto.constructor : superprime ? function () {
          return superprime.apply(this, arguments);
        } : function () {
        };
      if (superprime) {
        mixIn(constructor, superprime);
        var superproto = superprime.prototype;
        var cproto = constructor.prototype = create(superproto);
        constructor.parent = superproto;
        cproto.constructor = constructor;
      }
      if (!constructor.implement)
        constructor.implement = implement;
      var mixins = proto.mixin;
      if (mixins) {
        if (kindOf(mixins) !== 'Array')
          mixins = [mixins];
        for (var i = 0; i < mixins.length; i++)
          constructor.implement(create(mixins[i].prototype));
      }
      return constructor.implement(proto);
    };
    module.exports = prime;
  },
  './node_modules/prime/emitter.js': function (require, module, exports, global) {
    'use strict';
    var indexOf = require('./node_modules/mout/array/indexOf.js'), forEach = require('./node_modules/mout/array/forEach.js');
    var prime = require('./node_modules/prime/index.js'), defer = require('./node_modules/prime/defer.js');
    var slice = Array.prototype.slice;
    var Emitter = prime({
        on: function (event, fn) {
          var listeners = this._listeners || (this._listeners = {}), events = listeners[event] || (listeners[event] = []);
          if (indexOf(events, fn) === -1)
            events.push(fn);
          return this;
        },
        off: function (event, fn) {
          var listeners = this._listeners, events, key, length = 0;
          if (listeners && (events = listeners[event])) {
            var io = indexOf(events, fn);
            if (io > -1)
              events.splice(io, 1);
            if (!events.length)
              delete listeners[event];
            for (var l in listeners)
              return this;
            delete this._listeners;
          }
          return this;
        },
        emit: function (event) {
          var self = this, args = slice.call(arguments, 1);
          var emit = function () {
            var listeners = self._listeners, events;
            if (listeners && (events = listeners[event])) {
              forEach(events.slice(0), function (event) {
                return event.apply(self, args);
              });
            }
          };
          if (args[args.length - 1] === Emitter.EMIT_SYNC) {
            args.pop();
            emit();
          } else {
            defer(emit);
          }
          return this;
        }
      });
    Emitter.EMIT_SYNC = {};
    module.exports = Emitter;
  },
  './node_modules/finally/index.js': function (require, module, exports, global) {
    'use strict';
    var prime = require('./node_modules/prime/index.js');
    var kindOf = require('./node_modules/mout/lang/kindOf.js');
    var map = require('./node_modules/mout/array/map.js');
    var slice = require('./node_modules/mout/array/slice.js');
    var forEach = require('./node_modules/mout/array/forEach.js');
    var reduce = require('./node_modules/mout/array/reduce.js');
    var each = require('./node_modules/mout/collection/forEach.js');
    var cmap = require('./node_modules/mout/collection/map.js');
    var push_ = Array.prototype.push;
    var Flow = prime({
        constructor: function Flow() {
          this._seq = [];
        },
        then: function () {
          this._push(this._callbacks(arguments));
          return this;
        },
        _parallel: function (parallel, args) {
          var self = this;
          return function () {
            var control = new Controller(self, self._index++);
            self._controls.push(control);
            parallel.apply(control, args ? args.concat(slice(arguments)) : arguments);
          };
        },
        _push: function (parallels, args) {
          if (!parallels.length)
            return;
          this._seq.push(map(parallels, function (parallel) {
            return this._parallel(parallel, args);
          }, this));
        },
        _callbacks: function (callbacks) {
          return reduce(callbacks, function (a, b) {
            if (kindOf(b) === 'Array')
              push_.apply(a, b);
            else
              a.push(b);
            return a;
          }, []);
        },
        sequential: function (object) {
          var callbacks = this._callbacks(slice(arguments, 1));
          each(object, function (value, key) {
            this._push(callbacks, [
              value,
              key
            ]);
          }, this);
          return this;
        },
        parallel: function (object, parallel) {
          var parallels = cmap(object, function (value, key) {
              return this._parallel(parallel, [
                value,
                key
              ]);
            }, this);
          if (parallels.length)
            this._seq.push(parallels);
          return this;
        },
        finally: function () {
          this.then.apply(this, arguments);
          this._continue.call(this);
          return this;
        },
        run: function () {
          this._continue.apply(this, arguments);
          return this;
        },
        _break: function () {
          this._seq.splice(0, this._seq.length - 1);
          this._continue.apply(this, arguments);
        },
        _spread: function (error, args) {
          var seq = this._next();
          if (!seq || !(seq = seq[0]))
            return;
          if (!args || !args.length)
            args = [undefined];
          this._length = args.length;
          forEach(args, function (arg) {
            seq(error, arg);
          });
        },
        _continue: function () {
          var seq = this._next();
          if (!seq)
            return;
          this._length = seq.length;
          var args = arguments;
          forEach(seq, function (parallel) {
            parallel.apply(null, args);
          });
        },
        _next: function () {
          var seq = this._seq.shift();
          if (!seq)
            return;
          if (this._controls)
            forEach(this._controls, function (control) {
              control._kill();
            });
          this._arguments = [];
          this._errors = [];
          this._controls = [];
          this._index = 0;
          return seq;
        },
        _done: function (index, error, data) {
          this._arguments[index] = data;
          if (error)
            this._errors.push(error);
          if (!--this._length) {
            var errors = null;
            if (this._errors.length === 1)
              errors = this._errors[0];
            else if (this._errors.length)
              errors = new Error(map(this._errors, function (e) {
                return e.message;
              }).join('\n'));
            this._continue.apply(this, [errors].concat(this._arguments));
          } else
            this._controls[index]._kill();
        }
      });
    var Controller = function Controller(flow, index) {
      var dead;
      this._kill = function () {
        dead = true;
      };
      this.break = function () {
        if (!dead)
          flow._break.apply(flow, arguments);
      };
      this.continue = function () {
        if (!dead)
          flow._continue.apply(flow, arguments);
      };
      this.spread = function (error, args) {
        if (!dead)
          flow._spread(error, args);
      };
      var done = this.done = function (error, data) {
          if (!dead)
            flow._done.call(flow, index, error, data);
        };
    };
    module.exports = function () {
      var flow = new Flow();
      flow.then.apply(flow, arguments);
      return flow;
    };
  },
  './node_modules/spotify-range2/index.js': function (require, module, exports, global) {
    'use strict';
    var prime = require('./node_modules/prime/index.js');
    var map = require('./node_modules/mout/array/map.js');
    var push_ = Array.prototype.push;
    var slice_ = Array.prototype.slice;
    var Range = prime({
        constructor: function Range(start, end) {
          this.update(start, end);
        },
        update: function (start, end) {
          if (start != null)
            this.start = start;
          if (end != null)
            this.end = end;
          if (this.start == null || this.end == null)
            throw new Error('invalid range');
          if (this.start > this.end)
            throw new Error('invalid range');
          this.length = this.end - this.start;
          return this;
        },
        copy: function () {
          return new Range(this.start, this.end);
        },
        above: function (range) {
          if (!range)
            return false;
          return this.start >= range.end;
        },
        below: function (range) {
          if (!range)
            return false;
          return this.end <= range.start;
        },
        adjacent: function (range) {
          if (!range)
            return false;
          return this.end === range.start || this.start === range.end;
        },
        intersects: function (range) {
          if (!range)
            return false;
          return !this.above(range) && !this.below(range);
        },
        contains: function (range) {
          if (!range)
            return false;
          return this.start <= range.start && this.end >= range.end;
        },
        contained: function (range) {
          var ranges;
          if (range instanceof Range)
            ranges = arguments;
          else
            ranges = range;
          if (!ranges)
            return false;
          for (var i = 0; range = ranges[i]; i++) {
            if (range.start <= this.start && range.end >= this.end)
              return true;
          }
          return false;
        },
        fits: function (prev, next) {
          if (!prev && !next)
            return true;
          if (!prev)
            return this.end <= next.start;
          if (!next)
            return this.start >= prev.end;
          return this.start >= prev.end && this.end <= next.start;
        },
        between: function (prev, next) {
          if (!prev && !next)
            return this.copy();
          if (!prev)
            return this.start >= next.start ? null : new Range(this.start, Math.min(this.end, next.start));
          if (!next)
            return this.end <= prev.end ? null : new Range(Math.max(prev.end, this.start), this.end);
          return this.end > prev.end && this.start < next.start ? new Range(Math.max(prev.end, this.start), Math.min(next.start, this.end)) : null;
        },
        intersection: function (range) {
          var intersected = [], ranges;
          if (range instanceof Range)
            ranges = arguments;
          else
            ranges = range;
          for (var k = 0; k < ranges.length; k++) {
            var r = ranges[k];
            if (this.below(r))
              break;
            if (r.intersects(this))
              intersected.push(new Range(Math.max(this.start, r.start), Math.min(this.end, r.end)));
          }
          return intersected;
        },
        subtract: function (range) {
          var subtracted = [], ranges;
          if (range instanceof Range)
            ranges = arguments;
          else
            ranges = range;
          for (var k = -1; k < ranges.length; k++) {
            var prev = ranges[k];
            var next = ranges[k + 1];
            var between = this.between(prev, next);
            if (between)
              subtracted.push(between);
          }
          return subtracted;
        },
        extract: function (range) {
          var ranges = range instanceof Range ? slice_.call(arguments) : range.slice();
          for (var k = 0; k < ranges.length; k++) {
            var prev = ranges[k - 1];
            var next = ranges[k];
            var newRange = null;
            if (this.below(next)) {
              newRange = new Range(next.start - this.length, next.end - this.length);
            } else if (this.intersects(next)) {
              var subtracted = next.subtract(this);
              if (subtracted.length === 2) {
                newRange = new Range(subtracted[0].start, subtracted[1].end - this.length);
              } else if (subtracted.length === 1) {
                if (next.end > this.end) {
                  newRange = new Range(subtracted[0].start - this.length, subtracted[0].end - this.length);
                } else if (this.start > next.start) {
                  newRange = new Range(subtracted[0].start, subtracted[0].end);
                }
              } else {
                ranges.splice(k--, 1);
              }
            } else {
              ranges.splice(k, 1, next.copy());
            }
            if (newRange) {
              if (prev && prev.end === newRange.start) {
                ranges.splice(k-- - 1, 2, new Range(prev.start, newRange.end));
              } else {
                ranges.splice(k, 1, newRange);
              }
            }
          }
          return ranges;
        },
        insert: function (range) {
          var ranges = range instanceof Range ? slice_.call(arguments) : range.slice();
          for (var k = 0; k < ranges.length; k++) {
            var next = ranges[k];
            if (this.start >= next.end) {
              ranges.splice(k, 1, next.copy());
            } else if (this.start > next.start && this.start < next.end) {
              ranges.splice(k, 1, new Range(next.start, this.start), new Range(this.start, next.end));
            } else {
              ranges.splice(k, 1, new Range(next.start + this.length, next.end + this.length));
            }
          }
          return this.merge(ranges);
        },
        merge: function (range) {
          var ranges;
          if (range instanceof Range)
            ranges = arguments;
          else
            ranges = range;
          ranges = map(ranges, function (r) {
            return r.copy();
          });
          if (!ranges.length)
            return [this.copy()];
          for (var k = -1, l = ranges.length; k < l; k++) {
            var prev = ranges[k];
            var next = ranges[k + 1];
            var between = this.between(prev, next);
            if (between) {
              if (!prev && next) {
                if (between.end === next.start) {
                  next.update(between.start, next.end);
                } else {
                  k++;
                  ranges.unshift(between);
                }
              } else if (prev && next) {
                if (prev.end === between.start && between.end === next.start) {
                  prev.update(prev.start, next.end);
                  ranges.splice(k-- + 1, 1);
                } else if (prev.end === between.start) {
                  prev.update(prev.start, between.end);
                } else if (between.end === next.start) {
                  next.update(between.start, next.end);
                } else {
                  ranges.splice(k + 1, 0, between);
                }
              } else if (prev && !next) {
                if (prev.end === between.start) {
                  prev.update(prev.start, between.end);
                } else {
                  k++;
                  ranges.push(between);
                }
              }
            }
          }
          return ranges;
        },
        remove: function (range) {
          var ranges;
          if (range instanceof Range)
            ranges = arguments;
          else
            ranges = range;
          var result = [];
          for (var i = 0; i < ranges.length; i++) {
            var remaining = ranges[i].subtract(this);
            if (remaining.length)
              push_.apply(result, remaining);
          }
          return result;
        },
        toIndices: function () {
          var indices = [];
          for (var i = this.start; i < this.end; i++)
            indices.push(i);
          return indices;
        },
        toString: function () {
          return [
            this.start,
            this.end
          ] + '';
        }
      });
    Range.fromString = function (string) {
      var parts = string.split(',');
      return new Range(+parts[0], +parts[1]);
    };
    Range.fromIndices = function (indices) {
      indices.sort(function (a, b) {
        return a > b ? 1 : -1;
      });
      var ranges = [], rstart, rend;
      for (var i = 0; i < indices.length; i++) {
        rstart = indices[i];
        rend = rstart;
        while (indices[i + 1] - indices[i] === 1) {
          rend = indices[i + 1];
          i++;
        }
        ranges.push(new Range(rstart, rend + 1));
      }
      return ranges;
    };
    module.exports = Range;
  },
  './node_modules/mout/lang/isPlainObject.js': function (require, module, exports, global) {
    function isPlainObject(value) {
      return !!value && typeof value === 'object' && value.constructor === Object;
    }
    module.exports = isPlainObject;
  },
  './node_modules/mout/lang/isArray.js': function (require, module, exports, global) {
    var isKind = require('./node_modules/mout/lang/isKind.js');
    var isArray = Array.isArray || function (val) {
        return isKind(val, 'Array');
      };
    module.exports = isArray;
  },
  './node_modules/mout/lang/isRegExp.js': function (require, module, exports, global) {
    var isKind = require('./node_modules/mout/lang/isKind.js');
    function isRegExp(val) {
      return isKind(val, 'RegExp');
    }
    module.exports = isRegExp;
  },
  './node_modules/mout/lang/kindOf.js': function (require, module, exports, global) {
    var _rKind = /^\[object (.*)\]$/, _toString = Object.prototype.toString, UNDEF;
    function kindOf(val) {
      if (val === null) {
        return 'Null';
      } else if (val === UNDEF) {
        return 'Undefined';
      } else {
        return _rKind.exec(_toString.call(val))[1];
      }
    }
    module.exports = kindOf;
  },
  './node_modules/mout/array/difference.js': function (require, module, exports, global) {
    var unique = require('./node_modules/mout/array/unique.js');
    var filter = require('./node_modules/mout/array/filter.js');
    var some = require('./node_modules/mout/array/some.js');
    var contains = require('./node_modules/mout/array/contains.js');
    var slice = require('./node_modules/mout/array/slice.js');
    function difference(arr) {
      var arrs = slice(arguments, 1), result = filter(unique(arr), function (needle) {
          return !some(arrs, function (haystack) {
            return contains(haystack, needle);
          });
        });
      return result;
    }
    module.exports = difference;
  },
  './node_modules/mout/array/filter.js': function (require, module, exports, global) {
    var makeIterator = require('./node_modules/mout/function/makeIterator_.js');
    function filter(arr, callback, thisObj) {
      callback = makeIterator(callback, thisObj);
      var results = [];
      if (arr == null) {
        return results;
      }
      var i = -1, len = arr.length, value;
      while (++i < len) {
        value = arr[i];
        if (callback(value, i, arr)) {
          results.push(value);
        }
      }
      return results;
    }
    module.exports = filter;
  },
  './node_modules/mout/array/combine.js': function (require, module, exports, global) {
    var indexOf = require('./node_modules/mout/array/indexOf.js');
    function combine(arr1, arr2) {
      if (arr2 == null) {
        return arr1;
      }
      var i = -1, len = arr2.length;
      while (++i < len) {
        if (indexOf(arr1, arr2[i]) === -1) {
          arr1.push(arr2[i]);
        }
      }
      return arr1;
    }
    module.exports = combine;
  },
  './node_modules/mout/array/map.js': function (require, module, exports, global) {
    var makeIterator = require('./node_modules/mout/function/makeIterator_.js');
    function map(arr, callback, thisObj) {
      callback = makeIterator(callback, thisObj);
      var results = [];
      if (arr == null) {
        return results;
      }
      var i = -1, len = arr.length;
      while (++i < len) {
        results[i] = callback(arr[i], i, arr);
      }
      return results;
    }
    module.exports = map;
  },
  './node_modules/mout/array/contains.js': function (require, module, exports, global) {
    var indexOf = require('./node_modules/mout/array/indexOf.js');
    function contains(arr, val) {
      return indexOf(arr, val) !== -1;
    }
    module.exports = contains;
  },
  './node_modules/mout/array/forEach.js': function (require, module, exports, global) {
    function forEach(arr, callback, thisObj) {
      if (arr == null) {
        return;
      }
      var i = -1, len = arr.length;
      while (++i < len) {
        if (callback.call(thisObj, arr[i], i, arr) === false) {
          break;
        }
      }
    }
    module.exports = forEach;
  },
  './node_modules/mout/array/intersection.js': function (require, module, exports, global) {
    var unique = require('./node_modules/mout/array/unique.js');
    var filter = require('./node_modules/mout/array/filter.js');
    var every = require('./node_modules/mout/array/every.js');
    var contains = require('./node_modules/mout/array/contains.js');
    var slice = require('./node_modules/mout/array/slice.js');
    function intersection(arr) {
      var arrs = slice(arguments, 1), result = filter(unique(arr), function (needle) {
          return every(arrs, function (haystack) {
            return contains(haystack, needle);
          });
        });
      return result;
    }
    module.exports = intersection;
  },
  './node_modules/mout/array/remove.js': function (require, module, exports, global) {
    var indexOf = require('./node_modules/mout/array/indexOf.js');
    function remove(arr, item) {
      var idx = indexOf(arr, item);
      if (idx !== -1)
        arr.splice(idx, 1);
    }
    module.exports = remove;
  },
  './node_modules/mout/string/escapeRegExp.js': function (require, module, exports, global) {
    var toString = require('./node_modules/mout/lang/toString.js');
    function escapeRegExp(str) {
      return toString(str).replace(/\W/g, '\\$&');
    }
    module.exports = escapeRegExp;
  },
  './node_modules/mout/object/keys.js': function (require, module, exports, global) {
    var forOwn = require('./node_modules/mout/object/forOwn.js');
    var keys = Object.keys || function (obj) {
        var keys = [];
        forOwn(obj, function (val, key) {
          keys.push(key);
        });
        return keys;
      };
    module.exports = keys;
  },
  './node_modules/mout/object/pick.js': function (require, module, exports, global) {
    var slice = require('./node_modules/mout/array/slice.js');
    function pick(obj, var_keys) {
      var keys = typeof arguments[1] !== 'string' ? arguments[1] : slice(arguments, 1), out = {}, i = 0, key;
      while (key = keys[i++]) {
        out[key] = obj[key];
      }
      return out;
    }
    module.exports = pick;
  },
  './node_modules/mout/object/deepMixIn.js': function (require, module, exports, global) {
    var forOwn = require('./node_modules/mout/object/forOwn.js');
    var isPlainObject = require('./node_modules/mout/lang/isPlainObject.js');
    function deepMixIn(target, objects) {
      var i = 0, n = arguments.length, obj;
      while (++i < n) {
        obj = arguments[i];
        if (obj) {
          forOwn(obj, copyProp, target);
        }
      }
      return target;
    }
    function copyProp(val, key) {
      var existing = this[key];
      if (isPlainObject(val) && isPlainObject(existing)) {
        deepMixIn(existing, val);
      } else {
        this[key] = val;
      }
    }
    module.exports = deepMixIn;
  },
  './node_modules/mout/object/mixIn.js': function (require, module, exports, global) {
    var forOwn = require('./node_modules/mout/object/forOwn.js');
    function mixIn(target, objects) {
      var i = 0, n = arguments.length, obj;
      while (++i < n) {
        obj = arguments[i];
        if (obj != null) {
          forOwn(obj, copyProp, target);
        }
      }
      return target;
    }
    function copyProp(val, key) {
      this[key] = val;
    }
    module.exports = mixIn;
  },
  './node_modules/mout/object/forIn.js': function (require, module, exports, global) {
    var hasOwn = require('./node_modules/mout/object/hasOwn.js');
    var _hasDontEnumBug, _dontEnums;
    function checkDontEnum() {
      _dontEnums = [
        'toString',
        'toLocaleString',
        'valueOf',
        'hasOwnProperty',
        'isPrototypeOf',
        'propertyIsEnumerable',
        'constructor'
      ];
      _hasDontEnumBug = true;
      for (var key in { 'toString': null }) {
        _hasDontEnumBug = false;
      }
    }
    function forIn(obj, fn, thisObj) {
      var key, i = 0;
      if (_hasDontEnumBug == null)
        checkDontEnum();
      for (key in obj) {
        if (exec(fn, obj, key, thisObj) === false) {
          break;
        }
      }
      if (_hasDontEnumBug) {
        var ctor = obj.constructor, isProto = !!ctor && obj === ctor.prototype;
        while (key = _dontEnums[i++]) {
          if ((key !== 'constructor' || !isProto && hasOwn(obj, key)) && obj[key] !== Object.prototype[key]) {
            if (exec(fn, obj, key, thisObj) === false) {
              break;
            }
          }
        }
      }
    }
    function exec(fn, obj, key, thisObj) {
      return fn.call(thisObj, obj[key], key, obj);
    }
    module.exports = forIn;
  },
  './node_modules/mout/object/forOwn.js': function (require, module, exports, global) {
    var hasOwn = require('./node_modules/mout/object/hasOwn.js');
    var forIn = require('./node_modules/mout/object/forIn.js');
    function forOwn(obj, fn, thisObj) {
      forIn(obj, function (val, key) {
        if (hasOwn(obj, key)) {
          return fn.call(thisObj, obj[key], key, obj);
        }
      });
    }
    module.exports = forOwn;
  },
  './node_modules/spotify-live-models/player/control.js': function (require, module, exports, global) {
    'use strict';
    var cosmosPlayer = require('./node_modules/spotify-live-models/player/cosmos-player.js');
    var playerApi = require('./node_modules/spotify-live-models/player/player-api.js');
    var playlistResolver = require('./node_modules/spotify-live-models/player/playlist-resolver.js');
    var dataUtils = require('./node_modules/spotify-live-models/player/data.js');
    var bridgeRequest = require('./node_modules/spotify-live-models/util/bridge.js').request;
    function shouldUseContextPlayer() {
      return !!(global.__spotify && global.__spotify.uses_context_player);
    }
    function playTrackUris(trackUris, opt_ids, playOptions, opt_callback) {
      if (shouldUseContextPlayer()) {
        playerApi.play(trackUris, opt_ids, playOptions, opt_callback);
      } else {
        cosmosPlayer.play(playOptions, trackUris, opt_callback);
      }
    }
    function playFromResolver(contextUri, playOptions, opt_callback) {
      if (shouldUseContextPlayer()) {
        playerApi.playFromResolver(contextUri, playOptions, opt_callback);
      } else {
        playOptions.context = contextUri;
        cosmosPlayer.play(playOptions, null, opt_callback);
      }
    }
    function playContext(context, playOptions, opt_callback) {
      playerApi.playContext(context, playOptions, opt_callback);
    }
    function playFromPlaylistResolver(contextUri, playOptions, opt_callback) {
      var options;
      if (playOptions.uids && playOptions.uris) {
        var uid = playOptions.uids[0];
        var uri = playOptions.uris[0];
        options = {
          prepare_play_options: {
            skip_to_index: {
              track_uri: uri,
              track_uid: '' + uid
            }
          }
        };
      }
      playlistResolver.play(contextUri, options, opt_callback);
    }
    function playFromBridge(contextUri, opt_callback) {
      bridgeRequest('player_play_context', [
        'main',
        contextUri
      ], opt_callback);
    }
    function playTrack(uri, playOptions, opt_callback) {
      playOptions.context = uri;
      playOptions.track = uri;
      playOptions.index = 0;
      playTrackUris([uri], null, playOptions, opt_callback);
    }
    function playRows(rows, playOptions, opt_callback) {
      var index = playOptions.index;
      var range = playOptions.range;
      if (index === null && range) {
        dataUtils.getFirstPlayableRow(rows, range, function (error, index) {
          if (error && opt_callback)
            return opt_callback(error);
          if (error) {
            if (global.console)
              console.error(error);
            return;
          }
          var trackUris = dataUtils.getTracksFromRows(rows);
          playOptions.index = index;
          playTrackUris(trackUris, rows.keys, playOptions, opt_callback);
        });
      } else {
        var trackUris = dataUtils.getTracksFromRows(rows);
        playTrackUris(trackUris, rows.keys, playOptions, opt_callback);
      }
    }
    function updateWithRows(rows, playOptions, opt_callback) {
      var tracks = dataUtils.getTracksFromRows(rows);
      if (shouldUseContextPlayer()) {
        delete playOptions.index;
        playerApi.update(tracks, rows.keys, playOptions, opt_callback);
      } else {
        cosmosPlayer.update(playOptions, tracks, opt_callback);
      }
    }
    function updateWithResolver(playOptions, opt_callback) {
      cosmosPlayer.update(playOptions, null, opt_callback);
    }
    function pause(opt_callback) {
      if (shouldUseContextPlayer()) {
        playerApi.pause(opt_callback);
      } else {
        cosmosPlayer.pause(opt_callback);
      }
    }
    function resume(opt_callback) {
      if (shouldUseContextPlayer()) {
        playerApi.resume(opt_callback);
      } else {
        cosmosPlayer.resume(opt_callback);
      }
    }
    function skipPrev(opt_callback) {
      cosmosPlayer.skipPrev(opt_callback);
    }
    function skipNext(opt_callback) {
      cosmosPlayer.skipNext(opt_callback);
    }
    exports.playTrack = playTrack;
    exports.playRows = playRows;
    exports.playFromResolver = playFromResolver;
    exports.playContext = playContext;
    exports.playFromBridge = playFromBridge;
    exports.updateWithRows = updateWithRows;
    exports.updateWithResolver = updateWithResolver;
    exports.pause = pause;
    exports.resume = resume;
    exports.skipPrev = skipPrev;
    exports.skipNext = skipNext;
    exports.shouldUseContextPlayer = shouldUseContextPlayer;
    exports.playFromPlaylistResolver = playFromPlaylistResolver;
  },
  './node_modules/spotify-live-models/player/updates.js': function (require, module, exports, global) {
    'use strict';
    var lastRowsList;
    var lastRowsListUri;
    var lastRowsListHandler;
    var lastRowsListReferrer;
    var playerRowKey;
    var playerKeys;
    function listen(rowsList, options, handler) {
      if (lastRowsList) {
        removeRowsListener();
      }
      lastRowsList = rowsList;
      lastRowsListUri = options.context;
      lastRowsListReferrer = options.referrer;
      lastRowsListHandler = function () {
        options.index = getPlayingIndexInList(rowsList);
        handler(options);
      };
      rowsList.on('update', lastRowsListHandler);
    }
    function clean(model) {
      if (!lastRowsListHandler)
        return;
      var context = model.get('context');
      if ((context && context.uri) !== lastRowsListUri) {
        removeRowsListener();
      } else {
        var origin = model.get('origin');
        var playerReferrer = origin && origin.get('referrer');
        if (playerReferrer !== lastRowsListReferrer && !model.get('contextUpdatedCrossFrame')) {
          removeRowsListener();
        }
      }
    }
    function setPlayingIndex(index, optRowsList) {
      if (!lastRowsList && !optRowsList)
        return;
      var list = optRowsList || lastRowsList;
      playerRowKey = list.keys[index] || null;
      playerKeys = list.keys.slice();
    }
    function removeRowsListener() {
      if (lastRowsList) {
        lastRowsList.off('update', lastRowsListHandler);
      }
      lastRowsList = null;
      lastRowsListUri = '';
      lastRowsListHandler = null;
      lastRowsListReferrer = '';
    }
    function getPlayingIndexInList(rowsList) {
      if (!playerRowKey)
        return -1;
      var index = rowsList.keys.indexOf(playerRowKey);
      if (index === -1) {
        var indexInPlayerList = playerKeys.indexOf(playerRowKey);
        for (var i = indexInPlayerList, l = playerKeys.length; i < l; i++) {
          index = rowsList.keys.indexOf(playerKeys[i]);
          if (index > -1) {
            index--;
            break;
          }
        }
      }
      return index;
    }
    function isPlayingFromRowsContext(opt_uri) {
      if (opt_uri)
        return lastRowsListUri === opt_uri;
      return !!lastRowsList;
    }
    exports.setPlayingIndex = setPlayingIndex;
    exports.listen = listen;
    exports.clean = clean;
    exports.getPlayingIndexInList = getPlayingIndexInList;
    exports.isPlayingFromRowsContext = isPlayingFromRowsContext;
  },
  './node_modules/spotify-live-models/player/data.js': function (require, module, exports, global) {
    'use strict';
    var live = require('./node_modules/spotify-live/index.js');
    var Range = require('./node_modules/spotify-range2/index.js');
    var URI = require('./node_modules/spotify-liburi/src/uri.js');
    var cosmosPlayer = require('./node_modules/spotify-live-models/player/cosmos-player.js');
    var updatesUtils = require('./node_modules/spotify-live-models/player/updates.js');
    function getFirstPlayableRow(rows, range, callback) {
      var index = range.start;
      isRowPlayable(rows.get(index), function playableCallback(error, playable) {
        if (playable)
          return callback(null, index);
        if (index === rows.end - 1)
          return callback(null, range.start);
        isRowPlayable(rows.get(++index), playableCallback);
      });
    }
    function isRowPlayable(row, callback) {
      if (!row)
        return callback(null, false);
      row.query('track(playable)', function (error, data) {
        if (error)
          return callback(error);
        callback(null, data.track.playable);
      }, live.ASAP);
    }
    function getPlayOptions(data, callback) {
      getReferrer(function (error, referrer) {
        if (error)
          return callback(error);
        var range = data.range;
        var options = {
            context: data.context,
            range: range && new Range(range[0], range[1]),
            index: data.index === undefined ? null : data.index,
            source: data.source || 'unknown',
            reason: data.reason || 'unknown',
            referrer: referrer,
            referrerVersion: getReferrerVersion()
          };
        if (data.uids) {
          options.uids = data.uids;
        }
        if (data.uris) {
          options.uris = data.uris;
        }
        callback(null, options);
      });
    }
    function getTracksFromRows(rows) {
      return rows.map(function (row) {
        var track = row && row.get('track');
        return track && track.uri;
      });
    }
    function createModelState(data) {
      var origin = data.play_origin;
      var options = data.options || {};
      var context = null;
      if (data.context)
        context = { uri: data.context || data.track };
      var track = null;
      if (data.track)
        track = { uri: data.track };
      var index = data.index;
      if (index === undefined)
        index = null;
      var position = data.position;
      if (position === undefined)
        position = 0;
      if (context && track && index !== null) {
        var contextType = URI.from(context.uri).type;
        var isPlaylist = contextType === URI.Type.PLAYLIST;
        if (isPlaylist || updatesUtils.isPlayingFromRowsContext(context.uri)) {
          var rows = live(context.uri).get('rows');
          var row = rows && rows.get(index);
          var rowTrack = row && row.get('track');
          var isRowTrackLocal = rowTrack && URI.from(rowTrack.uri).type === URI.Type.LOCAL;
          if (!isRowTrackLocal && rowTrack && rowTrack.uri !== track.uri) {
            index = null;
          }
        }
      }
      return {
        playing: data.playing,
        loading: data.loading,
        context: context,
        index: index,
        track: track,
        position: position,
        origin: {
          source: origin.source || '',
          reason: origin.reason || '',
          referrer: origin.referrer || '',
          referrerVersion: origin.referrer_version || '',
          referrerVendor: origin.referrer_vendor || ''
        },
        options: {
          canRepeat: options.can_repeat,
          canSeek: options.can_seek,
          canShuffle: options.can_shuffle,
          canSkipNext: options.can_skip_next,
          canSkipPrev: options.can_skip_prev,
          repeat: options.repeat,
          repeatOne: options.repeat_track,
          shuffle: options.shuffle
        }
      };
    }
    function getPlayerState(callback) {
      cosmosPlayer.getState(function (error, state) {
        if (error)
          return callback(error);
        callback(null, createModelState(state));
      });
    }
    function subscribeForPlayerState(callback) {
      return cosmosPlayer.subscribe(function (error, state) {
        if (error)
          return callback(error);
        callback(null, createModelState(state));
      });
    }
    function getReferrer(callback) {
      var referrer = live('spotify:player').get('referrer');
      if (referrer)
        return callback(null, referrer);
      live('spotify:application').get('appURI', 'arguments', function (error, uri, args) {
        if (error)
          return callback(error);
        var fullUri = args ? uri + ':' + args : uri;
        callback(null, fullUri);
      });
    }
    function getReferrerVersion() {
      return live('spotify:application').get('version') || '0.0.0';
    }
    exports.getReferrer = getReferrer;
    exports.getReferrerVersion = getReferrerVersion;
    exports.getFirstPlayableRow = getFirstPlayableRow;
    exports.isRowPlayable = isRowPlayable;
    exports.getPlayOptions = getPlayOptions;
    exports.getTracksFromRows = getTracksFromRows;
    exports.createModelState = createModelState;
    exports.getPlayerState = getPlayerState;
    exports.subscribeForPlayerState = subscribeForPlayerState;
  },
  './node_modules/spotify-live-models/station.js': function (require, module, exports, global) {
    var live = require('./node_modules/spotify-live/index.js');
    var cosmos = require('./node_modules/spotify-live-models/util/cosmos.js');
    var imageUriToLink = require('./node_modules/spotify-live-models/station/image-uri-to-link.js');
    var contains = require('./node_modules/mout/array/contains.js');
    var map = require('./node_modules/mout/array/map.js');
    var forEach = require('./node_modules/mout/array/forEach.js');
    var spotifyURI = require('./node_modules/spotify-liburi/src/uri.js');
    var URI = exports.URI = 'spotify:internal:station:';
    var regExp = exports.matches = new RegExp('^' + URI);
    var isStationUri = regExp.test.bind(regExp);
    var END_POINT_VERSION = 'v1';
    var END_POINT_BASE = 'hm://radio-apollo/';
    var END_POINT = END_POINT_BASE + END_POINT_VERSION + '/';
    var DEFAULT_TRACK_THRESHOLD = 5;
    var DEFAULT_FETCH_COUNT = 50;
    var PLAYLIST = 'playlist';
    var TRACK = 'track';
    var ALBUM = 'album';
    var ARTIST = 'artist';
    var GENRE = 'genre';
    var UNKNOWN = 'unknown';
    var DOWN = 'down';
    var UP = 'up';
    var registered = false;
    if (!console) {
      console = {
        error: function () {
        }
      };
    }
    function getBaseSeedFromUri(model) {
      var seed = model.uri.replace(URI, '');
      return decodeURIComponent(seed);
    }
    function getType(seed) {
      var uri = spotifyURI.from(seed);
      if (!uri) {
        return UNKNOWN;
      }
      var contextType = uri.type;
      if (contextType === spotifyURI.Type.PLAYLIST) {
        return PLAYLIST;
      } else if (contextType === spotifyURI.Type.ARTIST) {
        return ARTIST;
      } else if (contextType === spotifyURI.Type.ALBUM) {
        return ALBUM;
      } else if (contextType === spotifyURI.Type.TRACK) {
        return TRACK;
      } else if (seed.indexOf('spotify:genre:') === 0) {
        return GENRE;
      } else {
        return UNKNOWN;
      }
    }
    function touch(model) {
      var id = model.get('id');
      if (!id) {
        return;
      }
      cosmos.post({ url: END_POINT + 'stations/' + id + '/touch' }, function (err) {
        if (err) {
          console.error(err);
        }
      });
    }
    function onDelete(model) {
      var id = model.get('id');
      if (!id) {
        return;
      }
      cosmos.delete({ url: END_POINT + 'stations/' + id }, function (err) {
        if (err) {
          console.error(err);
        } else {
          model.delete('id');
          var rows = model.get('rows');
          if (rows) {
            rows.off('wait', rows.onRowsWait);
            model.delete('rows');
          }
          delete model.next_tracks_uri;
        }
      });
    }
    function parseTracks(model, tracks) {
      return map(tracks, function (track) {
        var properTrack = {};
        properTrack.name = track.name;
        properTrack.uri = track.uri;
        properTrack.image = imageUriToLink(track.imageUri);
        if (track.thumb) {
          var obj = {};
          obj[track.uri] = track.thumb;
          model.get('thumbMap').update(obj);
        }
        if (track.artistName && track.artistUri) {
          properTrack.artists = [{
              name: track.artistName,
              uri: track.artistUri
            }];
        }
        if (track.albumName && track.albumUri) {
          properTrack.album = {
            uri: track.albumUri,
            name: track.albumName
          };
        }
        return { track: properTrack };
      });
    }
    function findTrack(model, trackURI) {
      var rows = model.get('rows');
      var index = model.get('index');
      if (!rows) {
        return -1;
      }
      rows = rows.values;
      if (index !== -1 && rows[index].uri === trackURI) {
        return index;
      }
      for (var i = rows.length; i--;) {
        if (rows[i].get('track').uri === trackURI) {
          return i;
        }
      }
      return -1;
    }
    function onThumbComplete(model, trackURI, trackIndex, feedback, err, response) {
      if (err) {
        console.error(err);
        return;
      }
      var rows = model.get('rows');
      var currentIndex = model.get('index');
      var data = response.body;
      var newRows = parseTracks(model, data.tracks);
      var eventToEmit = feedback === DOWN ? 'thumb-down-complete' : 'thumb-up-complete';
      var isCurrentIndex = currentIndex === trackIndex;
      var operations = [];
      var row = rows.values[trackIndex];
      if (row) {
        var obj = {};
        obj[row.get('track').uri] = feedback;
        model.get('thumbMap').update(obj);
      }
      if (isCurrentIndex) {
        var firstFutureIndex = trackIndex + 1;
        var removalAmount = rows.length - firstFutureIndex;
        operations = [
          {
            type: 'remove',
            index: firstFutureIndex,
            length: removalAmount
          },
          {
            type: 'insert',
            values: newRows,
            index: firstFutureIndex
          }
        ];
      } else if (feedback === DOWN) {
        var insertIndex = rows.length - 1;
        operations = [
          {
            type: 'remove',
            index: trackIndex,
            length: 1
          },
          {
            type: 'insert',
            values: newRows,
            index: insertIndex
          }
        ];
      }
      rows.update(operations);
      model.emit(eventToEmit, {
        trackURI: trackURI,
        isCurrentIndex: isCurrentIndex
      });
    }
    function handleThumb(model, feedback, trackURI) {
      var currentIndex = model.get('index');
      var rows = model.get('rows');
      var id = model.get('id');
      var thumbMethod = feedback === DOWN ? 'downs' : 'ups';
      var fetchCount = model.get('fetchCount');
      var foundTrackIndex;
      if (!rows || !id) {
        return;
      }
      if (!trackURI) {
        foundTrackIndex = currentIndex === -1 ? 0 : currentIndex;
        if (!rows.values[foundTrackIndex]) {
          return;
        }
        trackURI = rows.values[foundTrackIndex].get('track').uri;
      } else {
        foundTrackIndex = findTrack(model, trackURI);
        if (foundTrackIndex === -1) {
          return;
        }
      }
      if (currentIndex !== foundTrackIndex) {
        fetchCount = 1;
      }
      cosmos.post({
        url: END_POINT + 'stations/' + id + '/' + thumbMethod + '/' + trackURI.replace('spotify:track:', '') + '?count=' + fetchCount,
        body: model.next_tracks_uri
      }, onThumbComplete.bind(null, model, trackURI, foundTrackIndex, feedback));
    }
    function onThumbUp(model, trackURI) {
      handleThumb(model, UP, trackURI);
    }
    function onThumbDown(model, trackURI) {
      handleThumb(model, DOWN, trackURI);
    }
    function addRows(model, newRows) {
      var rows = model.get('rows');
      if (!rows) {
        model.update({ rows: newRows });
      } else {
        rows.update([{
            type: 'insert',
            values: newRows,
            index: rows.length
          }]);
      }
    }
    function createStation(model) {
      if (model.creating) {
        return;
      }
      model.creating = true;
      var baseSeed = model.get('baseSeed');
      cosmos.post({
        url: END_POINT + 'stations?count=' + model.get('fetchCount'),
        body: { seeds: [baseSeed] }
      }, function (err, response) {
        model.creating = false;
        if (err) {
          console.error(err);
        } else {
          var res = response.body;
          var stationData = {
              rows: parseTracks(model, res.tracks),
              subtitle: {
                name: res.station.subtitle || null,
                uri: res.station.subtitleUri || null
              },
              image: imageUriToLink(res.station.imageUri),
              name: res.station.title,
              id: res.station.id
            };
          model.update(stationData);
          model.next_tracks_uri = res.next_tracks_uri;
          var rows = model.get('rows');
          rows.onRowsWait = onRowsWait.bind(null, model);
          rows.on('wait', rows.onRowsWait);
        }
      });
    }
    function getTracks(model, fetchCount) {
      var id = model.get('id');
      if (!id) {
        return;
      }
      var next_tracks_uri = model.next_tracks_uri;
      var count = fetchCount || model.get('fetchCount');
      var uri;
      if (next_tracks_uri) {
        uri = END_POINT + next_tracks_uri.replace('/' + END_POINT_VERSION + '/', '') + '&count=' + count;
      } else {
        uri = END_POINT + 'tracks/' + id + '?count=' + count;
      }
      cosmos.get({ url: uri }, function (err, response) {
        if (err) {
          console.error(err);
        } else {
          var data = response.body;
          model.next_tracks_uri = data.next_tracks_uri;
          addRows(model, parseTracks(model, data.tracks));
        }
      });
    }
    function onRowsWait(model, ranges) {
      if (ranges && ranges.length > 0) {
        var fetchCount = 0;
        var largestTrack = 0;
        forEach(ranges, function (a) {
          if (a.end > largestTrack) {
            largestTrack = a.end;
          }
        });
        fetchCount = largestTrack - model.get('rows').length;
        getTracks(model, fetchCount);
      }
    }
    function checkFutureTracks(model) {
      var trackThreshold = model.get('trackThreshold') || DEFAULT_TRACK_THRESHOLD;
      var rows = model.get('rows');
      var index = model.get('index');
      if (!rows || !index) {
        return;
      }
      if (rows.length - index < trackThreshold) {
        getTracks(model);
      }
    }
    function onPlayerUpdate(playerModel, properties) {
      var context = playerModel.get('context');
      if (context && isStationUri(context.uri)) {
        if (properties.hasOwnProperty('index')) {
          context.update({ index: properties.index });
        }
        if (properties.hasOwnProperty('context')) {
          touch(context);
        }
      }
    }
    function onInit(model) {
      var baseSeed = getBaseSeedFromUri(model);
      if (!baseSeed) {
        return;
      }
      model.update({
        baseSeed: baseSeed,
        index: -1,
        type: getType(baseSeed),
        fetchCount: DEFAULT_FETCH_COUNT,
        thumbMap: {}
      });
      model.on('update', function onUpdate(properties) {
        if (properties.hasOwnProperty('index')) {
          checkFutureTracks(model);
        }
      });
    }
    function onWait(model, properties) {
      var needsRows;
      var needsMetadata;
      var metaFields = [
          'id',
          'name',
          'subtitle',
          'image'
        ];
      forEach(properties, function (key) {
        if (key === 'rows') {
          needsRows = true;
        }
        if (!needsMetadata && contains(metaFields, key)) {
          needsMetadata = true;
        }
      });
      if (needsMetadata) {
        createStation(model);
      } else if (needsRows && model.get('id')) {
        getTracks(model);
      } else if (needsRows) {
        createStation(model);
      }
    }
    exports.register = function () {
      if (registered) {
        return;
      }
      registered = true;
      live.subscribe(regExp, 'wait', onWait);
      live.subscribe(regExp, 'init', onInit);
      live.subscribe(regExp, 'thumb-up', onThumbUp);
      live.subscribe(regExp, 'thumb-down', onThumbDown);
      live.subscribe(regExp, 'delete-station', onDelete);
      live.subscribe(/^spotify:player$/, 'update', onPlayerUpdate);
    };
    exports.unregister = function () {
      if (!registered) {
        return;
      }
      registered = false;
      live.unsubscribe(regExp, 'wait', onWait);
      live.unsubscribe(regExp, 'init', onInit);
      live.unsubscribe(regExp, 'thumb-up', onThumbUp);
      live.unsubscribe(regExp, 'thumb-down', onThumbDown);
      live.unsubscribe(regExp, 'delete-station', onDelete);
      live.unsubscribe(/^spotify:player$/, 'update', onPlayerUpdate);
    };
  },
  './node_modules/spotify-live-models/add/album.js': function (require, module, exports, global) {
    'use strict';
    var live = require('./node_modules/spotify-live/index.js');
    var map = require('./node_modules/mout/array/map.js');
    var forEach = require('./node_modules/mout/array/forEach.js');
    var cosmos = require('./node_modules/spotify-live-models/util/cosmos.js');
    var Collection = require('./node_modules/spotify-live-models/add/collection.js');
    var endpoints = {
        core: {
          isInCollection: 'sp://core-collection/v1/contains',
          updateIsInCollection: 'sp://core-collection/v1/items'
        },
        apollo: {
          isInCollection: 'hm://collection-web/v1/@/contains/albums',
          updateIsInCollection: 'hm://collection-web/v1/@/albums'
        },
        changes: 'hm://collection-web/v1/@/changes',
        broadcast: 'sp://messages/v1/collectionstate',
        pubsub: 'hm://collection/collection/@/json'
      };
    var onCollectionPublish = function (error, response) {
      if (error) {
        if (global.console)
          console.error(error);
        return;
      }
      cosmos.sanitizeURL(endpoints.changes, function (error, url) {
        if (error) {
          if (global.console)
            console.error(error);
          return;
        }
        response.body.items = map(response.body.items, function (item) {
          item.type = item.type.toUpperCase();
          return item;
        });
        cosmos.post({
          url: url,
          body: response.body
        }, function (error, response) {
          if (error) {
            if (global.console)
              console.error(error);
            return;
          }
          forEach(response.body.items, function (item) {
            if (item.hasOwnProperty('isInCollection') && !item.hasOwnProperty('added')) {
              item.added = item.isInCollection;
            }
          });
          live(response.body.items);
        });
      });
    };
    var albumCollection;
    var broadcastSubscription;
    var collectionSubscription;
    var regExp = exports.matches = /^spotify:album:[^:]+$/;
    var registered = false;
    exports.register = function () {
      if (registered)
        return;
      registered = true;
      albumCollection = new Collection(endpoints);
      live.subscribe(regExp, 'publish', albumCollection.onPublish);
      live.subscribe(regExp, 'wait', albumCollection.onWait);
      broadcastSubscription = cosmos.subscribe({ url: endpoints.broadcast }, Collection.onBroadcast);
      collectionSubscription = cosmos.subscribe({ url: endpoints.pubsub }, onCollectionPublish);
    };
    exports.unregister = function () {
      if (!registered)
        return;
      registered = false;
      live.unsubscribe(regExp, 'publish', albumCollection.onPublish);
      live.unsubscribe(regExp, 'wait', albumCollection.onWait);
      albumCollection = null;
      if (broadcastSubscription) {
        broadcastSubscription.cancel();
        broadcastSubscription = null;
      }
      if (collectionSubscription) {
        collectionSubscription.cancel();
        collectionSubscription = null;
      }
    };
    exports._endpoints = endpoints;
  },
  './node_modules/spotify-live-models/add/artist.js': function (require, module, exports, global) {
    'use strict';
    var profile = require('./node_modules/spotify-live-models/add/profile.js');
    var regExp = exports.matches = /^spotify:artist:/;
    var registered;
    exports.register = function () {
      if (registered)
        return;
      registered = true;
      profile.register(regExp);
    };
    exports.unregister = function () {
      if (!registered)
        return;
      registered = false;
      profile.unregister(regExp);
    };
  },
  './node_modules/spotify-live-models/add/playlist.js': function (require, module, exports, global) {
    'use strict';
    var contains = require('./node_modules/mout/array/contains.js');
    var live = require('./node_modules/spotify-live/index.js');
    var liburi = require('./node_modules/spotify-liburi/src/uri.js');
    var cosmos = require('./node_modules/spotify-live-models/util/cosmos.js');
    var bridge = require('./node_modules/spotify-live-models/util/bridge.js').request;
    var endpoints = { broadcast: 'sp://messages/v1/followstate' };
    function onPublish(model, data) {
      if ('added' in data) {
        model.update({ added: data.added });
        if (model.get('followersCount') != null) {
          model.update({ followersCount: model.get('followersCount') + (data.added ? 1 : -1) });
        }
        updateBackend(model, !!data.added, function (error) {
          if (error) {
            model.update({ added: !data.added });
            if (model.get('followersCount') != null) {
              model.update({ followersCount: model.get('followersCount') + (!data.added ? 1 : -1) });
            }
          } else {
            broadcast(model);
          }
        });
      }
    }
    function onBroadcast(error, response) {
      if (error) {
        if (global.console)
          console.error(error);
        return;
      }
      var value;
      if ('added' in response.body) {
        value = response.body.added;
      } else if ('isFollowing' in response.body) {
        value = response.body.isFollowing;
      }
      if (value !== undefined) {
        live(response.body.uri).update({ added: value });
      }
    }
    function fetchAdded(model) {
      bridge('playlist_metadata', [model.uri], function (error, data) {
        if (error) {
          if (global.console)
            console.error(error);
          return;
        }
        model.update({ added: data.subscribed });
      });
    }
    function fetchFollowersCount(model) {
      bridge('playlist_subscribers_snapshot', [
        {
          type: 'list',
          uri: model.uri
        },
        0,
        0
      ], function (error, data) {
        if (error) {
          if (global.console)
            console.error(error);
          return;
        }
        model.update({ followersCount: data.length });
      });
    }
    function getRequestData(callback) {
      live('spotify:client').query('currentUser(username)', function (error, data) {
        if (error)
          return callback(error);
        callback(null, { username: data.currentUser.username });
      });
    }
    function broadcast(model) {
      var value = model.get('added');
      cosmos.post({
        url: endpoints.broadcast,
        body: {
          uri: model.uri,
          isFollowing: value,
          added: value
        }
      });
    }
    function updateBackend(model, added, callback) {
      var message = added ? 'library_subscribe' : 'library_unsubscribe';
      var uri = model.uri;
      getRequestData(function (error, requestData) {
        if (error)
          return callback(error, requestData);
        bridge(message, [
          liburi.profileURI(requestData.username).toURI(),
          uri
        ], function (error, data) {
          if (error)
            return callback(error, data);
          callback(null, data);
        });
      });
    }
    var onWait = function (model, properties) {
      var needsAdded = contains(properties, 'added');
      var needsFollowersCount = contains(properties, 'followersCount');
      if (needsAdded) {
        var subscribed = model.get('subscribed');
        if (subscribed !== undefined) {
          model.update({ added: subscribed });
        } else {
          fetchAdded(model);
        }
      }
      if (needsFollowersCount) {
        fetchFollowersCount(model);
      }
    };
    var regExp = exports.matches = /^spotify:user:[^:]+:playlist:[^:]+$|^spotify:user:[^:]+:starred$/;
    var broadcastSubscription;
    var registered;
    exports.register = function () {
      if (registered)
        return;
      registered = true;
      live.subscribe(regExp, 'publish', onPublish);
      live.subscribe(regExp, 'wait', onWait);
      broadcastSubscription = cosmos.subscribe({ url: endpoints.broadcast }, onBroadcast);
    };
    exports.unregister = function () {
      if (!registered)
        return;
      registered = false;
      live.unsubscribe(regExp, 'publish', onPublish);
      live.unsubscribe(regExp, 'wait', onWait);
      broadcastSubscription.cancel();
      broadcastSubscription = null;
    };
  },
  './node_modules/spotify-live-models/add/track.js': function (require, module, exports, global) {
    'use strict';
    var live = require('./node_modules/spotify-live/index.js');
    var forEach = require('./node_modules/mout/array/forEach.js');
    var cosmos = require('./node_modules/spotify-live-models/util/cosmos.js');
    var Collection = require('./node_modules/spotify-live-models/add/collection.js');
    var endpoints = {
        core: {
          isInCollection: 'sp://core-collection/v1/contains',
          updateIsInCollection: 'sp://core-collection/v1/items'
        },
        apollo: {
          isInCollection: 'hm://collection-web/v1/@/contains/tracks',
          updateIsInCollection: 'hm://collection-web/v1/@/tracks'
        },
        broadcast: 'sp://messages/v1/collectionstate',
        pubsub: 'hm://collection/collection/@/json'
      };
    var onCollectionPublish = function (error, response) {
      if (error) {
        if (global.console)
          console.error(error);
        return;
      }
      var items = response.body.items;
      forEach(items, function (item) {
        if (item.type.toUpperCase() === 'TRACK') {
          var uri = 'spotify:track:' + item.identifier;
          live(uri).update({ added: !item.removed });
        }
      });
    };
    var trackCollection;
    var broadcastSubscription;
    var collectionSubscription;
    var regExp = exports.matches = /^spotify:track:[^:]+$/;
    var registered = false;
    exports.register = function () {
      if (registered)
        return;
      registered = true;
      trackCollection = new Collection(endpoints);
      live.subscribe(regExp, 'publish', trackCollection.onPublish);
      live.subscribe(regExp, 'wait', trackCollection.onWait);
      broadcastSubscription = cosmos.subscribe({ url: endpoints.broadcast }, Collection.onBroadcast);
      collectionSubscription = cosmos.subscribe({ url: endpoints.pubsub }, onCollectionPublish);
    };
    exports.unregister = function () {
      if (!registered)
        return;
      registered = false;
      live.unsubscribe(regExp, 'publish', trackCollection.onPublish);
      live.unsubscribe(regExp, 'wait', trackCollection.onWait);
      trackCollection = null;
      if (broadcastSubscription) {
        broadcastSubscription.cancel();
        broadcastSubscription = null;
      }
      if (collectionSubscription) {
        collectionSubscription.cancel();
        collectionSubscription = null;
      }
    };
    exports._endpoints = endpoints;
  },
  './node_modules/spotify-live-models/add/user.js': function (require, module, exports, global) {
    'use strict';
    var profile = require('./node_modules/spotify-live-models/add/profile.js');
    var regExp = exports.matches = /^spotify:user:[^:]+$/;
    var registered;
    exports.register = function () {
      if (registered)
        return;
      registered = true;
      profile.register(regExp);
    };
    exports.unregister = function () {
      if (!registered)
        return;
      registered = false;
      profile.unregister(regExp);
    };
  },
  './node_modules/spotify-live-models/add/local.js': function (require, module, exports, global) {
    'use strict';
    var live = require('./node_modules/spotify-live/index.js');
    var contains = require('./node_modules/mout/array/contains.js');
    var onWait = function (model, properties) {
      if (contains(properties, 'added')) {
        model.update({ added: false });
      }
    };
    var regExp = exports.matches = /^spotify:local:[^:]*:[^:]*:[^:]*:\d*$|^spotify:local:[^:]*:[^:]*$|^spotify:local:[^:]*$/;
    var registered = false;
    exports.register = function () {
      if (registered)
        return;
      registered = true;
      live.subscribe(regExp, 'wait', onWait);
    };
    exports.unregister = function () {
      if (!registered)
        return;
      registered = false;
      live.unsubscribe(regExp, 'wait', onWait);
    };
  },
  './node_modules/spotify-handlebars/helpers/compare.js': function (require, module, exports, global) {
    'use strict';
    function compare(a, b, opt_soft) {
      var options = arguments[arguments.length - 1];
      var soft = opt_soft !== options ? opt_soft : false;
      var operator = soft ? '==' : options.hash.operator || '===';
      var operators = {
          '==': function (a, b) {
            return a == b;
          },
          '===': function (a, b) {
            return a === b;
          },
          '!=': function (a, b) {
            return a != b;
          },
          '<': function (a, b) {
            return a < b;
          },
          '>': function (a, b) {
            return a > b;
          },
          '<=': function (a, b) {
            return a <= b;
          },
          '>=': function (a, b) {
            return a >= b;
          },
          'typeof': function (a, b) {
            return typeof a == b;
          }
        };
      var match = operators[operator](a, b);
      return match ? options.fn(this) : options.inverse(this);
    }
    ;
    compare.displayName = 'compare';
    module.exports = compare;
  },
  './node_modules/spotify-handlebars/helpers/duration.js': function (require, module, exports, global) {
    'use strict';
    var duration = function (ms) {
      if (isNaN(ms))
        return ms;
      var s = Math.round(ms / 1000);
      var oneMinute = 60;
      var oneHour = 60 * oneMinute;
      var hours = Math.floor(s / oneHour);
      var minutes = Math.floor(s % oneHour / oneMinute);
      var seconds = Math.round(s % oneHour % oneMinute);
      if (hours) {
        hours += ':';
        if (minutes < 10)
          minutes = '0' + minutes;
      } else {
        hours = '';
      }
      if (seconds < 10)
        seconds = '0' + seconds;
      return hours + minutes + ':' + seconds;
    };
    duration.displayName = 'duration';
    module.exports = duration;
  },
  './node_modules/spotify-handlebars/helpers/facepile.js': function (require, module, exports, global) {
    'use strict';
    var nameListTooltip = require('./node_modules/spotify-handlebars/helpers/name-list-tooltip.js');
    var facepile = function (list, totalCount, options) {
      if (!list)
        return;
      var len = list.length, thresh = Math.min(3, len), ret = '';
      for (var i = 0; i < thresh; i++) {
        var obj = list[i];
        obj.modifiers = 'media-object-link media-object-simple';
        ret += options.fn(obj);
      }
      if (totalCount > thresh) {
        ret += options.inverse({
          badgeCount: totalCount - thresh,
          badgeTooltip: nameListTooltip(list.slice(thresh), totalCount - thresh)
        });
      }
      return ret;
    };
    facepile.displayName = 'facepile';
    module.exports = facepile;
  },
  './node_modules/spotify-handlebars/helpers/href.js': function (require, module, exports, global) {
    'use strict';
    var getHTTPLink = require('./node_modules/spotify-handlebars/util/link.js');
    var isDesktop = !!global._getSpotifyModule;
    var href = function (uri) {
      if (isDesktop)
        return uri;
      return getHTTPLink(uri, 'https://play.spotify.com');
    };
    href.displayName = 'href';
    module.exports = href;
  },
  './node_modules/spotify-handlebars/helpers/humanize-duration.js': function (require, module, exports, global) {
    'use strict';
    var loc = require('./node_modules/spotify-handlebars/helpers/loc.js');
    var humanizeDuration = function (ms) {
      if (isNaN(ms))
        return ms;
      var s = Math.round(ms / 1000);
      var oneMinute = 60;
      var oneHour = 60 * oneMinute;
      var hours = Math.floor(s / oneHour);
      var minutes = Math.floor(s % oneHour / oneMinute);
      var seconds = Math.round(s % oneHour % oneMinute);
      var formattedDuration = '';
      if (hours) {
        formattedDuration += loc('HoursShort', hours, {});
      }
      if (minutes) {
        formattedDuration += ' ';
        formattedDuration += loc('MinutesShort', minutes, {});
      }
      if (!hours && !minutes || hours === 0 && minutes < 10) {
        formattedDuration += ' ';
        formattedDuration += loc('SecondsShort', seconds, {});
      }
      return formattedDuration.trim();
    };
    humanizeDuration.displayName = 'humanizeDuration';
    module.exports = humanizeDuration;
  },
  './node_modules/spotify-handlebars/helpers/list.js': function (require, module, exports, global) {
    'use strict';
    var map = require('./node_modules/mout/array/map.js');
    var Handlebars = require('./node_modules/handlebars/dist/cjs/handlebars.runtime.js')['default'];
    var lists = {};
    var list = function (array) {
      if (!array)
        return;
      var args = Array.prototype.slice.call(arguments);
      var options = args.pop();
      var listID = args[1];
      if (array === 'reset') {
        delete lists[listID];
        return '';
      }
      if (listID && lists[listID] === undefined) {
        lists[listID] = -1;
      }
      return map(array, function (item, i) {
        var data = Handlebars.createFrame(options.data || {});
        data.index = listID ? ++lists[listID] : i;
        data.number = data.index + 1;
        data.localIndex = i;
        data.localNumber = i + 1;
        return options.fn(item, { data: data });
      }).join(options.hash && options.hash.join || '');
    };
    list.displayName = 'list';
    module.exports = list;
  },
  './node_modules/spotify-handlebars/helpers/loc.js': function (require, module, exports, global) {
    'use strict';
    var mixIn = require('./node_modules/mout/object/mixIn.js');
    var slice_ = Array.prototype.slice;
    var storage = {};
    var loc = function (key) {
      var value = storage[key];
      if (!value)
        return '';
      var args = slice_.call(arguments, 1);
      var options = {};
      if (typeof args[args.length - 1] == 'object') {
        options = args.pop();
      }
      var hash = options.hash;
      return value.replace(/\{([\w-]+)\}/g, function (full, match) {
        var n = +match;
        var interpolated;
        if (isNaN(n))
          interpolated = hash[match];
        else
          interpolated = args[n];
        return interpolated != null ? interpolated : '';
      });
    };
    loc.displayName = 'loc';
    loc.register = function (object) {
      mixIn(storage, object);
      return this;
    };
    module.exports = loc;
  },
  './node_modules/spotify-handlebars/helpers/name-list-tooltip.js': function (require, module, exports, global) {
    'use strict';
    var loc = require('./node_modules/spotify-handlebars/helpers/loc.js');
    var nameListTooltip = function (users, totalCount) {
      if (totalCount === 0)
        return;
      var len = users.length;
      var textTokens = users.map(function (user) {
          return user.name;
        });
      if (totalCount - len > 0) {
        var andMoreText = loc('AndMore', totalCount - len);
        textTokens.push(andMoreText);
      }
      return textTokens.join('<br>\n').replace(/'/g, '&#39;');
    };
    nameListTooltip.displayName = 'nameListTooltip';
    module.exports = nameListTooltip;
  },
  './node_modules/spotify-handlebars/helpers/numeral.js': function (require, module, exports, global) {
    'use strict';
    var isNumber = require('./node_modules/mout/lang/isNumber.js');
    var numeralHelper = function (number, options) {
      var format = options && options.hash && options.hash.format;
      var numeral = numeralHelper._numeral;
      return isNumber(number) ? numeral(number).format(format) : number;
    };
    try {
      numeralHelper._numeral = require('./node_modules/spotify-handlebars/node_modules/spotify-numeral/index.js');
    } catch (error) {
    }
    numeralHelper.displayName = 'numeral';
    module.exports = numeralHelper;
  },
  './node_modules/spotify-handlebars/helpers/share.js': function (require, module, exports, global) {
    'use strict';
    var getHTTPLink = require('./node_modules/spotify-handlebars/util/link.js');
    var share = function (uri) {
      return getHTTPLink(uri, 'https://open.spotify.com');
    };
    share.displayName = 'share';
    module.exports = share;
  },
  './node_modules/spotify-handlebars/helpers/slice.js': function (require, module, exports, global) {
    'use strict';
    var kindOf = require('./node_modules/mout/lang/kindOf.js');
    var map = require('./node_modules/mout/array/map.js');
    var forEach = require('./node_modules/mout/array/forEach.js');
    var Handlebars = require('./node_modules/handlebars/dist/cjs/handlebars.runtime.js')['default'];
    var slice_ = Array.prototype.slice;
    var slice = function (array) {
      if (!array)
        return;
      var sep, begin, end, options;
      forEach(slice_.call(arguments, 1), function (arg) {
        switch (kindOf(arg)) {
        case 'String':
          sep = arg;
          break;
        case 'Number':
          if (begin == null)
            begin = arg;
          else if (end == null)
            end = arg;
          break;
        case 'Object':
          options = arg;
          break;
        }
      });
      if (begin != null)
        array = array.slice(begin, end != null ? end : array.length);
      return map(array, function (item) {
        var data = Handlebars.createFrame(options.data || {});
        return options.fn(item, { data: data });
      }).join(sep || '');
    };
    slice.displayName = 'slice';
    module.exports = slice;
  },
  './node_modules/spotify-handlebars/helpers/type.js': function (require, module, exports, global) {
    'use strict';
    var getType = require('./node_modules/spotify-handlebars/util/type.js');
    var type = function (uri) {
      if (arguments.length <= 2) {
        return getType(uri);
      }
      var context = arguments[arguments.length - 1], success = false, type = getType(uri);
      for (var i = 1; i < arguments.length - 1; i++) {
        if (type == arguments[i]) {
          success = true;
          break;
        }
      }
      return success ? context.fn(this) : context.inverse(this);
    };
    type.displayName = 'type';
    module.exports = type;
  },
  './node_modules/spotify-handlebars/helpers/user-reaction.js': function (require, module, exports, global) {
    'use strict';
    var loc = require('./node_modules/spotify-handlebars/helpers/loc.js');
    var userReaction = function (users, totalCount, reactionType) {
      if (!totalCount)
        return '';
      var key = reactionType + 'Reaction' + (totalCount > 1 ? 'Multi' : 'Single');
      if (totalCount > 1) {
        return loc(key, totalCount);
      } else {
        if (!users.length)
          return '';
        var firstListener = users[0].name;
        return loc(key, firstListener);
      }
    };
    userReaction.displayName = 'userReaction';
    module.exports = userReaction;
  },
  './node_modules/spotify-events/dragndrop/index.js': function (require, module, exports, global) {
    'use strict';
    var dragDataModule = require('./node_modules/spotify-events/dragndrop/dragdata.js');
    var dragImageModule = require('./node_modules/spotify-events/dragndrop/dragimage.js');
    var targetModule = require('./node_modules/spotify-events/dragndrop/target.js');
    var listModule = require('./node_modules/spotify-events/dragndrop/list.js');
    var sortlistModule = require('./node_modules/spotify-events/dragndrop/custom/sortlist.js');
    var rootlistModule = require('./node_modules/spotify-events/dragndrop/custom/rootlist.js');
    function attach() {
      dragDataModule.attach();
      dragImageModule.attach();
      targetModule.attach();
      listModule.attach();
      sortlistModule.attach();
      rootlistModule.attach();
    }
    function detach() {
      dragDataModule.detach();
      dragImageModule.detach();
      targetModule.detach();
      listModule.detach();
      sortlistModule.detach();
      rootlistModule.detach();
    }
    exports.attach = attach;
    exports.detach = detach;
    exports.update = function () {
    };
  },
  './node_modules/spotify-events/selection/index.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var live = require('./node_modules/spotify-live/index.js');
    var map = require('./node_modules/mout/array/map.js');
    var getOriginUri = require('./node_modules/spotify-events/util/get-origin-uri.js');
    var center = require('./node_modules/spotify-events/center.js');
    var controller = require('./node_modules/spotify-events/selection/controller.js');
    var containers = require('./node_modules/spotify-events/selection/containers.js');
    var model = require('./node_modules/spotify-events/selection/model.js');
    var rows = require('./node_modules/spotify-events/selection/rows.js');
    var positions = require('./node_modules/spotify-events/selection/positions.js');
    var Position = require('./node_modules/spotify-events/util/Position.js');
    var appUtil = require('./node_modules/spotify-events/util/app.js');
    var cosmos = require('./node_modules/spotify-events/util/cosmos.js');
    var controlMessageSubscription;
    exports.attach = function () {
      var doc = $(document);
      doc.on('mousedown', controller.handleMouseDown);
      doc.on('mousemove', controller.handleMouseMove);
      doc.on('mouseup', controller.handleMouseUp);
      doc.on('dragend', controller.handleDragEnd);
      doc.on('keydown', controller.handleKeyDown);
      doc.on('focus', controller.handleFocus, true);
      center.on('scroll-show-after', controller.handleScrollShowAfter);
      center.on('selection-set-hidden', controller.handleSetHidden);
      center.on('list-swap', controller.handleListSwap);
      controlMessageSubscription = cosmos.subscribe({ url: 'sp://messages/v1/container/control' }, function (error, response) {
        if (error)
          throw error;
        var data = response.body;
        if (data && appUtil.isActiveAndFocused()) {
          if (data.type === 'select_all') {
            controller.handleSelectAll();
          } else if (data.type === 'copy') {
            controller.handleCopy();
          } else if (data.type === 'cut') {
            controller.handleCut();
          }
        }
      });
    };
    exports.detach = function () {
      var doc = $(document);
      doc.off('mousedown', controller.handleMouseDown);
      doc.off('mousemove', controller.handleMouseMove);
      doc.off('mouseup', controller.handleMouseUp);
      doc.off('dragend', controller.handleDragEnd);
      doc.off('keydown', controller.handleKeyDown);
      doc.off('focus', controller.handleFocus, true);
      center.off('scroll-show-after', controller.handleScrollShowAfter);
      center.off('selection-set-hidden', controller.handleSetHidden);
      center.off('list-swap', controller.handleListSwap);
      if (controlMessageSubscription) {
        controlMessageSubscription.cancel();
        controlMessageSubscription = null;
      }
    };
    exports.update = function () {
      containers.update();
      controller.updateListListeners();
    };
    exports.add = function (listUri, index) {
      controller.handleAddByUri(listUri, index);
    };
    exports.hasHoles = function () {
      return model.hasHoles();
    };
    exports.isNodeSelected = function (node) {
      node = 'innerHTML' in node ? node : node[0];
      if (!node)
        return false;
      var position = positions.getFromNode(node);
      if (!position)
        return false;
      return model.isSelected(position);
    };
    exports.reset = function () {
      controller.resetListListeners();
      model.reset();
      rows.update();
      containers.reset();
    };
    exports.clear = function () {
      model.clear();
      rows.update();
    };
    exports.setOrigin = function (containerIndex, index) {
      model.setOrigin(new Position(containerIndex, index));
    };
    exports.setFocus = function (containerIndex, index) {
      model.setFocus(new Position(containerIndex, index));
    };
    exports.getOrigin = function () {
      var origin = model.getOrigin();
      if (!origin)
        return null;
      return {
        containerIndex: origin.containerIndex,
        index: origin.index
      };
    };
    exports.getFocus = function () {
      var focus = model.getFocus();
      if (!focus)
        return null;
      return {
        containerIndex: focus.containerIndex,
        index: focus.index
      };
    };
    exports.getIndicesPerList = function () {
      var selections = model.selections;
      var indicesPerList = [];
      for (var i = 0; i < selections.length; i++) {
        var containerSelection = selections[i];
        if (containerSelection && Object.keys(containerSelection).length) {
          var indices = model.getIndicesForContainer(i);
          if (!indices)
            continue;
          var uri = containers.getUri(i);
          if (!uri)
            continue;
          var indicesWithHidden = model.getIndicesWithHiddenForContainer(i);
          var context = {
              containerIndex: i,
              uri: uri,
              indices: indices,
              indicesWithHidden: indicesWithHidden
            };
          var originUri = getOriginUri(uri);
          if (originUri) {
            var wrappedList = live(uri).get('rows');
            var originList = live(originUri).get('rows');
            var originIndices;
            if (wrappedList && originList) {
              originIndices = map(indices, function (index) {
                var key = wrappedList.keys[index];
                return originList.indexOf(key);
              });
            }
            context.origin = {
              uri: originUri,
              indices: originIndices || []
            };
          }
          indicesPerList.push(context);
        }
      }
      return indicesPerList;
    };
    exports.getIndicesGlobal = function () {
      var selections = model.selections;
      var elements = containers.elements;
      var indices = [];
      var selectionContainers = [];
      if (elements.length === 0) {
        return null;
      }
      var firstContainer = $(elements[0]);
      var contextUriContainer = firstContainer.matches('[data-context]') ? firstContainer : firstContainer.parent('[data-context]');
      var contextUri = contextUriContainer && contextUriContainer.data('uri');
      if (!contextUri)
        return null;
      for (var container = 0; container < selections.length; container++) {
        var containerSelection = selections[container];
        var list = containers.getLiveList(container);
        if (list && containerSelection) {
          var orderedSelectedKeys = list.keys.filter(function (key) {
              return !!containerSelection[key];
            });
          for (var i = 0, l = orderedSelectedKeys.length; i < l; i++) {
            var j = list.keys.indexOf(orderedSelectedKeys[i]);
            indices.push(positions.getGlobalIndexFromPosition(new Position(container, j)));
            selectionContainers.push($(elements[container]));
          }
        }
      }
      return {
        uri: contextUri,
        indices: indices,
        containers: selectionContainers
      };
    };
    exports.getUris = function () {
      return controller.handleGetUris();
    };
    exports.getNodes = function () {
      return rows.getSelectedRows();
    };
  },
  './node_modules/api/arb.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/arb.loc/strings/playlist.lang', {
      'Starred': 'Starred',
      'Toplist': 'Top tracks'
    });
  },
  './node_modules/api/de.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/de.loc/strings/playlist.lang', {
      'Starred': 'Starred',
      'Toplist': 'Top-Titel'
    });
  },
  './node_modules/api/el.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/el.loc/strings/playlist.lang', {
      'Starred': '\u0391\u03B3\u03B1\u03C0\u03B7\u03BC\u03AD\u03BD\u03B1',
      'Toplist': '\u039A\u03BF\u03C1\u03C5\u03C6\u03B1\u03AF\u03B1 \u03C4\u03C1\u03B1\u03B3\u03BF\u03CD\u03B4\u03B9\u03B1'
    });
  },
  './node_modules/api/es.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/es.loc/strings/playlist.lang', {
      'Starred': 'Favoritos',
      'Toplist': 'Canciones m\xE1s escuchadas'
    });
  },
  './node_modules/api/en.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/en.loc/strings/playlist.lang', {
      'Starred': 'Starred',
      'Toplist': 'Top tracks'
    });
  },
  './node_modules/api/es-la.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/es-la.loc/strings/playlist.lang', {
      'Starred': 'Seleccionadas',
      'Toplist': 'Canciones favoritas'
    });
  },
  './node_modules/api/es-419.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/es-419.loc/strings/playlist.lang', {
      'Starred': 'Seleccionadas',
      'Toplist': 'Canciones favoritas'
    });
  },
  './node_modules/api/fi.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/fi.loc/strings/playlist.lang', {
      'Starred': 'T\xE4hdell\xE4 merkityt',
      'Toplist': 'Soitetuimmat kappaleet'
    });
  },
  './node_modules/api/fr.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/fr.loc/strings/playlist.lang', {
      'Starred': 'S\xE9lection',
      'Toplist': 'Top titres'
    });
  },
  './node_modules/api/fr-ca.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/fr-ca.loc/strings/playlist.lang', {
      'Starred': 'S\xE9lection',
      'Toplist': 'Meilleures pistes'
    });
  },
  './node_modules/api/hu.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/hu.loc/strings/playlist.lang', {
      'Starred': 'Kedvenc',
      'Toplist': 'Toplist\xE1s sz\xE1mok'
    });
  },
  './node_modules/api/id.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/id.loc/strings/playlist.lang', {
      'Starred': 'Diberi bintang',
      'Toplist': 'Lagu teratas'
    });
  },
  './node_modules/api/it.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/it.loc/strings/playlist.lang', {
      'Starred': 'Preferiti',
      'Toplist': 'Brani top'
    });
  },
  './node_modules/api/ja.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/ja.loc/strings/playlist.lang', {
      'Starred': '\u30B9\u30BF\u30FC',
      'Toplist': '\u30C8\u30C3\u30D7\u66F2'
    });
  },
  './node_modules/api/nl.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/nl.loc/strings/playlist.lang', {
      'Starred': 'Favorieten',
      'Toplist': 'Topnummers'
    });
  },
  './node_modules/api/pl.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/pl.loc/strings/playlist.lang', {
      'Starred': 'Oznaczone gwiazdk\u0105',
      'Toplist': 'Najlepsze utwory'
    });
  },
  './node_modules/api/pt-br.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/pt-br.loc/strings/playlist.lang', {
      'Starred': 'Favoritos',
      'Toplist': 'As mais tocadas'
    });
  },
  './node_modules/api/ro.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/ro.loc/strings/playlist.lang', {
      'Starred': 'Marcat cu stea',
      'Toplist': 'Melodii de top'
    });
  },
  './node_modules/api/ru.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/ru.loc/strings/playlist.lang', {
      'Starred': '\u0418\u0437\u0431\u0440\u0430\u043D\u043D\u043E\u0435',
      'Toplist': '\u041B\u0443\u0447\u0448\u0438\u0435 \u0442\u0440\u0435\u043A\u0438'
    });
  },
  './node_modules/api/sv.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/sv.loc/strings/playlist.lang', {
      'Starred': 'Favoriter',
      'Toplist': 'Popul\xE4ra sp\xE5r'
    });
  },
  './node_modules/api/th.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/th.loc/strings/playlist.lang', {
      'Starred': '\u0E43\u0E2B\u0E49\u0E04\u0E30\u0E41\u0E19\u0E19\u0E41\u0E25\u0E49\u0E27',
      'Toplist': '\u0E41\u0E17\u0E23\u0E47\u0E01\u0E2D\u0E31\u0E19\u0E14\u0E31\u0E1A\u0E15\u0E49\u0E19\u0E46'
    });
  },
  './node_modules/api/tr.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/tr.loc/strings/playlist.lang', {
      'Starred': 'Y\u0131ld\u0131zl\u0131lar',
      'Toplist': 'En \xE7ok dinlenen par\xE7alar'
    });
  },
  './node_modules/api/zh-hant.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/zh-hant.loc/strings/playlist.lang', {
      'Starred': '\u5DF2\u661F\u8A55',
      'Toplist': '\u7576\u7D05\u6B4C\u66F2'
    });
  },
  './node_modules/api/zsm.loc/strings/playlist.lang': function (require, module, exports, global) {
    var LangModule = require('./node_modules/quickstart-spotify/spotify-api.js').LangModule;
    module.exports = new LangModule('./node_modules/api/zsm.loc/strings/playlist.lang', {
      'Starred': 'Dibintangkan',
      'Toplist': 'Lagu paling popular'
    });
  },
  './node_modules/spotify-cosmos-api/node_modules/cosmos-common-js/index.js': function (require, module, exports, global) {
    'use strict';
    exports.message = require('./node_modules/spotify-cosmos-api/node_modules/cosmos-common-js/src/message.js');
    exports.request = require('./node_modules/spotify-cosmos-api/node_modules/cosmos-common-js/src/request.js');
    exports.response = require('./node_modules/spotify-cosmos-api/node_modules/cosmos-common-js/src/response.js');
    exports.playerstate = require('./node_modules/spotify-cosmos-api/node_modules/cosmos-common-js/src/player_state.js');
  },
  './node_modules/handlebars/dist/cjs/handlebars.runtime.js': function (require, module, exports, global) {
    'use strict';
    var base = require('./node_modules/handlebars/dist/cjs/handlebars/base.js');
    var SafeString = require('./node_modules/handlebars/dist/cjs/handlebars/safe-string.js')['default'];
    var Exception = require('./node_modules/handlebars/dist/cjs/handlebars/exception.js')['default'];
    var Utils = require('./node_modules/handlebars/dist/cjs/handlebars/utils.js');
    var runtime = require('./node_modules/handlebars/dist/cjs/handlebars/runtime.js');
    var create = function () {
      var hb = new base.HandlebarsEnvironment();
      Utils.extend(hb, base);
      hb.SafeString = SafeString;
      hb.Exception = Exception;
      hb.Utils = Utils;
      hb.VM = runtime;
      hb.template = function (spec) {
        return runtime.template(spec, hb);
      };
      return hb;
    };
    var Handlebars = create();
    Handlebars.create = create;
    exports['default'] = Handlebars;
  },
  './node_modules/mout/array/indexOf.js': function (require, module, exports, global) {
    function indexOf(arr, item, fromIndex) {
      fromIndex = fromIndex || 0;
      if (arr == null) {
        return -1;
      }
      var len = arr.length, i = fromIndex < 0 ? len + fromIndex : fromIndex;
      while (i < len) {
        if (arr[i] === item) {
          return i;
        }
        i++;
      }
      return -1;
    }
    module.exports = indexOf;
  },
  './node_modules/spotify-events/center.js': function (require, module, exports, global) {
    'use strict';
    var Emitter = require('./node_modules/prime/emitter.js');
    module.exports = new Emitter();
  },
  './node_modules/mout/array/find.js': function (require, module, exports, global) {
    var findIndex = require('./node_modules/mout/array/findIndex.js');
    function find(arr, iterator, thisObj) {
      var idx = findIndex(arr, iterator, thisObj);
      return idx >= 0 ? arr[idx] : void 0;
    }
    module.exports = find;
  },
  './node_modules/mout/object/merge.js': function (require, module, exports, global) {
    var hasOwn = require('./node_modules/mout/object/hasOwn.js');
    var deepClone = require('./node_modules/mout/lang/deepClone.js');
    var isObject = require('./node_modules/mout/lang/isObject.js');
    function merge() {
      var i = 1, key, val, obj, target;
      target = deepClone(arguments[0]);
      while (obj = arguments[i++]) {
        for (key in obj) {
          if (!hasOwn(obj, key)) {
            continue;
          }
          val = obj[key];
          if (isObject(val) && isObject(target[key])) {
            target[key] = merge(target[key], val);
          } else {
            target[key] = deepClone(val);
          }
        }
      }
      return target;
    }
    module.exports = merge;
  },
  './node_modules/stacktrace-parser/lib/stacktrace-parser.js': function (require, module, exports, global) {
    var UNKNOWN_FUNCTION = '<unknown>';
    var StackTraceParser = {
        parse: function (stackString) {
          var chrome = /^\s*at (?:(?:(?:Anonymous function)?|((?:\[object object\])?\S+(?: \[as \S+\])?)) )?\(?((?:file|http|https):.*?):(\d+)(?::(\d+))?\)?\s*$/i, gecko = /^(?:\s*(\S*)(?:\((.*?)\))?@)?((?:file|http|https).*?):(\d+)(?::(\d+))?\s*$/i, node = /^\s*at (?:((?:\[object object\])?\S+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i, lines = stackString.split('\n'), stack = [], parts, element;
          for (var i = 0, j = lines.length; i < j; ++i) {
            if (parts = gecko.exec(lines[i])) {
              element = {
                'file': parts[3],
                'methodName': parts[1] || UNKNOWN_FUNCTION,
                'lineNumber': +parts[4],
                'column': parts[5] ? +parts[5] : null
              };
            } else if (parts = chrome.exec(lines[i])) {
              element = {
                'file': parts[2],
                'methodName': parts[1] || UNKNOWN_FUNCTION,
                'lineNumber': +parts[3],
                'column': parts[4] ? +parts[4] : null
              };
            } else if (parts = node.exec(lines[i])) {
              element = {
                'file': parts[2],
                'methodName': parts[1] || UNKNOWN_FUNCTION,
                'lineNumber': +parts[3],
                'column': parts[4] ? +parts[4] : null
              };
            } else {
              continue;
            }
            stack.push(element);
          }
          return stack;
        }
      };
    module.exports = StackTraceParser;
  },
  './node_modules/spotify-cosmos-api/env/bootstrap.js': function (require, module, exports, global) {
    'use strict';
    var ClientRequest = require('./node_modules/spotify-cosmos-api/env/request.js').ClientRequest;
    var resolverUID = 0;
    function Resolver() {
      if (!(this instanceof Resolver))
        return new Resolver();
      this._id = resolverUID++;
      this._requestID = 0;
      this._handlers = {};
    }
    exports.Resolver = Resolver;
    Resolver.prototype._addHandler = function (requestID, handler) {
      this._handlers[requestID] = handler;
      return this;
    };
    Resolver.prototype._removeHandler = function (requestID) {
      this._handlers[requestID] = null;
      return this;
    };
    Resolver.prototype._sendRequest = function (requestID, data) {
      throw new Error('Resolver _sendRequest not implemented.');
    };
    Resolver.prototype._handleResponse = function (response) {
      throw new Error('Resolver _handleResponse not implemented.');
    };
    Resolver.prototype._dispatchResponse = function (requestID, requestType, data) {
      var handler = this._handlers[requestID];
      if (!handler)
        return;
      handler._handleResponse(requestType, data);
    };
    Resolver.prototype._resolve = function (data, onsuccess, onerror) {
      if (!data || !onsuccess || !onerror || typeof onsuccess != 'function' || typeof onerror != 'function')
        throw new TypeError('Invalid argument length for `resolve`.');
      var requestID = ++this._requestID;
      var request = new ClientRequest(this, requestID, data, onsuccess, onerror);
      this._addHandler(requestID, request);
      request.onClose = this._removeHandler.bind(this);
      request.open();
      return request;
    };
    Resolver.prototype.resolve = function (data, onsuccess, onerror) {
      throw new Error('Resolver resolve not implemented.');
    };
    Resolver.prototype.subscribe = function (data, onsuccess, onerror) {
      throw new Error('Resolver subscribe not implemented.');
    };
  },
  './node_modules/spotify-live-models/sorting/poster.js': function (require, module, exports, global) {
    module.exports = function poster(worker, chunks, index, id) {
      'use strict';
      var data = {
          items: chunks[index],
          id: id
        };
      if (index === chunks.length - 1) {
        data.last = true;
      }
      worker.postMessage(data);
      if (!data.last) {
        poster(worker, chunks, index + 1, id);
      }
    };
  },
  './node_modules/spotify-live-models/sorting/chunker.js': function (require, module, exports, global) {
    module.exports = function (list, opt_size) {
      function split(array, segments) {
        segments = segments || 2;
        var results = [];
        if (array == null) {
          return results;
        }
        var minLength = Math.floor(array.length / segments);
        var remainder = array.length % segments;
        var i = 0;
        var len = array.length;
        var segmentIndex = 0;
        var segmentLength;
        while (i < len) {
          segmentLength = minLength;
          if (segmentIndex < remainder) {
            segmentLength++;
          }
          results.push(array.slice(i, i + segmentLength));
          segmentIndex++;
          i += segmentLength;
        }
        return results;
      }
      var size = opt_size || 50;
      var chunkCount = Math.ceil(list.length / size);
      var chunks = split(list, chunkCount);
      return chunks;
    };
  },
  './node_modules/spotify-live-models/sorting/sorter.js': function (require, module, exports, global) {
    module.exports = function (data) {
      'use strict';
      data.sort(function (a, b) {
        var length = a.data.length;
        for (var i = 0; i < length; i++) {
          var aValue = a.data[i];
          var bValue = b.data[i];
          var aNumber = parseInt(aValue, 10);
          var bNumber = parseInt(bValue, 10);
          var aStartsWithNumber = !isNaN(aNumber);
          var bStartsWithNumber = !isNaN(bNumber);
          if (aStartsWithNumber && bStartsWithNumber) {
            if (aNumber < bNumber)
              return -1;
            if (aNumber > bNumber)
              return 1;
          } else if (aStartsWithNumber) {
            return -1;
          } else if (bStartsWithNumber) {
            return 1;
          }
          if (aValue.localeCompare) {
            var value = aValue.localeCompare(bValue);
            if (value !== 0)
              return value;
          } else {
            if (aValue < bValue)
              return -1;
            if (aValue > bValue)
              return 1;
          }
        }
      });
      return data;
    };
  },
  './node_modules/spotify-live-models/sorting/sortworker.js': function (require, module, exports, global) {
    module.exports = function (sort, chunk, post, opt_worker) {
      'use strict';
      var worker = opt_worker || self;
      var itemsToSort = [];
      var id = null;
      worker.addEventListener('message', function (event) {
        if (event.data.reset) {
          itemsToSort.length = 0;
          id = event.data.newId;
          worker.postMessage({
            reset: true,
            newId: id
          });
          return;
        }
        if (id === null) {
          id = event.data.id;
        }
        if (id !== event.data.id) {
          return;
        }
        itemsToSort = itemsToSort.concat(event.data.items);
        if (event.data.last) {
          var sortedItems = sort(itemsToSort);
          var chunks = chunk(sortedItems);
          post(worker, chunks, 0, id);
        }
      }, false);
    };
  },
  './node_modules/spotify-events/util/get-origin-uri.js': function (require, module, exports, global) {
    var sortUriUtils = require('./node_modules/spotify-live-sort-uri/index.js');
    var filterUriUtils = require('./node_modules/spotify-live-filter-uri/index.js');
    module.exports = function getOriginUri(uri) {
      var originUri = uri;
      originUri = sortUriUtils.getOriginUri(originUri) || originUri;
      originUri = filterUriUtils.getOriginUri(originUri) || originUri;
      return uri === originUri ? null : originUri;
    };
  },
  './node_modules/spotify-events/util/throttle.js': function (require, module, exports, global) {
    'use strict';
    var defer = require('./node_modules/prime/defer.js');
    function throttle(fn, opt_ctx) {
      var queued = false;
      var args;
      return function () {
        args = arguments;
        if (!queued) {
          queued = true;
          defer.frame(function () {
            queued = false;
            fn.apply(opt_ctx, args);
          });
        }
      };
    }
    module.exports = throttle;
  },
  './node_modules/spotify-events/util/cosmos.js': function (require, module, exports, global) {
    'use strict';
    var live = require('./node_modules/spotify-live/index.js');
    var cosmos = require('./node_modules/spotify-cosmos-api/index.js');
    var liburi = require('./node_modules/spotify-liburi/src/uri.js');
    var ASAP = live.ASAP;
    function DELETE(options, opt_callback) {
      options.method = exports.cosmos.Action.DELETE;
      return request(options, opt_callback);
    }
    function GET(options, opt_callback) {
      options.method = exports.cosmos.Action.GET;
      return request(options, opt_callback);
    }
    function SUB(options, opt_callback) {
      options.method = exports.cosmos.Action.SUB;
      return request(options, opt_callback);
    }
    function POST(options, opt_callback) {
      options.method = exports.cosmos.Action.POST;
      return request(options, opt_callback);
    }
    function PUT(options, opt_callback) {
      options.method = exports.cosmos.Action.PUT;
      return request(options, opt_callback);
    }
    function HEAD(options, opt_callback) {
      options.method = exports.cosmos.Action.HEAD;
      return request(options, opt_callback);
    }
    function request(options, opt_callback) {
      var method = options.method;
      delete options.method;
      var subscription, canceled;
      sanitizeURL(options.url, function (error, url) {
        if (error)
          return opt_callback && opt_callback(error);
        if (canceled)
          return;
        var request = new exports.cosmos.Request(method || exports.cosmos.Action.GET, url, options.headers, options.body);
        subscription = exports.cosmos.resolver.resolve(request, function (error, response) {
          if (!opt_callback)
            return;
          if (error)
            return opt_callback(error);
          try {
            opt_callback(null, {
              body: JSON.parse(response.getBody() || '{}'),
              headers: response.getHeaders(),
              status: response.getStatusCode()
            });
          } catch (parseError) {
            parseError.response = response;
            opt_callback(parseError);
          }
        });
      });
      return {
        cancel: function () {
          if (subscription && subscription.cancel) {
            subscription.cancel();
            subscription = null;
          } else if (!canceled) {
            canceled = true;
          }
          return null;
        }
      };
    }
    function sanitizeURL(url, callback) {
      if (url.indexOf('@') > -1) {
        live('spotify:client').query('currentUser(username)', function (error, data) {
          if (error)
            return callback(error);
          callback(null, url.replace('@', liburi.getCanonicalUsername(data.currentUser.username)));
        }, ASAP);
      } else {
        callback(null, url);
      }
    }
    exports.request = request;
    exports.get = GET;
    exports.post = POST;
    exports.subscribe = SUB;
    exports.delete = DELETE;
    exports.put = PUT;
    exports.head = HEAD;
    exports.cosmos = cosmos;
    exports.sanitizeURL = sanitizeURL;
  },
  './node_modules/spotify-events/util/app.js': function (require, module, exports, global) {
    var live = require('./node_modules/spotify-live/index.js');
    function checkIfActive() {
      return live('spotify:application').get('active') || false;
    }
    function checkIfFocused() {
      var topActiveElement = window.top.document.activeElement;
      var activeWindow = topActiveElement && topActiveElement.contentWindow;
      if (activeWindow) {
        return activeWindow === window;
      }
      if (window.top === window) {
        return true;
      }
      return false;
    }
    ;
    exports.isActive = function () {
      return checkIfActive();
    };
    exports.isActiveAndFocused = function () {
      return checkIfActive() && checkIfFocused();
    };
  },
  './node_modules/spotify-events/util/ListManager.js': function (require, module, exports, global) {
    'use strict';
    var prime = require('./node_modules/prime/index.js');
    var Emitter = require('./node_modules/prime/emitter.js');
    var Range = require('./node_modules/spotify-range2/index.js');
    var forEach = require('./node_modules/mout/array/forEach.js');
    var flow = require('./node_modules/finally/index.js');
    var zen = require('./node_modules/spotify-events/node_modules/elements/zen.js');
    var SYNC = Emitter.EMIT_SYNC;
    var splice_ = Array.prototype.splice;
    var splice = function (array, index, howMany, items) {
      return splice_.apply(array, [
        index,
        howMany
      ].concat(items || []));
    };
    var insertBefore = function (parent, ref, node) {
      if (ref)
        parent.insertBefore(node, ref);
      else
        parent.appendChild(node);
    };
    var ListManager = prime({
        mixin: Emitter,
        constructor: function (container, params) {
          this.container = container;
          this.height = params.height || 0;
          this.length = params.length || 0;
          this.tag = params.tag || 'li';
          this.request = params.request;
          this.debug = params.debug;
          this.reset();
        },
        reset: function (opt_length, opt_hiddenIndices) {
          this.hiddenIndices = [];
          this.hiddenRanges = [];
          this.spacerNodes = [];
          this.spacerRanges = [];
          if (opt_length != null)
            this.length = opt_length;
          var full = new Range(0, this.length);
          var node = this._createEmptyNode(full);
          var container = this.container;
          if (container.children.length) {
            container.innerHTML = '';
          }
          container.appendChild(node);
          this.index = [];
          this.emit('index-change', this.index, SYNC);
          this.nodes = [];
          this.pending = [];
          this.dom = [full];
          this.cache = {};
          this._setHiddenIndices(opt_hiddenIndices || []);
        },
        resetFrom: function (fromIndex, opt_length, opt_hiddenIndices) {
          if (opt_length != null) {
            this.length = opt_length;
          }
          if (fromIndex >= this.length)
            return;
          var newSpacers = this._cutOffSpacerRanges(fromIndex);
          var newDOM = this._cutOffDOMRanges(fromIndex);
          var newIndex = this._cutOffRanges(this.index, fromIndex);
          var newNodes = this._cutOffRanges(this.nodes, fromIndex);
          var newPending = this._cutOffRanges(this.pending, fromIndex);
          var newCache = this._cutOffCache(fromIndex);
          this.spacerRanges = newSpacers.ranges;
          this.spacerNodes = newSpacers.nodes;
          this.dom = newDOM;
          this.index = newIndex;
          this.nodes = newNodes;
          this.pending = newPending;
          this.cache = newCache;
          if (newSpacers.restNode) {
            this.container.appendChild(newSpacers.restNode);
          }
          this._setHiddenIndices(opt_hiddenIndices || []);
          this.emit('index-change', this.index, SYNC);
        },
        _cutOffSpacerRanges: function (fromIndex) {
          var spacerRanges = this.spacerRanges;
          var spacerNodes = this.spacerNodes;
          var newSpacerRanges = [];
          var newSpacerNodes = [];
          for (var i = 0, l = spacerRanges.length; i < l; i++) {
            var spacerRange = spacerRanges[i];
            var spacerNode = spacerNodes[i];
            if (spacerRange.start < fromIndex && spacerRange.end >= fromIndex) {
              spacerRange.update(spacerRange.start, fromIndex);
            } else if (spacerRange.start >= fromIndex) {
              continue;
            }
            newSpacerRanges.push(spacerRange);
            newSpacerNodes.push(spacerNode);
          }
          var restNode = null;
          var lastRange = newSpacerRanges[newSpacerRanges.length - 1];
          if (lastRange && lastRange.end === fromIndex) {
            lastRange.update(lastRange.start, this.length);
          } else {
            var restRange = new Range(fromIndex, this.length);
            restNode = this._createEmptyNode(restRange);
            newSpacerRanges.push(restRange);
            newSpacerNodes.push(restNode);
          }
          return {
            ranges: newSpacerRanges,
            nodes: newSpacerNodes,
            restNode: restNode
          };
        },
        _cutOffDOMRanges: function (fromIndex) {
          var dom = this.dom;
          var container = this.container;
          var children = Array.prototype.slice.call(container.children);
          var newDOM = [];
          for (var i = 0, l = dom.length; i < l; i++) {
            var domRange = dom[i];
            var isRow = domRange.row;
            if (!isRow && domRange.start < fromIndex && domRange.end >= fromIndex) {
              domRange.update(domRange.start, fromIndex);
            } else if (domRange.start >= fromIndex) {
              container.removeChild(children[i]);
              continue;
            }
            newDOM.push(domRange);
          }
          var lastRange = newDOM[newDOM.length - 1];
          if (lastRange && !lastRange.row) {
            lastRange.update(lastRange.start, this.length);
          } else {
            newDOM.push(new Range(fromIndex, this.length));
          }
          return newDOM;
        },
        _cutOffRanges: function (ranges, fromIndex) {
          var newRanges = [];
          for (var i = 0, l = ranges.length; i < l; i++) {
            var range = ranges[i];
            if (range.start < fromIndex && range.end >= fromIndex) {
              range.update(range.start, fromIndex);
            } else if (range.start >= fromIndex) {
              continue;
            }
            newRanges.push(range);
          }
          return newRanges;
        },
        _cutOffCache: function (fromIndex) {
          var cache = this.cache;
          var newCache = {};
          for (var i = 0; i < fromIndex; i++) {
            if (i in cache) {
              newCache[i] = cache[i];
            }
          }
          return newCache;
        },
        _setHiddenIndices: function (hiddenIndices) {
          this.hiddenIndices = hiddenIndices.slice();
          this.hiddenIndices.sort(function (a, b) {
            return a - b;
          });
          var indices = this.hiddenIndices;
          var indexMap = {};
          for (var i = 0, l = indices.length; i < l; i++) {
            indexMap[indices[i]] = true;
          }
          this.hiddenIndicesMap = indexMap;
          this.hiddenRanges = Range.fromIndices(this.hiddenIndices);
          this._updateSpacers();
        },
        _updateSpacers: function () {
          var spacerNodes = this.spacerNodes.slice();
          var spacerRanges = this.spacerRanges.slice();
          for (var i = 0, l = spacerNodes.length; i < l; i++) {
            this._updateEmptyNode(spacerNodes[i], spacerRanges[i]);
          }
        },
        _createEmptyNode: function (range) {
          var node = zen(this.tag)[0];
          var spacerRanges = this.spacerRanges;
          var spacerNodes = this.spacerNodes;
          var index = 0;
          for (var i = 0, l = spacerRanges.length; i < l; i++) {
            if (spacerRanges[i].start > range.start) {
              index = i;
              break;
            }
          }
          spacerRanges.splice(index, 0, range);
          spacerNodes.splice(index, 0, node);
          this._updateEmptyNode(node, range);
          return node;
        },
        _updateEmptyNode: function (node, range) {
          var length = this._getVisibleLength(range);
          var spacerRanges = this.spacerRanges;
          var spacerNodes = this.spacerNodes;
          if (length > 0) {
            node.style.height = length * this.height + 'px';
            var spacerIndex = spacerNodes.indexOf(node);
            if (spacerIndex > -1) {
              spacerRanges.splice(spacerIndex, 1);
              spacerNodes.splice(spacerIndex, 1);
              var newSpacerIndex = spacerIndex;
              for (var a = 0, al = spacerRanges.length; a < al; a++) {
                if (spacerRanges[a].start > range.start) {
                  newSpacerIndex = a;
                  break;
                }
              }
              spacerRanges.splice(newSpacerIndex, 0, range);
              spacerNodes.splice(newSpacerIndex, 0, node);
            }
          } else if (node.parentNode) {
            var spacerIndex = spacerNodes.indexOf(node);
            if (spacerIndex > -1) {
              node.parentNode.removeChild(node);
              var dom = this.dom;
              var range = spacerRanges[spacerIndex];
              for (var i = 0, l = dom.length; i < l; i++) {
                if (range.contains(dom[i])) {
                  dom.splice(i, 1);
                  break;
                }
              }
              spacerNodes.splice(spacerIndex, 1);
              spacerRanges.splice(spacerIndex, 1);
            }
          }
        },
        _getVisibleLength: function (range) {
          return range.length - this._getHiddenCountInRange(range.start, range.end);
        },
        _getHiddenCountInRange: function (start, end) {
          var hiddenCount = 0;
          var indices = this.hiddenIndices;
          for (var i = 0, l = indices.length; i < l; i++) {
            if (start <= indices[i] && end > indices[i]) {
              hiddenCount++;
            }
          }
          return hiddenCount;
        },
        _includeHidden: function (range) {
          var start = range.start;
          var end = range.end;
          var previousEnd = end;
          var hiddenCount = this._getHiddenCountInRange(start, end);
          while (hiddenCount > 0) {
            previousEnd = end;
            end += hiddenCount;
            hiddenCount = this._getHiddenCountInRange(previousEnd, end);
          }
          return this._limit(new Range(start, end));
        },
        _offsetForHiddenBefore: function (range) {
          var indices = this.hiddenIndices;
          var indexMap = this.hiddenIndicesMap;
          var start = range.start;
          var end = range.end;
          for (var i = 0; i <= start; i++) {
            if (indexMap[i]) {
              start++;
              end++;
            }
          }
          return this._limit(new Range(start, end));
        },
        _getRangesToShow: function (range) {
          this._limit(range);
          var offsetRange = this._offsetForHiddenBefore(range);
          var rangeIncludingHidden = this._includeHidden(offsetRange);
          return this._getRangesOfVisibleItems(rangeIncludingHidden);
        },
        _getRangesOfVisibleItems: function (inputRange) {
          return inputRange.subtract(this.hiddenRanges);
        },
        _limit: function (range) {
          var start = Math.max(0, Math.min(range.start, this.length));
          var end = Math.max(0, Math.min(range.end, this.length));
          range.update(start, end);
          return range;
        },
        _show: function (range) {
          var dom = this.dom;
          var container = this.container;
          var children = container.children;
          var indices = [];
          var nodes = [];
          forEach(dom, function (r, i) {
            if (range.intersects(r)) {
              indices.push(i);
              nodes.push(children[i]);
            } else if (r.start > range.end) {
              return false;
            }
          });
          if (!nodes.length)
            return;
          if (this.debug)
            console.info('showing', range.start, range.end);
          var firstIndex = indices[0];
          var lastIndex = indices[indices.length - 1];
          var firstRange = dom[firstIndex];
          var lastRange = dom[lastIndex];
          var beforeRange = dom[firstIndex - 1];
          var afterRange = dom[lastIndex + 1];
          var beforeNode = children[firstIndex - 1];
          var afterNode = children[lastIndex + 1];
          var fragment = document.createDocumentFragment();
          var segment = [];
          var ordered = [];
          var i;
          var cache = this.cache;
          for (i = range.start; i < range.end; i++) {
            var node = cache[i];
            ordered.push(node);
            fragment.appendChild(node);
            var one = new Range(i, i + 1);
            one.row = true;
            segment.push(one);
          }
          var firstNode = cache[range.start];
          var lastNode = cache[range.end - 1];
          this.emit('before-show', range, ordered, SYNC);
          for (i = 0; i < nodes.length; i++) {
            var spacerIndex = this.spacerNodes.indexOf(nodes[i]);
            if (spacerIndex > -1) {
              this.spacerNodes.splice(spacerIndex, 1);
              this.spacerRanges.splice(spacerIndex, 1);
            }
            container.removeChild(nodes[i]);
          }
          insertBefore(container, afterNode, fragment);
          splice(dom, firstIndex, indices.length, segment);
          var emptyRange, emptyNode;
          var index = 0;
          if (firstRange.start < range.start) {
            emptyRange = new Range(firstRange.start, range.start);
            emptyNode = this._createEmptyNode(emptyRange);
            dom.splice(firstIndex, index++, emptyRange);
            insertBefore(container, firstNode, emptyNode);
          }
          if (lastRange.end > range.end) {
            emptyRange = new Range(range.end, lastRange.end);
            emptyNode = this._createEmptyNode(emptyRange);
            dom.splice(firstIndex + segment.length + index, 0, emptyRange);
            insertBefore(container, afterNode, emptyNode);
          }
          this._updateSpacers();
          this.emit('after-show', range, ordered, SYNC);
        },
        _hide: function (range) {
          var dom = this.dom;
          var container = this.container;
          var children = container.children;
          var indices = [];
          var nodes = [];
          forEach(dom, function (r, i) {
            if (range.contains(r)) {
              indices.push(i);
              nodes.push(children[i]);
            } else if (r.start > range.end) {
              return false;
            }
          });
          if (!nodes.length)
            return;
          if (this.debug)
            console.info('hiding', range.start, range.end);
          var firstIndex = indices[0];
          var lastIndex = indices[indices.length - 1];
          var beforeRange = dom[firstIndex - 1];
          var afterRange = dom[lastIndex + 1];
          var beforeNode = children[firstIndex - 1];
          var afterNode = children[lastIndex + 1];
          for (var i = 0; i < nodes.length; i++) {
            var spacerIndex = this.spacerNodes.indexOf(nodes[i]);
            if (spacerIndex > -1) {
              this.spacerNodes.splice(spacerIndex, 1);
              this.spacerRanges.splice(spacerIndex, 1);
            }
            container.removeChild(nodes[i]);
          }
          dom.splice(firstIndex, indices.length);
          var beforeNodeNewRange;
          var afterNodeNewRange;
          if (beforeNode && !beforeRange.row) {
            if (afterNode && !afterRange.row) {
              beforeNodeNewRange = new Range(beforeRange.start, afterRange.end);
              dom[firstIndex - 1] = beforeNodeNewRange;
              this._updateEmptyNode(beforeNode, beforeNodeNewRange);
              var spacerIndex = this.spacerNodes.indexOf(afterNode);
              if (spacerIndex > -1) {
                this.spacerNodes.splice(spacerIndex, 1);
                this.spacerRanges.splice(spacerIndex, 1);
              }
              container.removeChild(afterNode);
              dom.splice(firstIndex, 1);
            } else {
              beforeNodeNewRange = new Range(beforeRange.start, range.end);
              dom[firstIndex - 1] = beforeNodeNewRange;
              this._updateEmptyNode(beforeNode, beforeNodeNewRange);
            }
          } else if (afterNode && !afterRange.row) {
            afterNodeNewRange = new Range(range.start, afterRange.end);
            this._updateEmptyNode(afterNode, afterNodeNewRange);
            dom[firstIndex] = afterNodeNewRange;
          } else {
            var emptyNode = this._createEmptyNode(range);
            insertBefore(container, afterNode, emptyNode);
            dom.splice(firstIndex, 0, range);
          }
        },
        show: function (range) {
          var ranges = this._getRangesToShow(range);
          if (this.debug)
            console.info('trying to show', ranges);
          var self = this;
          var cache = this.cache;
          var filtered = [];
          forEach(ranges, function (range) {
            filtered = filtered.concat(range.subtract(self.index));
          });
          var required = [];
          forEach(filtered, function (range) {
            forEach(range.subtract(self.pending), function (range) {
              required = range.merge(required);
              self.pending = range.merge(self.pending);
            });
          });
          var missing = [];
          forEach(required, function (range) {
            forEach(range.subtract(self.nodes), function (range) {
              missing = range.merge(missing);
            });
          });
          forEach(ranges, function (range) {
            this.index = range.merge(this.index);
          }.bind(this));
          this.emit('index-change', this.index, SYNC);
          var hiddenCount = 0;
          var request = flow();
          request.parallel(missing, function (range) {
            var control = this;
            if (self.debug)
              console.info('requesting', range);
            self.request(range, function (error, elements) {
              if (error)
                throw error;
              var j = 0;
              for (var i = range.start; i < range.end; i++) {
                cache[i] = elements[j++];
              }
              self.nodes = range.merge(self.nodes);
              control.done();
            });
          });
          request.finally(function () {
            forEach(required, function (range) {
              self.pending = range.remove(self.pending);
              forEach(range.intersection(self.index), function (range) {
                self._show(range);
              });
            });
          });
          var hideRanges = new Range(0, this.length).subtract(ranges);
          for (var i = 0, l = hideRanges.length; i < l; i++) {
            this.hide(hideRanges[i]);
          }
        },
        hide: function (range) {
          this._limit(range);
          if (this.debug)
            console.info('trying to hide', range.start, range.end);
          var required = range.intersection(this.index);
          this.index = range.remove(this.index);
          this.emit('index-change', this.index, SYNC);
          if (!required.length)
            return this;
          forEach(required, function (range) {
            this._hide(range);
          }, this);
          return this;
        }
      });
    module.exports = ListManager;
  },
  './node_modules/spotify-current-locale/@supported-languages.json': function (require, module, exports, global) {
    module.exports = [
      'arb',
      'bn',
      'de',
      'el',
      'en',
      'es-419',
      'es',
      'fi',
      'fr',
      'hi',
      'hu',
      'id',
      'it',
      'ja',
      'ko',
      'nl',
      'pl',
      'pt-br',
      'ro',
      'ru',
      'sv',
      'ta',
      'th',
      'tr',
      'zh-hant',
      'zsm'
    ];
  },
  './node_modules/spotify-live-list-operations/index.js': function (require, module, exports, global) {
    'use strict';
    var Range = require('./node_modules/spotify-range2/index.js');
    function getInsertOperations(items, index) {
      return [{
          type: 'insert',
          index: index,
          values: items
        }];
    }
    function getRemoveOperations(indices) {
      var ranges = Range.fromIndices(indices);
      var removed = 0;
      var operations = [];
      for (var r = 0, range; range = ranges[r]; r++) {
        operations.push({
          type: 'remove',
          index: range.start - removed,
          length: range.length
        });
        removed += range.length;
      }
      return operations;
    }
    function getMoveOperations(fromIndices, toIndex) {
      var movedAbove = 0;
      var maxIndex = toIndex;
      var ranges = Range.fromIndices(fromIndices);
      var r, range;
      var toRange;
      for (r = 0; range = ranges[r]; r++) {
        if (range.start <= toIndex && range.end >= toIndex) {
          toRange = range;
          break;
        }
      }
      var operations = [];
      for (r = 0; range = ranges[r]; r++) {
        var length = range.length;
        var to;
        var from = range.start - movedAbove;
        if (toRange) {
          if (range.end < toRange.start) {
            from = range.start - movedAbove;
            to = toRange.start - length;
            movedAbove += length;
          } else if (range === toRange) {
            maxIndex = Math.max(maxIndex, range.end);
            continue;
          } else {
            from = range.start;
            to = maxIndex;
            maxIndex = Math.max(maxIndex, to + length);
          }
        } else {
          if (range.end < toIndex) {
            from = range.start - movedAbove;
            to = maxIndex - length;
            movedAbove += length;
          } else {
            from = range.start;
            to = maxIndex;
            maxIndex = Math.max(maxIndex, to + length);
          }
        }
        operations.push({
          type: 'move',
          from: from,
          length: length,
          to: to
        });
      }
      return operations;
    }
    exports.getInsertOperations = getInsertOperations;
    exports.getRemoveOperations = getRemoveOperations;
    exports.getMoveOperations = getMoveOperations;
  },
  './node_modules/spotify-live-sort-uri/index.js': function (require, module, exports, global) {
    'use strict';
    var base = 'spotify:internal:sortlist';
    var regExp = /^spotify:internal:sortlist:(asc|desc):([^:]*):(.*)$/;
    exports.create = function (originUri, direction, query) {
      originUri = originUri.replace(/^spotify:/, '');
      query = encodeURIComponent(query);
      query = query.replace(/%20/g, '');
      return [
        base,
        direction,
        query,
        originUri
      ].join(':');
    };
    exports.getDirection = function (sortUri) {
      var matches = sortUri.match(regExp);
      if (!matches)
        return '';
      return matches[1];
    };
    exports.getQuery = function (sortUri) {
      var matches = sortUri.match(regExp);
      if (!matches)
        return '';
      return decodeURIComponent(matches[2]);
    };
    exports.getOriginUri = function (sortUri) {
      var matches = sortUri.match(regExp);
      if (!matches)
        return '';
      return 'spotify:' + matches[3];
    };
    exports.parse = function (sortUri) {
      var matches = sortUri.match(regExp);
      if (!matches)
        return null;
      return {
        direction: matches[1],
        query: decodeURIComponent(matches[2]),
        originUri: 'spotify:' + matches[3]
      };
    };
    exports.isValid = function (sortUri) {
      return regExp.test(sortUri);
    };
    exports.regExp = regExp;
  },
  './node_modules/mout/object/hasOwn.js': function (require, module, exports, global) {
    function hasOwn(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    module.exports = hasOwn;
  },
  './node_modules/mout/lang/createObject.js': function (require, module, exports, global) {
    var mixIn = require('./node_modules/mout/object/mixIn.js');
    function createObject(parent, props) {
      function F() {
      }
      F.prototype = parent;
      return mixIn(new F(), props);
    }
    module.exports = createObject;
  },
  './node_modules/mout/lang/isKind.js': function (require, module, exports, global) {
    var kindOf = require('./node_modules/mout/lang/kindOf.js');
    function isKind(val, kind) {
      return kindOf(val) === kind;
    }
    module.exports = isKind;
  },
  './node_modules/mout/array/unique.js': function (require, module, exports, global) {
    var filter = require('./node_modules/mout/array/filter.js');
    function unique(arr, compare) {
      compare = compare || isEqual;
      return filter(arr, function (item, i, arr) {
        var n = arr.length;
        while (++i < n) {
          if (compare(item, arr[i])) {
            return false;
          }
        }
        return true;
      });
    }
    function isEqual(a, b) {
      return a === b;
    }
    module.exports = unique;
  },
  './node_modules/mout/array/some.js': function (require, module, exports, global) {
    var makeIterator = require('./node_modules/mout/function/makeIterator_.js');
    function some(arr, callback, thisObj) {
      callback = makeIterator(callback, thisObj);
      var result = false;
      if (arr == null) {
        return result;
      }
      var i = -1, len = arr.length;
      while (++i < len) {
        if (callback(arr[i], i, arr)) {
          result = true;
          break;
        }
      }
      return result;
    }
    module.exports = some;
  },
  './node_modules/mout/array/slice.js': function (require, module, exports, global) {
    function slice(arr, start, end) {
      var len = arr.length;
      if (start == null) {
        start = 0;
      } else if (start < 0) {
        start = Math.max(len + start, 0);
      } else {
        start = Math.min(start, len);
      }
      if (end == null) {
        end = len;
      } else if (end < 0) {
        end = Math.max(len + end, 0);
      } else {
        end = Math.min(end, len);
      }
      var result = [];
      while (start < end) {
        result.push(arr[start++]);
      }
      return result;
    }
    module.exports = slice;
  },
  './node_modules/mout/array/every.js': function (require, module, exports, global) {
    var makeIterator = require('./node_modules/mout/function/makeIterator_.js');
    function every(arr, callback, thisObj) {
      callback = makeIterator(callback, thisObj);
      var result = true;
      if (arr == null) {
        return result;
      }
      var i = -1, len = arr.length;
      while (++i < len) {
        if (!callback(arr[i], i, arr)) {
          result = false;
          break;
        }
      }
      return result;
    }
    module.exports = every;
  },
  './node_modules/mout/lang/toString.js': function (require, module, exports, global) {
    function toString(val) {
      return val == null ? '' : val.toString();
    }
    module.exports = toString;
  },
  './node_modules/mout/array/reduce.js': function (require, module, exports, global) {
    function reduce(arr, fn, initVal) {
      var hasInit = arguments.length > 2, result = initVal;
      if (arr == null || !arr.length) {
        if (!hasInit) {
          throw new Error('reduce of empty array with no initial value');
        } else {
          return initVal;
        }
      }
      var i = -1, len = arr.length;
      while (++i < len) {
        if (!hasInit) {
          result = arr[i];
          hasInit = true;
        } else {
          result = fn(result, arr[i], i, arr);
        }
      }
      return result;
    }
    module.exports = reduce;
  },
  './node_modules/spotify-live-models/player/cosmos-player.js': function (require, module, exports, global) {
    'use strict';
    var cosmos = require('./node_modules/spotify-live-models/util/cosmos.js');
    var PLAYER_URI = 'sp://player/v1/main';
    var TRACK_RESOLVER_URI = 'hm://track-resolver/v1?uri=';
    var deepFillIn = require('./node_modules/mout/object/deepFillIn.js');
    var stationRegex = require('./node_modules/spotify-live-models/station.js').matches;
    var isStationUri = stationRegex.test.bind(stationRegex);
    var ACTIONS = {
        PLAY: 'play',
        PAUSE: 'pause',
        RESUME: 'resume',
        UPDATE: 'update',
        SKIP_PREV: 'skip_prev',
        SKIP_NEXT: 'skip_next'
      };
    function play(options, opt_trackUris, opt_callback) {
      if (opt_trackUris)
        options.tracks = opt_trackUris;
      var state = createCosmosState(options.context, options);
      state.action = ACTIONS.PLAY;
      postPlayerState(state, opt_callback);
    }
    function pause(opt_callback) {
      cosmos.post({
        url: PLAYER_URI,
        body: { action: ACTIONS.PAUSE }
      }, opt_callback);
    }
    function resume(opt_callback) {
      cosmos.post({
        url: PLAYER_URI,
        body: { action: ACTIONS.RESUME }
      }, opt_callback);
    }
    function skipPrev(opt_callback) {
      cosmos.post({
        url: PLAYER_URI,
        body: { action: ACTIONS.SKIP_PREV }
      }, opt_callback);
    }
    function skipNext(opt_callback) {
      cosmos.post({
        url: PLAYER_URI,
        body: { action: ACTIONS.SKIP_NEXT }
      }, opt_callback);
    }
    function update(options, opt_trackUris, opt_callback) {
      if (opt_trackUris)
        options.tracks = opt_trackUris;
      var state = createCosmosState(options.context, options);
      state.action = ACTIONS.UPDATE;
      state.index++;
      if (state.tracks && state.tracks.length <= state.index) {
        state.index = state.tracks.length - 1;
      }
      postPlayerState(state, opt_callback);
    }
    function postPlayerState(state, opt_callback) {
      if (state.context) {
        cosmos.sanitizeURL(state.context, function (error, uri) {
          if (error)
            return opt_callback(error);
          state.context = uri;
          if (!state.tracks) {
            if (/^spotify:user:[^:]+:(playlist:|starred)/.test(uri))
              state.next_page_url = uri;
            else
              state.next_page_url = TRACK_RESOLVER_URI + encodeURI(uri);
            state.tracks = [];
          }
          cosmos.post({
            url: PLAYER_URI,
            body: state
          }, opt_callback);
        });
      } else {
        cosmos.post({
          url: PLAYER_URI,
          body: state
        }, opt_callback);
      }
    }
    function getState(callback) {
      cosmos.get({ url: PLAYER_URI }, function (error, response) {
        if (error)
          return callback(error);
        callback(null, response.body);
      });
    }
    function subscribe(callback) {
      var subscription = cosmos.subscribe({ url: PLAYER_URI }, function (error, response) {
          if (error)
            return callback(error);
          callback(null, response.body);
        });
      return {
        unsubscribe: function () {
          if (!subscription)
            return;
          subscription.cancel();
          subscription = null;
        }
      };
    }
    function createCosmosState(contextUri, playOptions) {
      var isStationContext = isStationUri(contextUri);
      var defaultState = {
          context: null,
          index: null,
          track: null,
          options: {
            can_repeat: true,
            can_shuffle: !isStationContext,
            can_skip_prev: !isStationContext,
            can_skip_next: true,
            can_seek: true,
            use_dmca_rules: false,
            repeat: false,
            repeat_track: false,
            shuffle_context: false
          },
          play_origin: {
            source: 'unknown',
            reason: 'unknown',
            referrer: 'unknown',
            referrer_version: 'unknown',
            referrer_vendor: 'unknown'
          }
        };
      var state = {
          context: contextUri,
          play_origin: {
            source: playOptions.source,
            reason: playOptions.reason,
            referrer: playOptions.referrer,
            referrer_version: playOptions.referrerVersion
          }
        };
      if ('tracks' in playOptions)
        state.tracks = playOptions.tracks;
      if ('index' in playOptions)
        state.index = playOptions.index;
      if ('track' in playOptions)
        state.track = playOptions.track;
      deepFillIn(state, defaultState);
      return state;
    }
    exports.play = play;
    exports.pause = pause;
    exports.resume = resume;
    exports.skipPrev = skipPrev;
    exports.skipNext = skipNext;
    exports.update = update;
    exports.getState = getState;
    exports.subscribe = subscribe;
  },
  './node_modules/spotify-live-models/player/player-api.js': function (require, module, exports, global) {
    'use strict';
    var dataUtils = require('./node_modules/spotify-live-models/player/data.js');
    var cosmosUtil = require('./node_modules/spotify-live-models/util/cosmos.js');
    var PlayerApi = require('./node_modules/spotify-live-models/node_modules/spotify-player/lib/v2/index.js');
    var cosmos = require('./node_modules/spotify-cosmos-api/index.js');
    var TRACK_RESOLVER_URI = 'hm://track-resolver/v2?uri=';
    var player;
    function getPlayer(callback) {
      if (player) {
        callback(player);
        return;
      }
      var featureIdentifier;
      var featureVersion;
      var appManifest = global.__spotify && global.__spotify.app_manifest;
      if (appManifest) {
        featureVersion = appManifest.BundleVersion || null;
        featureIdentifier = appManifest.BundleIdentifier || null;
      }
      var overwrites = {
          'playlist-desktop': 'playlist',
          'musixmatch-lyrics': 'musixmatch'
        };
      if (featureIdentifier && overwrites[featureIdentifier])
        featureIdentifier = overwrites[featureIdentifier];
      dataUtils.getReferrer(function (error, viewUri) {
        if (error && console) {
          console.error('The player API could not be initialized due to a missing referrer!', error);
          return;
        }
        player = new PlayerApi.Player(cosmos.resolver, viewUri, featureIdentifier, featureVersion);
        callback(player);
      });
    }
    function play(trackUris, opt_rowIds, playOptions, opt_callback) {
      getPlayer(function (player) {
        var tracks = new Array(trackUris.length);
        for (var i = 0; i < trackUris.length; i++) {
          tracks[i] = { uri: trackUris[i] };
          if (opt_rowIds)
            tracks[i].uid = '' + opt_rowIds[i];
        }
        var context = {
            pages: [{ tracks: tracks }],
            entity_uri: playOptions.context
          };
        var options = {};
        if (typeof playOptions.index === 'number') {
          options.skip_to_index = {
            page: 0,
            track: playOptions.index
          };
        }
        player.play(context, options, opt_callback);
      });
    }
    function playContext(context, playOptions, opt_callback) {
      getPlayer(function (player) {
        player.play(context, playOptions || {}, opt_callback);
      });
    }
    function update(trackUris, opt_rowIds, playOptions, opt_callback) {
      getPlayer(function (player) {
        var length = trackUris.length;
        var tracks = new Array(length);
        for (var i = 0; i < length; i++) {
          tracks[i] = { uri: trackUris[i] };
          if (opt_rowIds)
            tracks[i].uid = '' + opt_rowIds[i];
        }
        var context = {
            pages: [{ tracks: tracks }],
            entity_uri: playOptions.context
          };
        player.update(context, opt_callback);
      });
    }
    function playFromResolver(contextUri, playOptions, opt_callback) {
      getPlayer(function (player) {
        cosmosUtil.sanitizeURL(contextUri, function (error, uri) {
          if (error) {
            if (opt_callback)
              opt_callback(error);
            return;
          }
          var context = { entity_uri: uri };
          var options = null;
          if (typeof playOptions.index === 'number') {
            options = {
              skip_to_index: {
                page: 0,
                track: playOptions.index
              }
            };
          }
          context.pages = [{ page_url: TRACK_RESOLVER_URI + encodeURI(uri) }];
          player.play(context, options, opt_callback);
        });
      });
    }
    var cancelSubscribe;
    function subscribe(callback) {
      cancelSubscribe = false;
      var subscription;
      getPlayer(function (player) {
        if (cancelSubscribe)
          return;
        subscription = player.subscribe(function (error, response) {
          if (error) {
            return callback(error);
          }
          callback(null, response.getJSONBody());
        });
      });
      return {
        unsubscribe: function () {
          cancelSubscribe = true;
          if (!subscription)
            return;
          subscription.cancel();
          subscription = null;
        }
      };
    }
    function getState(callback) {
      getPlayer(function (player) {
        player.getState(function (error, response) {
          if (error)
            return callback(error);
          callback(null, response.body);
        });
      });
    }
    function pause(opt_callback) {
      getPlayer(function (player) {
        player.pause(opt_callback);
      });
    }
    function resume(opt_callback) {
      getPlayer(function (player) {
        player.resume(opt_callback);
      });
    }
    function clear() {
      player = null;
    }
    exports.play = play;
    exports.playFromResolver = playFromResolver;
    exports.playContext = playContext;
    exports.pause = pause;
    exports.resume = resume;
    exports.update = update;
    exports.subscribe = subscribe;
    exports.getState = getState;
    exports.clear = clear;
  },
  './node_modules/spotify-live-models/player/playlist-resolver.js': function (require, module, exports, global) {
    'use strict';
    var cosmos = require('./node_modules/spotify-live-models/util/cosmos.js');
    var sortUriUtils = require('./node_modules/spotify-live-sort-uri/index.js');
    var filterUriUtils = require('./node_modules/spotify-live-filter-uri/index.js');
    var coreSortParams = require('./node_modules/spotify-live-models/node_modules/spotify-core-sort-params/index.js');
    var PLAYLIST_RESOLVER = 'sp://core-playlist/v1/playlist/';
    function parseURI(uri) {
      var parsedSortUri = sortUriUtils.parse(uri);
      if (parsedSortUri)
        uri = parsedSortUri.originUri;
      var parsedFilterUri = filterUriUtils.parse(uri);
      if (parsedFilterUri)
        uri = parsedFilterUri.originUri;
      return {
        uri: uri,
        sort: parsedSortUri,
        filter: parsedFilterUri
      };
    }
    function play(contextUri, options, opt_callback) {
      var parsed = parseURI(contextUri);
      var url = parsed.uri;
      var query = [];
      if (parsed.sort) {
        query.push('sort=' + encodeURIComponent(coreSortParams(parsed.sort.query)));
      }
      var filters = [];
      if (parsed.filter) {
        var filtersFromQuery = parsed.filter.query.split(',').map(function (filter) {
            return encodeURIComponent(filter);
          });
        filters.push.apply(filters, filtersFromQuery);
      }
      if (filters.length) {
        query.push('filter=' + filters.join(','));
      }
      query.push('uri=' + encodeURIComponent(contextUri));
      var queryString = '';
      if (query.length) {
        queryString = '?' + query.join('&');
      }
      var resolverUrl = PLAYLIST_RESOLVER + url + '/play' + queryString;
      var postObject = { url: resolverUrl };
      if (options)
        postObject.body = options;
      cosmos.post(postObject, opt_callback);
    }
    module.exports = { play: play };
  },
  './node_modules/spotify-live-models/add/profile.js': function (require, module, exports, global) {
    'use strict';
    var intersection = require('./node_modules/mout/array/intersection.js');
    var live = require('./node_modules/spotify-live/index.js');
    var cosmos = require('./node_modules/spotify-live-models/util/cosmos.js');
    var endpoints = {
        isFollowing: 'hm://socialgraph/v2/is_following?format=json',
        followCounts: 'hm://socialgraph/v2/counts?format=json',
        updateIsFollowing: 'hm://socialgraph/v2/following?format=json',
        broadcast: 'sp://messages/v1/followstate'
      };
    function onUpdate(model, data) {
      if ('added' in data && !('followersCount' in data)) {
        var followersCount = model.get('followersCount');
        if (followersCount !== undefined) {
          var newFollowersCount = followersCount + (data.added ? 1 : -1);
          model.update({ followersCount: newFollowersCount });
        }
      }
    }
    function onPublish(model, data) {
      if ('added' in data) {
        model.update({ 'added': data.added });
        updateBackend(model, !!data.added, function (error) {
          if (error) {
            model.update({ added: !data.added });
          } else {
            model.update({ added: data.added });
            broadcast(model);
          }
        });
      }
    }
    function onBroadcast(error, response) {
      if (error) {
        if (global.console)
          console.error(error);
        return;
      }
      var body = response.body;
      var data = {};
      if ('added' in body)
        data.added = body.added;
      else if ('isFollowing' in body)
        data.added = body.isFollowing;
      if ('followersCount' in body)
        data.followersCount = body.followersCount;
      if ('followingCount' in body)
        data.followingCount = body.followingCount;
      live(body.uri).update(data);
    }
    function onWait(model, properties) {
      if (intersection(properties, followProperties).length)
        getRequestData(model, function (error, data) {
          if (error) {
            if (global.console)
              console.error(error);
            return;
          }
          updateIsFollowing(model, data);
          updateCounts(model, data);
        });
    }
    function updateIsFollowing(model, requestData, opt_callback) {
      var options = {
          url: endpoints.isFollowing,
          body: requestData
        };
      cosmos.get(options, function (error, response) {
        if (error && opt_callback)
          return opt_callback(error);
        if (error) {
          if (global.console)
            console.error(error);
          return;
        }
        var value = response.body[0].is_following;
        model.update({ added: value });
        if (opt_callback)
          opt_callback();
      });
    }
    function updateCounts(model, requestData, opt_callback) {
      var options = {
          url: endpoints.followCounts,
          body: requestData
        };
      cosmos.get(options, function (error, response) {
        if (error && opt_callback)
          return opt_callback(error);
        if (error) {
          if (global.console)
            console.error(error);
          return;
        }
        var body = response.body[0];
        model.update({
          followersCount: body.followers_count,
          followingCount: body.following_count
        });
        if (opt_callback)
          opt_callback();
      });
    }
    function getRequestData(model, callback) {
      live('spotify:client').query('currentUser(uri)', function (error, data) {
        if (error)
          return callback(error);
        callback(null, {
          source_uri: data.currentUser.uri,
          target_uris: [decodeURIComponent(model.uri)]
        });
      });
    }
    function updateBackend(model, isFollowing, callback) {
      getRequestData(model, function (error, data) {
        if (error)
          return callback(error);
        var requestMethod = isFollowing ? 'post' : 'delete';
        cosmos[requestMethod]({
          url: endpoints.updateIsFollowing,
          body: data
        }, function (error) {
          if (error)
            return callback(error);
          callback(null);
        });
      });
    }
    function broadcast(model) {
      var added = model.get('added');
      cosmos.post({
        url: endpoints.broadcast,
        body: {
          uri: model.uri,
          isFollowing: added,
          added: added,
          followersCount: model.get('followersCount'),
          followingCount: model.get('followingCount')
        }
      });
    }
    var followProperties = [
        'added',
        'followersCount',
        'followingCount'
      ];
    var broadcastSubscription;
    exports.register = function (regExp) {
      live.subscribe(regExp, 'wait', onWait);
      live.subscribe(regExp, 'update', onUpdate);
      live.subscribe(regExp, 'publish', onPublish);
      if (!broadcastSubscription) {
        broadcastSubscription = cosmos.subscribe({ url: endpoints.broadcast }, onBroadcast);
      }
    };
    exports.unregister = function (regExp) {
      live.unsubscribe(regExp, 'wait', onWait);
      live.unsubscribe(regExp, 'update', onUpdate);
      live.unsubscribe(regExp, 'publish', onPublish);
      if (broadcastSubscription) {
        broadcastSubscription.cancel();
        broadcastSubscription = null;
      }
    };
  },
  './node_modules/spotify-live-models/add/collection.js': function (require, module, exports, global) {
    'use strict';
    var prime = require('./node_modules/prime/index.js');
    var defer = require('./node_modules/prime/defer.js');
    var live = require('./node_modules/spotify-live/index.js');
    var contains = require('./node_modules/mout/array/contains.js');
    var forEach = require('./node_modules/mout/array/forEach.js');
    var map = require('./node_modules/mout/array/map.js');
    var bind = require('./node_modules/mout/function/bind.js');
    var cosmos = require('./node_modules/spotify-live-models/util/cosmos.js');
    var Collection = prime({
        constructor: function (endpoints) {
          var self = this;
          this.backend = 'apollo';
          this.endpoints = endpoints;
          this.onPublish = bind(this.onPublish, this);
          this.waitQueue = [];
          this.onWait = bind(this.onWait, this);
          this.fetch = bind(this.fetch, this);
          this._featureDetectCoreBackend(function (hasCoreBackend) {
            if (hasCoreBackend) {
              self.backend = 'core';
            }
          });
        },
        onPublish: function (model, data) {
          if ('added' in data) {
            var endpoints = this.endpoints;
            var state = !!data.added;
            model.update({ added: state });
            var method = state ? 'post' : 'delete';
            this._publish(method, [model], function (error, data) {
              if (error) {
                model.update({ added: !state });
              } else {
                cosmos.post({
                  url: endpoints.broadcast,
                  body: {
                    uri: model.uri,
                    isInCollection: state,
                    added: state
                  }
                });
                if (data && data.items) {
                  forEach(data.items, function (item) {
                    item.added = item.isInCollection;
                    cosmos.post({
                      url: endpoints.broadcast,
                      body: item
                    });
                  });
                }
              }
            });
          }
        },
        onWait: function (model, properties) {
          if (contains(properties, 'added')) {
            this.fetch(model);
          }
        },
        fetch: function (model) {
          var endpoints = this.endpoints;
          var queue = this.waitQueue;
          queue.push(model);
          if (queue.length === 1) {
            defer(this._fetchBatch, this);
          }
          if (this.backend === 'apollo' && queue.length === 500) {
            this._fetchBatch();
          }
        },
        _fetchBatch: function () {
          var queue = this.waitQueue;
          if (queue.length === 0)
            return;
          this.waitQueue = [];
          this._contains(queue, function (error, result) {
            if (error && (!error.response || error.response && error.response.getStatusCode() !== 404)) {
              if (global.console)
                console.error(error);
              return;
            }
            forEach(queue, function (model, i) {
              var added = false;
              if (!error)
                added = result[i];
              model.update({ added: added });
            });
          });
        },
        _featureDetectCoreBackend: function (callback) {
          cosmos.post({
            url: 'sp://core-collection/v1/contains',
            body: { items: [] }
          }, function (error, result) {
            callback(!error && result.status == 200);
          });
        },
        _contains: function (models, callback) {
          var backend = this.backend;
          var url = this.endpoints[backend].isInCollection;
          var body = this._getRequestBody(models);
          cosmos.post({
            url: url,
            body: body
          }, function (error, result) {
            if (backend == 'core') {
              callback(error, result && result.body && result.body.found);
            } else if (backend == 'apollo') {
              callback(error, result && result.body);
            }
          });
        },
        _publish: function (method, models, callback) {
          var url = this.endpoints[this.backend].updateIsInCollection;
          var body = this._getRequestBody(models);
          cosmos[method]({
            url: url,
            body: body
          }, function (error, result) {
            callback(error, result && result.body);
          });
        },
        _getRequestBody: function (models) {
          var body;
          if (this.backend == 'core') {
            body = { items: map(models, 'uri') };
          } else if (this.backend == 'apollo') {
            body = models.map(function (model) {
              return model.uri.substr(-22);
            });
          }
          return body;
        }
      });
    Collection.onBroadcast = function (error, response) {
      if (error) {
        if (global.console)
          console.error(error);
        return;
      }
      var value;
      if ('added' in response.body)
        value = response.body.added;
      else if ('isInCollection' in response.body)
        value = response.body.isInCollection;
      live(response.body.uri).update({ added: value });
    };
    module.exports = Collection;
  },
  './node_modules/spotify-events/dragndrop/dragdata.js': function (require, module, exports, global) {
    'use strict';
    var live = require('./node_modules/spotify-live/index.js');
    var liburi = require('./node_modules/spotify-liburi/src/uri.js');
    var forOwn = require('./node_modules/mout/object/forOwn.js');
    var selection = require('./node_modules/spotify-events/selection/index.js');
    var hooks = require('./node_modules/spotify-events/dragndrop/util/hooks.js');
    var eventModel = require('./node_modules/spotify-events/dragndrop/util/eventmodel.js');
    var itemText = require('./node_modules/spotify-events/dragndrop/util/itemtext.js');
    var SELECTOR_DRAGGABLE = 'a, [draggable]';
    function onDragStart(event, target) {
      var isSelected = selection.isNodeSelected(target);
      if (isSelected) {
        var uris = selection.getUris();
        if (uris.length > 0) {
          var state = selection.getIndicesPerList();
          var singleContext = state.length === 1;
          var context = singleContext ? state[0] && state[0].uri : null;
          if (context) {
            setEventData(event, uris, null, context);
          } else {
            setEventData(event, uris);
          }
        }
      } else {
        var uri = target.getAttribute('data-uri');
        if (!uri) {
          var uriObject = liburi.from(target.getAttribute('href'));
          uri = uriObject ? uriObject.toURI() : '';
        }
        var dragText = itemText.getForElement(target);
        if (uri) {
          setEventData(event, [uri], [dragText]);
        }
      }
    }
    function setEventData(event, uris, opt_dragTexts, opt_context) {
      var urlsPerMimeType = getUrlsPerMimeType(uris);
      var urls = getUrlsForUris(uris);
      var urlList = urls.join('\n');
      var html = getLinkHTML(uris, urls, opt_dragTexts);
      event.dataTransfer.setData('text/uri-list', urlList);
      forOwn(urlsPerMimeType, function (urlsForType, type) {
        event.dataTransfer.setData(type, urlsForType.join('\n'));
      });
      event.dataTransfer.setData('text/plain', urlList);
      event.dataTransfer.setData('text/html', html);
      if (opt_context) {
        event.dataTransfer.setData('text/x-spotify-data-context', opt_context);
      }
      hooks.run('set-drag-data', event, uris, opt_context);
    }
    function getUrlsPerMimeType(uris) {
      var urlsPerMimeType = {};
      for (var i = 0, l = uris.length; i < l; i++) {
        var uri = uris[i];
        var type = getMimeType(uri);
        var urlsForType = urlsPerMimeType[type] || (urlsPerMimeType[type] = []);
        urlsForType.push(getShareLink(uri));
      }
      return urlsPerMimeType;
    }
    function getUrlsForUris(uris) {
      var urls = new Array(uris.length);
      for (var i = 0, l = uris.length; i < l; i++) {
        urls[i] = getShareLink(uris[i]);
      }
      return urls;
    }
    function getShareLink(uri) {
      var uriObject = liburi.from(uri);
      if (!uriObject)
        return uri;
      var url = uriObject.toOpenURL();
      url = url.replace(/^https:\/\//, 'http://');
      return url;
    }
    function getMimeType(uri) {
      var type = 'text/x-spotify-';
      var uriObject = liburi.from(uri);
      if (uriObject) {
        var uriType = uriObject.type;
        if (uriType === liburi.Type.TRACK || uriType === liburi.Type.LOCAL) {
          return type + 'tracks';
        }
        if (uriType === liburi.Type.ALBUM || uriType === liburi.Type.LOCAL_ALBUM) {
          return type + 'albums';
        }
        if (uriType === liburi.Type.ARTIST || uriType === liburi.Type.LOCAL_ARTIST) {
          return type + 'artists';
        }
        if (uriType === liburi.Type.USER || uriType === liburi.Type.PROFILE) {
          return type + 'users';
        }
        if (uriType === liburi.Type.PLAYLIST || uriType === liburi.Type.STARRED) {
          return type + 'playlists';
        }
        if (uriType === liburi.Type.FOLDER) {
          return type + 'folders';
        }
      }
      return type + 'unknown';
    }
    function getLinkHTML(uris, urls, opt_dragTexts) {
      var html = '';
      for (var i = 0, l = uris.length; i < l; i++) {
        var textFromArgs = opt_dragTexts && opt_dragTexts[i];
        var text = textFromArgs || itemText.getForUri(uris[i]);
        html += '<a href="' + urls[i] + '">' + text + '</a>';
        if (i < uris.length - 1) {
          html += '<br>';
        }
      }
      return html;
    }
    function attach() {
      eventModel.delegate('dragstart', SELECTOR_DRAGGABLE, onDragStart);
    }
    function detach() {
      eventModel.undelegate('dragstart', SELECTOR_DRAGGABLE, onDragStart);
    }
    exports.attach = attach;
    exports.detach = detach;
  },
  './node_modules/spotify-events/dragndrop/dragimage.js': function (require, module, exports, global) {
    'use strict';
    var live = require('./node_modules/spotify-live/index.js');
    var liburi = require('./node_modules/spotify-liburi/src/uri.js');
    var defer = require('./node_modules/prime/defer.js');
    var selection = require('./node_modules/spotify-events/selection/index.js');
    var eventModel = require('./node_modules/spotify-events/dragndrop/util/eventmodel.js');
    var itemText = require('./node_modules/spotify-events/dragndrop/util/itemtext.js');
    var localizedStrings = require('./node_modules/spotify-events/strings/en.json');
    var SELECTOR_DRAGGABLE = 'a, [draggable]';
    var DRAGIMAGE_POS_X = -10;
    var DRAGIMAGE_POS_Y = -5;
    var dragImageElement = null;
    function onDragStart(event, target) {
      var isSelected = selection.isNodeSelected(target);
      var text = '';
      if (isSelected) {
        var uris = selection.getUris();
        if (uris.length === 1) {
          text = itemText.getForUri(uris[0]);
        } else {
          text = uris.length + ' ' + getLocalizedTypeFromUris(uris);
        }
      } else {
        text = itemText.getForElement(target);
      }
      var dragImage = getDragImage(text);
      event.dataTransfer.setDragImage(dragImage, DRAGIMAGE_POS_X, DRAGIMAGE_POS_Y);
      removeDragImage();
    }
    function getDragImage(text) {
      if (!dragImageElement) {
        dragImageElement = document.createElement('div');
        dragImageElement.className = 'dnd-image';
      }
      dragImageElement.textContent = text;
      document.body.appendChild(dragImageElement);
      return dragImageElement;
    }
    function removeDragImage() {
      defer(function () {
        if (dragImageElement && dragImageElement.parentNode) {
          dragImageElement.parentNode.removeChild(dragImageElement);
        }
      });
    }
    function getLocalizedTypeFromUris(uris) {
      var type = 'item';
      var uriObjectForFirst = liburi.from(uris[0]);
      var typeForFirst = uriObjectForFirst && uriObjectForFirst.type;
      if (typeForFirst) {
        type = typeForFirst;
        for (var i = 0, l = uris.length; i < l; i++) {
          var uriObject = liburi.from(uris[i]);
          if (!uriObject || uriObject.type !== typeForFirst) {
            type = 'item';
            break;
          }
        }
      }
      if (type === 'profile') {
        type = 'user';
      }
      var pluralType = type + 's';
      var localized = localizedStrings['drag_tooltip_many_' + pluralType];
      if (!localized && pluralType !== 'items') {
        localized = localizedStrings['drag_tooltip_many_items'];
      }
      return localized || pluralType;
    }
    function attach() {
      eventModel.delegate('dragstart', SELECTOR_DRAGGABLE, onDragStart);
    }
    function detach() {
      eventModel.undelegate('dragstart', SELECTOR_DRAGGABLE, onDragStart);
    }
    exports.attach = attach;
    exports.detach = detach;
  },
  './node_modules/spotify-events/dragndrop/list.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var intersection = require('./node_modules/mout/array/intersection.js');
    var indexOf = require('./node_modules/mout/array/indexOf.js');
    var filter = require('./node_modules/mout/array/filter.js');
    var flow = require('./node_modules/finally/index.js');
    var Range = require('./node_modules/spotify-range2/index.js');
    var live = require('./node_modules/spotify-live/index.js');
    var liburi = require('./node_modules/spotify-liburi/src/uri.js');
    var listOperations = require('./node_modules/spotify-live-list-operations/index.js');
    var hooks = require('./node_modules/spotify-events/dragndrop/util/hooks.js');
    var eventModel = require('./node_modules/spotify-events/dragndrop/util/eventmodel.js');
    var selection = require('./node_modules/spotify-events/selection/index.js');
    var SELECTOR_DROP_TARGET = '[data-drop-target]';
    var SELECTOR_LIST = '[data-list]';
    var SELECTOR_LIST_ITEM = '[data-list-item]';
    var SELECTOR_LIST_TARGET = SELECTOR_DROP_TARGET + ', body';
    var SELECTOR_DRAGGABLE = 'a, [draggable]';
    var ATTR_TARGET = 'data-drop-target';
    var dropIndicator = null;
    var draggedLinkContext = null;
    var disabledLists = {};
    function onDragStart(event, target) {
      draggedLinkContext = null;
      cachedSelectionState.clear();
      var matchingTarget = getMatchingTarget(event);
      if (matchingTarget) {
        var isInList = $(matchingTarget).matches(SELECTOR_LIST);
        if (isInList) {
          var uri = matchingTarget.getAttribute('data-uri');
          if (target.tagName.toLowerCase() === 'a') {
            draggedLinkContext = uri;
          }
          if (disabledLists[uri]) {
            event.preventDefault();
            return;
          }
        }
      }
    }
    function onDragOver(event, target) {
      var positionedListDrop = false;
      var rowNode = null;
      var isBody = target === document.body;
      var list = null;
      if (isBody)
        list = getListTargetFromBody(event);
      else
        list = getMatchingListTarget(event);
      if (list) {
        var location = isBody ? 'below' : 'inside';
        if (validateListDrop(event, list, location)) {
          if (isBody) {
            positionedListDrop = true;
          } else {
            rowNode = getRowNode(event);
            if (rowNode) {
              positionedListDrop = true;
            }
          }
        }
      }
      if (positionedListDrop) {
        event.preventDefault();
        if (isBody)
          showDropIndicatorBelowList(list);
        else if (rowNode)
          showDropIndicatorForRow(rowNode, event.clientY);
      } else {
        hideDropIndicator();
        var listHookResult = { valid: false };
        if (list) {
          hooks.run('list-target-validation', listHookResult, list);
        }
        if (listHookResult.valid) {
          event.preventDefault();
        } else if (!isBody && list) {
          var targetHookResult = { valid: false };
          hooks.run('target-validation', targetHookResult, event, target);
          if (!targetHookResult.valid) {
            event.dataTransfer.dropEffect = 'none';
          }
        }
      }
    }
    function onDragLeave(event, target) {
      hideDropIndicator();
    }
    function onDragEnd(event, target) {
      hideDropIndicator();
      draggedLinkContext = null;
    }
    function onDrop(event, target) {
      hideDropIndicator();
      var isBody = target === document.body;
      var list = null;
      if (isBody)
        list = getListTargetFromBody(event);
      else
        list = getMatchingListTarget(event);
      if (list) {
        var location = isBody ? 'below' : 'inside';
        if (validateListDrop(event, list, location)) {
          var contextUri = list.getAttribute('data-uri');
          if (contextUri) {
            performListChangesForEvent(event, list, contextUri, location);
          }
        }
      }
    }
    function showDropIndicatorBelowList(list) {
      var listRect = list.getBoundingClientRect();
      showDropIndicator(listRect.left, listRect.bottom, listRect.width);
    }
    function showDropIndicatorForRow(rowNode, cursorY) {
      var belowMiddle = isBelowMiddleOfNode(cursorY, rowNode);
      var rowRect = rowNode.getBoundingClientRect();
      var x = rowRect.left;
      var y = rowRect.top + (belowMiddle ? rowRect.height : 0);
      showDropIndicator(x, y, rowRect.width);
    }
    function showDropIndicator(x, y, width) {
      var indicatorAbsX = window.pageXOffset + x;
      var indicatorAbsY = window.pageYOffset + y;
      var indicatorWidth = width;
      if (!dropIndicator) {
        dropIndicator = document.createElement('div');
        dropIndicator.className = 'tr-drag-indicator';
      }
      dropIndicator.style.left = indicatorAbsX + 'px';
      dropIndicator.style.width = indicatorWidth + 'px';
      dropIndicator.style.top = indicatorAbsY + 'px';
      if (!dropIndicator.parentNode) {
        document.body.appendChild(dropIndicator);
      }
    }
    function hideDropIndicator() {
      if (dropIndicator && dropIndicator.parentNode) {
        dropIndicator.parentNode.removeChild(dropIndicator);
      }
    }
    function performListChangesForEvent(event, list, contextUri, location) {
      var liveList = live(contextUri).get('rows');
      if (!liveList)
        return;
      var targetIndex = 0;
      if (location === 'below') {
        var lastRowNode = getLastRowFromLastList();
        if (lastRowNode) {
          targetIndex = getTargetIndex(event.clientY, lastRowNode);
        }
      } else {
        var rowNode = getRowNode(event);
        if (!rowNode)
          return;
        targetIndex = getTargetIndex(event.clientY, rowNode);
      }
      var sourceContext = event.dataTransfer.getData('text/x-spotify-data-context');
      var isSameContext = sourceContext && sourceContext === contextUri;
      if (isSameContext) {
        performMoveChanges(contextUri, liveList, targetIndex);
      } else {
        performInsertChanges(event, list, contextUri, liveList, targetIndex);
      }
    }
    function performMoveChanges(contextUri, liveList, targetIndex) {
      var indices = getMoveIndices(contextUri, liveList);
      if (indices.length === 0)
        return;
      var operations = listOperations.getMoveOperations(indices, targetIndex);
      if (operations.length === 0)
        return;
      liveList.publish(operations);
      temporarilyDisableList(contextUri, liveList);
    }
    function performInsertChanges(event, list, contextUri, liveList, targetIndex) {
      getInsertValues(event, list, liveList, contextUri, function (error, values) {
        if (error)
          return;
        if (values.length === 0)
          return;
        var operations = [{
              type: 'insert',
              index: targetIndex,
              values: values
            }];
        liveList.publish(operations);
        temporarilyDisableList(contextUri, liveList);
      });
    }
    function validateListDrop(event, list, location) {
      var types = event.dataTransfer.types;
      var isDraggingFromContext = indexOf(types, 'text/x-spotify-data-context') > -1;
      if (isDraggingFromContext) {
        if (!validatePotentialOperations(event, list, location)) {
          return false;
        }
      }
      var uri = list.getAttribute('data-uri');
      if (uri && draggedLinkContext === uri) {
        return false;
      }
      var result = { valid: true };
      hooks.run('list-drop-validation', result, event, list, location);
      return !!result.valid;
    }
    var cachedSelectionState = function () {
        var cache = {
            lastTime: 0,
            lastValue: null
          };
        var CACHE_TIMEOUT = 500;
        return {
          get: function () {
            var now = Date.now();
            if (now - cache.lastTime > CACHE_TIMEOUT) {
              cache = {
                lastValue: selection.getIndicesPerList(),
                lastTime: now
              };
            }
            return cache.lastValue;
          },
          clear: function () {
            cache.lastTime = 0;
          }
        };
      }();
    function validatePotentialOperations(event, list, location) {
      var selectionState = cachedSelectionState.get();
      if (selectionState.length === 1) {
        var contextUri = list.getAttribute('data-uri');
        if (contextUri !== selectionState[0].uri) {
          return true;
        }
        var selectedRanges = Range.fromIndices(selectionState[0].indicesWithHidden);
        if (selectedRanges.length === 1) {
          var selectedRange = selectedRanges[0];
          selectedRange.update(selectedRange.start, selectedRange.end + 1);
          var rowNode = location === 'below' ? getLastRowFromLastList() : getRowNode(event);
          if (rowNode) {
            var targetIndex = getTargetIndex(event.clientY, rowNode);
            if (targetIndex > -1) {
              var targetRange = new Range(targetIndex, targetIndex + 1);
              if (targetRange.contained(selectedRange)) {
                return false;
              }
            }
          }
        }
      }
      return true;
    }
    function getMatchingTarget(event) {
      var currentNode = event.target;
      while (currentNode) {
        if (isMatchingTarget(event, currentNode)) {
          return currentNode;
        }
        currentNode = currentNode.parentElement;
      }
      return null;
    }
    function getMatchingListTarget(event) {
      var currentNode = event.target;
      while (currentNode) {
        var isList = $(currentNode).matches(SELECTOR_LIST);
        if (isList && isMatchingTarget(event, currentNode)) {
          return currentNode;
        }
        currentNode = currentNode.parentElement;
      }
      return null;
    }
    function getListTargetFromBody(event) {
      var lastList = getLastListNode();
      if (lastList) {
        var sameParent = isInParentChain(event.target, lastList);
        if (sameParent && isMatchingTarget(event, lastList)) {
          if (isBelowNode(event.clientX, event.clientY, lastList)) {
            return lastList;
          }
        }
      }
      return null;
    }
    function getRowNode(event) {
      var target = $(event.target);
      var matches = target.matches(SELECTOR_LIST_ITEM);
      var row = matches ? target : target.parent(SELECTOR_LIST_ITEM);
      return row ? row[0] : null;
    }
    function getLastRowFromLastList() {
      var lastList = getLastListNode();
      if (lastList) {
        var listItems = $(lastList).search(SELECTOR_LIST_ITEM);
        var lastItem = listItems && listItems[listItems.length - 1];
        if (lastItem)
          return lastItem;
      }
      return null;
    }
    function getLastListNode() {
      var lists = $(SELECTOR_LIST);
      var lastList = lists && lists[lists.length - 1];
      return lastList || null;
    }
    function getTargetIndex(y, rowNode) {
      var index = rowNode.getAttribute('data-index');
      if (index === null) {
        index = -1;
      } else {
        index = parseInt(index, 10);
        if (isNaN(index)) {
          index = -1;
        } else {
          if (isBelowMiddleOfNode(y, rowNode)) {
            index++;
          }
        }
      }
      return index;
    }
    function getMoveIndices(contextUri, liveList) {
      var selectionState = selection.getIndicesPerList();
      if (selectionState.length !== 1)
        return [];
      var firstContainer = selectionState[0];
      var selectedIndices = firstContainer.indices;
      var indices = selectedIndices.slice();
      if (indices.length === 0)
        return [];
      hooks.run('get-move-indices', contextUri, liveList, indices);
      indices.sort(function (a, b) {
        return a - b;
      });
      return indices;
    }
    function getInsertValues(event, list, liveList, contextUri, callback) {
      var eventTypes = event.dataTransfer.types;
      var listTypes = list.getAttribute(ATTR_TARGET);
      if (!listTypes)
        return callback(null, []);
      var matchingTypes = intersection(listTypes.split('|'), eventTypes);
      if (matchingTypes.length === 0)
        return callback(null, []);
      var data = getDataFromTypes(event, matchingTypes);
      var isTrackList = isListOfTracks(liveList, contextUri);
      getRowsFromData(data, isTrackList, function (error, rows) {
        if (error)
          return callback(error);
        callback(null, rows);
      });
    }
    function getDataFromTypes(event, types) {
      var data = {};
      for (var i = 0, l = types.length; i < l; i++) {
        var type = types[i];
        var itemsInData = data[type] = [];
        var hasURIs = type.indexOf('text/x-spotify') === 0;
        var dataForType = event.dataTransfer.getData(type);
        var items = hasURIs ? dataForType.split('\n') : [dataForType];
        for (var n = 0, len = items.length; n < len; n++) {
          var item = items[n];
          if (hasURIs) {
            var uriObject = liburi.from(item);
            if (uriObject) {
              itemsInData.push(uriObject.toURI());
            }
          } else {
            itemsInData.push(item);
          }
        }
      }
      return data;
    }
    function getRowsFromData(data, isTrackList, callback) {
      var flowFunctions = [];
      if (data['text/x-spotify-tracks']) {
        flowFunctions.push(function () {
          this.done(null, getRowObjects('track', data['text/x-spotify-tracks']));
        });
      }
      if (data['text/x-spotify-albums']) {
        flowFunctions.push(function () {
          var albums = data['text/x-spotify-albums'];
          if (isTrackList)
            fetchListTrackRows(albums, this);
          else
            this.done(null, getRowObjects('album', albums));
        });
      }
      if (data['text/x-spotify-playlists']) {
        flowFunctions.push(function () {
          var playlists = data['text/x-spotify-playlists'];
          if (isTrackList)
            fetchListTrackRows(playlists, this);
          else
            this.done(null, getRowObjects('playlist', playlists));
        });
      }
      if (data['text/x-spotify-artists']) {
        flowFunctions.push(function () {
          this.done(null, getRowObjects('artist', data['text/x-spotify-artists']));
        });
      }
      if (data['text/x-spotify-users']) {
        flowFunctions.push(function () {
          this.done(null, getRowObjects('user', data['text/x-spotify-users']));
        });
      }
      flow(flowFunctions).finally(function (error) {
        if (error)
          return callback(error);
        var arrays = Array.prototype.slice.call(arguments, 1);
        var rows = [];
        rows = rows.concat.apply(rows, arrays);
        callback(null, rows);
      });
    }
    function fetchListTrackRows(listUris, control) {
      flow().parallel(listUris, function (listUri) {
        var innerControl = this;
        live(listUri).query('rows(track(uri))', function (error, data) {
          if (error)
            return innerControl.done(null, []);
          var rows = data.rows.map(function (row) {
              return live(row);
            });
          innerControl.done(null, rows);
        }, live.ASAP);
      }).finally(function (error) {
        if (error)
          return control.done(null, []);
        var arrays = Array.prototype.slice.call(arguments, 1);
        var rows = [];
        rows = rows.concat.apply(rows, arrays);
        control.done(null, rows);
      });
    }
    function getRowObjects(itemType, uris) {
      return uris.map(function (uri) {
        var row = {};
        row[itemType] = { uri: uri };
        return live(row);
      });
    }
    function isListOfTracks(liveList, contextUri) {
      var uriObject = liburi.from(contextUri);
      var type = uriObject && uriObject.type;
      if (type === liburi.Type.PLAYLIST)
        return true;
      if (type === liburi.Type.STARRED)
        return true;
      var result = { valid: false };
      hooks.run('is-list-of-tracks', result, liveList, contextUri);
      if (!result.valid) {
        var firstRow = liveList.get(0);
        var firstTrack = firstRow && firstRow.get('track');
        if (firstTrack)
          return true;
      }
      return !!result.valid;
    }
    function isBelowNode(x, y, node) {
      var rect = node.getBoundingClientRect();
      var below = y >= rect.bottom;
      var betweenX = x >= rect.left && x <= rect.right;
      return below && betweenX;
    }
    function isBelowMiddleOfNode(y, node) {
      var rect = node.getBoundingClientRect();
      return y >= rect.top + rect.height / 2;
    }
    function isMatchingTarget(event, node) {
      var eventTypes = event.dataTransfer.types;
      var nodeTypes = node.getAttribute(ATTR_TARGET);
      if (nodeTypes) {
        var matching = intersection(nodeTypes.split('|'), eventTypes);
        if (matching.length > 0)
          return true;
      }
      return false;
    }
    function isInParentChain(node, nodeForChain) {
      var currentNode = nodeForChain.parentElement;
      while (currentNode) {
        if (currentNode === node) {
          return true;
        }
        currentNode = currentNode.parentElement;
      }
      return false;
    }
    function temporarilyDisableList(contextUri, liveList) {
      disabledLists[contextUri] = true;
      var timer;
      var handler = function (operations) {
        clearTimeout(timer);
        liveList.off('update', handler);
        setTimeout(function () {
          delete disabledLists[contextUri];
        }, 100);
      };
      liveList.on('update', handler);
      timer = setTimeout(handler, 500);
    }
    function attach() {
      eventModel.delegate('dragstart', SELECTOR_DRAGGABLE, onDragStart);
      eventModel.delegate('dragover', SELECTOR_LIST_TARGET, onDragOver);
      eventModel.delegate('dragleave', SELECTOR_LIST_TARGET, onDragLeave);
      eventModel.delegate('dragend', 'body', onDragEnd);
      eventModel.delegate('drop', SELECTOR_LIST_TARGET, onDrop);
    }
    function detach() {
      eventModel.undelegate('dragstart', SELECTOR_DRAGGABLE, onDragStart);
      eventModel.undelegate('dragover', SELECTOR_LIST_TARGET, onDragOver);
      eventModel.undelegate('dragleave', SELECTOR_LIST_TARGET, onDragLeave);
      eventModel.undelegate('dragend', 'body', onDragEnd);
      eventModel.undelegate('drop', SELECTOR_LIST_TARGET, onDrop);
    }
    exports.attach = attach;
    exports.detach = detach;
  },
  './node_modules/spotify-events/dragndrop/target.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var liburi = require('./node_modules/spotify-liburi/src/uri.js');
    var indexOf = require('./node_modules/mout/array/indexOf.js');
    var center = require('./node_modules/spotify-events/center.js');
    var eventModel = require('./node_modules/spotify-events/dragndrop/util/eventmodel.js');
    var hooks = require('./node_modules/spotify-events/dragndrop/util/hooks.js');
    var SELECTOR_DROP_TARGET = '[data-drop-target]';
    var SELECTOR_DRAGGABLE = 'a, [draggable]';
    var ATTR_TARGET = 'data-drop-target';
    var ATTR_NO_CLASSNAME = 'data-drop-no-classname';
    var CLASSNAME_ACTIVE = 'drop-target-active';
    var longHoldTimerId = 0;
    var longHoldTimerDuration = 1000;
    var draggedElement = null;
    var lastEnteredElement = null;
    function onDragStart(event, node) {
      draggedElement = node;
      lastEnteredElement = null;
    }
    function onDragEnd(event, target) {
      draggedElement = null;
      lastEnteredElement = null;
      stopLongHoldTimer();
      removeAnyActiveClass();
    }
    function onDragEnter(event, target) {
      if (validateTarget(event, target)) {
        setEnter(event, target);
      }
    }
    function onDragLeave(event, target) {
      if (validateTarget(event, target)) {
        setLeave(event, target);
      }
    }
    function onDragOver(event, target) {
      if (validateTarget(event, target)) {
        event.preventDefault();
        event.dataTransfer.dropEffect = 'copy';
        setEnter(event, target);
      } else {
        setLeave(event, target);
      }
    }
    function onDrop(event, target) {
      stopLongHoldTimer();
      removeAnyActiveClass();
      if (validateTarget(event, target)) {
        var types = getMimeTypesForTarget(event, target);
        center.emit('drop', {
          node: target,
          data: getDropData(event, types)
        });
      }
      event.preventDefault();
      lastEnteredElement = null;
    }
    function setEnter(event, target) {
      if (target === lastEnteredElement) {
        return;
      }
      lastEnteredElement = target;
      if (!target.hasAttribute(ATTR_NO_CLASSNAME)) {
        $(target).addClass(CLASSNAME_ACTIVE);
      }
      var types = getMimeTypesForTarget(event, target);
      center.emit('dragenter', {
        node: target,
        types: types
      });
      startLongHoldTimer(target, types);
    }
    function setLeave(event, target) {
      if (target !== lastEnteredElement) {
        return;
      }
      lastEnteredElement = null;
      if (!target.hasAttribute(ATTR_NO_CLASSNAME)) {
        $(target).removeClass(CLASSNAME_ACTIVE);
      }
      var types = getMimeTypesForTarget(event, target);
      center.emit('dragleave', {
        node: target,
        types: types
      });
      stopLongHoldTimer();
    }
    function validateTarget(event, target) {
      if (target === draggedElement) {
        return false;
      }
      var types = getMimeTypesForTarget(event, target);
      if (types.length) {
        var result = { valid: true };
        hooks.run('target-validation', result, event, target);
        if (result.valid) {
          return true;
        }
      }
      return false;
    }
    function getDropData(event, types) {
      var data = {};
      for (var i = 0, l = types.length; i < l; i++) {
        var itemsInData = data[types[i]] = [];
        var dataForType = event.dataTransfer.getData(types[i]);
        var hasURIs = types[i].indexOf('text/x-spotify') === 0;
        var items = hasURIs ? dataForType.split('\n') : [dataForType];
        for (var n = 0, len = items.length; n < len; n++) {
          var item = items[n];
          if (hasURIs) {
            var uriObject = liburi.from(item);
            if (uriObject)
              item = uriObject.toURI();
          }
          if (item)
            itemsInData.push(item);
        }
      }
      var hasContextData = indexOf(types, 'text/x-spotify-data-context') > -1;
      if (hasContextData) {
        data['text/x-spotify-data-context'] = [event.dataTransfer.getData('text/x-spotify-data-context')];
      }
      return data;
    }
    function startLongHoldTimer(target, types) {
      if (longHoldTimerId)
        return;
      longHoldTimerId = setTimeout(function () {
        center.emit('dragover-long', {
          node: target,
          types: types
        });
      }, longHoldTimerDuration);
    }
    function stopLongHoldTimer() {
      clearTimeout(longHoldTimerId);
      longHoldTimerId = 0;
    }
    function removeAnyActiveClass() {
      var active = $('.' + CLASSNAME_ACTIVE);
      if (active) {
        active.removeClass(CLASSNAME_ACTIVE);
      }
    }
    function getMimeTypesForTarget(event, target) {
      var mimeTypes = [];
      var dataTypes = event.dataTransfer.types;
      var targetTypes = target.getAttribute(ATTR_TARGET);
      if (targetTypes) {
        targetTypes = targetTypes.split('|');
        for (var i = 0, l = dataTypes.length; i < l; i++) {
          var type = dataTypes[i];
          if (targetTypes.indexOf(type) > -1) {
            mimeTypes.push(type);
          }
        }
      }
      return mimeTypes;
    }
    function attach() {
      eventModel.delegate('dragstart', SELECTOR_DRAGGABLE, onDragStart);
      eventModel.delegate('dragenter', SELECTOR_DROP_TARGET, onDragEnter);
      eventModel.delegate('dragleave', SELECTOR_DROP_TARGET, onDragLeave);
      eventModel.delegate('dragover', SELECTOR_DROP_TARGET, onDragOver);
      eventModel.delegate('dragend', 'body', onDragEnd);
      eventModel.delegate('drop', SELECTOR_DROP_TARGET, onDrop);
    }
    function detach() {
      eventModel.undelegate('dragstart', SELECTOR_DRAGGABLE, onDragStart);
      eventModel.undelegate('dragenter', SELECTOR_DROP_TARGET, onDragEnter);
      eventModel.undelegate('dragleave', SELECTOR_DROP_TARGET, onDragLeave);
      eventModel.undelegate('dragover', SELECTOR_DROP_TARGET, onDragOver);
      eventModel.undelegate('dragend', 'body', onDragEnd);
      eventModel.undelegate('drop', SELECTOR_DROP_TARGET, onDrop);
    }
    exports.attach = attach;
    exports.detach = detach;
    var originalDuration = longHoldTimerDuration;
    exports.setLongHoldDuration = function setLongHoldDuration(duration) {
      longHoldTimerDuration = duration;
    };
    exports.resetLongHoldDuration = function resetLongHoldDuration() {
      longHoldTimerDuration = originalDuration;
    };
  },
  './node_modules/spotify-events/selection/controller.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var indexOf = require('./node_modules/mout/array/indexOf.js');
    var intersection = require('./node_modules/mout/array/intersection.js');
    var live = require('./node_modules/spotify-live/index.js');
    var liburi = require('./node_modules/spotify-liburi/src/uri.js');
    var center = require('./node_modules/spotify-events/center.js');
    var selection = require('./node_modules/spotify-events/selection/index.js');
    var model = require('./node_modules/spotify-events/selection/model.js');
    var rows = require('./node_modules/spotify-events/selection/rows.js');
    var containers = require('./node_modules/spotify-events/selection/containers.js');
    var positions = require('./node_modules/spotify-events/selection/positions.js');
    var Position = require('./node_modules/spotify-events/util/Position.js');
    var cosmos = require('./node_modules/spotify-events/util/cosmos.js');
    var dragToSelectActive = false;
    var focusEventValid = false;
    var listListeners = {};
    var listListenerUris = [];
    var SELECTABLE = '[data-list-item]';
    var CLIPBOARD_ENDPOINT = 'sp://desktop/v1/clipboard';
    function isOnDocument(event) {
      return event.target === document.documentElement;
    }
    function getNodeFromEvent(event) {
      var target = $(event.target);
      var node = target.matches(SELECTABLE) ? target : target.parent(SELECTABLE);
      return node && node[0];
    }
    function isFilterTarget(target) {
      return !!($(target).matches('[data-filter]') || $(target).parent('[data-filter]'));
    }
    function handleMouseDown(event, opt_isMouseUp) {
      if (isOnDocument(event))
        return;
      focusEventValid = false;
      var node = getNodeFromEvent(event);
      if (node) {
        handleRowMouseDown(event, node, opt_isMouseUp);
      } else {
        handleOutsideMouseDown(event);
      }
    }
    function handleRowMouseDown(event, rowNode, opt_isMouseUp) {
      var button = getButtonFromEvent(event);
      var isPrimaryButton = button === 1;
      var position = positions.getFromNode(rowNode);
      if (!position)
        return;
      var isSelected = model.isSelected(position);
      var singleMultiSelect = isMac() ? event.metaKey : event.ctrlKey;
      var multiselect = event.shiftKey || singleMultiSelect;
      var singleClick = !event.shiftKey;
      if (!isMultiSelectEnabled()) {
        singleMultiSelect = multiselect = false;
        singleClick = true;
      }
      if (multiselect && singleClick && isSelected && isPrimaryButton) {
        if (!opt_isMouseUp)
          return;
        handleDeselectOnSingleMultiSelect(position);
      } else if (!singleClick) {
        if (opt_isMouseUp)
          return;
        handleShiftMultiSelect(position);
      } else {
        if (isPrimaryButton && isSelected && !opt_isMouseUp) {
          return;
        }
        if (multiselect && !opt_isMouseUp) {
          return;
        }
        handleSingleSelect(position, event, opt_isMouseUp);
      }
      rows.update();
    }
    function handleOutsideMouseDown(event) {
      var target = $(event.target);
      var isSort = target.matches('[data-sort]') || target.parent('[data-sort]');
      var isFilter = isFilterTarget(event.target);
      var hasSelection = model.hasSelection();
      if (!(isSort || isFilter) && hasSelection) {
        model.clear();
        rows.update();
      }
      if ((!hasSelection || hasSelection && !isSort) && isMultiSelectEnabled()) {
        dragToSelectActive = true;
      }
    }
    function handleFocus(event) {
      if (!focusEventValid)
        return;
      var node = getNodeFromEvent(event);
      if (node) {
        handleRowFocus(event, node);
      } else {
        handleOutsideFocus(event);
      }
      focusEventValid = false;
    }
    function handleRowFocus(event, rowNode) {
      var position = positions.getFromNode(rowNode);
      if (!position || model.isSelected(position)) {
        return;
      }
      model.clear();
      model.add(position);
      model.setFocus(position);
      model.setOrigin(position);
      rows.update();
    }
    function handleOutsideFocus(event) {
      if (isFilterTarget(event.target))
        return;
      model.clear();
      rows.update();
    }
    function handleMouseUp(event) {
      if (isOnDocument(event))
        return;
      handleMouseDown(event, true);
      dragToSelectActive = false;
    }
    function handleMouseMove(event) {
      if (!dragToSelectActive)
        return;
      var node = getNodeFromEvent(event);
      if (!node) {
        model.clear();
        rows.update();
        return;
      }
      var position = positions.getFromNode(node);
      if (!position)
        return;
      var origin = model.getOrigin();
      if (!origin) {
        model.setOrigin(position);
        origin = position;
      }
      model.setFocus(position);
      var focus = position;
      model.add(origin, focus);
      if (focus !== origin) {
        var downwards = positions.getDirection(origin, focus) === 1;
        var clearNorthOf = downwards ? origin : focus;
        var clearSouthOf = downwards ? focus : origin;
        var northOf = positions.getClosest(clearNorthOf, 'up');
        if (northOf && northOf !== clearSouthOf) {
          var first = new Position(0, 0);
          model.remove(first, northOf);
        }
        var southOf = positions.getClosest(clearSouthOf, 'down');
        if (southOf && southOf !== clearNorthOf) {
          var lastContIndex = containers.elements.length - 1;
          var containerLength = containers.getContainerLength(lastContIndex);
          if (containerLength > 0) {
            var last = new Position(lastContIndex, containerLength);
            model.remove(southOf, last);
          }
        }
      }
      rows.update();
    }
    function handleDragEnd(event) {
      dragToSelectActive = false;
    }
    function handleDeselectOnSingleMultiSelect(position) {
      var origin = model.getOrigin();
      var focus = model.getFocus();
      var dir = positions.getDirection(origin, focus);
      if (!dir)
        dir = 1;
      var isOrigin = position.isSame(origin);
      var isFocus = position.isSame(focus);
      var above, below;
      if (isOrigin || isFocus) {
        above = getClosestSelected(position, 'up');
        below = getClosestSelected(position, 'down');
      }
      if (isOrigin) {
        model.setOrigin(dir === 1 ? below || above : above || below);
      }
      if (position.isSame(focus)) {
        model.setFocus(dir === 1 ? above || below : below || above);
      }
      model.remove(position);
    }
    function handleShiftMultiSelect(position) {
      var origin = model.getOrigin();
      var focus = model.getFocus();
      if (origin && focus && !origin.isSame(focus)) {
        model.remove(origin, focus);
      }
      if (!origin) {
        origin = new Position(0, 0);
        model.setOrigin(origin);
      }
      model.add(origin, position);
      model.setFocus(position);
    }
    function handleSingleSelect(position, event, opt_isMouseUp) {
      var origin = model.getOrigin();
      var button = getButtonFromEvent(event);
      var isPrimaryButton = button === 1;
      var isSecondaryButton = button === 2;
      var isSelected = model.isSelected(position);
      var singleMultiSelect = isMac() ? event.metaKey : event.ctrlKey;
      var multiselect = event.shiftKey || singleMultiSelect;
      if (!isMultiSelectEnabled()) {
        singleMultiSelect = multiselect = false;
      }
      var isRegularPrimary = !multiselect && !dragToSelectActive && isPrimaryButton;
      var isSelectedSecondary = !isSelected && isSecondaryButton;
      if (isRegularPrimary || isSelectedSecondary) {
        model.clear();
      }
      model.add(position);
      model.setFocus(position);
      var isNextToSelection;
      if (origin && !origin.isSame(position)) {
        var next = positions.getClosest(position, 'down');
        isNextToSelection = next && model.isSelected(next);
        if (!isNextToSelection) {
          var prev = positions.getClosest(position, 'up');
          isNextToSelection = prev && model.isSelected(prev);
        }
      }
      if (!isNextToSelection) {
        model.setOrigin(position);
      }
    }
    function handleKeyDown(event) {
      focusEventValid = true;
      var isUp = event.keyCode === 38;
      var isDown = event.keyCode === 40;
      if (!isKeyboardNavEnabled())
        return;
      if (!isUp && !isDown)
        return;
      var origin = model.getOrigin();
      var focus = model.getFocus();
      var next = focus && positions.getClosest(focus, isDown ? 'down' : 'up');
      if ((isUp || isDown) && !event.metaKey && !event.ctrlKey && next) {
        if (event.shiftKey && isMultiSelectEnabled() && origin && focus) {
          var keyDirection = isDown ? 1 : -1;
          var direction = positions.getDirection(origin, focus);
          var isSingleRange = direction === 0;
          if (isSingleRange || keyDirection === direction) {
            model.add(next);
            scrollIntoView(next);
          } else {
            model.remove(focus);
          }
        } else {
          model.clear();
          model.add(next);
          model.setOrigin(next);
          scrollIntoView(next);
          event.preventDefault();
        }
        model.setFocus(next);
      }
      rows.update();
    }
    function handleScrollShowAfter(event) {
      var node = event.pageNode && event.pageNode[0];
      rows.update(node);
    }
    function handleSetHidden(data) {
      model.setHiddenIndices(data.indices, data.uri);
    }
    function handleAddByUri(listUri, index, opt_doNotScrollIntoView) {
      var uriNodes = $('[data-uri=' + listUri + ']');
      var matches = intersection(containers.elements, uriNodes);
      if (!matches || matches.length < 1) {
        return;
      }
      var container = $(matches[0]);
      var containerIndex = container && indexOf(containers.elements, container[0]);
      var listIsPlayContext = container && container.matches('[data-context]');
      if (listIsPlayContext) {
        var localPosition = positions.getPositionFromGlobalIndex(index);
        containerIndex = localPosition.containerIndex;
        index = localPosition.index;
      } else if (containerIndex === -1) {
        console && console.warn && console.warn('No container matching this uri was found or selection doesn\'t know ' + 'about the container. Possibly you need to run events.update.');
        return;
      }
      if (!isMultiSelectEnabled())
        model.clear();
      var position = new Position(containerIndex, index);
      if (!model.getOrigin())
        model.setOrigin(position);
      model.setFocus(position);
      model.add(position);
      rows.update();
      if (opt_doNotScrollIntoView !== true) {
        scrollIntoView(position);
      }
    }
    function handleSelectAll() {
      if (!isMultiSelectEnabled()) {
        return false;
      }
      model.clear();
      var first = new Position(0, 0);
      model.setOrigin(first);
      var last = positions.getLastPosition();
      model.setFocus(last);
      model.add(first, last);
      rows.update();
    }
    function handleCopy() {
      cosmos.put({
        url: CLIPBOARD_ENDPOINT,
        body: getSelectedUrls().join('\n')
      });
    }
    function handleCut() {
      handleCopy();
      cosmos.post({
        url: 'sp://messages/v1/container/control',
        body: { type: 'delete' }
      });
    }
    function handleGetUris() {
      var selections = model.selections;
      var uris = [];
      for (var container = 0; container < selections.length; container++) {
        var containerSelection = selections[container];
        if (!containerSelection)
          continue;
        var entity;
        var list = containers.getLiveList(container);
        if (!list)
          continue;
        var orderedSelectedKeys = list.keys.filter(function (key) {
            return !!containerSelection[key];
          });
        for (var i = 0, l = orderedSelectedKeys.length; i < l; i++) {
          var item = list.valueOf(orderedSelectedKeys[i]);
          if (!item)
            continue;
          entity = item.get('track');
          if (!entity)
            entity = item.get('playlist');
          if (!entity)
            entity = item.get('album');
          if (!entity)
            entity = item.get('artist');
          if (!entity)
            entity = item.get('user');
          if (!entity)
            entity = item;
          uris.push(entity.get('uri'));
        }
      }
      return uris;
    }
    function getSelectedUrls() {
      var uris = handleGetUris();
      var urls = [];
      for (var i = 0; i < uris.length; i++) {
        var uriObj = liburi.from(uris[i]);
        if (uriObj) {
          urls.push(uriObj.toOpenURL());
        }
      }
      return urls;
    }
    function getButtonFromEvent(event) {
      switch (event.button) {
      case 0:
        return 1;
      case 2:
        return 2;
      case 1:
        return 3;
      default:
        return 0;
      }
    }
    function isMac() {
      if (!global.window)
        return false;
      if (!global.window.navigator)
        return false;
      var userAgent = global.window.navigator.userAgent || '';
      return userAgent.indexOf('Mac') > -1;
    }
    function isMultiSelectEnabled() {
      if ($('body').data('multi-select-disabled') !== null)
        return false;
      if (!global.window)
        return false;
      return !!global.window._getSpotifyModule;
    }
    function isKeyboardNavEnabled() {
      return $('body').data('keyboard-select-disabled') === null;
    }
    function getClosestSelected(position, direction) {
      while (position) {
        position = positions.getClosest(position, direction);
        if (position && model.isSelected(position))
          return position;
      }
      return null;
    }
    function scrollIntoView(position) {
      var container = containers.elements[position.containerIndex];
      var scrollContainer = container && container.querySelector('[data-scroll-container]');
      if (scrollContainer) {
        center.emit('scroll-to-index', scrollContainer, position.index);
      } else {
        var node = positions.getNodeFromPosition(position);
        if (!node)
          return;
        var offset = node.getBoundingClientRect().top;
        if (offset < 0 || offset >= window.innerHeight) {
          node.scrollIntoView(offset < 0);
        }
      }
    }
    function updateListListeners() {
      var uris = containers.getUris();
      for (var i = 0, l = uris.length; i < l; i++) {
        var uri = uris[i];
        if (uri && listListenerUris.indexOf(uri) === -1) {
          var list = live(uri).get('rows');
          if (list) {
            var listener = createListListener(uri);
            list.on('update', listener);
            listListeners[uri] = listener;
            listListenerUris.push(uri);
          }
        }
      }
    }
    function createListListener(uri) {
      return function (operations) {
        var uris = containers.getUris();
        var containerIndex = uris.indexOf(uri);
        if (containerIndex > -1) {
          for (var i = 0, l = operations.length; i < l; i++) {
            var operation = operations[i];
            if (operation.type === 'remove') {
              model.updateContainer(containerIndex);
              break;
            }
          }
          rows.update();
        }
      };
    }
    function resetListListeners() {
      for (var i = 0, l = listListenerUris.length; i < l; i++) {
        var uri = listListenerUris[i];
        var listener = listListeners[uri];
        var list = live(uri).get('rows');
        if (list && listener) {
          list.off('update', listener);
          delete listListeners[uri];
          listListenerUris.splice(i, 1);
          i--;
          l--;
        }
      }
    }
    function handleListSwap(event) {
      var rowsListBefore = live(event.before).get('rows');
      if (!rowsListBefore)
        return;
      var selectionBefore = selection.getIndicesPerList().filter(function (indicesPerList) {
          return indicesPerList.uri === event.before;
        })[0];
      var selectedKeysBefore = [];
      if (selectionBefore) {
        selectedKeysBefore = selectionBefore.indices.map(function (index) {
          return rowsListBefore.keys[index];
        });
      }
      center.on('scroll-reset', function onScrollReset() {
        center.off('scroll-reset', onScrollReset);
        live(event.after).get('rows', function (error, rowsListAfter) {
          selectedKeysBefore.forEach(function (selectedKeyBefore) {
            var indexAfter = rowsListAfter.keys.indexOf(selectedKeyBefore);
            if (indexAfter !== -1) {
              handleAddByUri(event.after, indexAfter, true);
            }
          });
        }, live.ASAP);
      });
    }
    exports.handleMouseDown = handleMouseDown;
    exports.handleMouseUp = handleMouseUp;
    exports.handleMouseMove = handleMouseMove;
    exports.handleDragEnd = handleDragEnd;
    exports.handleKeyDown = handleKeyDown;
    exports.handleFocus = handleFocus;
    exports.handleScrollShowAfter = handleScrollShowAfter;
    exports.handleSetHidden = handleSetHidden;
    exports.handleAddByUri = handleAddByUri;
    exports.handleSelectAll = handleSelectAll;
    exports.handleCopy = handleCopy;
    exports.handleCut = handleCut;
    exports.handleGetUris = handleGetUris;
    exports.updateListListeners = updateListListeners;
    exports.resetListListeners = resetListListeners;
    exports.handleListSwap = handleListSwap;
  },
  './node_modules/spotify-events/selection/containers.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var live = require('./node_modules/spotify-live/index.js');
    var forEach = require('./node_modules/mout/array/forEach.js');
    var indexOf = require('./node_modules/mout/array/indexOf.js');
    var containers = [];
    function reset() {
      containers.length = 0;
    }
    function update() {
      var nodes = $(document).search('[data-list]');
      if (!nodes)
        return;
      forEach(nodes, function (container) {
        if (indexOf(containers, container) === -1) {
          containers.push(container);
        }
      });
    }
    function getContainerLength(index) {
      var container = $(containers[index]);
      if (!container)
        return 0;
      var uri = container.data('uri');
      if (!uri)
        return 0;
      var list = live(uri).get('rows');
      if (!list)
        return 0;
      return list.length;
    }
    function getContainerIndex(uri) {
      for (var i = 0, l = containers.length; i < l; i++) {
        var containerUri = getUri(i);
        if (containerUri === uri)
          return i;
      }
      return -1;
    }
    function getUri(index) {
      var element = containers[index];
      var uri = element && element.getAttribute('data-uri');
      return uri || null;
    }
    function getUris() {
      var uris = [];
      for (var i = 0, l = containers.length; i < l; i++) {
        uris.push(getUri(i));
      }
      return uris;
    }
    function getLiveList(index) {
      var uri = getUri(index);
      var list = live(uri).get('rows');
      return list || null;
    }
    exports.elements = containers;
    exports.reset = reset;
    exports.update = update;
    exports.getContainerLength = getContainerLength;
    exports.getContainerIndex = getContainerIndex;
    exports.getUri = getUri;
    exports.getUris = getUris;
    exports.getLiveList = getLiveList;
  },
  './node_modules/spotify-events/selection/model.js': function (require, module, exports, global) {
    'use strict';
    var live = require('./node_modules/spotify-live/index.js');
    var Range = require('./node_modules/spotify-range2/index.js');
    var containers = require('./node_modules/spotify-events/selection/containers.js');
    var positions = require('./node_modules/spotify-events/selection/positions.js');
    var Position = require('./node_modules/spotify-events/util/Position.js');
    var map = require('./node_modules/mout/array/map.js');
    var forEach = require('./node_modules/mout/array/forEach.js');
    var selections = [];
    var hiddenKeysPerContainer = {};
    var originContainerIndex = null;
    var originKey = null;
    var focusContainerIndex = null;
    var focusKey = null;
    function getOrigin() {
      if (originContainerIndex === null)
        return null;
      if (originKey === null)
        return null;
      var list = containers.getLiveList(originContainerIndex);
      if (list) {
        var index = list.keys.indexOf(originKey);
        if (index === -1)
          return null;
        var position = new Position(originContainerIndex, index);
        return position;
      }
      return null;
    }
    function getFocus() {
      if (focusContainerIndex === null)
        return null;
      if (focusKey === null)
        return null;
      var list = containers.getLiveList(focusContainerIndex);
      if (list) {
        var index = list.keys.indexOf(focusKey);
        var position = new Position(focusContainerIndex, index);
        return position;
      }
      return null;
    }
    function setOrigin(position) {
      if (position) {
        var list = containers.getLiveList(position.containerIndex);
        if (list) {
          originContainerIndex = position.containerIndex;
          originKey = list.keys[position.index] || null;
          return;
        }
      }
      originContainerIndex = null;
      originKey = null;
    }
    function setFocus(position) {
      if (position) {
        var list = containers.getLiveList(position.containerIndex);
        if (list) {
          focusContainerIndex = position.containerIndex;
          focusKey = list.keys[position.index];
          return;
        }
      }
      focusContainerIndex = null;
      focusKey = null;
    }
    function setHiddenIndices(hiddenIndices, containerUri) {
      var list = live(containerUri).get('rows');
      if (list) {
        var keys = list.keys;
        var hiddenKeys = {};
        for (var i = 0, l = hiddenIndices.length; i < l; i++) {
          var key = keys[hiddenIndices[i]];
          if (key)
            hiddenKeys[key] = true;
        }
        var containerIndex = containers.getContainerIndex(containerUri);
        hiddenKeysPerContainer[containerIndex] = hiddenKeys;
        updateContainer(containerIndex);
      }
    }
    function add(from, opt_to) {
      var to = opt_to || from;
      if (positions.getDirection(from, to) === -1) {
        var temp = from;
        from = to;
        to = temp;
      }
      var idsPerContainer = getIds(from, to);
      for (var i = 0, l = idsPerContainer.length; i < l; i++) {
        var containerIndex = from.containerIndex + i;
        var selected = selections[containerIndex] || (selections[containerIndex] = Object.create(null));
        var ids = idsPerContainer[i];
        var hiddenKeys = hiddenKeysPerContainer[containerIndex];
        for (var j = 0, id; id = ids[j]; j++) {
          if (!hiddenKeys || !hiddenKeys[id]) {
            selected[id] = true;
          }
        }
      }
    }
    function remove(from, opt_to) {
      var to = opt_to || from;
      if (positions.getDirection(from, to) === -1) {
        var temp = from;
        from = to;
        to = temp;
      }
      var idsPerContainer = getIds(from, to);
      for (var i = 0, l = idsPerContainer.length; i < l; i++) {
        var containerIndex = from.containerIndex + i;
        var selected = selections[containerIndex] || (selections[containerIndex] = Object.create(null));
        var ids = idsPerContainer[i];
        for (var j = 0, id; id = ids[j]; j++) {
          delete selected[id];
        }
      }
    }
    function clear() {
      selections.length = 0;
      setOrigin(null);
      setFocus(null);
    }
    function reset() {
      clear();
      hiddenKeysPerContainer = {};
    }
    function updateContainer(containerIndex) {
      var keys = selections[containerIndex];
      if (!keys)
        return;
      var list = containers.getLiveList(containerIndex);
      if (!list)
        return;
      for (var key in keys) {
        var hasKey = list.hasKey(key);
        var shouldDelete = !hasKey;
        if (!shouldDelete) {
          var hiddenKeys = hiddenKeysPerContainer[containerIndex];
          var shouldDelete = hiddenKeys ? hiddenKeys[key] : false;
        }
        if (shouldDelete) {
          delete keys[key];
        }
      }
    }
    function getRanges(from, to) {
      var ranges = [];
      var fromContainer = from.containerIndex;
      var toContainer = to.containerIndex;
      for (var i = fromContainer; i <= toContainer; i++) {
        var fromIndex = i === fromContainer ? from.index : 0;
        var toIndex;
        if (i === toContainer) {
          toIndex = to.index;
        } else {
          var containerLength = containers.getContainerLength(i);
          if (containerLength > 0) {
            toIndex = containerLength - 1;
          }
        }
        if (toIndex === undefined) {
          ranges.push(new Range(0, 0));
        } else {
          ranges.push(new Range(fromIndex, toIndex + 1));
        }
      }
      return ranges;
    }
    function getIds(from, to, opt_keys) {
      var idsPerContainer = [];
      var fromContainer = from.containerIndex;
      var toContainer = to.containerIndex;
      for (var i = fromContainer; i <= toContainer; i++) {
        var fromIndex = i === fromContainer ? from.index : 0;
        var toIndex;
        if (i === toContainer) {
          toIndex = to.index;
        } else {
          var containerLength = containers.getContainerLength(i);
          if (containerLength > 0) {
            toIndex = containerLength - 1;
          }
        }
        if (toIndex === undefined) {
          idsPerContainer.push([]);
        } else {
          var ids = [];
          idsPerContainer.push(ids);
          var containerUri = containers.getUri(i);
          var list = live(containerUri).get('rows');
          if (list) {
            var keys = list.keys;
            for (var n = fromIndex; n < toIndex + 1; n++) {
              ids.push(keys[n]);
            }
          }
        }
      }
      return idsPerContainer;
    }
    function isSelected(position) {
      var keys = selections[position.containerIndex];
      if (!keys)
        return false;
      var list = containers.getLiveList(position.containerIndex);
      if (list) {
        var key = list.keys[position.index];
        return !!keys[key];
      }
      return false;
    }
    function hasHoles() {
      var rangeCount = 0;
      for (var containerIndex = 0; containerIndex < selections.length; containerIndex++) {
        var containerSelection = selections[containerIndex];
        var list = containers.getLiveList(containerIndex);
        var keys = Object.keys(containerSelection);
        if (keys.length > 0) {
          rangeCount++;
          if (list) {
            var indices = [];
            for (var j = 0, len = keys.length; j < len; j++) {
              indices.push(list.indexOf(keys[j]));
            }
            indices.sort(function (a, b) {
              return a - b;
            });
            var previousIndex;
            for (var i = 0, l = indices.length; i < l; i++) {
              var index = indices[i];
              if (i > 0 && index > previousIndex + 1) {
                rangeCount++;
                break;
              }
              previousIndex = index;
            }
          }
        }
        if (rangeCount > 1)
          return true;
      }
      return false;
    }
    function hasSelection() {
      for (var i = 0, l = selections.length; i < l; i++) {
        if (selections[i] && Object.keys(selections[i]).length > 0) {
          return true;
        }
      }
      return false;
    }
    function getIndicesForContainer(containerIndex) {
      var unorderedKeys = selections[containerIndex];
      if (!unorderedKeys)
        return null;
      var indices = [];
      var list = containers.getLiveList(containerIndex);
      var orderedKeys = list.keys.filter(function (key) {
          return !!unorderedKeys[key];
        });
      if (list && orderedKeys.length) {
        if (orderedKeys.length > 1) {
          indices = list.indexOfMany(orderedKeys);
        } else {
          indices = [list.indexOf(orderedKeys[0])];
        }
      }
      return indices.length ? indices : null;
    }
    function getIndicesWithHiddenForContainer(containerIndex) {
      var indices = getIndicesForContainer(containerIndex);
      if (!indices)
        return null;
      var hiddenKeys = hiddenKeysPerContainer[containerIndex];
      if (!hiddenKeys)
        return indices;
      var ranges = Range.fromIndices(indices);
      if (ranges.length === 1)
        return indices;
      var list = containers.getLiveList(containerIndex);
      if (!list)
        return indices;
      var hiddenIds = Object.keys(hiddenKeys);
      var hiddenIndices = [];
      if (hiddenIds.length) {
        if (hiddenIds.length > 1) {
          hiddenIndices = list.indexOfMany(hiddenIds);
        } else {
          hiddenIndices = [list.indexOf(hiddenIds[0])];
        }
      }
      hiddenIndices = hiddenIndices.filter(function (index) {
        return index > -1;
      });
      var hiddenRanges = Range.fromIndices(hiddenIndices);
      var hiddenStarts = hiddenRanges.map(function (range) {
          return range.start;
        });
      var hiddenEnds = hiddenRanges.map(function (range) {
          return range.end;
        });
      for (var i = 0, l = ranges.length; i < l; i++) {
        var range = ranges[i];
        var nextRange = ranges[i + 1];
        var indexOfRange = hiddenStarts.indexOf(range.end);
        if (indexOfRange > -1) {
          var hiddenEnd = hiddenEnds[indexOfRange];
          if (!nextRange || hiddenEnd === nextRange.start) {
            var hiddenIndicesInRange = hiddenRanges[indexOfRange].toIndices();
            if (hiddenIndicesInRange.length > 0) {
              indices = indices.concat(hiddenIndicesInRange);
            }
          }
        }
      }
      indices.sort(function (a, b) {
        return a - b;
      });
      return indices.length ? indices : null;
    }
    exports.selections = selections;
    exports.getOrigin = getOrigin;
    exports.getFocus = getFocus;
    exports.setOrigin = setOrigin;
    exports.setFocus = setFocus;
    exports.setHiddenIndices = setHiddenIndices;
    exports.add = add;
    exports.remove = remove;
    exports.clear = clear;
    exports.reset = reset;
    exports.updateContainer = updateContainer;
    exports.isSelected = isSelected;
    exports.hasHoles = hasHoles;
    exports.hasSelection = hasSelection;
    exports.getIndicesForContainer = getIndicesForContainer;
    exports.getIndicesWithHiddenForContainer = getIndicesWithHiddenForContainer;
  },
  './node_modules/spotify-events/selection/rows.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var difference = require('./node_modules/mout/array/difference.js');
    var forEach = require('./node_modules/mout/array/forEach.js');
    var filter = require('./node_modules/mout/array/filter.js');
    var append = require('./node_modules/mout/array/append.js');
    var model = require('./node_modules/spotify-events/selection/model.js');
    var containers = require('./node_modules/spotify-events/selection/containers.js');
    var positions = require('./node_modules/spotify-events/selection/positions.js');
    var SELECTOR_ROW = '[data-list-item]';
    var CLASSNAME_SELECTED = 'selected';
    var CLASSNAME_FOCUSED = 'selection-focus';
    var focusTimeout;
    function update(opt_node) {
      var currentlySelectedRows = getSelectedRows(opt_node);
      var rowsToBeSelected = getRowsToSelect(opt_node);
      var rowsToDeselect = difference(currentlySelectedRows, rowsToBeSelected);
      var rowsToSelect = difference(rowsToBeSelected, currentlySelectedRows);
      forEach(currentlySelectedRows, function (row) {
        $(row).removeClass(CLASSNAME_FOCUSED);
      });
      forEach(rowsToDeselect, function (row) {
        $(row).removeClass(CLASSNAME_SELECTED);
      });
      forEach(rowsToSelect, function (row) {
        $(row).addClass(CLASSNAME_SELECTED);
      });
      var focus = model.getFocus();
      if (focus) {
        var focusNode = positions.getNodeFromPosition(focus);
        if (focusNode) {
          clearTimeout(focusTimeout);
          focusTimeout = setTimeout(function () {
            var isInputFocused = document.activeElement && $(document.activeElement).matches('input, textarea');
            if (isElementInViewport(focusNode) && !isInputFocused) {
              focusNode.focus();
            }
          }, 0);
          $(focusNode).addClass(CLASSNAME_FOCUSED);
        }
      }
    }
    function getSelectedRows(opt_node) {
      var elements = opt_node ? [opt_node] : containers.elements;
      var rows = [];
      forEach(elements, function (container) {
        var nodes = $(container).search(SELECTOR_ROW + '.' + CLASSNAME_SELECTED);
        if (nodes)
          append(rows, nodes);
      });
      return rows;
    }
    function getRowsToSelect(opt_node) {
      var rows = [];
      var containerElements = containers.elements;
      forEach(model.selections, function (keys, index) {
        if (!keys)
          return;
        var list = containers.getLiveList(index);
        if (!list)
          return;
        var listNodes = $(opt_node || containerElements[index]).search(SELECTOR_ROW);
        var nodes = filter(listNodes, function (listNode) {
            var nodeIndex = +listNode.getAttribute('data-index');
            var nodeRowId = list.keys[nodeIndex];
            return !!keys[nodeRowId];
          });
        append(rows, nodes);
      });
      return rows;
    }
    function isElementInViewport(el) {
      var rect = el.getBoundingClientRect();
      return rect.top >= 0 && rect.bottom <= document.documentElement.clientHeight;
    }
    exports.update = update;
    exports.getSelectedRows = getSelectedRows;
  },
  './node_modules/spotify-events/selection/positions.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var containers = require('./node_modules/spotify-events/selection/containers.js');
    var Position = require('./node_modules/spotify-events/util/Position.js');
    function getClosest(position, direction) {
      var isDown = direction === 'down';
      var containerIndex = position.containerIndex;
      var index = position.index;
      var containerLength = containers.getContainerLength(containerIndex);
      var nextIndex = isDown ? index + 1 : index - 1;
      if (nextIndex < containerLength && nextIndex >= 0) {
        return new Position(containerIndex, nextIndex);
      }
      containerIndex = isDown ? containerIndex + 1 : containerIndex - 1;
      containerLength = containers.getContainerLength(containerIndex);
      if (containerLength) {
        nextIndex = isDown ? 0 : containerLength - 1;
        return new Position(containerIndex, nextIndex);
      }
      return null;
    }
    function getFromNode(node) {
      if (!node.parentNode)
        return null;
      if (!node.hasAttribute('data-index'))
        return null;
      var elements = containers.elements;
      if (elements.length === 0)
        return null;
      for (var i = 0, l = elements.length; i < l; i++) {
        if (elements[i] && containsNode(elements[i], node)) {
          var row = +node.getAttribute('data-index');
          return new Position(i, row);
        }
      }
      return null;
    }
    function containsNode(element, child) {
      while (child && child.parentNode !== element) {
        child = child.parentNode;
      }
      return !!child;
    }
    function getNodeFromPosition(position) {
      var container = containers.elements[position.containerIndex];
      if (!container)
        return null;
      var node = $(container).find('[data-index=' + position.index + ']');
      return node ? node[0] : null;
    }
    function getDirection(from, to) {
      if (!from || !to)
        return 0;
      if (from.containerIndex !== to.containerIndex)
        return from.containerIndex < to.containerIndex ? 1 : -1;
      if (from.index === to.index)
        return 0;
      return from.index < to.index ? 1 : -1;
    }
    function getPositionFromGlobalIndex(globalIndex) {
      var resolvedIndex = globalIndex;
      var resolvedContainerIndex = 0;
      var containerLength;
      var countIndices = 0;
      for (var i = 0, l = containers.elements.length; i < l; i++) {
        containerLength = containers.getContainerLength(i);
        countIndices += containerLength;
        if (countIndices > globalIndex)
          break;
        resolvedContainerIndex = i + 1;
        resolvedIndex -= containerLength;
      }
      return new Position(resolvedContainerIndex, resolvedIndex);
    }
    function getGlobalIndexFromPosition(position) {
      var resolvedIndex = position.index;
      for (var i = position.containerIndex - 1; i >= 0; i--) {
        resolvedIndex += containers.getContainerLength(i);
      }
      return resolvedIndex;
    }
    function getLastPosition() {
      var lastContainerIndex = containers.elements.length - 1;
      var lastIndex = containers.getContainerLength(lastContainerIndex) - 1;
      return new Position(lastContainerIndex, lastIndex);
    }
    exports.getClosest = getClosest;
    exports.getFromNode = getFromNode;
    exports.getNodeFromPosition = getNodeFromPosition;
    exports.getDirection = getDirection;
    exports.getPositionFromGlobalIndex = getPositionFromGlobalIndex;
    exports.getGlobalIndexFromPosition = getGlobalIndexFromPosition;
    exports.getLastPosition = getLastPosition;
  },
  './node_modules/spotify-events/util/Position.js': function (require, module, exports, global) {
    'use strict';
    var Position = function (containerIndex, index) {
      this.containerIndex = containerIndex;
      this.index = index;
    };
    Position.prototype.isSame = function (position) {
      return this.containerIndex === position.containerIndex && this.index === position.index;
    };
    module.exports = Position;
  },
  './node_modules/mout/time/now.js': function (require, module, exports, global) {
    function now() {
      return now.get();
    }
    now.get = typeof Date.now === 'function' ? Date.now : function () {
      return +new Date();
    };
    module.exports = now;
  },
  './node_modules/mout/function/makeIterator_.js': function (require, module, exports, global) {
    var identity = require('./node_modules/mout/function/identity.js');
    var prop = require('./node_modules/mout/function/prop.js');
    var deepMatches = require('./node_modules/mout/object/deepMatches.js');
    function makeIterator(src, thisObj) {
      if (src == null) {
        return identity;
      }
      switch (typeof src) {
      case 'function':
        return typeof thisObj !== 'undefined' ? function (val, i, arr) {
          return src.call(thisObj, val, i, arr);
        } : src;
      case 'object':
        return function (val) {
          return deepMatches(val, src);
        };
      case 'string':
      case 'number':
        return prop(src);
      }
    }
    module.exports = makeIterator;
  },
  './node_modules/mout/collection/forEach.js': function (require, module, exports, global) {
    var make = require('./node_modules/mout/collection/make_.js');
    var arrForEach = require('./node_modules/mout/array/forEach.js');
    var objForEach = require('./node_modules/mout/object/forOwn.js');
    module.exports = make(arrForEach, objForEach);
  },
  './node_modules/mout/collection/map.js': function (require, module, exports, global) {
    var isObject = require('./node_modules/mout/lang/isObject.js');
    var values = require('./node_modules/mout/object/values.js');
    var arrMap = require('./node_modules/mout/array/map.js');
    var makeIterator = require('./node_modules/mout/function/makeIterator_.js');
    function map(list, callback, thisObj) {
      callback = makeIterator(callback, thisObj);
      if (isObject(list) && list.length == null) {
        list = values(list);
      }
      return arrMap(list, function (val, key, list) {
        return callback(val, key, list);
      });
    }
    module.exports = map;
  },
  './node_modules/spotify-live-models/station/image-uri-to-link.js': function (require, module, exports, global) {
    var CDN_URL = 'http://o.scdn.co/';
    function buildWebMosaic(ids, size) {
      var mosaicUrl = CDN_URL + size + '/' + ids[2];
      if (ids.length === 6) {
        mosaicUrl = mosaicUrl + ids[3] + ids[4] + ids[5];
      }
      return mosaicUrl;
    }
    module.exports = function (uri, size) {
      size = size || '300';
      if (!uri) {
        return false;
      }
      if (uri.substring(0, 4) === 'http') {
        return uri;
      }
      var parts = uri.split(':');
      switch (parts[1]) {
      case 'mosaic':
        return buildWebMosaic(parts, size);
      default:
        if (!parts[2]) {
          return '';
        }
        return CDN_URL + size + '/' + parts[2];
      }
    };
  },
  './node_modules/mout/lang/isNumber.js': function (require, module, exports, global) {
    var isKind = require('./node_modules/mout/lang/isKind.js');
    function isNumber(val) {
      return isKind(val, 'Number');
    }
    module.exports = isNumber;
  },
  './node_modules/spotify-handlebars/util/link.js': function (require, module, exports, global) {
    'use strict';
    module.exports = function (uri, base) {
      uri = uri || '';
      var matches = uri.match(/^spotify:(.+)$/);
      if (!matches)
        return uri;
      var parts = matches.pop().replace(/:$/, '').split(/:/);
      var type = parts.shift();
      if (type === 'search')
        parts = [parts.join(':')];
      parts.unshift(base, type);
      return parts.join('/');
    };
  },
  './node_modules/spotify-handlebars/util/type.js': function (require, module, exports, global) {
    'use strict';
    module.exports = function (uri) {
      if (!uri || !uri.split) {
        return null;
      }
      var parts = uri.split(':');
      var result = null;
      switch (parts[1]) {
      case 'album':
        if (parts.length == 4)
          return 'disc';
        else if (parts.length == 3)
          return 'album';
        break;
      case 'artist':
        if (parts.length == 3)
          return 'artist';
        break;
      case 'track':
        if (parts.length == 3)
          return 'track';
        break;
      case 'genre':
        if (parts.length == 3)
          return 'genre';
        break;
      case 'local':
        if (parts.length === 6)
          return 'track';
        else if (parts.length === 4)
          return 'album';
        else if (parts.length === 3)
          return 'artist';
        break;
      case 'user':
        if (parts.length > 3 && parts[3] == 'collection')
          return 'collection';
        if (parts.length > 3 && parts.length <= 5 && parts[2] != 'facebook')
          return 'playlist';
        else if (parts.length == 3)
          return 'user';
        break;
      }
      return result;
    };
  },
  './node_modules/spotify-events/node_modules/elements/zen.js': function (require, module, exports, global) {
    'use strict';
    var forEach = require('./node_modules/mout/array/forEach.js'), map = require('./node_modules/mout/array/map.js');
    var parse = require('./node_modules/spotify-events/node_modules/elements/node_modules/slick/parser.js');
    var $ = require('./node_modules/spotify-events/node_modules/elements/base.js');
    module.exports = function (expression, doc) {
      return $(map(parse(expression), function (expression) {
        var previous, result;
        forEach(expression, function (part, i) {
          var node = (doc || document).createElement(part.tag);
          if (part.id)
            node.id = part.id;
          if (part.classList)
            node.className = part.classList.join(' ');
          if (part.attributes)
            forEach(part.attributes, function (attribute) {
              node.setAttribute(attribute.name, attribute.value || '');
            });
          if (part.pseudos)
            forEach(part.pseudos, function (pseudo) {
              var n = $(node), method = n[pseudo.name];
              if (method)
                method.call(n, pseudo.value);
            });
          if (i === 0) {
            result = node;
          } else if (part.combinator === ' ') {
            previous.appendChild(node);
          } else if (part.combinator === '+') {
            var parentNode = previous.parentNode;
            if (parentNode)
              parentNode.appendChild(node);
          }
          previous = node;
        });
        return result;
      }));
    };
  },
  './node_modules/spotify-events/node_modules/elements/attributes.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/base.js');
    var trim = require('./node_modules/mout/string/trim.js'), forEach = require('./node_modules/mout/array/forEach.js'), filter = require('./node_modules/mout/array/filter.js'), indexOf = require('./node_modules/mout/array/indexOf.js');
    $.implement({
      setAttribute: function (name, value) {
        return this.forEach(function (node) {
          node.setAttribute(name, value);
        });
      },
      getAttribute: function (name) {
        var attr = this[0].getAttributeNode(name);
        return attr && attr.specified ? attr.value : null;
      },
      hasAttribute: function (name) {
        var node = this[0];
        if (node.hasAttribute)
          return node.hasAttribute(name);
        var attr = node.getAttributeNode(name);
        return !!(attr && attr.specified);
      },
      removeAttribute: function (name) {
        return this.forEach(function (node) {
          var attr = node.getAttributeNode(name);
          if (attr)
            node.removeAttributeNode(attr);
        });
      }
    });
    var accessors = {};
    forEach([
      'type',
      'value',
      'name',
      'href',
      'title',
      'id'
    ], function (name) {
      accessors[name] = function (value) {
        return value !== undefined ? this.forEach(function (node) {
          node[name] = value;
        }) : this[0][name];
      };
    });
    forEach([
      'checked',
      'disabled',
      'selected'
    ], function (name) {
      accessors[name] = function (value) {
        return value !== undefined ? this.forEach(function (node) {
          node[name] = !!value;
        }) : !!this[0][name];
      };
    });
    var classes = function (className) {
      var classNames = trim(className).replace(/\s+/g, ' ').split(' '), uniques = {};
      return filter(classNames, function (className) {
        if (className !== '' && !uniques[className])
          return uniques[className] = className;
      }).sort();
    };
    accessors.className = function (className) {
      return className !== undefined ? this.forEach(function (node) {
        node.className = classes(className).join(' ');
      }) : classes(this[0].className).join(' ');
    };
    $.implement({
      attribute: function (name, value) {
        var accessor = accessors[name];
        if (accessor)
          return accessor.call(this, value);
        if (value != null)
          return this.setAttribute(name, value);
        if (value === null)
          return this.removeAttribute(name);
        if (value === undefined)
          return this.getAttribute(name);
      }
    });
    $.implement(accessors);
    $.implement({
      check: function () {
        return this.checked(true);
      },
      uncheck: function () {
        return this.checked(false);
      },
      disable: function () {
        return this.disabled(true);
      },
      enable: function () {
        return this.disabled(false);
      },
      select: function () {
        return this.selected(true);
      },
      deselect: function () {
        return this.selected(false);
      }
    });
    $.implement({
      classNames: function () {
        return classes(this[0].className);
      },
      hasClass: function (className) {
        return indexOf(this.classNames(), className) > -1;
      },
      addClass: function (className) {
        return this.forEach(function (node) {
          var nodeClassName = node.className;
          var classNames = classes(nodeClassName + ' ' + className).join(' ');
          if (nodeClassName !== classNames)
            node.className = classNames;
        });
      },
      removeClass: function (className) {
        return this.forEach(function (node) {
          var classNames = classes(node.className);
          forEach(classes(className), function (className) {
            var index = indexOf(classNames, className);
            if (index > -1)
              classNames.splice(index, 1);
          });
          node.className = classNames.join(' ');
        });
      },
      toggleClass: function (className, force) {
        var add = force !== undefined ? force : !this.hasClass(className);
        if (add)
          this.addClass(className);
        else
          this.removeClass(className);
        return !!add;
      }
    });
    $.prototype.toString = function () {
      var tag = this.tag(), id = this.id(), classes = this.classNames();
      var str = tag;
      if (id)
        str += '#' + id;
      if (classes.length)
        str += '.' + classes.join('.');
      return str;
    };
    var textProperty = document.createElement('div').textContent == null ? 'innerText' : 'textContent';
    $.implement({
      tag: function () {
        return this[0].tagName.toLowerCase();
      },
      html: function (html) {
        return html !== undefined ? this.forEach(function (node) {
          node.innerHTML = html;
        }) : this[0].innerHTML;
      },
      text: function (text) {
        return text !== undefined ? this.forEach(function (node) {
          node[textProperty] = text;
        }) : this[0][textProperty];
      },
      data: function (key, value) {
        switch (value) {
        case undefined:
          return this.getAttribute('data-' + key);
        case null:
          return this.removeAttribute('data-' + key);
        default:
          return this.setAttribute('data-' + key, value);
        }
      }
    });
    module.exports = $;
  },
  './node_modules/spotify-events/node_modules/elements/traversal.js': function (require, module, exports, global) {
    'use strict';
    var map = require('./node_modules/mout/array/map.js');
    var slick = require('./node_modules/spotify-events/node_modules/elements/node_modules/slick/index.js');
    var $ = require('./node_modules/spotify-events/node_modules/elements/base.js');
    var gen = function (combinator, expression) {
      return map(slick.parse(expression || '*'), function (part) {
        return combinator + ' ' + part;
      }).join(', ');
    };
    var push_ = Array.prototype.push;
    $.implement({
      search: function (expression) {
        if (this.length === 1)
          return $(slick.search(expression, this[0], new $()));
        var buffer = [];
        for (var i = 0, node; node = this[i]; i++)
          push_.apply(buffer, slick.search(expression, node));
        buffer = $(buffer);
        return buffer && buffer.sort();
      },
      find: function (expression) {
        if (this.length === 1)
          return $(slick.find(expression, this[0]));
        for (var i = 0, node; node = this[i]; i++) {
          var found = slick.find(expression, node);
          if (found)
            return $(found);
        }
        return null;
      },
      sort: function () {
        return slick.sort(this);
      },
      matches: function (expression) {
        return slick.matches(this[0], expression);
      },
      contains: function (node) {
        return slick.contains(this[0], node);
      },
      nextSiblings: function (expression) {
        return this.search(gen('~', expression));
      },
      nextSibling: function (expression) {
        return this.find(gen('+', expression));
      },
      previousSiblings: function (expression) {
        return this.search(gen('!~', expression));
      },
      previousSibling: function (expression) {
        return this.find(gen('!+', expression));
      },
      children: function (expression) {
        return this.search(gen('>', expression));
      },
      firstChild: function (expression) {
        return this.find(gen('^', expression));
      },
      lastChild: function (expression) {
        return this.find(gen('!^', expression));
      },
      parent: function (expression) {
        var buffer = [];
        loop:
          for (var i = 0, node; node = this[i]; i++)
            while ((node = node.parentNode) && node !== document) {
              if (!expression || slick.matches(node, expression)) {
                buffer.push(node);
                break loop;
                break;
              }
            }
        return $(buffer);
      },
      parents: function (expression) {
        var buffer = [];
        for (var i = 0, node; node = this[i]; i++)
          while ((node = node.parentNode) && node !== document) {
            if (!expression || slick.matches(node, expression))
              buffer.push(node);
          }
        return $(buffer);
      }
    });
    module.exports = $;
  },
  './node_modules/mout/array/findIndex.js': function (require, module, exports, global) {
    var makeIterator = require('./node_modules/mout/function/makeIterator_.js');
    function findIndex(arr, iterator, thisObj) {
      iterator = makeIterator(iterator, thisObj);
      if (arr == null) {
        return -1;
      }
      var i = -1, len = arr.length;
      while (++i < len) {
        if (iterator(arr[i], i, arr)) {
          return i;
        }
      }
      return -1;
    }
    module.exports = findIndex;
  },
  './node_modules/spotify-events/node_modules/elements/index.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/base.js');
    require('./node_modules/spotify-events/node_modules/elements/attributes.js');
    require('./node_modules/spotify-events/node_modules/elements/events.js');
    require('./node_modules/spotify-events/node_modules/elements/insertion.js');
    require('./node_modules/spotify-events/node_modules/elements/traversal.js');
    require('./node_modules/spotify-events/node_modules/elements/delegation.js');
    module.exports = $;
  },
  './node_modules/spotify-events/dragndrop/custom/sortlist.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var liburi = require('./node_modules/spotify-liburi/src/uri.js');
    var sortUriUtils = require('./node_modules/spotify-live-sort-uri/index.js');
    var hooks = require('./node_modules/spotify-events/dragndrop/util/hooks.js');
    var eventModel = require('./node_modules/spotify-events/dragndrop/util/eventmodel.js');
    var selection = require('./node_modules/spotify-events/selection/index.js');
    var SELECTOR_DRAGGABLE = 'a, [draggable]';
    var SELECTOR_LIST = '[data-list]';
    var dragSelectionState = null;
    function onDragStart(event, target) {
      dragSelectionState = selection.getIndicesPerList();
    }
    function onDragEnd(event, target) {
      dragSelectionState = null;
    }
    function onListDropValidation(result, event, list, location) {
      var contextUri = list.getAttribute('data-uri');
      if (!contextUri)
        return;
      if (sortUriUtils.isValid(contextUri) && event.type !== 'drop') {
        result.valid = false;
      }
    }
    function onListTargetValidation(result, list) {
      var contextUri = list.getAttribute('data-uri');
      if (!contextUri)
        return;
      if (!sortUriUtils.isValid(contextUri))
        return;
      if (!dragSelectionState) {
        result.valid = true;
        return;
      }
      if (dragSelectionState.length === 1) {
        if (dragSelectionState[0].uri !== contextUri) {
          result.valid = true;
        }
      }
    }
    function onIsListOfTracks(result, liveList, contextUri) {
      if (sortUriUtils.isValid(contextUri)) {
        var originUri = sortUriUtils.getOriginUri(contextUri);
        if (originUri) {
          var uriObject = liburi.from(originUri);
          var type = uriObject && uriObject.type;
          if (type === liburi.Type.PLAYLIST || type === liburi.Type.STARRED) {
            result.valid = true;
          }
        }
      }
    }
    function attach() {
      eventModel.delegate('dragstart', SELECTOR_DRAGGABLE, onDragStart);
      eventModel.delegate('dragend', 'body', onDragEnd);
      hooks.add('list-drop-validation', onListDropValidation);
      hooks.add('list-target-validation', onListTargetValidation);
      hooks.add('is-list-of-tracks', onIsListOfTracks);
    }
    function detach() {
      eventModel.undelegate('dragstart', SELECTOR_DRAGGABLE, onDragStart);
      eventModel.undelegate('dragend', 'body', onDragEnd);
      hooks.remove('list-drop-validation', onListDropValidation);
      hooks.remove('list-target-validation', onListTargetValidation);
      hooks.remove('is-list-of-tracks', onIsListOfTracks);
    }
    exports.attach = attach;
    exports.detach = detach;
  },
  './node_modules/spotify-events/dragndrop/custom/rootlist.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var liburi = require('./node_modules/spotify-liburi/src/uri.js');
    var live = require('./node_modules/spotify-live/index.js');
    var intersection = require('./node_modules/mout/array/intersection.js');
    var indexOf = require('./node_modules/mout/array/indexOf.js');
    var hooks = require('./node_modules/spotify-events/dragndrop/util/hooks.js');
    var eventModel = require('./node_modules/spotify-events/dragndrop/util/eventmodel.js');
    var selection = require('./node_modules/spotify-events/selection/index.js');
    var SELECTOR_LIST = '[data-list]';
    var SELECTOR_LIST_ITEM = '[data-list-item]';
    var SELECTOR_DRAGGABLE = 'a, [draggable]';
    var ATTR_TARGET = 'data-drop-target';
    var dragFolderElement = null;
    function onDragStart(event, target) {
      dragFolderElement = null;
      var uris = selection.getUris();
      if (uris.length > 1)
        return;
      var uri = uris[0];
      var uriObject = uri && liburi.fromString(uri);
      if (!uriObject)
        return;
      if (uriObject.type === liburi.Type.FOLDER) {
        var selectedNodes = selection.getNodes();
        for (var i = 0, l = selectedNodes.length; i < l; i++) {
          var node = selectedNodes[i];
          if (node.getAttribute('data-uri') === uri) {
            dragFolderElement = node;
            break;
          }
        }
      }
    }
    function onDragEnd(event, target) {
      dragFolderElement = null;
    }
    function onSetDragData(event, uris, opt_context) {
      if (opt_context !== 'spotify:rootlist') {
        var followedPlaylistCount = 0;
        for (var i = 0, l = uris.length; i < l; i++) {
          var uriObject = liburi.from(uris[i]);
          var type = uriObject && uriObject.type;
          if (type === liburi.Type.PLAYLIST || type === liburi.Type.STARRED) {
            var isFollowing = live(uris[i]).get('added');
            if (isFollowing)
              followedPlaylistCount++;
          } else {
            break;
          }
        }
        if (followedPlaylistCount === uris.length) {
          event.dataTransfer.setData('text/x-spotify-only-followed-playlists', '');
        }
      }
    }
    function onListDropValidation(result, event, list, location) {
      var contextUri = list.getAttribute('data-uri');
      if (contextUri === 'spotify:rootlist') {
        if (hasOnlyFollowedPlaylists(event)) {
          result.valid = false;
          return;
        }
        if (isInsideDraggedFolder(event, location)) {
          result.valid = false;
          return;
        }
        if (isInFolderBottomHalf(event)) {
          if (event.type !== 'drop' || !isMatchingTarget(event, list)) {
            result.valid = false;
            return;
          }
        }
      }
    }
    function onTargetValidation(result, event, target) {
      target = $(target);
      var matches = target.matches(SELECTOR_LIST);
      var list = matches ? target : target.parent(SELECTOR_LIST);
      if (list) {
        list = list[0];
        var contextUri = list.getAttribute('data-uri');
        if (contextUri === 'spotify:rootlist') {
          if (hasOnlyFollowedPlaylists(event)) {
            result.valid = false;
            return;
          }
          if (event.type !== 'dragleave' && isMatchingTarget(event, list)) {
            var folderNode = getFolderNode(event);
            if (folderNode) {
              if (isBelowMiddleOfNode(event.clientY, folderNode)) {
                result.valid = true;
              } else {
                result.valid = false;
              }
              return;
            }
          }
        }
      }
    }
    function onGetMoveIndices(contextUri, liveList, indices) {
      if (contextUri === 'spotify:rootlist') {
        var firstIndex = indices[0];
        var firstRow = liveList.get(firstIndex);
        var firstItem = firstRow && firstRow.get('playlist');
        var firstUri = firstItem && firstItem.uri;
        var firstUriType = firstUri && liburi.fromString(firstUri).type;
        var isFolder = firstUriType === liburi.Type.FOLDER;
        if (isFolder) {
          if (indices.length === 1) {
            var length = getFolderLength(liveList, firstUri, firstIndex);
            for (var i = 1; i <= length; i++) {
              indices.push(firstIndex + i);
            }
          }
          if (indices.length === 1) {
            indices.length = 0;
            return;
          }
          var lastRow = liveList.get(indices[indices.length - 1]);
          var lastItem = lastRow && lastRow.get('playlist');
          var lastUri = lastItem && lastItem.uri;
          if (lastUri !== firstUri + ':end') {
            indices.length = 0;
            return;
          }
        }
      }
    }
    function hasOnlyFollowedPlaylists(event) {
      var types = event.dataTransfer.types;
      if (indexOf(types, 'text/x-spotify-only-followed-playlists') > -1) {
        return true;
      }
      return false;
    }
    function isInsideDraggedFolder(event, location) {
      if (dragFolderElement) {
        var rowNode = location === 'below' ? getLastRowNode() : getRowNode(event);
        if (rowNode) {
          var targetIndex = +rowNode.getAttribute('data-index');
          if (location === 'inside') {
            if (!isBelowMiddleOfNode(event.clientY, rowNode)) {
              targetIndex--;
            }
          }
          if (isIndexInsideDraggedFolder(targetIndex)) {
            return true;
          }
        }
      }
      return false;
    }
    function isInFolderBottomHalf(event) {
      var folderNode = getFolderNode(event);
      if (folderNode) {
        return isBelowMiddleOfNode(event.clientY, folderNode);
      }
      return false;
    }
    function isBelowMiddleOfNode(y, node) {
      var rect = node.getBoundingClientRect();
      return y >= rect.top + rect.height / 2;
    }
    function isIndexInsideDraggedFolder(index) {
      if (!dragFolderElement)
        return false;
      var liveList = live('spotify:rootlist').get('rows');
      if (!liveList)
        return false;
      var folderUri = dragFolderElement.getAttribute('data-uri');
      if (!folderUri)
        return false;
      var start = +dragFolderElement.getAttribute('data-index');
      var end = start + getFolderLength(liveList, folderUri, start);
      if (start > -1 && end > start && (index >= start && index <= end)) {
        return true;
      }
      return false;
    }
    function isMatchingTarget(event, node) {
      var eventTypes = event.dataTransfer.types;
      var nodeTypes = node.getAttribute(ATTR_TARGET);
      if (nodeTypes) {
        var matching = intersection(nodeTypes.split('|'), eventTypes);
        if (matching.length > 0)
          return true;
      }
      return false;
    }
    function getFolderNode(event) {
      var rowNode = getRowNode(event);
      if (rowNode) {
        var uri = rowNode.getAttribute('data-uri');
        var uriObject = liburi.from(uri);
        if (uriObject && uriObject.type === liburi.Type.FOLDER) {
          return rowNode;
        }
      }
      return null;
    }
    function getRowNode(event) {
      var target = $(event.target);
      var matches = target.matches(SELECTOR_LIST_ITEM);
      var row = matches ? target : target.parent(SELECTOR_LIST_ITEM);
      return row ? row[0] : null;
    }
    function getLastRowNode() {
      var lists = $(SELECTOR_LIST);
      var lastList = lists && lists[lists.length - 1];
      if (lastList) {
        var listItems = $(lastList).search(SELECTOR_LIST_ITEM);
        var lastItem = listItems && listItems[listItems.length - 1];
        if (lastItem)
          return lastItem;
      }
      return null;
    }
    function getFolderLength(liveList, folderUri, index) {
      var rowAtIndex = liveList.get(index);
      var itemAtIndex = rowAtIndex && rowAtIndex.get('playlist');
      var uriAtIndex = itemAtIndex && itemAtIndex.uri;
      if (uriAtIndex !== folderUri)
        return 0;
      var folderEndUri = folderUri + ':end';
      var amount = 0;
      for (var i = index + 1, l = liveList.length; i < l; i++) {
        amount++;
        rowAtIndex = liveList.get(i);
        itemAtIndex = rowAtIndex && rowAtIndex.get('playlist');
        uriAtIndex = itemAtIndex && itemAtIndex.uri;
        if (uriAtIndex === folderEndUri)
          break;
      }
      return amount;
    }
    function attach() {
      eventModel.delegate('dragstart', SELECTOR_DRAGGABLE, onDragStart);
      eventModel.delegate('dragend', 'body', onDragEnd);
      hooks.add('set-drag-data', onSetDragData);
      hooks.add('list-drop-validation', onListDropValidation);
      hooks.add('target-validation', onTargetValidation);
      hooks.add('get-move-indices', onGetMoveIndices);
    }
    function detach() {
      eventModel.undelegate('dragstart', SELECTOR_DRAGGABLE, onDragStart);
      eventModel.undelegate('dragend', 'body', onDragEnd);
      hooks.remove('set-drag-data', onSetDragData);
      hooks.remove('list-drop-validation', onListDropValidation);
      hooks.remove('target-validation', onTargetValidation);
      hooks.remove('get-move-indices', onGetMoveIndices);
    }
    exports.attach = attach;
    exports.detach = detach;
  },
  './node_modules/mout/lang/isObject.js': function (require, module, exports, global) {
    var isKind = require('./node_modules/mout/lang/isKind.js');
    function isObject(val) {
      return isKind(val, 'Object');
    }
    module.exports = isObject;
  },
  './node_modules/mout/lang/deepClone.js': function (require, module, exports, global) {
    var clone = require('./node_modules/mout/lang/clone.js');
    var forOwn = require('./node_modules/mout/object/forOwn.js');
    var kindOf = require('./node_modules/mout/lang/kindOf.js');
    var isPlainObject = require('./node_modules/mout/lang/isPlainObject.js');
    function deepClone(val, instanceClone) {
      switch (kindOf(val)) {
      case 'Object':
        return cloneObject(val, instanceClone);
      case 'Array':
        return cloneArray(val, instanceClone);
      default:
        return clone(val);
      }
    }
    function cloneObject(source, instanceClone) {
      if (isPlainObject(source)) {
        var out = {};
        forOwn(source, function (val, key) {
          this[key] = deepClone(val, instanceClone);
        }, out);
        return out;
      } else if (instanceClone) {
        return instanceClone(source);
      } else {
        return source;
      }
    }
    function cloneArray(arr, instanceClone) {
      var out = [], i = -1, n = arr.length, val;
      while (++i < n) {
        out[i] = deepClone(arr[i], instanceClone);
      }
      return out;
    }
    module.exports = deepClone;
  },
  './node_modules/spotify-dom-logger/node_modules/spotify-client-logger/src/logger.js': function (require, module, exports, global) {
    var requestTool = require('./node_modules/spotify-dom-logger/node_modules/spotify-client-logger/node_modules/spotify-bridge-request/index.js'), consoleAvailable = typeof console !== 'undefined', showInConsole = false, SUCCESS_MSG = 'Success client-log', FAIL_MSG = 'Failed client-log', CONSOLE_METHODS = {
        LOG: 'log',
        ERROR: 'error'
      }, EVENTS = {
        USER_IMPRESSION: 'user:impression',
        USER_HIT: 'user:hit',
        USER_SELECT: 'user:select',
        USER_HOVER: 'user:hover',
        USER_HOLD_TIMER: 'user:hold',
        INFO_TIMER_DEFAULT: 'info:timer',
        INFO_STATE_LOAD_TIMER: 'info:state_load_timer',
        INFO_DEFAULT: 'info:default',
        INFO_WARN: 'info:warn',
        ERROR_DEFAULT: 'error:default',
        ERROR_USER_ACTION_FAIL: 'error:user_action_fail',
        ERROR_RENDER_FAIL: 'error:render_fail'
      };
    var mixin = function (base, addition) {
      var prop;
      for (prop in addition) {
        if (!base[prop]) {
          base[prop] = addition[prop];
        }
      }
    };
    try {
      showInConsole = window.localStorage.getItem('spotify_client_logger');
    } catch (e) {
    }
    function Logger(obj) {
      this.timers = {};
      if (consoleAvailable) {
        this.showInConsole = obj && obj.console === 'false' ? false : showInConsole && showInConsole === 'false' ? false : true;
      }
    }
    Logger.prototype._requester = function (args, callback) {
      requestTool('application_client_event', args, callback);
    };
    Logger.prototype._buildBackendData = function (event, logData) {
      var eventVersion, context, _this = this, testVersion = '', data = {};
      if (logData.length < 2) {
        logData = logData[0];
      }
      if (Array.isArray(logData)) {
        data = typeof logData[1] === 'object' ? logData[1] : {};
        data.event_version = logData[0];
        data.context = logData[2];
      } else if (typeof logData === 'string') {
        return [
          '',
          event,
          logData,
          testVersion,
          {}
        ];
      } else if (typeof logData === 'object') {
        data = logData;
      } else {
        throw event + ' must log either an object literal or a string';
      }
      if (event === EVENTS.USER_HIT || event === EVENTS.USER_SELECT) {
        if (!data.event_version) {
          data.event_version = '';
        }
        if (!data.target_uri) {
          data.target_uri = '';
        }
        if (!data.name) {
          data.name = '';
        }
      }
      if (data.event_version) {
        eventVersion = data.event_version || '';
        delete data.event_version;
      } else {
        eventVersion = '';
      }
      if (data.context) {
        context = data.context;
        delete data.context;
      } else {
        context = '';
      }
      if (this.constant) {
        mixin(data, this.constant);
      }
      return [
        context,
        event,
        eventVersion,
        testVersion,
        data
      ];
    };
    Logger.prototype._log = function (backendData) {
      var _this = this;
      var logcallback = function (err) {
        if (err && _this.showInConsole) {
          _this._logInConsole(CONSOLE_METHODS.ERROR, FAIL_MSG, backendData);
        } else if (_this.showInConsole) {
          _this._logInConsole(CONSOLE_METHODS.LOG, SUCCESS_MSG, backendData);
        }
      };
      this._requester(backendData, logcallback);
    };
    Logger.prototype._logInConsole = function (consoleMethod, msg, backendData) {
      var consoleFunction = console[consoleMethod] ? console[consoleMethod] : console.log;
      if (typeof consoleFunction == 'object') {
        consoleFunction = Function.prototype.bind.call(consoleFunction, console);
      }
      consoleFunction.apply(console, [
        msg,
        backendData
      ]);
    };
    Logger.prototype.userImpression = function () {
      var args = Array.prototype.slice.call(arguments, 0);
      this._log(this._buildBackendData(EVENTS.USER_IMPRESSION, args));
    };
    Logger.prototype.userHit = function () {
      var args = Array.prototype.slice.call(arguments, 0);
      this._log(this._buildBackendData(EVENTS.USER_HIT, args));
    };
    Logger.prototype.userSelect = function () {
      var args = Array.prototype.slice.call(arguments, 0);
      this._log(this._buildBackendData(EVENTS.USER_SELECT, args));
    };
    Logger.prototype.userHover = function () {
      var args = Array.prototype.slice.call(arguments, 0);
      this._log(this._buildBackendData(EVENTS.USER_HOVER, args));
    };
    Logger.prototype.userHold = function () {
      var args = Array.prototype.slice.call(arguments, 0);
      this._log(this._buildBackendData(EVENTS.USER_HOLD_TIMER, args));
    };
    Logger.prototype.info = function () {
      var args = Array.prototype.slice.call(arguments, 0);
      this._log(this._buildBackendData(EVENTS.INFO_DEFAULT, args));
    };
    Logger.prototype.infoWarn = function () {
      var args = Array.prototype.slice.call(arguments, 0);
      this._log(this._buildBackendData(EVENTS.INFO_WARN, args));
    };
    Logger.prototype.infoStageLoadTimer = function () {
      var args = Array.prototype.slice.call(arguments, 0);
      this._log(this._buildBackendData(EVENTS.INFO_STATE_LOAD_TIMER, args));
    };
    Logger.prototype.infoTimer = function () {
      var args = Array.prototype.slice.call(arguments, 0);
      this._log(this._buildBackendData(EVENTS.INFO_TIMER_DEFAULT, args));
    };
    Logger.prototype.error = function () {
      var args = Array.prototype.slice.call(arguments, 0);
      this._log(this._buildBackendData(EVENTS.ERROR_DEFAULT, args));
    };
    Logger.prototype.errorUserActionFail = function () {
      var args = Array.prototype.slice.call(arguments, 0);
      this._log(this._buildBackendData(EVENTS.ERROR_USER_ACTION_FAIL, args));
    };
    Logger.prototype.errorRenderFail = function () {
      var args = Array.prototype.slice.call(arguments, 0);
      this._log(this._buildBackendData(EVENTS.ERROR_RENDER_FAIL, args));
    };
    Logger.prototype.startTimer = function (name) {
      this.timers[name] = new Date().getTime();
    };
    Logger.prototype.logTimer = function (name, logData) {
      if (!this.timers[name])
        return;
      var data = logData || {};
      data.timerName = name;
      data.elapsedTime = (new Date().getTime() - this.timers[name]) / 1000;
      this._log(this._buildBackendData(EVENTS.INFO_TIMER_DEFAULT, data));
    };
    Logger.prototype.setConstant = function (constant) {
      if (typeof constant !== 'object')
        return;
      this.constant = constant;
    };
    module.exports = Logger;
  },
  './node_modules/spotify-crypto/src/base62.js': function (require, module, exports, global) {
    'use strict';
    var digits = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    var invHexDigits = {};
    var invDigits = {};
    for (var i = 0; i < digits.length; ++i) {
      invDigits[digits[i]] = i;
    }
    for (var i = 0; i < 16; ++i) {
      invHexDigits['0123456789abcdef'[i]] = i;
    }
    for (var i = 0; i < 16; ++i) {
      invHexDigits['0123456789ABCDEF'[i]] = i;
    }
    function mul(lhs, rhs, base) {
      var rest = 0;
      for (var i = 0; i < lhs.length; ++i) {
        var tmp = lhs[i] * rhs + rest;
        lhs[i] = tmp % base;
        rest = ~~(tmp / base);
      }
      while (rest) {
        lhs.push(rest % base);
        rest = ~~(rest / base);
      }
    }
    function madd(acc, lhs, rhs, base) {
      var rest = 0;
      for (var i = 0; i < lhs.length; ++i) {
        var tmp = ~~acc[i] + lhs[i] * rhs + rest;
        acc[i] = tmp % base;
        rest = ~~(tmp / base);
      }
      while (rest) {
        var tmp = ~~acc[i] + rest;
        acc[i] = tmp % base;
        rest = ~~(tmp / base);
        ++i;
      }
    }
    function convert(data, fromBase, toBase) {
      var r = [0];
      var b = [1];
      for (var i = 0; i < data.length; ++i) {
        madd(r, b, data[i], toBase);
        mul(b, fromBase, toBase);
      }
      return r;
    }
    function mapr(data, mapping) {
      for (var i = 0, r = []; i < data.length; ++i) {
        r.push(mapping[data[i]]);
      }
      return r.reverse();
    }
    function pad(data, length) {
      while (data.length < length) {
        data.push(0);
      }
      return data;
    }
    module.exports = {
      fromBytes: function (data, length) {
        var r = convert(data.slice(0).reverse(), 256, 62);
        return mapr(pad(r, length), digits).join('');
      },
      toBytes: function (str, length) {
        var r = convert(mapr(str, invDigits), 62, 256);
        return pad(r, length).reverse();
      },
      toHex: function (str, length) {
        var r = convert(mapr(str, invDigits), 62, 16);
        return mapr(pad(r, length), digits).join('');
      },
      fromHex: function (str, length) {
        var r = convert(mapr(str, invHexDigits), 16, 62);
        return mapr(pad(r, length), digits).join('');
      }
    };
  },
  './node_modules/spotify-cosmos-api/env/request.js': function (require, module, exports, global) {
    'use strict';
    var defer = require('./node_modules/spotify-cosmos-api/node_modules/spotify-deferred/src/deferred.js');
    function ClientRequest(resolver, requestId, data, onsuccess, onerror) {
      this._requestId = requestId;
      this._resolver = resolver;
      this._requestData = data;
      this._successCallback = onsuccess;
      this._errorCallback = onerror;
      this._status = ClientRequest.status.INITIALIZED;
    }
    exports.ClientRequest = ClientRequest;
    ClientRequest.status = {
      INITIALIZED: 'INITIALIZED',
      CLOSED: 'CLOSED',
      OPEN: 'OPEN'
    };
    ClientRequest.messages = {
      OPEN: 'cosmos_request_create',
      PULL: 'cosmos_request_pull',
      CLOSE: 'cosmos_request_cancel'
    };
    ClientRequest.prototype.open = function () {
      if (this._status === ClientRequest.status.INITIALIZED) {
        this._status = ClientRequest.status.OPEN;
        this._sendRequest(ClientRequest.messages.OPEN, this._requestData);
      }
    };
    ClientRequest.prototype.pull = function () {
      if (this._status === ClientRequest.status.OPEN) {
        this._sendRequest(ClientRequest.messages.PULL, this._requestData);
      }
      return this._status;
    };
    ClientRequest.prototype.close = function () {
      if (this._status === ClientRequest.status.OPEN) {
        this._status = ClientRequest.status.CLOSE;
        this._sendRequest(ClientRequest.messages.CLOSE);
      }
    };
    ClientRequest.prototype.onClose = function () {
    };
    ClientRequest.prototype._sendRequest = function (requestName, data) {
      this._resolver._sendRequest(requestName, this._requestId, data || {});
    };
    ClientRequest.prototype._handleResponse = function (requestName, data) {
      var self = this;
      var status = data && data.status;
      var callback;
      if (requestName === ClientRequest.messages.CLOSE) {
        this._successCallback = null;
        this._errorCallback = null;
        this._requestData = null;
        this.onClose(this._requestId);
        return;
      }
      callback = this._successCallback;
      callback = typeof callback === 'function' ? callback : function () {
      };
      defer(callback.bind(this, data));
    };
  },
  './node_modules/handlebars/dist/cjs/handlebars/base.js': function (require, module, exports, global) {
    'use strict';
    var Utils = require('./node_modules/handlebars/dist/cjs/handlebars/utils.js');
    var Exception = require('./node_modules/handlebars/dist/cjs/handlebars/exception.js')['default'];
    var VERSION = '1.3.0';
    exports.VERSION = VERSION;
    var COMPILER_REVISION = 4;
    exports.COMPILER_REVISION = COMPILER_REVISION;
    var REVISION_CHANGES = {
        1: '<= 1.0.rc.2',
        2: '== 1.0.0-rc.3',
        3: '== 1.0.0-rc.4',
        4: '>= 1.0.0'
      };
    exports.REVISION_CHANGES = REVISION_CHANGES;
    var isArray = Utils.isArray, isFunction = Utils.isFunction, toString = Utils.toString, objectType = '[object Object]';
    function HandlebarsEnvironment(helpers, partials) {
      this.helpers = helpers || {};
      this.partials = partials || {};
      registerDefaultHelpers(this);
    }
    exports.HandlebarsEnvironment = HandlebarsEnvironment;
    HandlebarsEnvironment.prototype = {
      constructor: HandlebarsEnvironment,
      logger: logger,
      log: log,
      registerHelper: function (name, fn, inverse) {
        if (toString.call(name) === objectType) {
          if (inverse || fn) {
            throw new Exception('Arg not supported with multiple helpers');
          }
          Utils.extend(this.helpers, name);
        } else {
          if (inverse) {
            fn.not = inverse;
          }
          this.helpers[name] = fn;
        }
      },
      registerPartial: function (name, str) {
        if (toString.call(name) === objectType) {
          Utils.extend(this.partials, name);
        } else {
          this.partials[name] = str;
        }
      }
    };
    function registerDefaultHelpers(instance) {
      instance.registerHelper('helperMissing', function (arg) {
        if (arguments.length === 2) {
          return undefined;
        } else {
          throw new Exception('Missing helper: \'' + arg + '\'');
        }
      });
      instance.registerHelper('blockHelperMissing', function (context, options) {
        var inverse = options.inverse || function () {
          }, fn = options.fn;
        if (isFunction(context)) {
          context = context.call(this);
        }
        if (context === true) {
          return fn(this);
        } else if (context === false || context == null) {
          return inverse(this);
        } else if (isArray(context)) {
          if (context.length > 0) {
            return instance.helpers.each(context, options);
          } else {
            return inverse(this);
          }
        } else {
          return fn(context);
        }
      });
      instance.registerHelper('each', function (context, options) {
        var fn = options.fn, inverse = options.inverse;
        var i = 0, ret = '', data;
        if (isFunction(context)) {
          context = context.call(this);
        }
        if (options.data) {
          data = createFrame(options.data);
        }
        if (context && typeof context === 'object') {
          if (isArray(context)) {
            for (var j = context.length; i < j; i++) {
              if (data) {
                data.index = i;
                data.first = i === 0;
                data.last = i === context.length - 1;
              }
              ret = ret + fn(context[i], { data: data });
            }
          } else {
            for (var key in context) {
              if (context.hasOwnProperty(key)) {
                if (data) {
                  data.key = key;
                  data.index = i;
                  data.first = i === 0;
                }
                ret = ret + fn(context[key], { data: data });
                i++;
              }
            }
          }
        }
        if (i === 0) {
          ret = inverse(this);
        }
        return ret;
      });
      instance.registerHelper('if', function (conditional, options) {
        if (isFunction(conditional)) {
          conditional = conditional.call(this);
        }
        if (!options.hash.includeZero && !conditional || Utils.isEmpty(conditional)) {
          return options.inverse(this);
        } else {
          return options.fn(this);
        }
      });
      instance.registerHelper('unless', function (conditional, options) {
        return instance.helpers['if'].call(this, conditional, {
          fn: options.inverse,
          inverse: options.fn,
          hash: options.hash
        });
      });
      instance.registerHelper('with', function (context, options) {
        if (isFunction(context)) {
          context = context.call(this);
        }
        if (!Utils.isEmpty(context))
          return options.fn(context);
      });
      instance.registerHelper('log', function (context, options) {
        var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
        instance.log(level, context);
      });
    }
    var logger = {
        methodMap: {
          0: 'debug',
          1: 'info',
          2: 'warn',
          3: 'error'
        },
        DEBUG: 0,
        INFO: 1,
        WARN: 2,
        ERROR: 3,
        level: 3,
        log: function (level, obj) {
          if (logger.level <= level) {
            var method = logger.methodMap[level];
            if (typeof console !== 'undefined' && console[method]) {
              console[method].call(console, obj);
            }
          }
        }
      };
    exports.logger = logger;
    function log(level, obj) {
      logger.log(level, obj);
    }
    exports.log = log;
    var createFrame = function (object) {
      var obj = {};
      Utils.extend(obj, object);
      return obj;
    };
    exports.createFrame = createFrame;
  },
  './node_modules/handlebars/dist/cjs/handlebars/safe-string.js': function (require, module, exports, global) {
    'use strict';
    function SafeString(string) {
      this.string = string;
    }
    SafeString.prototype.toString = function () {
      return '' + this.string;
    };
    exports['default'] = SafeString;
  },
  './node_modules/handlebars/dist/cjs/handlebars/exception.js': function (require, module, exports, global) {
    'use strict';
    var errorProps = [
        'description',
        'fileName',
        'lineNumber',
        'message',
        'name',
        'number',
        'stack'
      ];
    function Exception(message, node) {
      var line;
      if (node && node.firstLine) {
        line = node.firstLine;
        message += ' - ' + line + ':' + node.firstColumn;
      }
      var tmp = Error.prototype.constructor.call(this, message);
      for (var idx = 0; idx < errorProps.length; idx++) {
        this[errorProps[idx]] = tmp[errorProps[idx]];
      }
      if (line) {
        this.lineNumber = line;
        this.column = node.firstColumn;
      }
    }
    Exception.prototype = new Error();
    exports['default'] = Exception;
  },
  './node_modules/handlebars/dist/cjs/handlebars/utils.js': function (require, module, exports, global) {
    'use strict';
    var SafeString = require('./node_modules/handlebars/dist/cjs/handlebars/safe-string.js')['default'];
    var escape = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        '\'': '&#x27;',
        '`': '&#x60;'
      };
    var badChars = /[&<>"'`]/g;
    var possible = /[&<>"'`]/;
    function escapeChar(chr) {
      return escape[chr] || '&amp;';
    }
    function extend(obj, value) {
      for (var key in value) {
        if (Object.prototype.hasOwnProperty.call(value, key)) {
          obj[key] = value[key];
        }
      }
    }
    exports.extend = extend;
    var toString = Object.prototype.toString;
    exports.toString = toString;
    var isFunction = function (value) {
      return typeof value === 'function';
    };
    if (isFunction(/x/)) {
      isFunction = function (value) {
        return typeof value === 'function' && toString.call(value) === '[object Function]';
      };
    }
    var isFunction;
    exports.isFunction = isFunction;
    var isArray = Array.isArray || function (value) {
        return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
      };
    exports.isArray = isArray;
    function escapeExpression(string) {
      if (string instanceof SafeString) {
        return string.toString();
      } else if (!string && string !== 0) {
        return '';
      }
      string = '' + string;
      if (!possible.test(string)) {
        return string;
      }
      return string.replace(badChars, escapeChar);
    }
    exports.escapeExpression = escapeExpression;
    function isEmpty(value) {
      if (!value && value !== 0) {
        return true;
      } else if (isArray(value) && value.length === 0) {
        return true;
      } else {
        return false;
      }
    }
    exports.isEmpty = isEmpty;
  },
  './node_modules/handlebars/dist/cjs/handlebars/runtime.js': function (require, module, exports, global) {
    'use strict';
    var Utils = require('./node_modules/handlebars/dist/cjs/handlebars/utils.js');
    var Exception = require('./node_modules/handlebars/dist/cjs/handlebars/exception.js')['default'];
    var COMPILER_REVISION = require('./node_modules/handlebars/dist/cjs/handlebars/base.js').COMPILER_REVISION;
    var REVISION_CHANGES = require('./node_modules/handlebars/dist/cjs/handlebars/base.js').REVISION_CHANGES;
    function checkRevision(compilerInfo) {
      var compilerRevision = compilerInfo && compilerInfo[0] || 1, currentRevision = COMPILER_REVISION;
      if (compilerRevision !== currentRevision) {
        if (compilerRevision < currentRevision) {
          var runtimeVersions = REVISION_CHANGES[currentRevision], compilerVersions = REVISION_CHANGES[compilerRevision];
          throw new Exception('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
        } else {
          throw new Exception('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
        }
      }
    }
    exports.checkRevision = checkRevision;
    function template(templateSpec, env) {
      if (!env) {
        throw new Exception('No environment passed to template');
      }
      var invokePartialWrapper = function (partial, name, context, helpers, partials, data) {
        var result = env.VM.invokePartial.apply(this, arguments);
        if (result != null) {
          return result;
        }
        if (env.compile) {
          var options = {
              helpers: helpers,
              partials: partials,
              data: data
            };
          partials[name] = env.compile(partial, { data: data !== undefined }, env);
          return partials[name](context, options);
        } else {
          throw new Exception('The partial ' + name + ' could not be compiled when running in runtime-only mode');
        }
      };
      var container = {
          escapeExpression: Utils.escapeExpression,
          invokePartial: invokePartialWrapper,
          programs: [],
          program: function (i, fn, data) {
            var programWrapper = this.programs[i];
            if (data) {
              programWrapper = program(i, fn, data);
            } else if (!programWrapper) {
              programWrapper = this.programs[i] = program(i, fn);
            }
            return programWrapper;
          },
          merge: function (param, common) {
            var ret = param || common;
            if (param && common && param !== common) {
              ret = {};
              Utils.extend(ret, common);
              Utils.extend(ret, param);
            }
            return ret;
          },
          programWithDepth: env.VM.programWithDepth,
          noop: env.VM.noop,
          compilerInfo: null
        };
      return function (context, options) {
        options = options || {};
        var namespace = options.partial ? options : env, helpers, partials;
        if (!options.partial) {
          helpers = options.helpers;
          partials = options.partials;
        }
        var result = templateSpec.call(container, namespace, context, helpers, partials, options.data);
        if (!options.partial) {
          env.VM.checkRevision(container.compilerInfo);
        }
        return result;
      };
    }
    exports.template = template;
    function programWithDepth(i, fn, data) {
      var args = Array.prototype.slice.call(arguments, 3);
      var prog = function (context, options) {
        options = options || {};
        return fn.apply(this, [
          context,
          options.data || data
        ].concat(args));
      };
      prog.program = i;
      prog.depth = args.length;
      return prog;
    }
    exports.programWithDepth = programWithDepth;
    function program(i, fn, data) {
      var prog = function (context, options) {
        options = options || {};
        return fn(context, options.data || data);
      };
      prog.program = i;
      prog.depth = 0;
      return prog;
    }
    exports.program = program;
    function invokePartial(partial, name, context, helpers, partials, data) {
      var options = {
          partial: true,
          helpers: helpers,
          partials: partials,
          data: data
        };
      if (partial === undefined) {
        throw new Exception('The partial ' + name + ' could not be found');
      } else if (partial instanceof Function) {
        return partial(context, options);
      }
    }
    exports.invokePartial = invokePartial;
    function noop() {
      return '';
    }
    exports.noop = noop;
  },
  './node_modules/spotify-current-locale/arb.js': function (require, module, exports, global) {
    module.exports = 'arb';
  },
  './node_modules/spotify-current-locale/el.js': function (require, module, exports, global) {
    module.exports = 'el';
  },
  './node_modules/spotify-current-locale/bn.js': function (require, module, exports, global) {
    module.exports = 'bn';
  },
  './node_modules/spotify-current-locale/en.js': function (require, module, exports, global) {
    module.exports = 'en';
  },
  './node_modules/spotify-current-locale/de.js': function (require, module, exports, global) {
    module.exports = 'de';
  },
  './node_modules/spotify-current-locale/es-419.js': function (require, module, exports, global) {
    module.exports = 'es-419';
  },
  './node_modules/spotify-current-locale/es.js': function (require, module, exports, global) {
    module.exports = 'es';
  },
  './node_modules/spotify-current-locale/fi.js': function (require, module, exports, global) {
    module.exports = 'fi';
  },
  './node_modules/spotify-current-locale/fr.js': function (require, module, exports, global) {
    module.exports = 'fr';
  },
  './node_modules/spotify-current-locale/hi.js': function (require, module, exports, global) {
    module.exports = 'hi';
  },
  './node_modules/spotify-current-locale/hu.js': function (require, module, exports, global) {
    module.exports = 'hu';
  },
  './node_modules/spotify-current-locale/id.js': function (require, module, exports, global) {
    module.exports = 'id';
  },
  './node_modules/spotify-current-locale/it.js': function (require, module, exports, global) {
    module.exports = 'it';
  },
  './node_modules/spotify-current-locale/ja.js': function (require, module, exports, global) {
    module.exports = 'ja';
  },
  './node_modules/spotify-current-locale/ko.js': function (require, module, exports, global) {
    module.exports = 'ko';
  },
  './node_modules/spotify-current-locale/nl.js': function (require, module, exports, global) {
    module.exports = 'nl';
  },
  './node_modules/spotify-current-locale/pl.js': function (require, module, exports, global) {
    module.exports = 'pl';
  },
  './node_modules/spotify-current-locale/pt-br.js': function (require, module, exports, global) {
    module.exports = 'pt-BR';
  },
  './node_modules/spotify-current-locale/ro.js': function (require, module, exports, global) {
    module.exports = 'ro';
  },
  './node_modules/spotify-current-locale/ru.js': function (require, module, exports, global) {
    module.exports = 'ru';
  },
  './node_modules/spotify-current-locale/sv.js': function (require, module, exports, global) {
    module.exports = 'sv';
  },
  './node_modules/spotify-current-locale/ta.js': function (require, module, exports, global) {
    module.exports = 'ta';
  },
  './node_modules/spotify-current-locale/th.js': function (require, module, exports, global) {
    module.exports = 'th';
  },
  './node_modules/spotify-current-locale/tr.js': function (require, module, exports, global) {
    module.exports = 'tr';
  },
  './node_modules/spotify-current-locale/zh-hant.js': function (require, module, exports, global) {
    module.exports = 'zh-Hant';
  },
  './node_modules/spotify-current-locale/zsm.js': function (require, module, exports, global) {
    module.exports = 'zsm';
  },
  './node_modules/spotify-cosmos-api/node_modules/cosmos-common-js/src/request.js': function (require, module, exports, global) {
    var inherit = require('./node_modules/spotify-inheritance/index.js').inherit;
    var Message = require('./node_modules/spotify-cosmos-api/node_modules/cosmos-common-js/src/message.js').Message;
    exports.Action = {
      DELETE: 'DELETE',
      GET: 'GET',
      HEAD: 'HEAD',
      POST: 'POST',
      PUT: 'PUT',
      SUB: 'SUB',
      PATCH: 'PATCH'
    };
    exports.SerializedRequest;
    function Request(action, uri, opt_headers, opt_body) {
      if (!(this instanceof Request))
        return new Request(action, uri, opt_headers, opt_body);
      if (!action)
        throw new TypeError('Invalid `action` argument for Request.');
      Message.call(this, uri, opt_headers, opt_body);
      this._action = action;
    }
    inherit(Request, Message);
    exports.Request = Request;
    Request.fromObject = function (object) {
      return object && object.action && object.uri ? new Request(object.action, object.uri, object.headers, object.body) : null;
    };
    Request.prototype.getAction = function () {
      return this._action;
    };
    Request.prototype.copy = function (opt_headers, opt_body) {
      return new Request(this._action, this._uri, this._copyHeaders(opt_headers), typeof opt_body != 'undefined' ? opt_body : this._body);
    };
    Request.prototype.toJSON = function () {
      return {
        action: this._action,
        uri: this._uri,
        headers: this._headers,
        body: this._body
      };
    };
  },
  './node_modules/spotify-cosmos-api/node_modules/cosmos-common-js/src/message.js': function (require, module, exports, global) {
    exports.Headers;
    exports.Body;
    exports.SerializedMessage;
    function Message(uri, opt_headers, opt_body) {
      if (uri == null)
        throw new TypeError('Invalid `uri` argument for Message.');
      this._uri = uri;
      this._headers = {};
      this._body = this._encodeBody(opt_body || '');
      if (opt_headers)
        this._setHeaders(opt_headers);
    }
    exports.Message = Message;
    Message.fromObject = function (object) {
      return object && object.uri ? new Message(object.uri, object.headers, object.body) : null;
    };
    Message.prototype._encodeBody = function (body) {
      if (typeof body != 'string') {
        body = JSON.stringify(body);
      }
      return body;
    };
    Message.prototype.getURI = function () {
      return this._uri;
    };
    Message.prototype.getMimeType = function () {
      return this._headers['accept'];
    };
    Message.prototype.getHeader = function (name) {
      return this._headers[name.toLowerCase()] || null;
    };
    Message.prototype.getHeaders = function () {
      var _headers = this._headers;
      var headers = {};
      for (var name in _headers) {
        if (!_headers.hasOwnProperty(name))
          continue;
        headers[name] = _headers[name];
      }
      return headers;
    };
    Message.prototype._setHeaders = function (headers) {
      var _headers = this._headers;
      for (var name in headers) {
        if (!headers.hasOwnProperty(name))
          continue;
        _headers[name.toLowerCase()] = headers[name];
      }
      return this;
    };
    Message.prototype.getBody = function () {
      return this._body;
    };
    Message.prototype.getJSONBody = function () {
      try {
        return JSON.parse(this._body);
      } catch (e) {
        return null;
      }
    };
    Message.prototype.copy = function (opt_headers, opt_body) {
      return new Message(this._uri, this._copyHeaders(opt_headers), typeof opt_body != 'undefined' ? opt_body : this._body);
    };
    Message.prototype._copyHeaders = function (opt_headers) {
      var headers;
      if (opt_headers) {
        var _headers = this._headers;
        var name;
        headers = {};
        for (name in _headers) {
          if (!_headers.hasOwnProperty(name))
            continue;
          headers[name] = _headers[name];
        }
        for (name in opt_headers) {
          if (!opt_headers.hasOwnProperty(name))
            continue;
          headers[name.toLowerCase()] = opt_headers[name];
        }
      } else {
        headers = this._headers;
      }
      return headers;
    };
    Message.prototype.serialize = function () {
      return this.toJSON();
    };
    Message.prototype.toJSON = function () {
      return {
        uri: this._uri,
        headers: this._headers,
        body: this._body
      };
    };
  },
  './node_modules/spotify-cosmos-api/node_modules/cosmos-common-js/src/response.js': function (require, module, exports, global) {
    var inherit = require('./node_modules/spotify-inheritance/index.js').inherit;
    var Message = require('./node_modules/spotify-cosmos-api/node_modules/cosmos-common-js/src/message.js').Message;
    exports.StatusCode = {
      OK: 200,
      CREATED: 201,
      ACCEPTED: 202,
      BAD_REQUEST: 400,
      UNAUTHORIZED: 401,
      FORBIDDEN: 403,
      NOT_FOUND: 404,
      METHOD_NOT_ALLOWED: 405,
      TIMED_OUT: 408,
      CONFLICT: 409,
      GONE: 410,
      INTERNAL_SERVER_ERROR: 500,
      NOT_IMPLEMENTED: 501,
      BAD_GATEWAY: 502,
      SERVICE_UNAVAILABLE: 503,
      ERROR_UNKNOWN: -100,
      ERROR_ALLOCATION_FAILED: -101,
      ERROR_INVALID_ENCODING: -102,
      ERROR_INFINITE_LOOP: -103,
      ERROR_RESOLVER_NOT_FOUND: -104
    };
    exports.SerializedResponse;
    function Response(uri, status, opt_headers, opt_body) {
      if (!(this instanceof Response))
        return new Response(uri, status, opt_headers, opt_body, opt_requestURI);
      if (typeof status == 'undefined' || status == null)
        throw new TypeError('Invalid `status` argument for Response.');
      Message.call(this, uri, opt_headers, opt_body);
      this._status = status;
    }
    inherit(Response, Message);
    exports.Response = Response;
    Response.fromObject = function (object) {
      return object && object.uri && object.status ? new Response(object.uri, object.status, object.headers, object.body) : null;
    };
    Response.prototype.getMimeType = function () {
      return this._headers['content-type'];
    };
    Response.prototype.getStatusCode = function () {
      return this._status;
    };
    Response.prototype.copy = function (opt_headers, opt_body) {
      return new Response(this._uri, this._status, this._copyHeaders(opt_headers), typeof opt_body != 'undefined' ? opt_body : this._body);
    };
    Response.prototype.toJSON = function () {
      return {
        uri: this._uri,
        status: this._status,
        headers: this._headers,
        body: this._body
      };
    };
  },
  './node_modules/spotify-cosmos-api/node_modules/cosmos-common-js/src/player_state.js': function (require, module, exports, global) {
    var inherit = require('./node_modules/spotify-inheritance/index.js').inherit;
    function PlayerState(stateData) {
      Serializable.call(this, [
        'action',
        'context',
        'tracks',
        'index',
        'playing',
        'loading',
        'track',
        'position',
        'duration',
        'volume',
        'options',
        'play_origin',
        'next_page_url',
        'prev_page_url'
      ]);
      stateData = stateData || {};
      this.action = stateData.action;
      this.context = stateData.context;
      this.tracks = stateData.tracks;
      this.index = stateData.index;
      this.playing = stateData.playing;
      this.loading = stateData.loading;
      this.track = stateData.track;
      this.position = stateData.position;
      this.volume = stateData.volume;
      this.duration = stateData.duration;
      this.options = new PlayOptions(stateData.options);
      this.play_origin = new PlayOrigin(stateData.play_origin);
      this.next_page_url = stateData.next_page_url;
      this.prev_page_url = stateData.prev_page_url;
    }
    inherit(PlayerState, Serializable);
    PlayerState.prototype.serialize = function () {
      if (this.options && !(this.options instanceof PlayOptions)) {
        this.options = new PlayOptions(this.options);
      }
      if (this.play_origin && !(this.play_origin instanceof PlayOrigin)) {
        this.play_origin = new PlayOrigin(this.play_origin);
      }
      return this.constructor.prototype.serialize.call(this);
    };
    PlayerState.ACTIONS = {
      UNKNOWN: 'unknown',
      PLAY: 'play',
      UPDATE: 'update',
      STOP: 'stop',
      RESUME: 'resume',
      PAUSE: 'pause',
      SKIP_PREV: 'skip_prev',
      SKIP_NEXT: 'skip_next'
    };
    function PlayOrigin(data) {
      Serializable.call(this, [
        'source',
        'source_context',
        'reason',
        'referrer',
        'referrer_version',
        'referrer_vendor'
      ]);
      data = data || {};
      this.source = data.source || 'unknown';
      this.source_context = data.source_context || 'unknown';
      this.reason = data.reason || 'unknown';
      this.referrer = data.referrer || 'unknown';
      this.referrer_version = data.referrer_version || 'unknown';
      this.referrer_vendor = data.referrer_vendor || 'unknown';
    }
    inherit(PlayOrigin, Serializable);
    function PlayOptions(options) {
      Serializable.call(this, [
        'repeat',
        'shuffle',
        'can_repeat',
        'can_shuffle',
        'can_skip_prev',
        'can_skip_next',
        'can_seek',
        'use_dmca_rules'
      ]);
      options = options || {};
      this.repeat = options.repeat !== undefined ? options.repeat : false;
      this.shuffle = options.shuffle !== undefined ? options.shuffle : false;
      this.can_repeat = options.can_repeat !== undefined ? options.can_repeat : true;
      this.can_shuffle = options.can_shuffle !== undefined ? options.can_shuffle : true;
      this.can_skip_prev = options.can_skip_prev !== undefined ? options.can_skip_prev : true;
      this.can_skip_next = options.can_skip_next !== undefined ? options.can_skip_next : true;
      this.can_seek = options.can_seek !== undefined ? options.can_seek : true;
      this.use_dmca_rules = options.use_dmca_rules !== undefined ? options.use_dmca_rules : false;
    }
    inherit(PlayOptions, Serializable);
    function Serializable(allowedProps) {
      this._props = allowedProps || [];
    }
    Serializable.prototype.serialize = function () {
      var data = {};
      var prop;
      for (var i = 0, l = this._props.length; i < l; i++) {
        prop = this._props[i];
        if (this[prop] !== undefined) {
          if (this[prop] instanceof Serializable) {
            data[prop] = this[prop].serialize();
          } else {
            data[prop] = this[prop];
          }
        }
      }
      return data;
    };
    exports.PlayerState = PlayerState;
  },
  './node_modules/spotify-live-models/node_modules/spotify-bridge-request/index.js': function (require, module, exports, global) {
    var SP = require('./node_modules/quickstart-spotify/spotify-api.js').SP;
    'use strict';
    var ERROR_TIMEOUT = 'timeout';
    var BACKOFF = 300;
    var request = function (name, args, callback) {
      SP.request(name, args || [], null, function (data) {
        if (callback)
          callback(null, data);
      }, function (data) {
        var _args = JSON.stringify(args);
        var debug = ' (bridge message: \'' + name + '\', args: ' + _args + ')';
        var msg = data.message + debug;
        var error = new Error(msg);
        error.name = data.error;
        if (data.error === ERROR_TIMEOUT) {
          var delay = BACKOFF + Math.floor(Math.random() * 100);
          if (typeof console !== 'undefined') {
            console.warn(msg);
          }
          setTimeout(function () {
            request(name, args, callback);
          }, delay);
          return;
        }
        if (callback)
          callback(error);
      });
    };
    exports.request = request;
  },
  './node_modules/spotify-live-filter-uri/index.js': function (require, module, exports, global) {
    'use strict';
    var base = 'spotify:internal:filterlist';
    var regExp = /^spotify:internal:filterlist:([^:]*):(.*)$/;
    exports.create = function (originUri, query) {
      originUri = originUri.replace(/^spotify:/, '');
      query = encodeURIComponent(query);
      return [
        base,
        query,
        originUri
      ].join(':');
    };
    exports.getQuery = function (filterUri) {
      var matches = filterUri.match(regExp);
      if (!matches)
        return '';
      return decodeURIComponent(matches[1]);
    };
    exports.getOriginUri = function (filterUri) {
      var matches = filterUri.match(regExp);
      if (!matches)
        return '';
      return 'spotify:' + matches[2];
    };
    exports.parse = function (filterUri) {
      var matches = filterUri.match(regExp);
      if (!matches)
        return null;
      return {
        query: decodeURIComponent(matches[1]),
        originUri: 'spotify:' + matches[2]
      };
    };
    exports.isValid = function (filterUri) {
      return regExp.test(filterUri);
    };
    exports.regExp = regExp;
  },
  './node_modules/spotify-cosmos-api/node_modules/spotify-deferred/src/deferred.js': function (require, module, exports, global) {
    'use strict';
    var PostRouter = require('./node_modules/spotify-cosmos-api/node_modules/spotify-deferred/node_modules/spotify-postrouter/src/postrouter.js');
    var deferred = [];
    var send = function () {
      PostRouter.sendLocalMessage('execute_deferreds');
    };
    function executeDeferreds() {
      var fns = deferred.splice(0);
      if (!fns.length)
        return;
      for (var i = 0, l = fns.length; i < l; i++) {
        try {
          fns[i]();
        } finally {
          null;
        }
      }
    }
    PostRouter.addMessageHandler('execute_deferreds', executeDeferreds);
    var defer = function (fn) {
      var trigger = !deferred.length;
      deferred.push(fn);
      if (trigger)
        send();
    };
    module.exports = defer;
  },
  './node_modules/mout/function/bind.js': function (require, module, exports, global) {
    var slice = require('./node_modules/mout/array/slice.js');
    function bind(fn, context, args) {
      var argsArr = slice(arguments, 2);
      return function () {
        return fn.apply(context, argsArr.concat(slice(arguments)));
      };
    }
    module.exports = bind;
  },
  './node_modules/mout/array/append.js': function (require, module, exports, global) {
    function append(arr1, arr2) {
      if (arr2 == null) {
        return arr1;
      }
      var pad = arr1.length, i = -1, len = arr2.length;
      while (++i < len) {
        arr1[pad + i] = arr2[i];
      }
      return arr1;
    }
    module.exports = append;
  },
  './node_modules/mout/function/identity.js': function (require, module, exports, global) {
    function identity(val) {
      return val;
    }
    module.exports = identity;
  },
  './node_modules/mout/function/prop.js': function (require, module, exports, global) {
    function prop(name) {
      return function (obj) {
        return obj[name];
      };
    }
    module.exports = prop;
  },
  './node_modules/mout/object/values.js': function (require, module, exports, global) {
    var forOwn = require('./node_modules/mout/object/forOwn.js');
    function values(obj) {
      var vals = [];
      forOwn(obj, function (val, key) {
        vals.push(val);
      });
      return vals;
    }
    module.exports = values;
  },
  './node_modules/mout/collection/make_.js': function (require, module, exports, global) {
    var slice = require('./node_modules/mout/array/slice.js');
    function makeCollectionMethod(arrMethod, objMethod, defaultReturn) {
      return function () {
        var args = slice(arguments);
        if (args[0] == null) {
          return defaultReturn;
        }
        return typeof args[0].length === 'number' ? arrMethod.apply(null, args) : objMethod.apply(null, args);
      };
    }
    module.exports = makeCollectionMethod;
  },
  './node_modules/mout/object/deepMatches.js': function (require, module, exports, global) {
    var forOwn = require('./node_modules/mout/object/forOwn.js');
    var isArray = require('./node_modules/mout/lang/isArray.js');
    function containsMatch(array, pattern) {
      var i = -1, length = array.length;
      while (++i < length) {
        if (deepMatches(array[i], pattern)) {
          return true;
        }
      }
      return false;
    }
    function matchArray(target, pattern) {
      var i = -1, patternLength = pattern.length;
      while (++i < patternLength) {
        if (!containsMatch(target, pattern[i])) {
          return false;
        }
      }
      return true;
    }
    function matchObject(target, pattern) {
      var result = true;
      forOwn(pattern, function (val, key) {
        if (!deepMatches(target[key], val)) {
          return result = false;
        }
      });
      return result;
    }
    function deepMatches(target, pattern) {
      if (target && typeof target === 'object') {
        if (isArray(target) && isArray(pattern)) {
          return matchArray(target, pattern);
        } else {
          return matchObject(target, pattern);
        }
      } else {
        return target === pattern;
      }
    }
    module.exports = deepMatches;
  },
  './node_modules/mout/object/deepFillIn.js': function (require, module, exports, global) {
    var forOwn = require('./node_modules/mout/object/forOwn.js');
    var isPlainObject = require('./node_modules/mout/lang/isPlainObject.js');
    function deepFillIn(target, defaults) {
      var i = 0, n = arguments.length, obj;
      while (++i < n) {
        obj = arguments[i];
        if (obj) {
          forOwn(obj, function (newValue, key) {
            var curValue = target[key];
            if (curValue == null) {
              target[key] = newValue;
            } else if (isPlainObject(curValue) && isPlainObject(newValue)) {
              deepFillIn(curValue, newValue);
            }
          });
        }
      }
      return target;
    }
    module.exports = deepFillIn;
  },
  './node_modules/spotify-handlebars/node_modules/spotify-numeral/index.js': function (require, module, exports, global) {
    var numeral = require('./node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/numeral.js');
    var currentLanguage = require.loc('./node_modules/spotify-current-locale/@loc.js');
    switch (currentLanguage) {
    case 'bn':
      break;
    case 'de':
      numeral.language('de', require('./node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/de.js'));
      numeral.language('de');
      break;
    case 'el':
      break;
    case 'en':
      break;
    case 'es-419':
      numeral.language('es-ES', require('./node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/es-ES.js'));
      numeral.language('es-ES');
      break;
    case 'es':
      numeral.language('es-ES', require('./node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/es-ES.js'));
      numeral.language('es-ES');
      break;
    case 'fi':
      numeral.language('fi', require('./node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/fi.js'));
      numeral.language('fi');
      break;
    case 'fr':
      numeral.language('fr', require('./node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/fr.js'));
      numeral.language('fr');
      break;
    case 'fr-CA':
      numeral.language('fr-CA', require('./node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/fr-CA.js'));
      numeral.language('fr-CA');
      break;
    case 'hi':
      break;
    case 'hu':
      numeral.language('hu', require('./node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/hu.js'));
      numeral.language('hu');
      break;
    case 'it':
      numeral.language('it', require('./node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/it.js'));
      numeral.language('it');
      break;
    case 'ja':
      numeral.language('ja', require('./node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/ja.js'));
      numeral.language('ja');
      break;
    case 'ko':
      break;
    case 'nl':
      numeral.language('nl-nl', require('./node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/nl-nl.js'));
      numeral.language('nl-nl');
      break;
    case 'pl':
      numeral.language('pl', require('./node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/pl.js'));
      numeral.language('pl');
      break;
    case 'pt-BR':
      numeral.language('pt-br', require('./node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/pt-br.js'));
      numeral.language('pt-br');
      break;
    case 'ro':
      break;
    case 'ru':
      numeral.language('ru', require('./node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/ru.js'));
      numeral.language('ru');
      break;
    case 'sv':
      break;
    case 'ta':
      break;
    case 'th':
      numeral.language('th', require('./node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/th.js'));
      numeral.language('th');
      break;
    case 'tr':
      numeral.language('tr', require('./node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/tr.js'));
      numeral.language('tr');
      break;
    case 'zh-Hant':
      break;
    case 'zsm':
      break;
    default:
      console.error('Unsupported language "' + currentLanguage + '", please update spotify-numeral');
      break;
    }
    module.exports = numeral;
  },
  './node_modules/spotify-events/node_modules/elements/base.js': function (require, module, exports, global) {
    'use strict';
    var prime = require('./node_modules/prime/index.js');
    var forEach = require('./node_modules/mout/array/forEach.js'), map = require('./node_modules/mout/array/map.js'), filter = require('./node_modules/mout/array/filter.js'), every = require('./node_modules/mout/array/every.js'), some = require('./node_modules/mout/array/some.js');
    var index = 0, __dc = document.__counter, counter = document.__counter = (__dc ? parseInt(__dc, 36) + 1 : 0).toString(36), key = 'uid:' + counter;
    var uniqueID = function (n) {
      if (n === window)
        return 'window';
      if (n === document)
        return 'document';
      if (n === document.documentElement)
        return 'html';
      return n[key] || (n[key] = (index++).toString(36));
    };
    var instances = {};
    var $ = prime({
        constructor: function $(n, context) {
          if (n == null)
            return this && this.constructor === $ ? new Elements() : null;
          var self, uid;
          if (n.constructor !== Elements) {
            self = new Elements();
            if (typeof n === 'string') {
              if (!self.search)
                return null;
              self[self.length++] = context || document;
              return self.search(n);
            }
            if (n.nodeType || n === window) {
              self[self.length++] = n;
            } else if (n.length) {
              var uniques = {};
              for (var i = 0, l = n.length; i < l; i++) {
                var nodes = $(n[i], context);
                if (nodes && nodes.length)
                  for (var j = 0, k = nodes.length; j < k; j++) {
                    var node = nodes[j];
                    uid = uniqueID(node);
                    if (!uniques[uid]) {
                      self[self.length++] = node;
                      uniques[uid] = true;
                    }
                  }
              }
            }
          } else {
            self = n;
          }
          if (!self.length)
            return null;
          if (self.length === 1) {
            uid = uniqueID(self[0]);
            return instances[uid] || (instances[uid] = self);
          }
          return self;
        }
      });
    var Elements = prime({
        inherits: $,
        constructor: function Elements() {
          this.length = 0;
        },
        unlink: function () {
          return this.map(function (node) {
            delete instances[uniqueID(node)];
            return node;
          });
        },
        forEach: function (method, context) {
          forEach(this, method, context);
          return this;
        },
        map: function (method, context) {
          return map(this, method, context);
        },
        filter: function (method, context) {
          return filter(this, method, context);
        },
        every: function (method, context) {
          return every(this, method, context);
        },
        some: function (method, context) {
          return some(this, method, context);
        }
      });
    module.exports = $;
  },
  './node_modules/spotify-events/node_modules/elements/events.js': function (require, module, exports, global) {
    'use strict';
    var Emitter = require('./node_modules/prime/emitter.js');
    var $ = require('./node_modules/spotify-events/node_modules/elements/base.js');
    var html = document.documentElement;
    var addEventListener = html.addEventListener ? function (node, event, handle, useCapture) {
        node.addEventListener(event, handle, useCapture || false);
        return handle;
      } : function (node, event, handle) {
        node.attachEvent('on' + event, handle);
        return handle;
      };
    var removeEventListener = html.removeEventListener ? function (node, event, handle, useCapture) {
        node.removeEventListener(event, handle, useCapture || false);
      } : function (node, event, handle) {
        node.detachEvent('on' + event, handle);
      };
    $.implement({
      on: function (event, handle, useCapture) {
        return this.forEach(function (node) {
          var self = $(node);
          var internalEvent = event + (useCapture ? ':capture' : '');
          Emitter.prototype.on.call(self, internalEvent, handle);
          var domListeners = self._domListeners || (self._domListeners = {});
          if (!domListeners[internalEvent])
            domListeners[internalEvent] = addEventListener(node, event, function (e) {
              Emitter.prototype.emit.call(self, internalEvent, e || window.event, Emitter.EMIT_SYNC);
            }, useCapture);
        });
      },
      off: function (event, handle, useCapture) {
        return this.forEach(function (node) {
          var self = $(node);
          var internalEvent = event + (useCapture ? ':capture' : '');
          var domListeners = self._domListeners, domEvent, listeners = self._listeners, events;
          if (domListeners && (domEvent = domListeners[internalEvent]) && listeners && (events = listeners[internalEvent])) {
            Emitter.prototype.off.call(self, internalEvent, handle);
            if (!self._listeners || !self._listeners[event]) {
              removeEventListener(node, event, domEvent);
              delete domListeners[event];
              for (var l in domListeners)
                return;
              delete self._domListeners;
            }
          }
        });
      },
      emit: function () {
        var args = arguments;
        return this.forEach(function (node) {
          Emitter.prototype.emit.apply($(node), args);
        });
      }
    });
    module.exports = $;
  },
  './node_modules/spotify-events/node_modules/elements/insertion.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/base.js');
    $.implement({
      appendChild: function (child) {
        this[0].appendChild($(child)[0]);
        return this;
      },
      insertBefore: function (child, ref) {
        this[0].insertBefore($(child)[0], $(ref)[0]);
        return this;
      },
      removeChild: function (child) {
        this[0].removeChild($(child)[0]);
        return this;
      },
      replaceChild: function (child, ref) {
        this[0].replaceChild($(child)[0], $(ref)[0]);
        return this;
      }
    });
    $.implement({
      before: function (element) {
        element = $(element)[0];
        var parent = element.parentNode;
        if (parent)
          this.forEach(function (node) {
            parent.insertBefore(node, element);
          });
        return this;
      },
      after: function (element) {
        element = $(element)[0];
        var parent = element.parentNode;
        if (parent)
          this.forEach(function (node) {
            parent.insertBefore(node, element.nextSibling);
          });
        return this;
      },
      bottom: function (element) {
        element = $(element)[0];
        return this.forEach(function (node) {
          element.appendChild(node);
        });
      },
      top: function (element) {
        element = $(element)[0];
        return this.forEach(function (node) {
          element.insertBefore(node, element.firstChild);
        });
      }
    });
    $.implement({
      insert: $.prototype.bottom,
      remove: function () {
        return this.forEach(function (node) {
          var parent = node.parentNode;
          if (parent)
            parent.removeChild(node);
        });
      },
      replace: function (element) {
        element = $(element)[0];
        element.parentNode.replaceChild(this[0], element);
        return this;
      }
    });
    module.exports = $;
  },
  './node_modules/spotify-events/node_modules/elements/delegation.js': function (require, module, exports, global) {
    'use strict';
    var Map = require('./node_modules/prime/map.js');
    var $ = require('./node_modules/spotify-events/node_modules/elements/events.js');
    require('./node_modules/spotify-events/node_modules/elements/traversal.js');
    $.implement({
      delegate: function (event, selector, handle) {
        return this.forEach(function (node) {
          var self = $(node);
          var delegation = self._delegation || (self._delegation = {}), events = delegation[event] || (delegation[event] = {}), map = events[selector] || (events[selector] = new Map());
          if (map.get(handle))
            return;
          var action = function (e) {
            var target = $(e.target || e.srcElement), match = target.matches(selector) ? target : target.parent(selector);
            var res;
            if (match)
              res = handle.call(self, e, match);
            return res;
          };
          map.set(handle, action);
          self.on(event, action);
        });
      },
      undelegate: function (event, selector, handle) {
        return this.forEach(function (node) {
          var self = $(node), delegation, events, map;
          if (!(delegation = self._delegation) || !(events = delegation[event]) || !(map = events[selector]))
            return;
          var action = map.get(handle);
          if (action) {
            self.off(event, action);
            map.remove(action);
            if (!map.count())
              delete events[selector];
            var e1 = true, e2 = true, x;
            for (x in events) {
              e1 = false;
              break;
            }
            if (e1)
              delete delegation[event];
            for (x in delegation) {
              e2 = false;
              break;
            }
            if (e2)
              delete self._delegation;
          }
        });
      }
    });
    module.exports = $;
  },
  './node_modules/spotify-events/dragndrop/util/hooks.js': function (require, module, exports, global) {
    'use strict';
    var hooks = {};
    function add(id, handler) {
      if (!hooks[id])
        hooks[id] = [];
      hooks[id].push(handler);
    }
    function remove(id, handler) {
      if (hooks[id]) {
        var index = hooks[id].indexOf(handler);
        if (index > -1) {
          hooks[id].splice(index, 1);
        }
      }
    }
    function run(id, var_args) {
      var handlers = hooks[id];
      if (handlers && handlers.length > 0) {
        var args = Array.prototype.slice.call(arguments, 1);
        for (var i = 0, l = handlers.length; i < l; i++) {
          handlers[i].apply(null, args);
        }
      }
    }
    exports.add = add;
    exports.remove = remove;
    exports.run = run;
  },
  './node_modules/spotify-events/dragndrop/util/eventmodel.js': function (require, module, exports, global) {
    'use strict';
    var $ = require('./node_modules/spotify-events/node_modules/elements/index.js');
    var attached = {};
    var delegations = {};
    var movementHandlerCount = 0;
    var hasEntered = false;
    var lastEnteredElement = null;
    var lastEnterTarget = null;
    var lastEnterEvent = null;
    var wasLastEventEnter = false;
    function resetState() {
      hasEntered = false;
      lastEnteredElement = null;
      lastEnterTarget = null;
      lastEnterEvent = null;
      wasLastEventEnter = false;
    }
    function onEvent(event) {
      var handler = getPrimaryHandler(event.type);
      if (handler) {
        handler(event);
      } else {
        handleDelegationsForEvent(event);
      }
    }
    function onPrimaryDragEnter(event) {
      wasLastEventEnter = true;
      if (hasEntered) {
        if (lastEnteredElement !== event.target) {
          lastEnterEvent = event;
        }
      } else {
        hasEntered = true;
        lastEnteredElement = event.target;
        handleDelegationsForEvent(event);
      }
    }
    function onPrimaryDragLeave(event) {
      wasLastEventEnter = false;
      lastEnteredElement = null;
      handleDelegationsForEvent(event);
      if (hasEntered) {
        if (lastEnterEvent) {
          lastEnteredElement = lastEnterEvent.target;
          handleDelegationsForEvent(lastEnterEvent);
          lastEnterEvent = null;
        } else {
          hasEntered = false;
        }
      }
    }
    function onPrimaryDrop(event) {
      resetState();
      handleDelegationsForEvent(event);
    }
    function onPrimaryDragEnd(event) {
      resetState();
      handleDelegationsForEvent(event);
    }
    function onDragEnter(event, target, handler, selector) {
      if (target !== lastEnterTarget) {
        lastEnterTarget = target;
        callUserHandler(event, target, handler);
      }
    }
    function onDragLeave(event, target, handler, selector) {
      var shouldCallUserHandler = false;
      var lastElement = lastEnterEvent && lastEnterEvent.target;
      if (lastElement) {
        var isSameElement = target === lastElement;
        var isEnteringChild = !isSameElement && target.contains(lastElement);
        var isEnteringMatchingElement = $(lastElement).matches(selector);
        if (!isSameElement && (!isEnteringChild || isEnteringMatchingElement)) {
          shouldCallUserHandler = true;
        }
      }
      if (!wasLastEventEnter) {
        shouldCallUserHandler = true;
      }
      if (shouldCallUserHandler) {
        lastEnterTarget = null;
        callUserHandler(event, target, handler);
      }
    }
    function handleDelegationsForEvent(event) {
      var type = event.type;
      var delegationData = delegations[type];
      if (delegationData && delegationData.length > 0) {
        var target = $(event.target);
        delegationData.forEach(function (data) {
          var selector = data.selector;
          var matches = target.matches(selector);
          var matchingTarget = matches ? target : target.parent(selector);
          if (matchingTarget) {
            var handler = getHandler(type) || callUserHandler;
            handler(event, matchingTarget[0], data.handler, selector);
          }
        });
      }
    }
    function callUserHandler(event, target, handler, selector) {
      handler.call(exports, event, target);
    }
    function getPrimaryHandler(type) {
      switch (type) {
      case 'dragenter':
        return onPrimaryDragEnter;
      case 'dragleave':
        return onPrimaryDragLeave;
      case 'dragend':
        return onPrimaryDragEnd;
      case 'drop':
        return onPrimaryDrop;
      }
      return null;
    }
    function getHandler(type) {
      switch (type) {
      case 'dragenter':
        return onDragEnter;
      case 'dragleave':
        return onDragLeave;
      }
      return null;
    }
    function isMovementType(type) {
      switch (type) {
      case 'dragenter':
        return true;
      case 'dragleave':
        return true;
      case 'dragend':
        return true;
      case 'drop':
        return true;
      }
      return false;
    }
    function attach(type) {
      if (attached[type])
        return;
      attached[type] = true;
      document.addEventListener(type, onEvent, false);
    }
    function detach(type) {
      if (!attached[type])
        return;
      attached[type] = false;
      document.removeEventListener(type, onEvent, false);
    }
    function delegate(type, selector, handler) {
      if (isMovementType(type)) {
        movementHandlerCount++;
        if (movementHandlerCount === 1) {
          attach('dragenter');
          attach('dragleave');
          attach('dragend');
          attach('drop');
        }
      } else if (!attached[type]) {
        attach(type);
      }
      if (!delegations[type])
        delegations[type] = [];
      delegations[type].push({
        selector: selector,
        handler: handler
      });
    }
    function undelegate(type, selector, handler) {
      if (isMovementType(type)) {
        movementHandlerCount = Math.max(0, movementHandlerCount - 1);
        if (movementHandlerCount === 0) {
          detach('dragenter');
          detach('dragleave');
          detach('dragend');
          detach('drop');
        }
      }
      var delegationsForType = delegations[type];
      if (delegationsForType) {
        for (var i = 0, l = delegationsForType.length; i < l; i++) {
          var data = delegationsForType[i];
          if (data.selector === selector && data.handler === handler) {
            delegationsForType.splice(i, 1);
            break;
          }
        }
        if (!isMovementType && delegationsForType.length === 0) {
          detach(type);
        }
      }
    }
    exports.delegate = delegate;
    exports.undelegate = undelegate;
  },
  './node_modules/spotify-events/dragndrop/util/itemtext.js': function (require, module, exports, global) {
    'use strict';
    var live = require('./node_modules/spotify-live/index.js');
    var liburi = require('./node_modules/spotify-liburi/src/uri.js');
    function getForUri(uri) {
      var uriObject = liburi.from(uri);
      if (!uriObject)
        return '';
      var type = uriObject.type;
      if (type === liburi.Type.TRACK || type === liburi.Type.LOCAL) {
        return getForTrack(uri);
      } else if (type === liburi.Type.ARTIST || type === liburi.Type.LOCAL_ARTIST) {
        return getForArtist(uri);
      } else if (type === liburi.Type.ALBUM || type === liburi.Type.LOCAL_ALBUM) {
        return getForAlbum(uri);
      } else if (type === liburi.Type.PLAYLIST || type === liburi.Type.STARRED) {
        return getForPlaylist(uri);
      } else if (type === liburi.Type.USER || type === liburi.Type.PROFILE) {
        return getForUser(uri);
      } else if (type === liburi.Type.FOLDER) {
        return getForFolder(uri);
      }
      return '';
    }
    function getForTrack(uri) {
      var object = live(uri);
      var itemName = object.get('name');
      if (!itemName)
        return '';
      var artists = object.get('artists');
      if (!artists || artists.length === 0)
        return itemName;
      var artistNames = artists.get(0, artists.length).map(function (artist) {
          return artist.get('name');
        }).join(', ');
      if (!artistNames)
        return itemName;
      return separateDragTextItems(itemName, artistNames);
    }
    function getForArtist(uri) {
      return live(uri).get('name') || '';
    }
    function getForAlbum(uri) {
      var object = live(uri);
      var itemName = object.get('name');
      if (!itemName)
        return '';
      var artists = object.get('artists');
      if (!artists || artists.length === 0)
        return itemName;
      var artistName = artists.get(0).get('name');
      if (!artistName)
        return itemName;
      return separateDragTextItems(artistName, itemName);
    }
    function getForPlaylist(uri) {
      var object = live(uri);
      var itemName = object.get('name');
      if (!itemName)
        return '';
      var owner = object.get('owner');
      var ownerName = owner && (owner.get('name') || owner.get('username'));
      if (!ownerName)
        return itemName;
      return separateDragTextItems(itemName, ownerName);
    }
    function getForUser(uri) {
      var object = live(uri);
      var itemName = object.get('name');
      if (itemName)
        return itemName;
      var uriObject = liburi.fromString(uri);
      var username = uriObject && uriObject.username;
      return username || '';
    }
    function getForFolder(uri) {
      return live(uri).get('name');
    }
    function separateDragTextItems(item1, item2) {
      return item1 + ' \u2013 ' + item2;
    }
    function getForElement(target) {
      var title = target.getAttribute('data-drag-text');
      if (title)
        return title;
      var uri = target.getAttribute('data-uri');
      if (uri) {
        title = getForUri(uri);
        if (title)
          return title;
      }
      title = target.getAttribute('title');
      if (title)
        return title;
      return target.textContent;
    }
    exports.getForUri = getForUri;
    exports.getForElement = getForElement;
  },
  './node_modules/spotify-events/strings/en.json': function (require, module, exports, global) {
    module.exports = {
      'drag_tooltip_many_items': 'items',
      'drag_tooltip_many_tracks': 'tracks',
      'drag_tooltip_many_artists': 'artists',
      'drag_tooltip_many_albums': 'albums',
      'drag_tooltip_many_playlists': 'playlists',
      'drag_tooltip_many_users': 'users'
    };
  },
  './node_modules/mout/lang/clone.js': function (require, module, exports, global) {
    var kindOf = require('./node_modules/mout/lang/kindOf.js');
    var isPlainObject = require('./node_modules/mout/lang/isPlainObject.js');
    var mixIn = require('./node_modules/mout/object/mixIn.js');
    function clone(val) {
      switch (kindOf(val)) {
      case 'Object':
        return cloneObject(val);
      case 'Array':
        return cloneArray(val);
      case 'RegExp':
        return cloneRegExp(val);
      case 'Date':
        return cloneDate(val);
      default:
        return val;
      }
    }
    function cloneObject(source) {
      if (isPlainObject(source)) {
        return mixIn({}, source);
      } else {
        return source;
      }
    }
    function cloneRegExp(r) {
      var flags = '';
      flags += r.multiline ? 'm' : '';
      flags += r.global ? 'g' : '';
      flags += r.ignorecase ? 'i' : '';
      return new RegExp(r.source, flags);
    }
    function cloneDate(date) {
      return new Date(+date);
    }
    function cloneArray(arr) {
      return arr.slice();
    }
    module.exports = clone;
  },
  './node_modules/mout/string/trim.js': function (require, module, exports, global) {
    var toString = require('./node_modules/mout/lang/toString.js');
    var WHITE_SPACES = require('./node_modules/mout/string/WHITE_SPACES.js');
    var ltrim = require('./node_modules/mout/string/ltrim.js');
    var rtrim = require('./node_modules/mout/string/rtrim.js');
    function trim(str, chars) {
      str = toString(str);
      chars = chars || WHITE_SPACES;
      return ltrim(rtrim(str, chars), chars);
    }
    module.exports = trim;
  },
  './node_modules/spotify-live-models/node_modules/spotify-core-sort-params/index.js': function (require, module, exports, global) {
    'use strict';
    var parser = require('./node_modules/spotify-live/util/parser.js');
    var sortMap = {
        track: {
          _replace: '',
          artists: { _replace: 'artist' },
          disc: { _replace: 'discNumber' },
          number: { _replace: 'trackNumber' },
          duration: { _replace: 'length' }
        },
        timeSinceAdded: {
          _reverse: true,
          _replace: 'addTime'
        },
        addedBy: { name: { _replace: '' } }
      };
    function reverse(direction) {
      return direction === 'ASC' ? 'DESC' : 'ASC';
    }
    function walk(query, mapping, opt_direction, incomingCollector) {
      var results = [];
      var collector = incomingCollector && incomingCollector.slice() || [];
      for (var item, i = 0; item = query.mask[i]; i++) {
        var itemCollector = collector.slice();
        if (item.key) {
          var hasReplace = mapping && mapping[item.key] && mapping[item.key]._replace != null;
          var value = hasReplace ? mapping[item.key]._replace : item.key;
          if (value !== '') {
            if (!item.mask) {
              var doReverse = !!(mapping && mapping[item.key] && mapping[item.key]._reverse);
              if (opt_direction) {
                var direction = doReverse ? reverse(opt_direction) : opt_direction;
                value += ' ' + direction;
              }
            }
            itemCollector.push(value);
          }
        }
        if (item.mask) {
          var subLookUp = walk(item, mapping[item.key], opt_direction, itemCollector);
          if (subLookUp.length) {
            results.push(subLookUp);
          }
        } else {
          if (itemCollector.length) {
            results.push(itemCollector.join('.'));
          }
        }
      }
      return results;
    }
    function getParams(query, opt_direction, opt_map) {
      var parsed = parser(query);
      if (!query)
        return null;
      var map = opt_map || sortMap;
      var result = walk(parsed, map, opt_direction);
      return result.join(',');
    }
    module.exports = getParams;
  },
  './node_modules/spotify-events/node_modules/elements/node_modules/slick/parser.js': function (require, module, exports, global) {
    'use strict';
    var escapeRe = /([-.*+?^${}()|[\]\/\\])/g, unescapeRe = /\\/g;
    var escape = function (string) {
      return (string + '').replace(escapeRe, '\\$1');
    };
    var unescape = function (string) {
      return (string + '').replace(unescapeRe, '');
    };
    var slickRe = RegExp('^(?:\\s*(,)\\s*|\\s*(<combinator>+)\\s*|(\\s+)|(<unicode>+|\\*)|\\#(<unicode>+)|\\.(<unicode>+)|\\[\\s*(<unicode1>+)(?:\\s*([*^$!~|]?=)(?:\\s*(?:(["\']?)(.*?)\\9)))?\\s*\\](?!\\])|(:+)(<unicode>+)(?:\\((?:(?:(["\'])([^\\13]*)\\13)|((?:\\([^)]+\\)|[^()]*)+))\\))?)'.replace(/<combinator>/, '[' + escape('>+~`!@$%^&={}\\;</') + ']').replace(/<unicode>/g, '(?:[\\w\\u00a1-\\uFFFF-]|\\\\[^\\s0-9a-f])').replace(/<unicode1>/g, '(?:[:\\w\\u00a1-\\uFFFF-]|\\\\[^\\s0-9a-f])'));
    var Part = function Part(combinator) {
      this.combinator = combinator || ' ';
      this.tag = '*';
    };
    Part.prototype.toString = function () {
      if (!this.raw) {
        var xpr = '', k, part;
        xpr += this.tag || '*';
        if (this.id)
          xpr += '#' + this.id;
        if (this.classes)
          xpr += '.' + this.classList.join('.');
        if (this.attributes)
          for (k = 0; part = this.attributes[k++];) {
            xpr += '[' + part.name + (part.operator ? part.operator + '"' + part.value + '"' : '') + ']';
          }
        if (this.pseudos)
          for (k = 0; part = this.pseudos[k++];) {
            xpr += ':' + part.name;
            if (part.value)
              xpr += '(' + part.value + ')';
          }
        this.raw = xpr;
      }
      return this.raw;
    };
    var Expression = function Expression() {
      this.length = 0;
    };
    Expression.prototype.toString = function () {
      if (!this.raw) {
        var xpr = '';
        for (var j = 0, bit; bit = this[j++];) {
          if (j !== 1)
            xpr += ' ';
          if (bit.combinator !== ' ')
            xpr += bit.combinator + ' ';
          xpr += bit;
        }
        this.raw = xpr;
      }
      return this.raw;
    };
    var replacer = function (rawMatch, separator, combinator, combinatorChildren, tagName, id, className, attributeKey, attributeOperator, attributeQuote, attributeValue, pseudoMarker, pseudoClass, pseudoQuote, pseudoClassQuotedValue, pseudoClassValue) {
      var expression, current;
      if (separator || !this.length) {
        expression = this[this.length++] = new Expression();
        if (separator)
          return '';
      }
      if (!expression)
        expression = this[this.length - 1];
      if (combinator || combinatorChildren || !expression.length) {
        current = expression[expression.length++] = new Part(combinator);
      }
      if (!current)
        current = expression[expression.length - 1];
      if (tagName) {
        current.tag = unescape(tagName);
      } else if (id) {
        current.id = unescape(id);
      } else if (className) {
        var unescaped = unescape(className);
        var classes = current.classes || (current.classes = {});
        if (!classes[unescaped]) {
          classes[unescaped] = escape(className);
          var classList = current.classList || (current.classList = []);
          classList.push(unescaped);
          classList.sort();
        }
      } else if (pseudoClass) {
        pseudoClassValue = pseudoClassValue || pseudoClassQuotedValue;
        (current.pseudos || (current.pseudos = [])).push({
          type: pseudoMarker.length == 1 ? 'class' : 'element',
          name: unescape(pseudoClass),
          escapedName: escape(pseudoClass),
          value: pseudoClassValue ? unescape(pseudoClassValue) : null,
          escapedValue: pseudoClassValue ? escape(pseudoClassValue) : null
        });
      } else if (attributeKey) {
        attributeValue = attributeValue ? escape(attributeValue) : null;
        (current.attributes || (current.attributes = [])).push({
          operator: attributeOperator,
          name: unescape(attributeKey),
          escapedName: escape(attributeKey),
          value: attributeValue ? unescape(attributeValue) : null,
          escapedValue: attributeValue ? escape(attributeValue) : null
        });
      }
      return '';
    };
    var Expressions = function Expressions(expression) {
      this.length = 0;
      var self = this;
      var original = expression, replaced;
      while (expression) {
        replaced = expression.replace(slickRe, function () {
          return replacer.apply(self, arguments);
        });
        if (replaced === expression)
          throw new Error(original + ' is an invalid expression');
        expression = replaced;
      }
    };
    Expressions.prototype.toString = function () {
      if (!this.raw) {
        var expressions = [];
        for (var i = 0, expression; expression = this[i++];)
          expressions.push(expression);
        this.raw = expressions.join(', ');
      }
      return this.raw;
    };
    var cache = {};
    var parse = function (expression) {
      if (expression == null)
        return null;
      expression = ('' + expression).replace(/^\s+|\s+$/g, '');
      return cache[expression] || (cache[expression] = new Expressions(expression));
    };
    module.exports = parse;
  },
  './node_modules/spotify-events/node_modules/elements/node_modules/slick/index.js': function (require, module, exports, global) {
    'use strict';
    module.exports = 'document' in global ? require('./node_modules/spotify-events/node_modules/elements/node_modules/slick/finder.js') : { parse: require('./node_modules/spotify-events/node_modules/elements/node_modules/slick/parser.js') };
  },
  './node_modules/spotify-numeral/node_modules/numeral/numeral.js': function (require, module, exports, global) {
    (function () {
      var numeral, VERSION = '1.5.3', languages = {}, currentLanguage = 'en', zeroFormat = null, defaultFormat = '0,0', hasModule = typeof module !== 'undefined' && module.exports;
      function Numeral(number) {
        this._value = number;
      }
      function toFixed(value, precision, roundingFunction, optionals) {
        var power = Math.pow(10, precision), optionalsRegExp, output;
        output = (roundingFunction(value * power) / power).toFixed(precision);
        if (optionals) {
          optionalsRegExp = new RegExp('0{1,' + optionals + '}$');
          output = output.replace(optionalsRegExp, '');
        }
        return output;
      }
      function formatNumeral(n, format, roundingFunction) {
        var output;
        if (format.indexOf('$') > -1) {
          output = formatCurrency(n, format, roundingFunction);
        } else if (format.indexOf('%') > -1) {
          output = formatPercentage(n, format, roundingFunction);
        } else if (format.indexOf(':') > -1) {
          output = formatTime(n, format);
        } else {
          output = formatNumber(n._value, format, roundingFunction);
        }
        return output;
      }
      function unformatNumeral(n, string) {
        var stringOriginal = string, thousandRegExp, millionRegExp, billionRegExp, trillionRegExp, suffixes = [
            'KB',
            'MB',
            'GB',
            'TB',
            'PB',
            'EB',
            'ZB',
            'YB'
          ], bytesMultiplier = false, power;
        if (string.indexOf(':') > -1) {
          n._value = unformatTime(string);
        } else {
          if (string === zeroFormat) {
            n._value = 0;
          } else {
            if (languages[currentLanguage].delimiters.decimal !== '.') {
              string = string.replace(/\./g, '').replace(languages[currentLanguage].delimiters.decimal, '.');
            }
            thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
            millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
            billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
            trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
            for (power = 0; power <= suffixes.length; power++) {
              bytesMultiplier = string.indexOf(suffixes[power]) > -1 ? Math.pow(1024, power + 1) : false;
              if (bytesMultiplier) {
                break;
              }
            }
            n._value = (bytesMultiplier ? bytesMultiplier : 1) * (stringOriginal.match(thousandRegExp) ? Math.pow(10, 3) : 1) * (stringOriginal.match(millionRegExp) ? Math.pow(10, 6) : 1) * (stringOriginal.match(billionRegExp) ? Math.pow(10, 9) : 1) * (stringOriginal.match(trillionRegExp) ? Math.pow(10, 12) : 1) * (string.indexOf('%') > -1 ? 0.01 : 1) * ((string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1) * Number(string.replace(/[^0-9\.]+/g, ''));
            n._value = bytesMultiplier ? Math.ceil(n._value) : n._value;
          }
        }
        return n._value;
      }
      function formatCurrency(n, format, roundingFunction) {
        var symbolIndex = format.indexOf('$'), openParenIndex = format.indexOf('('), minusSignIndex = format.indexOf('-'), space = '', spliceIndex, output;
        if (format.indexOf(' $') > -1) {
          space = ' ';
          format = format.replace(' $', '');
        } else if (format.indexOf('$ ') > -1) {
          space = ' ';
          format = format.replace('$ ', '');
        } else {
          format = format.replace('$', '');
        }
        output = formatNumber(n._value, format, roundingFunction);
        if (symbolIndex <= 1) {
          if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {
            output = output.split('');
            spliceIndex = 1;
            if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex) {
              spliceIndex = 0;
            }
            output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);
            output = output.join('');
          } else {
            output = languages[currentLanguage].currency.symbol + space + output;
          }
        } else {
          if (output.indexOf(')') > -1) {
            output = output.split('');
            output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);
            output = output.join('');
          } else {
            output = output + space + languages[currentLanguage].currency.symbol;
          }
        }
        return output;
      }
      function formatPercentage(n, format, roundingFunction) {
        var space = '', output, value = n._value * 100;
        if (format.indexOf(' %') > -1) {
          space = ' ';
          format = format.replace(' %', '');
        } else {
          format = format.replace('%', '');
        }
        output = formatNumber(value, format, roundingFunction);
        if (output.indexOf(')') > -1) {
          output = output.split('');
          output.splice(-1, 0, space + '%');
          output = output.join('');
        } else {
          output = output + space + '%';
        }
        return output;
      }
      function formatTime(n) {
        var hours = Math.floor(n._value / 60 / 60), minutes = Math.floor((n._value - hours * 60 * 60) / 60), seconds = Math.round(n._value - hours * 60 * 60 - minutes * 60);
        return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);
      }
      function unformatTime(string) {
        var timeArray = string.split(':'), seconds = 0;
        if (timeArray.length === 3) {
          seconds = seconds + Number(timeArray[0]) * 60 * 60;
          seconds = seconds + Number(timeArray[1]) * 60;
          seconds = seconds + Number(timeArray[2]);
        } else if (timeArray.length === 2) {
          seconds = seconds + Number(timeArray[0]) * 60;
          seconds = seconds + Number(timeArray[1]);
        }
        return Number(seconds);
      }
      function formatNumber(value, format, roundingFunction) {
        var negP = false, signed = false, optDec = false, abbr = '', abbrK = false, abbrM = false, abbrB = false, abbrT = false, abbrForce = false, bytes = '', ord = '', abs = Math.abs(value), suffixes = [
            'B',
            'KB',
            'MB',
            'GB',
            'TB',
            'PB',
            'EB',
            'ZB',
            'YB'
          ], min, max, power, w, precision, thousands, d = '', neg = false;
        if (value === 0 && zeroFormat !== null) {
          return zeroFormat;
        } else {
          if (format.indexOf('(') > -1) {
            negP = true;
            format = format.slice(1, -1);
          } else if (format.indexOf('+') > -1) {
            signed = true;
            format = format.replace(/\+/g, '');
          }
          if (format.indexOf('a') > -1) {
            abbrK = format.indexOf('aK') >= 0;
            abbrM = format.indexOf('aM') >= 0;
            abbrB = format.indexOf('aB') >= 0;
            abbrT = format.indexOf('aT') >= 0;
            abbrForce = abbrK || abbrM || abbrB || abbrT;
            if (format.indexOf(' a') > -1) {
              abbr = ' ';
              format = format.replace(' a', '');
            } else {
              format = format.replace('a', '');
            }
            if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {
              abbr = abbr + languages[currentLanguage].abbreviations.trillion;
              value = value / Math.pow(10, 12);
            } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {
              abbr = abbr + languages[currentLanguage].abbreviations.billion;
              value = value / Math.pow(10, 9);
            } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {
              abbr = abbr + languages[currentLanguage].abbreviations.million;
              value = value / Math.pow(10, 6);
            } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {
              abbr = abbr + languages[currentLanguage].abbreviations.thousand;
              value = value / Math.pow(10, 3);
            }
          }
          if (format.indexOf('b') > -1) {
            if (format.indexOf(' b') > -1) {
              bytes = ' ';
              format = format.replace(' b', '');
            } else {
              format = format.replace('b', '');
            }
            for (power = 0; power <= suffixes.length; power++) {
              min = Math.pow(1024, power);
              max = Math.pow(1024, power + 1);
              if (value >= min && value < max) {
                bytes = bytes + suffixes[power];
                if (min > 0) {
                  value = value / min;
                }
                break;
              }
            }
          }
          if (format.indexOf('o') > -1) {
            if (format.indexOf(' o') > -1) {
              ord = ' ';
              format = format.replace(' o', '');
            } else {
              format = format.replace('o', '');
            }
            ord = ord + languages[currentLanguage].ordinal(value);
          }
          if (format.indexOf('[.]') > -1) {
            optDec = true;
            format = format.replace('[.]', '.');
          }
          w = value.toString().split('.')[0];
          precision = format.split('.')[1];
          thousands = format.indexOf(',');
          if (precision) {
            if (precision.indexOf('[') > -1) {
              precision = precision.replace(']', '');
              precision = precision.split('[');
              d = toFixed(value, precision[0].length + precision[1].length, roundingFunction, precision[1].length);
            } else {
              d = toFixed(value, precision.length, roundingFunction);
            }
            w = d.split('.')[0];
            if (d.split('.')[1].length) {
              d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];
            } else {
              d = '';
            }
            if (optDec && Number(d.slice(1)) === 0) {
              d = '';
            }
          } else {
            w = toFixed(value, null, roundingFunction);
          }
          if (w.indexOf('-') > -1) {
            w = w.slice(1);
            neg = true;
          }
          if (thousands > -1) {
            w = w.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);
          }
          if (format.indexOf('.') === 0) {
            w = '';
          }
          return (negP && neg ? '(' : '') + (!negP && neg ? '-' : '') + (!neg && signed ? '+' : '') + w + d + (ord ? ord : '') + (abbr ? abbr : '') + (bytes ? bytes : '') + (negP && neg ? ')' : '');
        }
      }
      numeral = function (input) {
        if (numeral.isNumeral(input)) {
          input = input.value();
        } else if (input === 0 || typeof input === 'undefined') {
          input = 0;
        } else if (!Number(input)) {
          input = numeral.fn.unformat(input);
        }
        return new Numeral(Number(input));
      };
      numeral.version = VERSION;
      numeral.isNumeral = function (obj) {
        return obj instanceof Numeral;
      };
      numeral.language = function (key, values) {
        if (!key) {
          return currentLanguage;
        }
        if (key && !values) {
          if (!languages[key]) {
            throw new Error('Unknown language : ' + key);
          }
          currentLanguage = key;
        }
        if (values || !languages[key]) {
          loadLanguage(key, values);
        }
        return numeral;
      };
      numeral.languageData = function (key) {
        if (!key) {
          return languages[currentLanguage];
        }
        if (!languages[key]) {
          throw new Error('Unknown language : ' + key);
        }
        return languages[key];
      };
      numeral.language('en', {
        delimiters: {
          thousands: ',',
          decimal: '.'
        },
        abbreviations: {
          thousand: 'k',
          million: 'm',
          billion: 'b',
          trillion: 't'
        },
        ordinal: function (number) {
          var b = number % 10;
          return ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
        },
        currency: { symbol: '$' }
      });
      numeral.zeroFormat = function (format) {
        zeroFormat = typeof format === 'string' ? format : null;
      };
      numeral.defaultFormat = function (format) {
        defaultFormat = typeof format === 'string' ? format : '0.0';
      };
      function loadLanguage(key, values) {
        languages[key] = values;
      }
      if ('function' !== typeof Array.prototype.reduce) {
        Array.prototype.reduce = function (callback, opt_initialValue) {
          'use strict';
          if (null === this || 'undefined' === typeof this) {
            throw new TypeError('Array.prototype.reduce called on null or undefined');
          }
          if ('function' !== typeof callback) {
            throw new TypeError(callback + ' is not a function');
          }
          var index, value, length = this.length >>> 0, isValueSet = false;
          if (1 < arguments.length) {
            value = opt_initialValue;
            isValueSet = true;
          }
          for (index = 0; length > index; ++index) {
            if (this.hasOwnProperty(index)) {
              if (isValueSet) {
                value = callback(value, this[index], index, this);
              } else {
                value = this[index];
                isValueSet = true;
              }
            }
          }
          if (!isValueSet) {
            throw new TypeError('Reduce of empty array with no initial value');
          }
          return value;
        };
      }
      function multiplier(x) {
        var parts = x.toString().split('.');
        if (parts.length < 2) {
          return 1;
        }
        return Math.pow(10, parts[1].length);
      }
      function correctionFactor() {
        var args = Array.prototype.slice.call(arguments);
        return args.reduce(function (prev, next) {
          var mp = multiplier(prev), mn = multiplier(next);
          return mp > mn ? mp : mn;
        }, -Infinity);
      }
      numeral.fn = Numeral.prototype = {
        clone: function () {
          return numeral(this);
        },
        format: function (inputString, roundingFunction) {
          return formatNumeral(this, inputString ? inputString : defaultFormat, roundingFunction !== undefined ? roundingFunction : Math.round);
        },
        unformat: function (inputString) {
          if (Object.prototype.toString.call(inputString) === '[object Number]') {
            return inputString;
          }
          return unformatNumeral(this, inputString ? inputString : defaultFormat);
        },
        value: function () {
          return this._value;
        },
        valueOf: function () {
          return this._value;
        },
        set: function (value) {
          this._value = Number(value);
          return this;
        },
        add: function (value) {
          var corrFactor = correctionFactor.call(null, this._value, value);
          function cback(accum, curr, currI, O) {
            return accum + corrFactor * curr;
          }
          this._value = [
            this._value,
            value
          ].reduce(cback, 0) / corrFactor;
          return this;
        },
        subtract: function (value) {
          var corrFactor = correctionFactor.call(null, this._value, value);
          function cback(accum, curr, currI, O) {
            return accum - corrFactor * curr;
          }
          this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;
          return this;
        },
        multiply: function (value) {
          function cback(accum, curr, currI, O) {
            var corrFactor = correctionFactor(accum, curr);
            return accum * corrFactor * (curr * corrFactor) / (corrFactor * corrFactor);
          }
          this._value = [
            this._value,
            value
          ].reduce(cback, 1);
          return this;
        },
        divide: function (value) {
          function cback(accum, curr, currI, O) {
            var corrFactor = correctionFactor(accum, curr);
            return accum * corrFactor / (curr * corrFactor);
          }
          this._value = [
            this._value,
            value
          ].reduce(cback);
          return this;
        },
        difference: function (value) {
          return Math.abs(numeral(this._value).subtract(value).value());
        }
      };
      if (hasModule) {
        module.exports = numeral;
      }
      if (typeof ender === 'undefined') {
        this['numeral'] = numeral;
      }
      if (typeof define === 'function' && define.amd) {
        define([], function () {
          return numeral;
        });
      }
    }.call(this));
  },
  './node_modules/mout/string/WHITE_SPACES.js': function (require, module, exports, global) {
    module.exports = [
      ' ',
      '\n',
      '\r',
      '\t',
      '\f',
      '\x0B',
      '\xA0',
      '\u1680',
      '\u180E',
      '\u2000',
      '\u2001',
      '\u2002',
      '\u2003',
      '\u2004',
      '\u2005',
      '\u2006',
      '\u2007',
      '\u2008',
      '\u2009',
      '\u200A',
      '\u2028',
      '\u2029',
      '\u202F',
      '\u205F',
      '\u3000'
    ];
  },
  './node_modules/mout/string/ltrim.js': function (require, module, exports, global) {
    var toString = require('./node_modules/mout/lang/toString.js');
    var WHITE_SPACES = require('./node_modules/mout/string/WHITE_SPACES.js');
    function ltrim(str, chars) {
      str = toString(str);
      chars = chars || WHITE_SPACES;
      var start = 0, len = str.length, charLen = chars.length, found = true, i, c;
      while (found && start < len) {
        found = false;
        i = -1;
        c = str.charAt(start);
        while (++i < charLen) {
          if (c === chars[i]) {
            found = true;
            start++;
            break;
          }
        }
      }
      return start >= len ? '' : str.substr(start, len);
    }
    module.exports = ltrim;
  },
  './node_modules/mout/string/rtrim.js': function (require, module, exports, global) {
    var toString = require('./node_modules/mout/lang/toString.js');
    var WHITE_SPACES = require('./node_modules/mout/string/WHITE_SPACES.js');
    function rtrim(str, chars) {
      str = toString(str);
      chars = chars || WHITE_SPACES;
      var end = str.length - 1, charLen = chars.length, found = true, i, c;
      while (found && end >= 0) {
        found = false;
        i = -1;
        c = str.charAt(end);
        while (++i < charLen) {
          if (c === chars[i]) {
            found = true;
            end--;
            break;
          }
        }
      }
      return end >= 0 ? str.substring(0, end + 1) : '';
    }
    module.exports = rtrim;
  },
  './node_modules/prime/map.js': function (require, module, exports, global) {
    'use strict';
    var indexOf = require('./node_modules/mout/array/indexOf.js');
    var prime = require('./node_modules/prime/index.js');
    var Map = prime({
        constructor: function Map() {
          this.length = 0;
          this._values = [];
          this._keys = [];
        },
        set: function (key, value) {
          var index = indexOf(this._keys, key);
          if (index === -1) {
            this._keys.push(key);
            this._values.push(value);
            this.length++;
          } else {
            this._values[index] = value;
          }
          return this;
        },
        get: function (key) {
          var index = indexOf(this._keys, key);
          return index === -1 ? null : this._values[index];
        },
        count: function () {
          return this.length;
        },
        forEach: function (method, context) {
          for (var i = 0, l = this.length; i < l; i++) {
            if (method.call(context, this._values[i], this._keys[i], this) === false)
              break;
          }
          return this;
        },
        map: function (method, context) {
          var results = new Map();
          this.forEach(function (value, key) {
            results.set(key, method.call(context, value, key, this));
          }, this);
          return results;
        },
        filter: function (method, context) {
          var results = new Map();
          this.forEach(function (value, key) {
            if (method.call(context, value, key, this))
              results.set(key, value);
          }, this);
          return results;
        },
        every: function (method, context) {
          var every = true;
          this.forEach(function (value, key) {
            if (!method.call(context, value, key, this))
              return every = false;
          }, this);
          return every;
        },
        some: function (method, context) {
          var some = false;
          this.forEach(function (value, key) {
            if (method.call(context, value, key, this))
              return !(some = true);
          }, this);
          return some;
        },
        indexOf: function (value) {
          var index = indexOf(this._values, value);
          return index > -1 ? this._keys[index] : null;
        },
        remove: function (value) {
          var index = indexOf(this._values, value);
          if (index !== -1) {
            this._values.splice(index, 1);
            this.length--;
            return this._keys.splice(index, 1)[0];
          }
          return null;
        },
        unset: function (key) {
          var index = indexOf(this._keys, key);
          if (index !== -1) {
            this._keys.splice(index, 1);
            this.length--;
            return this._values.splice(index, 1)[0];
          }
          return null;
        },
        keys: function () {
          return this._keys.slice();
        },
        values: function () {
          return this._values.slice();
        }
      });
    var map = function () {
      return new Map();
    };
    map.prototype = Map.prototype;
    module.exports = map;
  },
  './node_modules/spotify-dom-logger/node_modules/spotify-client-logger/node_modules/spotify-bridge-request/index.js': function (require, module, exports, global) {
    var SP = require('./node_modules/quickstart-spotify/spotify-api.js').SP;
    'use strict';
    var ERROR_TIMEOUT = 'timeout';
    var BACKOFF = 300;
    var request = function (name, args, callback) {
      SP.request(name, args || [], null, function (data) {
        if (callback)
          callback(null, data);
      }, function (data) {
        var _args = JSON.stringify(args);
        var debug = ' (bridge message: \'' + name + '\', args: ' + _args + ')';
        var msg = data.message + debug;
        var error = new Error(msg);
        error.name = data.error;
        if (data.error === ERROR_TIMEOUT) {
          var delay = BACKOFF + Math.floor(Math.random() * 100);
          if (typeof console !== 'undefined') {
            console.warn(msg);
          }
          setTimeout(function () {
            request(name, args, callback);
          }, delay);
          return;
        }
        if (callback)
          callback(error);
      });
    };
    exports.request = request;
  },
  './node_modules/spotify-numeral/node_modules/numeral/languages/es-ES.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: '.',
            decimal: ','
          },
          abbreviations: {
            thousand: 'k',
            million: 'mm',
            billion: 'b',
            trillion: 't'
          },
          ordinal: function (number) {
            var b = number % 10;
            return b === 1 || b === 3 ? 'er' : b === 2 ? 'do' : b === 7 || b === 0 ? 'mo' : b === 8 ? 'vo' : b === 9 ? 'no' : 'to';
          },
          currency: { symbol: '\u20AC' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('es', language);
      }
    }());
  },
  './node_modules/spotify-numeral/node_modules/numeral/languages/fi.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: ' ',
            decimal: ','
          },
          abbreviations: {
            thousand: 'k',
            million: 'M',
            billion: 'G',
            trillion: 'T'
          },
          ordinal: function (number) {
            return '.';
          },
          currency: { symbol: '\u20AC' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('fi', language);
      }
    }());
  },
  './node_modules/spotify-numeral/node_modules/numeral/languages/fr.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: ' ',
            decimal: ','
          },
          abbreviations: {
            thousand: 'k',
            million: 'm',
            billion: 'b',
            trillion: 't'
          },
          ordinal: function (number) {
            return number === 1 ? 'er' : 'e';
          },
          currency: { symbol: '\u20AC' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('fr', language);
      }
    }());
  },
  './node_modules/spotify-numeral/node_modules/numeral/languages/hu.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: ' ',
            decimal: ','
          },
          abbreviations: {
            thousand: 'E',
            million: 'M',
            billion: 'Mrd',
            trillion: 'T'
          },
          ordinal: function (number) {
            return '.';
          },
          currency: { symbol: ' Ft' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('hu', language);
      }
    }());
  },
  './node_modules/spotify-numeral/node_modules/numeral/languages/it.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: '.',
            decimal: ','
          },
          abbreviations: {
            thousand: 'mila',
            million: 'mil',
            billion: 'b',
            trillion: 't'
          },
          ordinal: function (number) {
            return '\xBA';
          },
          currency: { symbol: '\u20AC' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('it', language);
      }
    }());
  },
  './node_modules/spotify-numeral/node_modules/numeral/languages/ja.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: ',',
            decimal: '.'
          },
          abbreviations: {
            thousand: '\u5343',
            million: '\u767E\u4E07',
            billion: '\u5341\u5104',
            trillion: '\u5146'
          },
          ordinal: function (number) {
            return '.';
          },
          currency: { symbol: '\xA5' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('ja', language);
      }
    }());
  },
  './node_modules/spotify-numeral/node_modules/numeral/languages/nl-nl.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: '.',
            decimal: ','
          },
          abbreviations: {
            thousand: 'k',
            million: 'mln',
            billion: 'mrd',
            trillion: 'bln'
          },
          ordinal: function (number) {
            var remainder = number % 100;
            return number !== 0 && remainder <= 1 || remainder === 8 || remainder >= 20 ? 'ste' : 'de';
          },
          currency: { symbol: '\u20AC ' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('nl-nl', language);
      }
    }());
  },
  './node_modules/spotify-numeral/node_modules/numeral/languages/pl.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: ' ',
            decimal: ','
          },
          abbreviations: {
            thousand: 'tys.',
            million: 'mln',
            billion: 'mld',
            trillion: 'bln'
          },
          ordinal: function (number) {
            return '.';
          },
          currency: { symbol: 'PLN' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('pl', language);
      }
    }());
  },
  './node_modules/spotify-numeral/node_modules/numeral/languages/de.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: ' ',
            decimal: ','
          },
          abbreviations: {
            thousand: 'k',
            million: 'm',
            billion: 'b',
            trillion: 't'
          },
          ordinal: function (number) {
            return '.';
          },
          currency: { symbol: '\u20AC' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('de', language);
      }
    }());
  },
  './node_modules/spotify-numeral/node_modules/numeral/languages/pt-br.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: '.',
            decimal: ','
          },
          abbreviations: {
            thousand: 'mil',
            million: 'milh\xF5es',
            billion: 'b',
            trillion: 't'
          },
          ordinal: function (number) {
            return '\xBA';
          },
          currency: { symbol: 'R$' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('pt-br', language);
      }
    }());
  },
  './node_modules/spotify-numeral/node_modules/numeral/languages/ru.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: ' ',
            decimal: ','
          },
          abbreviations: {
            thousand: '\u0442\u044B\u0441.',
            million: '\u043C\u043B\u043D',
            billion: 'b',
            trillion: 't'
          },
          ordinal: function () {
            return '.';
          },
          currency: { symbol: '\u0440\u0443\u0431.' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('ru', language);
      }
    }());
  },
  './node_modules/spotify-numeral/node_modules/numeral/languages/th.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: ',',
            decimal: '.'
          },
          abbreviations: {
            thousand: '\u0E1E\u0E31\u0E19',
            million: '\u0E25\u0E49\u0E32\u0E19',
            billion: '\u0E1E\u0E31\u0E19\u0E25\u0E49\u0E32\u0E19',
            trillion: '\u0E25\u0E49\u0E32\u0E19\u0E25\u0E49\u0E32\u0E19'
          },
          ordinal: function (number) {
            return '.';
          },
          currency: { symbol: '\u0E3F' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('th', language);
      }
    }());
  },
  './node_modules/spotify-numeral/node_modules/numeral/languages/tr.js': function (require, module, exports, global) {
    (function () {
      var suffixes = {
          1: '\'inci',
          5: '\'inci',
          8: '\'inci',
          70: '\'inci',
          80: '\'inci',
          2: '\'nci',
          7: '\'nci',
          20: '\'nci',
          50: '\'nci',
          3: '\'\xFCnc\xFC',
          4: '\'\xFCnc\xFC',
          100: '\'\xFCnc\xFC',
          6: '\'nc\u0131',
          9: '\'uncu',
          10: '\'uncu',
          30: '\'uncu',
          60: '\'\u0131nc\u0131',
          90: '\'\u0131nc\u0131'
        }, language = {
          delimiters: {
            thousands: '.',
            decimal: ','
          },
          abbreviations: {
            thousand: 'bin',
            million: 'milyon',
            billion: 'milyar',
            trillion: 'trilyon'
          },
          ordinal: function (number) {
            if (number === 0) {
              return '\'\u0131nc\u0131';
            }
            var a = number % 10, b = number % 100 - a, c = number >= 100 ? 100 : null;
            return suffixes[a] || suffixes[b] || suffixes[c];
          },
          currency: { symbol: '\u20BA' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('tr', language);
      }
    }());
  },
  './node_modules/spotify-live-models/node_modules/spotify-player/lib/v2/index.js': function (require, module, exports, global) {
    var player = require('./node_modules/spotify-live-models/node_modules/spotify-player/lib/v2/player.js');
    var types = require('./node_modules/spotify-live-models/node_modules/spotify-player/lib/v2/types.js');
    exports.Player = player.Player;
    exports.PlayerContext = types.Context;
    exports.PlayOptions = types.PlayOptions;
    exports.PlayerRestrictions = types.Restrictions;
    exports.PlayerSuppressions = types.Suppressions;
    exports.PlayerTrack = types.Track;
    exports.PlayerContextPage = types.ContextPage;
    exports.IndexPath = types.IndexPath;
  },
  './node_modules/spotify-events/node_modules/elements/node_modules/slick/finder.js': function (require, module, exports, global) {
    'use strict';
    var parse = require('./node_modules/spotify-events/node_modules/elements/node_modules/slick/parser.js');
    var index = 0, counter = document.__counter = (parseInt(document.__counter || -1, 36) + 1).toString(36), key = 'uid:' + counter;
    var uniqueID = function (n, xml) {
      if (n === window)
        return 'window';
      if (n === document)
        return 'document';
      if (n === document.documentElement)
        return 'html';
      if (xml) {
        var uid = n.getAttribute(key);
        if (!uid) {
          uid = (index++).toString(36);
          n.setAttribute(key, uid);
        }
        return uid;
      } else {
        return n[key] || (n[key] = (index++).toString(36));
      }
    };
    var uniqueIDXML = function (n) {
      return uniqueID(n, true);
    };
    var isArray = Array.isArray || function (object) {
        return Object.prototype.toString.call(object) === '[object Array]';
      };
    var uniqueIndex = 0;
    var HAS = {
        GET_ELEMENT_BY_ID: function (test, id) {
          id = 'slick_' + uniqueIndex++;
          test.innerHTML = '<a id="' + id + '"></a>';
          return !!this.getElementById(id);
        },
        QUERY_SELECTOR: function (test) {
          test.innerHTML = '_<style>:nth-child(2){}</style>';
          test.innerHTML = '<a class="MiX"></a>';
          return test.querySelectorAll('.MiX').length === 1;
        },
        EXPANDOS: function (test, id) {
          id = 'slick_' + uniqueIndex++;
          test._custom_property_ = id;
          return test._custom_property_ === id;
        },
        MATCHES_SELECTOR: function (test) {
          test.className = 'MiX';
          var matches = test.matchesSelector || test.mozMatchesSelector || test.webkitMatchesSelector;
          if (matches)
            try {
              matches.call(test, ':slick');
            } catch (e) {
              return matches.call(test, '.MiX') ? matches : false;
            }
          return false;
        },
        GET_ELEMENTS_BY_CLASS_NAME: function (test) {
          test.innerHTML = '<a class="f"></a><a class="b"></a>';
          if (test.getElementsByClassName('b').length !== 1)
            return false;
          test.firstChild.className = 'b';
          if (test.getElementsByClassName('b').length !== 2)
            return false;
          test.innerHTML = '<a class="a"></a><a class="f b a"></a>';
          if (test.getElementsByClassName('a').length !== 2)
            return false;
          return true;
        },
        GET_ATTRIBUTE: function (test) {
          var shout = 'fus ro dah';
          test.innerHTML = '<a class="' + shout + '"></a>';
          return test.firstChild.getAttribute('class') === shout;
        }
      };
    var Finder = function Finder(document) {
      this.document = document;
      var root = this.root = document.documentElement;
      this.tested = {};
      this.uniqueID = this.has('EXPANDOS') ? uniqueID : uniqueIDXML;
      this.getAttribute = this.has('GET_ATTRIBUTE') ? function (node, name) {
        return node.getAttribute(name);
      } : function (node, name) {
        node = node.getAttributeNode(name);
        return node && node.specified ? node.value : null;
      };
      this.hasAttribute = root.hasAttribute ? function (node, attribute) {
        return node.hasAttribute(attribute);
      } : function (node, attribute) {
        node = node.getAttributeNode(attribute);
        return !!(node && node.specified);
      };
      this.contains = document.contains && root.contains ? function (context, node) {
        return context.contains(node);
      } : root.compareDocumentPosition ? function (context, node) {
        return context === node || !!(context.compareDocumentPosition(node) & 16);
      } : function (context, node) {
        do {
          if (node === context)
            return true;
        } while (node = node.parentNode);
        return false;
      };
      this.sorter = root.compareDocumentPosition ? function (a, b) {
        if (!a.compareDocumentPosition || !b.compareDocumentPosition)
          return 0;
        return a.compareDocumentPosition(b) & 4 ? -1 : a === b ? 0 : 1;
      } : 'sourceIndex' in root ? function (a, b) {
        if (!a.sourceIndex || !b.sourceIndex)
          return 0;
        return a.sourceIndex - b.sourceIndex;
      } : document.createRange ? function (a, b) {
        if (!a.ownerDocument || !b.ownerDocument)
          return 0;
        var aRange = a.ownerDocument.createRange(), bRange = b.ownerDocument.createRange();
        aRange.setStart(a, 0);
        aRange.setEnd(a, 0);
        bRange.setStart(b, 0);
        bRange.setEnd(b, 0);
        return aRange.compareBoundaryPoints(Range.START_TO_END, bRange);
      } : null;
      this.failed = {};
      var nativeMatches = this.has('MATCHES_SELECTOR');
      if (nativeMatches)
        this.matchesSelector = function (node, expression) {
          if (this.failed[expression])
            return null;
          try {
            return nativeMatches.call(node, expression);
          } catch (e) {
            if (slick.debug)
              console.warn('matchesSelector failed on ' + expression);
            this.failed[expression] = true;
            return null;
          }
        };
      if (this.has('QUERY_SELECTOR')) {
        this.querySelectorAll = function (node, expression) {
          if (this.failed[expression])
            return true;
          var result, _id, _expression, _combinator, _node;
          if (node !== this.document) {
            _combinator = expression[0].combinator;
            _id = node.getAttribute('id');
            _expression = expression;
            if (!_id) {
              _node = node;
              _id = '__slick__';
              _node.setAttribute('id', _id);
            }
            expression = '#' + _id + ' ' + _expression;
            if (_combinator.indexOf('~') > -1 || _combinator.indexOf('+') > -1) {
              node = node.parentNode;
              if (!node)
                result = true;
            }
          }
          if (!result)
            try {
              result = node.querySelectorAll(expression.toString());
            } catch (e) {
              if (slick.debug)
                console.warn('querySelectorAll failed on ' + (_expression || expression));
              result = this.failed[_expression || expression] = true;
            }
          if (_node)
            _node.removeAttribute('id');
          return result;
        };
      }
    };
    Finder.prototype.has = function (FEATURE) {
      var tested = this.tested, testedFEATURE = tested[FEATURE];
      if (testedFEATURE != null)
        return testedFEATURE;
      var root = this.root, document = this.document, testNode = document.createElement('div');
      testNode.setAttribute('style', 'display: none;');
      root.appendChild(testNode);
      var TEST = HAS[FEATURE], result = false;
      if (TEST)
        try {
          result = TEST.call(document, testNode);
        } catch (e) {
        }
      if (slick.debug && !result)
        console.warn('document has no ' + FEATURE);
      root.removeChild(testNode);
      return tested[FEATURE] = result;
    };
    var combinators = {
        ' ': function (node, part, push) {
          var item, items;
          var noId = !part.id, noTag = !part.tag, noClass = !part.classes;
          if (part.id && node.getElementById && this.has('GET_ELEMENT_BY_ID')) {
            item = node.getElementById(part.id);
            if (item && item.getAttribute('id') === part.id) {
              items = [item];
              noId = true;
              if (part.tag === '*')
                noTag = true;
            }
          }
          if (!items) {
            if (part.classes && node.getElementsByClassName && this.has('GET_ELEMENTS_BY_CLASS_NAME')) {
              items = node.getElementsByClassName(part.classList);
              noClass = true;
              if (part.tag === '*')
                noTag = true;
            } else {
              items = node.getElementsByTagName(part.tag);
              if (part.tag !== '*')
                noTag = true;
            }
            if (!items || !items.length)
              return false;
          }
          for (var i = 0; item = items[i++];)
            if (noTag && noId && noClass && !part.attributes && !part.pseudos || this.match(item, part, noTag, noId, noClass))
              push(item);
          return true;
        },
        '>': function (node, part, push) {
          if (node = node.firstChild)
            do {
              if (node.nodeType == 1 && this.match(node, part))
                push(node);
            } while (node = node.nextSibling);
        },
        '+': function (node, part, push) {
          while (node = node.nextSibling)
            if (node.nodeType == 1) {
              if (this.match(node, part))
                push(node);
              break;
            }
        },
        '^': function (node, part, push) {
          node = node.firstChild;
          if (node) {
            if (node.nodeType === 1) {
              if (this.match(node, part))
                push(node);
            } else {
              combinators['+'].call(this, node, part, push);
            }
          }
        },
        '~': function (node, part, push) {
          while (node = node.nextSibling) {
            if (node.nodeType === 1 && this.match(node, part))
              push(node);
          }
        },
        '++': function (node, part, push) {
          combinators['+'].call(this, node, part, push);
          combinators['!+'].call(this, node, part, push);
        },
        '~~': function (node, part, push) {
          combinators['~'].call(this, node, part, push);
          combinators['!~'].call(this, node, part, push);
        },
        '!': function (node, part, push) {
          while (node = node.parentNode)
            if (node !== this.document && this.match(node, part))
              push(node);
        },
        '!>': function (node, part, push) {
          node = node.parentNode;
          if (node !== this.document && this.match(node, part))
            push(node);
        },
        '!+': function (node, part, push) {
          while (node = node.previousSibling)
            if (node.nodeType == 1) {
              if (this.match(node, part))
                push(node);
              break;
            }
        },
        '!^': function (node, part, push) {
          node = node.lastChild;
          if (node) {
            if (node.nodeType == 1) {
              if (this.match(node, part))
                push(node);
            } else {
              combinators['!+'].call(this, node, part, push);
            }
          }
        },
        '!~': function (node, part, push) {
          while (node = node.previousSibling) {
            if (node.nodeType === 1 && this.match(node, part))
              push(node);
          }
        }
      };
    Finder.prototype.search = function (context, expression, found) {
      if (!context)
        context = this.document;
      else if (!context.nodeType && context.document)
        context = context.document;
      var expressions = parse(expression);
      if (!expressions || !expressions.length)
        throw new Error('invalid expression');
      if (!found)
        found = [];
      var uniques, push = isArray(found) ? function (node) {
          found[found.length] = node;
        } : function (node) {
          found[found.length++] = node;
        };
      if (expressions.length > 1) {
        uniques = {};
        var plush = push;
        push = function (node) {
          var uid = uniqueID(node);
          if (!uniques[uid]) {
            uniques[uid] = true;
            plush(node);
          }
        };
      }
      var node, nodes, part;
      main:
        for (var i = 0; expression = expressions[i++];) {
          if (!slick.noQSA && this.querySelectorAll) {
            nodes = this.querySelectorAll(context, expression);
            if (nodes !== true) {
              if (nodes && nodes.length)
                for (var j = 0; node = nodes[j++];)
                  if (node.nodeName > '@') {
                    push(node);
                  }
              continue main;
            }
          }
          if (expression.length === 1) {
            part = expression[0];
            combinators[part.combinator].call(this, context, part, push);
          } else {
            var cs = [context], c, f, u, p = function (node) {
                var uid = uniqueID(node);
                if (!u[uid]) {
                  u[uid] = true;
                  f[f.length] = node;
                }
              };
            for (var j = 0; part = expression[j++];) {
              f = [];
              u = {};
              for (var k = 0; c = cs[k++];)
                combinators[part.combinator].call(this, c, part, p);
              if (!f.length)
                continue main;
              cs = f;
            }
            if (i === 0)
              found = f;
            else
              for (var l = 0; l < f.length; l++)
                push(f[l]);
          }
        }
      if (uniques && found && found.length > 1)
        this.sort(found);
      return found;
    };
    Finder.prototype.sort = function (nodes) {
      return this.sorter ? Array.prototype.sort.call(nodes, this.sorter) : nodes;
    };
    var pseudos = {
        'empty': function () {
          return !(this && this.nodeType === 1) && !(this.innerText || this.textContent || '').length;
        },
        'not': function (expression) {
          return !slick.matches(this, expression);
        },
        'contains': function (text) {
          return (this.innerText || this.textContent || '').indexOf(text) > -1;
        },
        'first-child': function () {
          var node = this;
          while (node = node.previousSibling)
            if (node.nodeType == 1)
              return false;
          return true;
        },
        'last-child': function () {
          var node = this;
          while (node = node.nextSibling)
            if (node.nodeType == 1)
              return false;
          return true;
        },
        'only-child': function () {
          var prev = this;
          while (prev = prev.previousSibling)
            if (prev.nodeType == 1)
              return false;
          var next = this;
          while (next = next.nextSibling)
            if (next.nodeType == 1)
              return false;
          return true;
        },
        'first-of-type': function () {
          var node = this, nodeName = node.nodeName;
          while (node = node.previousSibling)
            if (node.nodeName == nodeName)
              return false;
          return true;
        },
        'last-of-type': function () {
          var node = this, nodeName = node.nodeName;
          while (node = node.nextSibling)
            if (node.nodeName == nodeName)
              return false;
          return true;
        },
        'only-of-type': function () {
          var prev = this, nodeName = this.nodeName;
          while (prev = prev.previousSibling)
            if (prev.nodeName == nodeName)
              return false;
          var next = this;
          while (next = next.nextSibling)
            if (next.nodeName == nodeName)
              return false;
          return true;
        },
        'enabled': function () {
          return !this.disabled;
        },
        'disabled': function () {
          return this.disabled;
        },
        'checked': function () {
          return this.checked || this.selected;
        },
        'selected': function () {
          return this.selected;
        },
        'focus': function () {
          var doc = this.ownerDocument;
          return doc.activeElement === this && (this.href || this.type || slick.hasAttribute(this, 'tabindex'));
        },
        'root': function () {
          return this === this.ownerDocument.documentElement;
        }
      };
    Finder.prototype.match = function (node, bit, noTag, noId, noClass) {
      if (!slick.noQSA && this.matchesSelector) {
        var matches = this.matchesSelector(node, bit);
        if (matches !== null)
          return matches;
      }
      if (!noTag && bit.tag) {
        var nodeName = node.nodeName.toLowerCase();
        if (bit.tag === '*') {
          if (nodeName < '@')
            return false;
        } else if (nodeName != bit.tag) {
          return false;
        }
      }
      if (!noId && bit.id && node.getAttribute('id') !== bit.id)
        return false;
      var i, part;
      if (!noClass && bit.classes) {
        var className = this.getAttribute(node, 'class');
        if (!className)
          return false;
        for (part in bit.classes)
          if (!RegExp('(^|\\s)' + bit.classes[part] + '(\\s|$)').test(className))
            return false;
      }
      var name, value;
      if (bit.attributes)
        for (i = 0; part = bit.attributes[i++];) {
          var operator = part.operator, escaped = part.escapedValue;
          name = part.name;
          value = part.value;
          if (!operator) {
            if (!this.hasAttribute(node, name))
              return false;
          } else {
            var actual = this.getAttribute(node, name);
            if (actual == null)
              return false;
            switch (operator) {
            case '^=':
              if (!RegExp('^' + escaped).test(actual))
                return false;
              break;
            case '$=':
              if (!RegExp(escaped + '$').test(actual))
                return false;
              break;
            case '~=':
              if (!RegExp('(^|\\s)' + escaped + '(\\s|$)').test(actual))
                return false;
              break;
            case '|=':
              if (!RegExp('^' + escaped + '(-|$)').test(actual))
                return false;
              break;
            case '=':
              if (actual !== value)
                return false;
              break;
            case '*=':
              if (actual.indexOf(value) === -1)
                return false;
              break;
            default:
              return false;
            }
          }
        }
      if (bit.pseudos)
        for (i = 0; part = bit.pseudos[i++];) {
          name = part.name;
          value = part.value;
          if (pseudos[name])
            return pseudos[name].call(node, value);
          if (value != null) {
            if (this.getAttribute(node, name) !== value)
              return false;
          } else {
            if (!this.hasAttribute(node, name))
              return false;
          }
        }
      return true;
    };
    Finder.prototype.matches = function (node, expression) {
      var expressions = parse(expression);
      if (expressions.length === 1 && expressions[0].length === 1) {
        return this.match(node, expressions[0][0]);
      }
      if (!slick.noQSA && this.matchesSelector) {
        var matches = this.matchesSelector(node, expressions);
        if (matches !== null)
          return matches;
      }
      var nodes = this.search(this.document, expression, { length: 0 });
      for (var i = 0, res; res = nodes[i++];)
        if (node === res)
          return true;
      return false;
    };
    var finders = {};
    var finder = function (context) {
      var doc = context || document;
      if (doc.ownerDocument)
        doc = doc.ownerDocument;
      else if (doc.document)
        doc = doc.document;
      if (doc.nodeType !== 9)
        throw new TypeError('invalid document');
      var uid = uniqueID(doc);
      return finders[uid] || (finders[uid] = new Finder(doc));
    };
    var slick = function (expression, context) {
      return slick.search(expression, context);
    };
    slick.search = function (expression, context, found) {
      return finder(context).search(context, expression, found);
    };
    slick.find = function (expression, context) {
      return finder(context).search(context, expression)[0] || null;
    };
    slick.getAttribute = function (node, name) {
      return finder(node).getAttribute(node, name);
    };
    slick.hasAttribute = function (node, name) {
      return finder(node).hasAttribute(node, name);
    };
    slick.contains = function (context, node) {
      return finder(context).contains(context, node);
    };
    slick.matches = function (node, expression) {
      return finder(node).matches(node, expression);
    };
    slick.sort = function (nodes) {
      if (nodes && nodes.length > 1)
        finder(nodes[0]).sort(nodes);
      return nodes;
    };
    slick.parse = parse;
    module.exports = slick;
  },
  './node_modules/spotify-cosmos-api/node_modules/spotify-deferred/node_modules/spotify-postrouter/src/postrouter.js': function (require, module, exports, global) {
    'use strict';
    var POST_ROUTER_ID = 'post-router-msg-' + new Date().getTime();
    var hasStructuredClone = false;
    var setImmediate = setImmediate ? setImmediate : setTimeout;
    var CURRENT_WINDOW_ORIGIN = undefined;
    if (typeof window !== 'undefined') {
      CURRENT_WINDOW_ORIGIN = window.location.origin || window.location.protocol + '//' + window.location.hostname;
      if (!window.__forceNoStructuredClone) {
        try {
          window.postMessage({
            toString: function () {
              return 'clone-test';
            }
          }, CURRENT_WINDOW_ORIGIN);
          hasStructuredClone = false;
        } catch (e) {
          hasStructuredClone = true;
        }
      }
    }
    var handlers = {};
    var isListening = false;
    function handleImmediateMessage(data) {
      var handler = handlers[data.type];
      if (!handler)
        return;
      handler.fn.call(this, data);
    }
    function handlePostMessage(event) {
      var data = event.data;
      if (!hasStructuredClone) {
        if (typeof data == 'string') {
          try {
            data = JSON.parse(data);
          } catch (e) {
            return;
          }
        } else {
          return;
        }
      }
      if (event.origin == CURRENT_WINDOW_ORIGIN) {
        data = data[POST_ROUTER_ID];
        if (!data) {
          return;
        }
      }
      var handler = handlers[data.type];
      if (!handler || handler.origin != '*' && event.origin !== handler.origin) {
        return;
      }
      handler.fn.call(this, data, event);
    }
    var startListening = function () {
      if (window.attachEvent && !window.addEventListener) {
        window.attachEvent('onmessage', handlePostMessage);
      } else if (window.attachEvent && window.addEventListener) {
        window.addEventListener('message', handlePostMessage, false);
      } else if (window.addEventListener) {
        window.addEventListener('message', handlePostMessage, false);
      }
    };
    var addMessageHandler = function (type, fn, origin) {
      if (typeof window !== 'undefined' && !isListening) {
        startListening();
        isListening = true;
      }
      if (!origin) {
        origin = CURRENT_WINDOW_ORIGIN;
      }
      if (handlers[type]) {
        throw new Error('Rehandling of message "' + type + '" not allowed.');
      }
      handlers[type] = {
        fn: fn,
        origin: origin
      };
      return;
    };
    var removeMessageHandler = function (type, fn) {
      if (handlers[type] && (!fn || handlers[type].fn === fn)) {
        handlers[type] = null;
        return true;
      }
      return false;
    };
    var sendMessage = function (type, data, destWindow, origin) {
      data = data || {};
      data.type = type;
      if (typeof window === 'undefined') {
        return setImmediate(handleImmediateMessage.bind(null, data));
      }
      destWindow = destWindow || window;
      if (!origin) {
        origin = CURRENT_WINDOW_ORIGIN;
      }
      destWindow.postMessage(JSON.stringify(data), origin);
    };
    var sendLocalMessage = function (type, data) {
      data = data || {};
      data.type = type;
      if (typeof window === 'undefined') {
        return setImmediate(handleImmediateMessage.bind(null, data));
      }
      var wrapper = {};
      wrapper[POST_ROUTER_ID] = data;
      window.postMessage(hasStructuredClone ? wrapper : JSON.stringify(wrapper), CURRENT_WINDOW_ORIGIN);
    };
    module.exports = {
      addMessageHandler: addMessageHandler,
      removeMessageHandler: removeMessageHandler,
      sendMessage: sendMessage,
      sendLocalMessage: sendLocalMessage,
      WINDOW_ORIGIN: CURRENT_WINDOW_ORIGIN
    };
  },
  './node_modules/spotify-inheritance/index.js': function (require, module, exports, global) {
    'use strict';
    module.exports = {
      inherit: require('./node_modules/spotify-inheritance/inherit.js'),
      extend: require('./node_modules/spotify-inheritance/extend.js')
    };
  },
  './node_modules/spotify-live-models/node_modules/spotify-player/lib/v2/player.js': function (require, module, exports, global) {
    var cosmos = require('./node_modules/spotify-cosmos-api/index.js');
    var PLAYER_URI = 'sp://player/v2/';
    var DEFAULT_PLAYER_ID = 'main';
    function Player(resolver, viewUri, featureIdentifier, featureVersion, opt_options) {
      if (!(this instanceof Player)) {
        return new Player(resolver, viewUri, featureIdentifier, featureVersion);
      }
      if (!resolver || !viewUri || !featureIdentifier || !featureVersion) {
        throw new TypeError('Missing parameters for Player');
      }
      this._getTime = opt_options && opt_options.getTime || function () {
        return new Date().getTime();
      };
      this._id = opt_options && opt_options.playerId || DEFAULT_PLAYER_ID;
      this._resolver = resolver;
      this._viewUri = viewUri;
      this._featureId = featureIdentifier;
      this._featureVersion = featureVersion;
    }
    Player.Actions = {
      PLAY: 'play',
      STOP: 'stop',
      UPDATE: 'update',
      PAUSE: 'pause',
      RESUME: 'resume',
      SKIP_NEXT: 'skip_next',
      SKIP_PREV: 'skip_prev',
      SHUFFLE: 'set_shuffling_context',
      REPEAT_CONTEXT: 'set_repeating_context',
      REPEAT_TRACK: 'set_repeating_track',
      SEEK_TO: 'seek_to'
    };
    Player.prototype.play = function (context, opt_options, opt_callback) {
      if (!context)
        throw new TypeError('Invalid `context` object');
      if (arguments.length == 2 && arguments[1] instanceof Function) {
        opt_callback = arguments[1];
        opt_options = null;
      }
      var params = {};
      params.context = context;
      params.play_origin = this._makePlayOrigin();
      params.options = opt_options;
      return this._sendRequestWithParams(Player.Actions.PLAY, params, opt_callback);
    };
    Player.prototype.stop = function (opt_callback) {
      return this._sendRequestWithAction(Player.Actions.STOP, opt_callback);
    };
    Player.prototype.update = function (context, opt_callback) {
      if (!context)
        throw new TypeError('Invalid `context` object');
      var params = { context: context };
      return this._sendRequestWithParams(Player.Actions.UPDATE, params, opt_callback);
    };
    Player.prototype.resume = function (opt_callback) {
      return this._sendRequestWithAction(Player.Actions.RESUME, opt_callback);
    };
    Player.prototype.pause = function (opt_callback) {
      return this._sendRequestWithAction(Player.Actions.PAUSE, opt_callback);
    };
    Player.prototype.skipToPrevTrack = function (opt_callback) {
      return this._sendRequestWithAction(Player.Actions.SKIP_PREV, opt_callback);
    };
    Player.prototype.skipToNextTrack = function (opt_callback) {
      return this._sendRequestWithAction(Player.Actions.SKIP_NEXT, opt_callback);
    };
    Player.prototype.skipToSpecificPrevTrack = function (track, opt_callback) {
      return this._sendRequestWithParams(Player.Actions.SKIP_PREV, { track: track }, opt_callback);
    };
    Player.prototype.skipToSpecificNextTrack = function (track, opt_callback) {
      return this._sendRequestWithParams(Player.Actions.SKIP_NEXT, { track: track }, opt_callback);
    };
    Player.prototype.skipToPrev = Player.prototype.skipToPrevTrack;
    Player.prototype.skipToNext = Player.prototype.skipToNextTrack;
    Player.prototype.setShufflingContext = function (isShuffling, opt_callback) {
      return this._sendRequestWithParam(Player.Actions.SHUFFLE, isShuffling, opt_callback);
    };
    Player.prototype.setRepeatingContext = function (isRepeating, opt_callback) {
      return this._sendRequestWithParam(Player.Actions.REPEAT_CONTEXT, isRepeating, opt_callback);
    };
    Player.prototype.setRepeatingTrack = function (isRepeating, opt_callback) {
      return this._sendRequestWithParam(Player.Actions.REPEAT_TRACK, isRepeating, opt_callback);
    };
    Player.prototype.seekTo = function (positionInMs, opt_callback) {
      return this._sendRequestWithParam(Player.Actions.SEEK_TO, positionInMs, opt_callback);
    };
    Player.prototype.getState = function (callback, opt_params) {
      var request = new cosmos.Request(cosmos.Action.GET, this.getPlayerEndpointUriWithParams(opt_params));
      return this._resolver.resolve(request, callback);
    };
    Player.prototype.subscribe = function (callback, opt_params) {
      var request = new cosmos.Request(cosmos.Action.SUB, this.getPlayerEndpointUriWithParams(opt_params));
      return this._resolver.resolve(request, callback);
    };
    Player.prototype.onError = function (callback) {
      var request = new cosmos.Request(cosmos.Action.SUB, this.getPlayerEndpointUri() + '/error');
      return this._resolver.resolve(request, callback);
    };
    Player.prototype._makePlayOrigin = function () {
      return {
        view_uri: this._viewUri,
        feature_identifier: this._featureId,
        feature_version: this._featureVersion
      };
    };
    Player.prototype.getPlayerEndpointUri = function () {
      return PLAYER_URI + this._id;
    };
    Player.prototype.getPlayerEndpointUriWithParams = function (params) {
      params = params || {};
      var paramsArray = Object.keys(params).reduce(function (arr, key) {
          arr.push(key + '=' + encodeURIComponent(params[key]));
          return arr;
        }, []);
      if (paramsArray.length > 0) {
        return this.getPlayerEndpointUri() + '?' + paramsArray.join('&');
      } else {
        return this.getPlayerEndpointUri();
      }
    };
    Player.prototype._sendRequestWithAction = function (action, opt_callback) {
      return this._sendRequestWithParams(action, null, opt_callback);
    };
    Player.prototype._sendRequestWithParam = function (action, paramValue, opt_callback) {
      var params = { value: paramValue };
      return this._sendRequestWithParams(action, params, opt_callback);
    };
    Player.prototype._sendRequestWithParams = function (action, params, opt_callback) {
      var requestUri = this.getPlayerEndpointUri() + '/' + action;
      var body = params || {};
      body.logging_params = { command_initiated_time: this._getTime() };
      var request = new cosmos.Request(cosmos.Action.POST, requestUri, null, body);
      return this._resolver.resolve(request, opt_callback);
    };
    exports.Player = Player;
  },
  './node_modules/spotify-live-models/node_modules/spotify-player/lib/v2/types.js': function (require, module, exports, global) {
    exports.Track;
    exports.Restrictions;
    exports.Suppressions;
    exports.IndexPath;
    exports.PlayerOptions;
    exports.PlayOptions;
    exports.ContextPage;
    exports.Context;
  },
  './node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/numeral.js': function (require, module, exports, global) {
    (function () {
      var numeral, VERSION = '1.5.3', languages = {}, currentLanguage = 'en', zeroFormat = null, defaultFormat = '0,0', hasModule = typeof module !== 'undefined' && module.exports;
      function Numeral(number) {
        this._value = number;
      }
      function toFixed(value, precision, roundingFunction, optionals) {
        var power = Math.pow(10, precision), optionalsRegExp, output;
        output = (roundingFunction(value * power) / power).toFixed(precision);
        if (optionals) {
          optionalsRegExp = new RegExp('0{1,' + optionals + '}$');
          output = output.replace(optionalsRegExp, '');
        }
        return output;
      }
      function formatNumeral(n, format, roundingFunction) {
        var output;
        if (format.indexOf('$') > -1) {
          output = formatCurrency(n, format, roundingFunction);
        } else if (format.indexOf('%') > -1) {
          output = formatPercentage(n, format, roundingFunction);
        } else if (format.indexOf(':') > -1) {
          output = formatTime(n, format);
        } else {
          output = formatNumber(n._value, format, roundingFunction);
        }
        return output;
      }
      function unformatNumeral(n, string) {
        var stringOriginal = string, thousandRegExp, millionRegExp, billionRegExp, trillionRegExp, suffixes = [
            'KB',
            'MB',
            'GB',
            'TB',
            'PB',
            'EB',
            'ZB',
            'YB'
          ], bytesMultiplier = false, power;
        if (string.indexOf(':') > -1) {
          n._value = unformatTime(string);
        } else {
          if (string === zeroFormat) {
            n._value = 0;
          } else {
            if (languages[currentLanguage].delimiters.decimal !== '.') {
              string = string.replace(/\./g, '').replace(languages[currentLanguage].delimiters.decimal, '.');
            }
            thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
            millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
            billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
            trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
            for (power = 0; power <= suffixes.length; power++) {
              bytesMultiplier = string.indexOf(suffixes[power]) > -1 ? Math.pow(1024, power + 1) : false;
              if (bytesMultiplier) {
                break;
              }
            }
            n._value = (bytesMultiplier ? bytesMultiplier : 1) * (stringOriginal.match(thousandRegExp) ? Math.pow(10, 3) : 1) * (stringOriginal.match(millionRegExp) ? Math.pow(10, 6) : 1) * (stringOriginal.match(billionRegExp) ? Math.pow(10, 9) : 1) * (stringOriginal.match(trillionRegExp) ? Math.pow(10, 12) : 1) * (string.indexOf('%') > -1 ? 0.01 : 1) * ((string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1) * Number(string.replace(/[^0-9\.]+/g, ''));
            n._value = bytesMultiplier ? Math.ceil(n._value) : n._value;
          }
        }
        return n._value;
      }
      function formatCurrency(n, format, roundingFunction) {
        var symbolIndex = format.indexOf('$'), openParenIndex = format.indexOf('('), minusSignIndex = format.indexOf('-'), space = '', spliceIndex, output;
        if (format.indexOf(' $') > -1) {
          space = ' ';
          format = format.replace(' $', '');
        } else if (format.indexOf('$ ') > -1) {
          space = ' ';
          format = format.replace('$ ', '');
        } else {
          format = format.replace('$', '');
        }
        output = formatNumber(n._value, format, roundingFunction);
        if (symbolIndex <= 1) {
          if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {
            output = output.split('');
            spliceIndex = 1;
            if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex) {
              spliceIndex = 0;
            }
            output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);
            output = output.join('');
          } else {
            output = languages[currentLanguage].currency.symbol + space + output;
          }
        } else {
          if (output.indexOf(')') > -1) {
            output = output.split('');
            output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);
            output = output.join('');
          } else {
            output = output + space + languages[currentLanguage].currency.symbol;
          }
        }
        return output;
      }
      function formatPercentage(n, format, roundingFunction) {
        var space = '', output, value = n._value * 100;
        if (format.indexOf(' %') > -1) {
          space = ' ';
          format = format.replace(' %', '');
        } else {
          format = format.replace('%', '');
        }
        output = formatNumber(value, format, roundingFunction);
        if (output.indexOf(')') > -1) {
          output = output.split('');
          output.splice(-1, 0, space + '%');
          output = output.join('');
        } else {
          output = output + space + '%';
        }
        return output;
      }
      function formatTime(n) {
        var hours = Math.floor(n._value / 60 / 60), minutes = Math.floor((n._value - hours * 60 * 60) / 60), seconds = Math.round(n._value - hours * 60 * 60 - minutes * 60);
        return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);
      }
      function unformatTime(string) {
        var timeArray = string.split(':'), seconds = 0;
        if (timeArray.length === 3) {
          seconds = seconds + Number(timeArray[0]) * 60 * 60;
          seconds = seconds + Number(timeArray[1]) * 60;
          seconds = seconds + Number(timeArray[2]);
        } else if (timeArray.length === 2) {
          seconds = seconds + Number(timeArray[0]) * 60;
          seconds = seconds + Number(timeArray[1]);
        }
        return Number(seconds);
      }
      function formatNumber(value, format, roundingFunction) {
        var negP = false, signed = false, optDec = false, abbr = '', abbrK = false, abbrM = false, abbrB = false, abbrT = false, abbrForce = false, bytes = '', ord = '', abs = Math.abs(value), suffixes = [
            'B',
            'KB',
            'MB',
            'GB',
            'TB',
            'PB',
            'EB',
            'ZB',
            'YB'
          ], min, max, power, w, precision, thousands, d = '', neg = false;
        if (value === 0 && zeroFormat !== null) {
          return zeroFormat;
        } else {
          if (format.indexOf('(') > -1) {
            negP = true;
            format = format.slice(1, -1);
          } else if (format.indexOf('+') > -1) {
            signed = true;
            format = format.replace(/\+/g, '');
          }
          if (format.indexOf('a') > -1) {
            abbrK = format.indexOf('aK') >= 0;
            abbrM = format.indexOf('aM') >= 0;
            abbrB = format.indexOf('aB') >= 0;
            abbrT = format.indexOf('aT') >= 0;
            abbrForce = abbrK || abbrM || abbrB || abbrT;
            if (format.indexOf(' a') > -1) {
              abbr = ' ';
              format = format.replace(' a', '');
            } else {
              format = format.replace('a', '');
            }
            if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {
              abbr = abbr + languages[currentLanguage].abbreviations.trillion;
              value = value / Math.pow(10, 12);
            } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {
              abbr = abbr + languages[currentLanguage].abbreviations.billion;
              value = value / Math.pow(10, 9);
            } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {
              abbr = abbr + languages[currentLanguage].abbreviations.million;
              value = value / Math.pow(10, 6);
            } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {
              abbr = abbr + languages[currentLanguage].abbreviations.thousand;
              value = value / Math.pow(10, 3);
            }
          }
          if (format.indexOf('b') > -1) {
            if (format.indexOf(' b') > -1) {
              bytes = ' ';
              format = format.replace(' b', '');
            } else {
              format = format.replace('b', '');
            }
            for (power = 0; power <= suffixes.length; power++) {
              min = Math.pow(1024, power);
              max = Math.pow(1024, power + 1);
              if (value >= min && value < max) {
                bytes = bytes + suffixes[power];
                if (min > 0) {
                  value = value / min;
                }
                break;
              }
            }
          }
          if (format.indexOf('o') > -1) {
            if (format.indexOf(' o') > -1) {
              ord = ' ';
              format = format.replace(' o', '');
            } else {
              format = format.replace('o', '');
            }
            ord = ord + languages[currentLanguage].ordinal(value);
          }
          if (format.indexOf('[.]') > -1) {
            optDec = true;
            format = format.replace('[.]', '.');
          }
          w = value.toString().split('.')[0];
          precision = format.split('.')[1];
          thousands = format.indexOf(',');
          if (precision) {
            if (precision.indexOf('[') > -1) {
              precision = precision.replace(']', '');
              precision = precision.split('[');
              d = toFixed(value, precision[0].length + precision[1].length, roundingFunction, precision[1].length);
            } else {
              d = toFixed(value, precision.length, roundingFunction);
            }
            w = d.split('.')[0];
            if (d.split('.')[1].length) {
              d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];
            } else {
              d = '';
            }
            if (optDec && Number(d.slice(1)) === 0) {
              d = '';
            }
          } else {
            w = toFixed(value, null, roundingFunction);
          }
          if (w.indexOf('-') > -1) {
            w = w.slice(1);
            neg = true;
          }
          if (thousands > -1) {
            w = w.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);
          }
          if (format.indexOf('.') === 0) {
            w = '';
          }
          return (negP && neg ? '(' : '') + (!negP && neg ? '-' : '') + (!neg && signed ? '+' : '') + w + d + (ord ? ord : '') + (abbr ? abbr : '') + (bytes ? bytes : '') + (negP && neg ? ')' : '');
        }
      }
      numeral = function (input) {
        if (numeral.isNumeral(input)) {
          input = input.value();
        } else if (input === 0 || typeof input === 'undefined') {
          input = 0;
        } else if (!Number(input)) {
          input = numeral.fn.unformat(input);
        }
        return new Numeral(Number(input));
      };
      numeral.version = VERSION;
      numeral.isNumeral = function (obj) {
        return obj instanceof Numeral;
      };
      numeral.language = function (key, values) {
        if (!key) {
          return currentLanguage;
        }
        if (key && !values) {
          if (!languages[key]) {
            throw new Error('Unknown language : ' + key);
          }
          currentLanguage = key;
        }
        if (values || !languages[key]) {
          loadLanguage(key, values);
        }
        return numeral;
      };
      numeral.languageData = function (key) {
        if (!key) {
          return languages[currentLanguage];
        }
        if (!languages[key]) {
          throw new Error('Unknown language : ' + key);
        }
        return languages[key];
      };
      numeral.language('en', {
        delimiters: {
          thousands: ',',
          decimal: '.'
        },
        abbreviations: {
          thousand: 'k',
          million: 'm',
          billion: 'b',
          trillion: 't'
        },
        ordinal: function (number) {
          var b = number % 10;
          return ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
        },
        currency: { symbol: '$' }
      });
      numeral.zeroFormat = function (format) {
        zeroFormat = typeof format === 'string' ? format : null;
      };
      numeral.defaultFormat = function (format) {
        defaultFormat = typeof format === 'string' ? format : '0.0';
      };
      function loadLanguage(key, values) {
        languages[key] = values;
      }
      if ('function' !== typeof Array.prototype.reduce) {
        Array.prototype.reduce = function (callback, opt_initialValue) {
          'use strict';
          if (null === this || 'undefined' === typeof this) {
            throw new TypeError('Array.prototype.reduce called on null or undefined');
          }
          if ('function' !== typeof callback) {
            throw new TypeError(callback + ' is not a function');
          }
          var index, value, length = this.length >>> 0, isValueSet = false;
          if (1 < arguments.length) {
            value = opt_initialValue;
            isValueSet = true;
          }
          for (index = 0; length > index; ++index) {
            if (this.hasOwnProperty(index)) {
              if (isValueSet) {
                value = callback(value, this[index], index, this);
              } else {
                value = this[index];
                isValueSet = true;
              }
            }
          }
          if (!isValueSet) {
            throw new TypeError('Reduce of empty array with no initial value');
          }
          return value;
        };
      }
      function multiplier(x) {
        var parts = x.toString().split('.');
        if (parts.length < 2) {
          return 1;
        }
        return Math.pow(10, parts[1].length);
      }
      function correctionFactor() {
        var args = Array.prototype.slice.call(arguments);
        return args.reduce(function (prev, next) {
          var mp = multiplier(prev), mn = multiplier(next);
          return mp > mn ? mp : mn;
        }, -Infinity);
      }
      numeral.fn = Numeral.prototype = {
        clone: function () {
          return numeral(this);
        },
        format: function (inputString, roundingFunction) {
          return formatNumeral(this, inputString ? inputString : defaultFormat, roundingFunction !== undefined ? roundingFunction : Math.round);
        },
        unformat: function (inputString) {
          if (Object.prototype.toString.call(inputString) === '[object Number]') {
            return inputString;
          }
          return unformatNumeral(this, inputString ? inputString : defaultFormat);
        },
        value: function () {
          return this._value;
        },
        valueOf: function () {
          return this._value;
        },
        set: function (value) {
          this._value = Number(value);
          return this;
        },
        add: function (value) {
          var corrFactor = correctionFactor.call(null, this._value, value);
          function cback(accum, curr, currI, O) {
            return accum + corrFactor * curr;
          }
          this._value = [
            this._value,
            value
          ].reduce(cback, 0) / corrFactor;
          return this;
        },
        subtract: function (value) {
          var corrFactor = correctionFactor.call(null, this._value, value);
          function cback(accum, curr, currI, O) {
            return accum - corrFactor * curr;
          }
          this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;
          return this;
        },
        multiply: function (value) {
          function cback(accum, curr, currI, O) {
            var corrFactor = correctionFactor(accum, curr);
            return accum * corrFactor * (curr * corrFactor) / (corrFactor * corrFactor);
          }
          this._value = [
            this._value,
            value
          ].reduce(cback, 1);
          return this;
        },
        divide: function (value) {
          function cback(accum, curr, currI, O) {
            var corrFactor = correctionFactor(accum, curr);
            return accum * corrFactor / (curr * corrFactor);
          }
          this._value = [
            this._value,
            value
          ].reduce(cback);
          return this;
        },
        difference: function (value) {
          return Math.abs(numeral(this._value).subtract(value).value());
        }
      };
      if (hasModule) {
        module.exports = numeral;
      }
      if (typeof ender === 'undefined') {
        this['numeral'] = numeral;
      }
      if (typeof define === 'function' && define.amd) {
        define([], function () {
          return numeral;
        });
      }
    }.call(this));
  },
  './node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/de.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: '.',
            decimal: ','
          },
          abbreviations: {
            thousand: 'k',
            million: 'm',
            billion: 'b',
            trillion: 't'
          },
          ordinal: function (number) {
            return '.';
          },
          currency: { symbol: '\u20AC' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('de', language);
      }
    }());
  },
  './node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/es-ES.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: '.',
            decimal: ','
          },
          abbreviations: {
            thousand: 'k',
            million: 'mm',
            billion: 'b',
            trillion: 't'
          },
          ordinal: function (number) {
            var b = number % 10;
            return b === 1 || b === 3 ? 'er' : b === 2 ? 'do' : b === 7 || b === 0 ? 'mo' : b === 8 ? 'vo' : b === 9 ? 'no' : 'to';
          },
          currency: { symbol: '\u20AC' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('es', language);
      }
    }());
  },
  './node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/fi.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: ' ',
            decimal: ','
          },
          abbreviations: {
            thousand: 'k',
            million: 'M',
            billion: 'G',
            trillion: 'T'
          },
          ordinal: function (number) {
            return '.';
          },
          currency: { symbol: '\u20AC' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('fi', language);
      }
    }());
  },
  './node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/fr.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: ' ',
            decimal: ','
          },
          abbreviations: {
            thousand: 'k',
            million: 'm',
            billion: 'b',
            trillion: 't'
          },
          ordinal: function (number) {
            return number === 1 ? 'er' : 'e';
          },
          currency: { symbol: '\u20AC' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('fr', language);
      }
    }());
  },
  './node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/fr-CA.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: ' ',
            decimal: ','
          },
          abbreviations: {
            thousand: 'k',
            million: 'M',
            billion: 'G',
            trillion: 'T'
          },
          ordinal: function (number) {
            return number === 1 ? 'er' : 'e';
          },
          currency: { symbol: '$' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('fr-CA', language);
      }
    }());
  },
  './node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/hu.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: ' ',
            decimal: ','
          },
          abbreviations: {
            thousand: 'E',
            million: 'M',
            billion: 'Mrd',
            trillion: 'T'
          },
          ordinal: function (number) {
            return '.';
          },
          currency: { symbol: ' Ft' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('hu', language);
      }
    }());
  },
  './node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/it.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: '.',
            decimal: ','
          },
          abbreviations: {
            thousand: 'mila',
            million: 'mil',
            billion: 'b',
            trillion: 't'
          },
          ordinal: function (number) {
            return '\xBA';
          },
          currency: { symbol: '\u20AC' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('it', language);
      }
    }());
  },
  './node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/ja.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: ',',
            decimal: '.'
          },
          abbreviations: {
            thousand: '\u5343',
            million: '\u767E\u4E07',
            billion: '\u5341\u5104',
            trillion: '\u5146'
          },
          ordinal: function (number) {
            return '.';
          },
          currency: { symbol: '\xA5' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('ja', language);
      }
    }());
  },
  './node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/nl-nl.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: '.',
            decimal: ','
          },
          abbreviations: {
            thousand: 'k',
            million: 'mln',
            billion: 'mrd',
            trillion: 'bln'
          },
          ordinal: function (number) {
            var remainder = number % 100;
            return number !== 0 && remainder <= 1 || remainder === 8 || remainder >= 20 ? 'ste' : 'de';
          },
          currency: { symbol: '\u20AC ' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('nl-nl', language);
      }
    }());
  },
  './node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/pl.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: ' ',
            decimal: ','
          },
          abbreviations: {
            thousand: 'tys.',
            million: 'mln',
            billion: 'mld',
            trillion: 'bln'
          },
          ordinal: function (number) {
            return '.';
          },
          currency: { symbol: 'PLN' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('pl', language);
      }
    }());
  },
  './node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/pt-br.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: '.',
            decimal: ','
          },
          abbreviations: {
            thousand: 'mil',
            million: 'milh\xF5es',
            billion: 'b',
            trillion: 't'
          },
          ordinal: function (number) {
            return '\xBA';
          },
          currency: { symbol: 'R$' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('pt-br', language);
      }
    }());
  },
  './node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/ru.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: ' ',
            decimal: ','
          },
          abbreviations: {
            thousand: '\u0442\u044B\u0441.',
            million: '\u043C\u043B\u043D',
            billion: 'b',
            trillion: 't'
          },
          ordinal: function () {
            return '.';
          },
          currency: { symbol: '\u0440\u0443\u0431.' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('ru', language);
      }
    }());
  },
  './node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/th.js': function (require, module, exports, global) {
    (function () {
      var language = {
          delimiters: {
            thousands: ',',
            decimal: '.'
          },
          abbreviations: {
            thousand: '\u0E1E\u0E31\u0E19',
            million: '\u0E25\u0E49\u0E32\u0E19',
            billion: '\u0E1E\u0E31\u0E19\u0E25\u0E49\u0E32\u0E19',
            trillion: '\u0E25\u0E49\u0E32\u0E19\u0E25\u0E49\u0E32\u0E19'
          },
          ordinal: function (number) {
            return '.';
          },
          currency: { symbol: '\u0E3F' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('th', language);
      }
    }());
  },
  './node_modules/spotify-handlebars/node_modules/spotify-numeral/node_modules/spotify-numeraljs/languages/tr.js': function (require, module, exports, global) {
    (function () {
      var suffixes = {
          1: '\'inci',
          5: '\'inci',
          8: '\'inci',
          70: '\'inci',
          80: '\'inci',
          2: '\'nci',
          7: '\'nci',
          20: '\'nci',
          50: '\'nci',
          3: '\'\xFCnc\xFC',
          4: '\'\xFCnc\xFC',
          100: '\'\xFCnc\xFC',
          6: '\'nc\u0131',
          9: '\'uncu',
          10: '\'uncu',
          30: '\'uncu',
          60: '\'\u0131nc\u0131',
          90: '\'\u0131nc\u0131'
        }, language = {
          delimiters: {
            thousands: '.',
            decimal: ','
          },
          abbreviations: {
            thousand: 'bin',
            million: 'milyon',
            billion: 'milyar',
            trillion: 'trilyon'
          },
          ordinal: function (number) {
            if (number === 0) {
              return '\'\u0131nc\u0131';
            }
            var a = number % 10, b = number % 100 - a, c = number >= 100 ? 100 : null;
            return suffixes[a] || suffixes[b] || suffixes[c];
          },
          currency: { symbol: '\u20BA' }
        };
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = language;
      }
      if (typeof window !== 'undefined' && this.numeral && this.numeral.language) {
        this.numeral.language('tr', language);
      }
    }());
  },
  './node_modules/spotify-inheritance/inherit.js': function (require, module, exports, global) {
    'use strict';
    var inherit = function (Sub, Super) {
      var superProto = Super.prototype;
      function Superclass() {
      }
      Superclass.prototype = Sub._super = superProto;
      Superclass.prototype.constructor = Super;
      Sub.prototype = new Superclass();
    };
    module.exports = inherit;
  },
  './node_modules/spotify-inheritance/extend.js': function (require, module, exports, global) {
    'use strict';
    var extend = function (obj, args) {
      var source;
      for (var i = 1; i < arguments.length; i++) {
        source = arguments[i];
        if (source) {
          for (var prop in source) {
            if (source.hasOwnProperty(prop)) {
              obj[prop] = source[prop];
            }
          }
        }
      }
      return obj;
    };
    module.exports = extend;
  }
}));
